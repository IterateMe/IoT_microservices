
c:/Users/viann/Desktop/UdeS/S6/APP_5/IoT_microservices/Argon_project/target/3.3.0/argon/Argon_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007ac4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbae0  000bbae0  0000bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000bbb04  000bbb04  0000bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000bbb0c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e604  000bbb10  0001e604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000180  2003e670  2003e670  0002e670  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000bbb7c  000bbb7c  0002bb7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bbba4  000bbba4  0002bba4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016bfb1  00000000  00000000  0002bba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00014a4c  00000000  00000000  00197b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004227b  00000000  00000000  001ac5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002da8  00000000  00000000  001ee820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c228  00000000  00000000  001f15c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038e83  00000000  00000000  001fd7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004450b  00000000  00000000  00236673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00144f5e  00000000  00000000  0027ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008830  00000000  00000000  003bfadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f006 fef9 	bl	bae24 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f006 ff1b 	bl	bae74 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e604 	.word	0x2003e604
   b4048:	000bbb10 	.word	0x000bbb10
   b404c:	2003e670 	.word	0x2003e670
   b4050:	2003e670 	.word	0x2003e670
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f005 fdbd 	bl	b9bdc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bbaac 	.word	0x000bbaac
   b407c:	000bbae0 	.word	0x000bbae0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8ac 	b.w	b41dc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8d7 	bl	b4238 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f005 bd5d 	b.w	b9b4c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 bff7 	b.w	b7084 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 bff5 	b.w	b7084 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 bffb 	b.w	b7094 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>:
protected:
    BleAddress address;
    int16_t rssi;
    uint8_t rssi_count;
    virtual void populateData(const BleScanResult *scanResult) {
        rssi += RSSI(scanResult);
   b40ae:	f991 3020 	ldrsb.w	r3, [r1, #32]
   b40b2:	8a02      	ldrh	r2, [r0, #16]
   b40b4:	4413      	add	r3, r2
        rssi_count++;
   b40b6:	7c82      	ldrb	r2, [r0, #18]
   b40b8:	3201      	adds	r2, #1
   b40ba:	b2d2      	uxtb	r2, r2
        rssi += RSSI(scanResult);
   b40bc:	b21b      	sxth	r3, r3
        if (rssi_count > 5) {
   b40be:	2a05      	cmp	r2, #5
        rssi += RSSI(scanResult);
   b40c0:	8203      	strh	r3, [r0, #16]
            rssi = rssi/rssi_count;
   b40c2:	bf82      	ittt	hi
   b40c4:	fb93 f3f2 	sdivhi	r3, r3, r2
   b40c8:	8203      	strhhi	r3, [r0, #16]
            rssi_count = 1;
   b40ca:	2301      	movhi	r3, #1
        rssi_count++;
   b40cc:	7482      	strb	r2, [r0, #18]
            rssi_count = 1;
   b40ce:	bf88      	it	hi
   b40d0:	7483      	strbhi	r3, [r0, #18]
        }
    };
   b40d2:	4770      	bx	lr

000b40d4 <_ZNK6Beacon6toJsonEPN5spark10JSONWriterE>:
    virtual void toJson(JSONWriter *writer) const {
   b40d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b40d6:	460c      	mov	r4, r1
        writer->name(address.toString()).beginObject();
   b40d8:	2200      	movs	r2, #0
   b40da:	1dc1      	adds	r1, r0, #7
   b40dc:	4668      	mov	r0, sp
   b40de:	f003 fb5b 	bl	b7798 <_ZNK8particle10BleAddress8toStringEb>
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
}

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
   b40e2:	9a02      	ldr	r2, [sp, #8]
   b40e4:	9900      	ldr	r1, [sp, #0]
   b40e6:	4620      	mov	r0, r4
   b40e8:	f006 f914 	bl	ba314 <_ZN5spark10JSONWriter4nameEPKcj>
   b40ec:	f006 f858 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
   b40f0:	4668      	mov	r0, sp
   b40f2:	f003 f85f 	bl	b71b4 <_ZN6StringD1Ev>
        writer->endObject();
   b40f6:	4620      	mov	r0, r4
    };
   b40f8:	b004      	add	sp, #16
   b40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        writer->endObject();
   b40fe:	f006 b839 	b.w	ba174 <_ZN5spark10JSONWriter9endObjectEv>

000b4102 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4102:	b40e      	push	{r1, r2, r3}
   b4104:	b503      	push	{r0, r1, lr}
   b4106:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4108:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b410a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b410e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4110:	f005 fcb1 	bl	b9a76 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4114:	b002      	add	sp, #8
   b4116:	f85d eb04 	ldr.w	lr, [sp], #4
   b411a:	b003      	add	sp, #12
   b411c:	4770      	bx	lr
	...

000b4120 <_ZN13Beaconscanner8instanceEv>:
  /**
   * @brief Singleton class instance access for Beaconscanner.
   *
   * @return Beaconscanner&
   */
  static Beaconscanner& instance() {
   b4120:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b4122:	4d10      	ldr	r5, [pc, #64]	; (b4164 <_ZN13Beaconscanner8instanceEv+0x44>)
   b4124:	682c      	ldr	r4, [r5, #0]
   b4126:	b9d4      	cbnz	r4, b415e <_ZN13Beaconscanner8instanceEv+0x3e>
      _instance = new Beaconscanner();
   b4128:	2058      	movs	r0, #88	; 0x58
   b412a:	f7ff ffb2 	bl	b4092 <_Znwj>
   b412e:	b1a8      	cbz	r0, b415c <_ZN13Beaconscanner8instanceEv+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b4130:	e9c0 4407 	strd	r4, r4, [r0, #28]
   b4134:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
   b4138:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
   b413c:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
   b4140:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
   b4144:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
      _clear_missed(1),
      _scan_period(10),
      _last_publish(0),
      _thread(nullptr),
      _callback(nullptr),
      _customCallback(nullptr) {};
   b4148:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
   b414c:	f640 2301 	movw	r3, #2561	; 0xa01
   b4150:	7144      	strb	r4, [r0, #5]
   b4152:	80c4      	strh	r4, [r0, #6]
   b4154:	8183      	strh	r3, [r0, #12]
   b4156:	6104      	str	r4, [r0, #16]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b4158:	7504      	strb	r4, [r0, #20]
   b415a:	6544      	str	r4, [r0, #84]	; 0x54
      _instance = new Beaconscanner();
   b415c:	6028      	str	r0, [r5, #0]
  }
   b415e:	6828      	ldr	r0, [r5, #0]
   b4160:	bd38      	pop	{r3, r4, r5, pc}
   b4162:	bf00      	nop
   b4164:	2003e6c4 	.word	0x2003e6c4

000b4168 <_Z10setupBadgev>:
  for(it = players.begin(); it != players.end(); it++){
    const char* data = it->first;
    Serial.printf("DATA: %s \n", data);
  }
}

   b4168:	b508      	push	{r3, lr}
void setupBadge(){
   b416a:	f003 fedb 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b416e:	f003 ff23 	bl	b7fb8 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.on();
   b4172:	f7ff ffd5 	bl	b4120 <_ZN13Beaconscanner8instanceEv>
    if (seconds > 0) _scan_period = seconds;
   b4176:	2305      	movs	r3, #5
   b4178:	7343      	strb	r3, [r0, #13]
  Scanner.setScanPeriod(5);
   b417a:	f7ff ffd1 	bl	b4120 <_ZN13Beaconscanner8instanceEv>
    if (count > 0) _clear_missed = count;
   b417e:	2303      	movs	r3, #3
   b4180:	7303      	strb	r3, [r0, #12]
  Scanner.setMissedCount(3);
   b4182:	f7ff ffcd 	bl	b4120 <_ZN13Beaconscanner8instanceEv>
  Beaconscanner& setCallback(BeaconScanCallback callback) { _callback = callback; return *this; };
   b4186:	4b04      	ldr	r3, [pc, #16]	; (b4198 <_Z10setupBadgev+0x30>)
   b4188:	6503      	str	r3, [r0, #80]	; 0x50
  Scanner.setCallback(onCallBack);
   b418a:	f7ff ffc9 	bl	b4120 <_ZN13Beaconscanner8instanceEv>
  Scanner.startContinuous(SCAN_IBEACON);
   b418e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Scanner.setCallback(onCallBack);
   b4192:	2101      	movs	r1, #1
   b4194:	f001 be04 	b.w	b5da0 <_ZN13Beaconscanner15startContinuousEi>
   b4198:	000b449d 	.word	0x000b449d

000b419c <_Z12executeBadgev>:
    //uint8_t rssi = beacon.getRssi();
    players[addr] = true; 
    //Serial.printf("Addr: %s :: uuid: %s :: MAP LENGTH: %d \n", addr.c_str(), uuid, (int) players.size());
  }
}

   b419c:	b510      	push	{r4, lr}
void executeBadge(){
   b419e:	f005 fe29 	bl	b9df4 <_Z16_fetch_usbserialv>
   b41a2:	490d      	ldr	r1, [pc, #52]	; (b41d8 <_Z12executeBadgev+0x3c>)
   b41a4:	f005 fc3f 	bl	b9a26 <_ZN5Print7printlnEPKc>
  Serial.println("Loop");
  int timeoutMs = 1000;
   b41a8:	f7ff ffba 	bl	b4120 <_ZN13Beaconscanner8instanceEv>
   b41ac:	f001 fff0 	bl	b6190 <_ZN13Beaconscanner4loopEv>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b41b0:	2000      	movs	r0, #0
   b41b2:	f002 fd3f 	bl	b6c34 <hal_timer_millis>
   b41b6:	4604      	mov	r4, r0
   b41b8:	2000      	movs	r0, #0
   b41ba:	f002 fd3b 	bl	b6c34 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b41be:	1b00      	subs	r0, r0, r4
   b41c0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b41c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b41c8:	f171 0300 	sbcs.w	r3, r1, #0
   b41cc:	d202      	bcs.n	b41d4 <_Z12executeBadgev+0x38>
            spark_process();
   b41ce:	f002 ff49 	bl	b7064 <spark_process>
        while (_while() && !_condition()) {
   b41d2:	e7f1      	b.n	b41b8 <_Z12executeBadgev+0x1c>
  Scanner.loop();
  waitFor([](){return false;}, timeoutMs);
   b41d4:	bd10      	pop	{r4, pc}
   b41d6:	bf00      	nop
   b41d8:	000bb048 	.word	0x000bb048

000b41dc <setup>:
}



   b41dc:	b538      	push	{r3, r4, r5, lr}
void setup() {
   b41de:	f005 fe09 	bl	b9df4 <_Z16_fetch_usbserialv>
   b41e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41e6:	f005 fdf5 	bl	b9dd4 <_ZN9USBSerial5beginEl>
        return hal_timer_millis(nullptr);
   b41ea:	2000      	movs	r0, #0
   b41ec:	f002 fd22 	bl	b6c34 <hal_timer_millis>
        while (_while() && !_condition()) {
   b41f0:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b41f4:	4604      	mov	r4, r0
   b41f6:	2000      	movs	r0, #0
   b41f8:	f002 fd1c 	bl	b6c34 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b41fc:	1b00      	subs	r0, r0, r4
   b41fe:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4202:	42a8      	cmp	r0, r5
   b4204:	f171 0300 	sbcs.w	r3, r1, #0
   b4208:	d207      	bcs.n	b421a <setup+0x3e>
  Serial.begin(9600);
   b420a:	f005 fdf3 	bl	b9df4 <_Z16_fetch_usbserialv>
   b420e:	f005 fde5 	bl	b9ddc <_ZN9USBSerial11isConnectedEv>
   b4212:	b910      	cbnz	r0, b421a <setup+0x3e>
            spark_process();
   b4214:	f002 ff26 	bl	b7064 <spark_process>
        while (_while() && !_condition()) {
   b4218:	e7ed      	b.n	b41f6 <setup+0x1a>
   b421a:	f005 fdeb 	bl	b9df4 <_Z16_fetch_usbserialv>
   b421e:	f005 fddd 	bl	b9ddc <_ZN9USBSerial11isConnectedEv>
	waitFor(Serial.isConnected, 30000);
   b4222:	f7ff ffa1 	bl	b4168 <_Z10setupBadgev>
  setupBadge();
   b4226:	f005 fde5 	bl	b9df4 <_Z16_fetch_usbserialv>
  Serial.println("Start scanning");
   b422a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  setupBadge();
   b422e:	4901      	ldr	r1, [pc, #4]	; (b4234 <setup+0x58>)
   b4230:	f005 bbf9 	b.w	b9a26 <_ZN5Print7printlnEPKc>
   b4234:	000bb04d 	.word	0x000bb04d

000b4238 <loop>:
}

void loop() {
  
   b4238:	f7ff bfb0 	b.w	b419c <_Z12executeBadgev>

000b423c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b423c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b4240:	688d      	ldr	r5, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4242:	4604      	mov	r4, r0
   b4244:	460f      	mov	r7, r1
   b4246:	4690      	mov	r8, r2
      { return &this->_M_impl._M_header; }
   b4248:	1d0e      	adds	r6, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b424a:	2301      	movs	r3, #1
      while (__x != 0)
   b424c:	b175      	cbz	r5, b426c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x30>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   b424e:	f105 0110 	add.w	r1, r5, #16
   b4252:	4640      	mov	r0, r8
   b4254:	f003 f8a7 	bl	b73a6 <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4258:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   b425c:	2800      	cmp	r0, #0
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b425e:	462e      	mov	r6, r5
   b4260:	bf15      	itete	ne
   b4262:	2301      	movne	r3, #1
   b4264:	2300      	moveq	r3, #0
   b4266:	460d      	movne	r5, r1
   b4268:	4615      	moveq	r5, r2
   b426a:	e7ef      	b.n	b424c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x10>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b426c:	b1a3      	cbz	r3, b4298 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x5c>
	{
	  if (__j == begin())
   b426e:	68fb      	ldr	r3, [r7, #12]
   b4270:	42b3      	cmp	r3, r6
   b4272:	d104      	bne.n	b427e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x42>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4274:	6025      	str	r5, [r4, #0]
   b4276:	6066      	str	r6, [r4, #4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b4278:	4620      	mov	r0, r4
   b427a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b427e:	4630      	mov	r0, r6
   b4280:	f006 f902 	bl	ba488 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b4284:	4605      	mov	r5, r0
   b4286:	4641      	mov	r1, r8
   b4288:	f105 0010 	add.w	r0, r5, #16
   b428c:	f003 f88b 	bl	b73a6 <_ZNK6StringltERKS_>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b4290:	b120      	cbz	r0, b429c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
   b4292:	2300      	movs	r3, #0
   b4294:	6023      	str	r3, [r4, #0]
   b4296:	e7ee      	b.n	b4276 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3a>
   b4298:	4635      	mov	r5, r6
   b429a:	e7f4      	b.n	b4286 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x4a>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b429c:	e9c4 5000 	strd	r5, r0, [r4]
   b42a0:	e7ea      	b.n	b4278 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3c>
	...

000b42a4 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE>:

   b42a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b42a8:	e9d0 6300 	ldrd	r6, r3, [r0]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b42ac:	4f77      	ldr	r7, [pc, #476]	; (b448c <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1e8>)
   b42ae:	b09b      	sub	sp, #108	; 0x6c
   b42b0:	eb06 1983 	add.w	r9, r6, r3, lsl #6
void parseIBeacons(Vector<iBeaconScan>& iBeacons){
   b42b4:	45b1      	cmp	r9, r6
   b42b6:	f000 80e6 	beq.w	b4486 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1e2>
class Beacon {
   b42ba:	4b75      	ldr	r3, [pc, #468]	; (b4490 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1ec>)
   b42bc:	930a      	str	r3, [sp, #40]	; 0x28
   b42be:	f996 3004 	ldrsb.w	r3, [r6, #4]
   b42c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   b42c6:	7973      	ldrb	r3, [r6, #5]
   b42c8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   b42cc:	79b3      	ldrb	r3, [r6, #6]
   b42ce:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   b42d2:	1df1      	adds	r1, r6, #7
   b42d4:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   b42d8:	f003 f9cc 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
   b42dc:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
   b42e0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   b42e4:	7cb3      	ldrb	r3, [r6, #18]
   b42e6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
#ifndef IBEACON_SCAN_H
#define IBEACON_SCAN_H

#include "beacon.h"

class iBeaconScan : public Beacon
   b42ea:	4b6a      	ldr	r3, [pc, #424]	; (b4494 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1f0>)
   b42ec:	930a      	str	r3, [sp, #40]	; 0x28
   b42ee:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   b42f2:	f106 0313 	add.w	r3, r6, #19
   b42f6:	f106 0137 	add.w	r1, r6, #55	; 0x37
   b42fa:	f853 0b04 	ldr.w	r0, [r3], #4
   b42fe:	f842 0b04 	str.w	r0, [r2], #4
   b4302:	428b      	cmp	r3, r1
   b4304:	d1f9      	bne.n	b42fa <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x56>
   b4306:	781b      	ldrb	r3, [r3, #0]
   b4308:	7013      	strb	r3, [r2, #0]
   b430a:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   b430c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
   b4310:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   b4312:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
   b4316:	f996 303c 	ldrsb.w	r3, [r6, #60]	; 0x3c
   b431a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    BleAddress getAddress() const { return address;}
   b431e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   b4322:	a802      	add	r0, sp, #8
   b4324:	f003 f9a6 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
   b4328:	4c5b      	ldr	r4, [pc, #364]	; (b4498 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1f4>)
  for(iBeaconScan beacon: iBeacons){
   b432a:	2200      	movs	r2, #0
   b432c:	a902      	add	r1, sp, #8
   b432e:	a806      	add	r0, sp, #24
   b4330:	f003 fa32 	bl	b7798 <_ZNK8particle10BleAddress8toStringEb>
   b4334:	68bd      	ldr	r5, [r7, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4336:	46a2      	mov	sl, r4
      while (__x != 0)
   b4338:	b165      	cbz	r5, b4354 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0xb0>
   b433a:	f105 0010 	add.w	r0, r5, #16
   b433e:	a906      	add	r1, sp, #24
   b4340:	f003 f831 	bl	b73a6 <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4344:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b4348:	2800      	cmp	r0, #0
   b434a:	bf0a      	itet	eq
   b434c:	462c      	moveq	r4, r5
   b434e:	4615      	movne	r5, r2
   b4350:	461d      	moveq	r5, r3
   b4352:	e7f1      	b.n	b4338 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x94>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b4354:	4554      	cmp	r4, sl
   b4356:	d124      	bne.n	b43a2 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0xfe>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4358:	2024      	movs	r0, #36	; 0x24
   b435a:	f7ff fe9a 	bl	b4092 <_Znwj>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b435e:	f100 0b10 	add.w	fp, r0, #16
   b4362:	4680      	mov	r8, r0
   b4364:	a906      	add	r1, sp, #24
   b4366:	4658      	mov	r0, fp
   b4368:	f002 ffba 	bl	b72e0 <_ZN6StringC1ERKS_>
   b436c:	2300      	movs	r3, #0
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b436e:	4554      	cmp	r4, sl
   b4370:	f888 3020 	strb.w	r3, [r8, #32]
   b4374:	d124      	bne.n	b43c0 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x11c>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b4376:	697b      	ldr	r3, [r7, #20]
   b4378:	2b00      	cmp	r3, #0
   b437a:	d03d      	beq.n	b43f8 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x154>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b437c:	6938      	ldr	r0, [r7, #16]
      { return __x < __y; }
   b437e:	4659      	mov	r1, fp
   b4380:	3010      	adds	r0, #16
   b4382:	f003 f810 	bl	b73a6 <_ZNK6StringltERKS_>
   b4386:	2800      	cmp	r0, #0
   b4388:	d036      	beq.n	b43f8 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x154>
       : first(__x), second(std::forward<_U2>(__y)) { }
   b438a:	693c      	ldr	r4, [r7, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b438c:	2c00      	cmp	r4, #0
   b438e:	d13e      	bne.n	b440e <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x16a>
    struct pair
   b4390:	4658      	mov	r0, fp
   b4392:	f002 ff0f 	bl	b71b4 <_ZN6StringD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4396:	4640      	mov	r0, r8
   b4398:	2124      	movs	r1, #36	; 0x24
   b439a:	f7ff fe7e 	bl	b409a <_ZdlPvj>
   b439e:	46a0      	mov	r8, r4
   b43a0:	e047      	b.n	b4432 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x18e>
   b43a2:	f104 0110 	add.w	r1, r4, #16
   b43a6:	a806      	add	r0, sp, #24
   b43a8:	f002 fffd 	bl	b73a6 <_ZNK6StringltERKS_>
   b43ac:	2800      	cmp	r0, #0
   b43ae:	d1d3      	bne.n	b4358 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0xb4>
    //uint8_t rssi = beacon.getRssi();
   b43b0:	2301      	movs	r3, #1
   b43b2:	f884 3020 	strb.w	r3, [r4, #32]
  for(iBeaconScan beacon: iBeacons){
   b43b6:	a806      	add	r0, sp, #24
   b43b8:	f002 fefc 	bl	b71b4 <_ZN6StringD1Ev>
void parseIBeacons(Vector<iBeaconScan>& iBeacons){
   b43bc:	3640      	adds	r6, #64	; 0x40
   b43be:	e779      	b.n	b42b4 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x10>
      { return __x.first; }
   b43c0:	f104 0310 	add.w	r3, r4, #16
      { return __x < __y; }
   b43c4:	4619      	mov	r1, r3
   b43c6:	4658      	mov	r0, fp
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	f002 ffec 	bl	b73a6 <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b43ce:	9b01      	ldr	r3, [sp, #4]
   b43d0:	2800      	cmp	r0, #0
   b43d2:	d032      	beq.n	b443a <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x196>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b43d4:	68fd      	ldr	r5, [r7, #12]
   b43d6:	42ac      	cmp	r4, r5
   b43d8:	d015      	beq.n	b4406 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x162>
	_M_node = _Rb_tree_decrement(_M_node);
   b43da:	4620      	mov	r0, r4
   b43dc:	f006 f854 	bl	ba488 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b43e0:	4659      	mov	r1, fp
   b43e2:	4603      	mov	r3, r0
   b43e4:	3010      	adds	r0, #16
   b43e6:	9301      	str	r3, [sp, #4]
   b43e8:	f002 ffdd 	bl	b73a6 <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b43ec:	b120      	cbz	r0, b43f8 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x154>
      { return static_cast<_Link_type>(__x->_M_right); }
   b43ee:	9b01      	ldr	r3, [sp, #4]
   b43f0:	68dd      	ldr	r5, [r3, #12]
	      if (_S_right(__before._M_node) == 0)
   b43f2:	bb05      	cbnz	r5, b4436 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x192>
       : first(__x), second(std::forward<_U2>(__y)) { }
   b43f4:	461c      	mov	r4, r3
   b43f6:	e006      	b.n	b4406 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x162>
	    return _M_get_insert_unique_pos(__k);
   b43f8:	465a      	mov	r2, fp
   b43fa:	4639      	mov	r1, r7
   b43fc:	a804      	add	r0, sp, #16
   b43fe:	f7ff ff1d 	bl	b423c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b4402:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
	    if (__res.second)
   b4406:	2c00      	cmp	r4, #0
   b4408:	d03b      	beq.n	b4482 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1de>
			    || _M_impl._M_key_compare(_S_key(__z),
   b440a:	2d00      	cmp	r5, #0
   b440c:	d137      	bne.n	b447e <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1da>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b440e:	4554      	cmp	r4, sl
   b4410:	d035      	beq.n	b447e <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1da>
   b4412:	f104 0110 	add.w	r1, r4, #16
   b4416:	4658      	mov	r0, fp
   b4418:	f002 ffc5 	bl	b73a6 <_ZNK6StringltERKS_>
			    || _M_impl._M_key_compare(_S_key(__z),
   b441c:	3800      	subs	r0, #0
   b441e:	bf18      	it	ne
   b4420:	2001      	movne	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b4422:	4b1d      	ldr	r3, [pc, #116]	; (b4498 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1f4>)
   b4424:	4622      	mov	r2, r4
   b4426:	4641      	mov	r1, r8
   b4428:	f006 f830 	bl	ba48c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b442c:	697b      	ldr	r3, [r7, #20]
   b442e:	3301      	adds	r3, #1
   b4430:	617b      	str	r3, [r7, #20]
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b4432:	4644      	mov	r4, r8
   b4434:	e7bc      	b.n	b43b0 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x10c>
   b4436:	4625      	mov	r5, r4
   b4438:	e7e5      	b.n	b4406 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x162>
   b443a:	4659      	mov	r1, fp
   b443c:	4618      	mov	r0, r3
   b443e:	f002 ffb2 	bl	b73a6 <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b4442:	2800      	cmp	r0, #0
   b4444:	d0a4      	beq.n	b4390 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0xec>
	  if (__pos._M_node == _M_rightmost())
   b4446:	693b      	ldr	r3, [r7, #16]
   b4448:	429c      	cmp	r4, r3
   b444a:	d0d3      	beq.n	b43f4 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x150>
	_M_node = _Rb_tree_increment(_M_node);
   b444c:	4620      	mov	r0, r4
   b444e:	f006 f819 	bl	ba484 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b4452:	4605      	mov	r5, r0
   b4454:	f100 0110 	add.w	r1, r0, #16
   b4458:	4658      	mov	r0, fp
   b445a:	f002 ffa4 	bl	b73a6 <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b445e:	b120      	cbz	r0, b446a <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1c6>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4460:	68e1      	ldr	r1, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b4462:	b951      	cbnz	r1, b447a <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x1d6>
   b4464:	4623      	mov	r3, r4
   b4466:	460d      	mov	r5, r1
   b4468:	e7c4      	b.n	b43f4 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x150>
	    return _M_get_insert_unique_pos(__k);
   b446a:	465a      	mov	r2, fp
   b446c:	4639      	mov	r1, r7
   b446e:	a804      	add	r0, sp, #16
   b4470:	f7ff fee4 	bl	b423c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b4474:	e9dd 5304 	ldrd	r5, r3, [sp, #16]
   b4478:	e7bc      	b.n	b43f4 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x150>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b447a:	462b      	mov	r3, r5
   b447c:	e7ba      	b.n	b43f4 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x150>
			    || _M_impl._M_key_compare(_S_key(__z),
   b447e:	2001      	movs	r0, #1
   b4480:	e7cf      	b.n	b4422 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0x17e>
   b4482:	462c      	mov	r4, r5
   b4484:	e784      	b.n	b4390 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE+0xec>
  }
   b4486:	b01b      	add	sp, #108	; 0x6c
   b4488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b448c:	2003e674 	.word	0x2003e674
   b4490:	000bb084 	.word	0x000bb084
   b4494:	000bb30c 	.word	0x000bb30c
   b4498:	2003e678 	.word	0x2003e678

000b449c <_Z10onCallBackR6Beacon13callback_type>:

   b449c:	b573      	push	{r0, r1, r4, r5, r6, lr}
void onCallBack(Beacon& beacon, callback_type type){
   b449e:	f005 fca9 	bl	b9df4 <_Z16_fetch_usbserialv>
      { return iterator(this->_M_impl._M_header._M_left); }
   b44a2:	4d10      	ldr	r5, [pc, #64]	; (b44e4 <_Z10onCallBackR6Beacon13callback_type+0x48>)
   b44a4:	4910      	ldr	r1, [pc, #64]	; (b44e8 <_Z10onCallBackR6Beacon13callback_type+0x4c>)
  parseIBeacons(Scanner.getiBeacons());
   b44a6:	4c11      	ldr	r4, [pc, #68]	; (b44ec <_Z10onCallBackR6Beacon13callback_type+0x50>)
    const char* data = it->first;
   b44a8:	4e11      	ldr	r6, [pc, #68]	; (b44f0 <_Z10onCallBackR6Beacon13callback_type+0x54>)
void onCallBack(Beacon& beacon, callback_type type){
   b44aa:	f005 fabc 	bl	b9a26 <_ZN5Print7printlnEPKc>
  Serial.println("Entering Callback");
   b44ae:	f7ff fe37 	bl	b4120 <_ZN13Beaconscanner8instanceEv>
   b44b2:	4810      	ldr	r0, [pc, #64]	; (b44f4 <_Z10onCallBackR6Beacon13callback_type+0x58>)
   b44b4:	f7ff fef6 	bl	b42a4 <_Z13parseIBeaconsRN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEEE>
  parseIBeacons(Scanner.getiBeacons());
   b44b8:	68ea      	ldr	r2, [r5, #12]
   b44ba:	6022      	str	r2, [r4, #0]
   b44bc:	3504      	adds	r5, #4
      { return __x._M_node != __y._M_node; }
   b44be:	6823      	ldr	r3, [r4, #0]
   b44c0:	42ab      	cmp	r3, r5
   b44c2:	d00c      	beq.n	b44de <_Z10onCallBackR6Beacon13callback_type+0x42>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b44c4:	691a      	ldr	r2, [r3, #16]
   b44c6:	9201      	str	r2, [sp, #4]
    const char* data = it->first;
   b44c8:	f005 fc94 	bl	b9df4 <_Z16_fetch_usbserialv>
   b44cc:	9a01      	ldr	r2, [sp, #4]
   b44ce:	4631      	mov	r1, r6
   b44d0:	f7ff fe17 	bl	b4102 <_ZN5Print6printfEPKcz>
	_M_node = _Rb_tree_increment(_M_node);
   b44d4:	6820      	ldr	r0, [r4, #0]
   b44d6:	f005 ffd5 	bl	ba484 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b44da:	6020      	str	r0, [r4, #0]
	return __tmp;
   b44dc:	e7ef      	b.n	b44be <_Z10onCallBackR6Beacon13callback_type+0x22>
  }
   b44de:	b002      	add	sp, #8
   b44e0:	bd70      	pop	{r4, r5, r6, pc}
   b44e2:	bf00      	nop
   b44e4:	2003e674 	.word	0x2003e674
   b44e8:	000bb05c 	.word	0x000bb05c
   b44ec:	2003e670 	.word	0x2003e670
   b44f0:	000bb06e 	.word	0x000bb06e
   b44f4:	2003e6b8 	.word	0x2003e6b8

000b44f8 <_GLOBAL__sub_I_players>:
  executeBadge();
   b44f8:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   b44fa:	2100      	movs	r1, #0
   b44fc:	2001      	movs	r0, #1
   b44fe:	f002 fd25 	bl	b6f4c <system_thread_set_state>
      _M_header._M_color = _S_red;
   b4502:	4b05      	ldr	r3, [pc, #20]	; (b4518 <_GLOBAL__sub_I_players+0x20>)
   b4504:	2200      	movs	r2, #0
      _M_header._M_left = &_M_header;
   b4506:	1d19      	adds	r1, r3, #4
      _M_header._M_right = &_M_header;
   b4508:	e9c3 1103 	strd	r1, r1, [r3, #12]
      _M_header._M_color = _S_red;
   b450c:	711a      	strb	r2, [r3, #4]
      _M_header._M_parent = 0;
   b450e:	609a      	str	r2, [r3, #8]
      _M_node_count = 0;
   b4510:	615a      	str	r2, [r3, #20]
      : _M_node() { }
   b4512:	4b02      	ldr	r3, [pc, #8]	; (b451c <_GLOBAL__sub_I_players+0x24>)
   b4514:	601a      	str	r2, [r3, #0]
  executeBadge();
   b4516:	bd08      	pop	{r3, pc}
   b4518:	2003e674 	.word	0x2003e674
   b451c:	2003e670 	.word	0x2003e670

000b4520 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b4520:	b513      	push	{r0, r1, r4, lr}
   b4522:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b4524:	4608      	mov	r0, r1
   b4526:	9101      	str	r1, [sp, #4]
   b4528:	f006 fd09 	bl	baf3e <strlen>
   b452c:	9901      	ldr	r1, [sp, #4]
   b452e:	4602      	mov	r2, r0
   b4530:	4620      	mov	r0, r4
}
   b4532:	b002      	add	sp, #8
   b4534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b4538:	f005 beec 	b.w	ba314 <_ZN5spark10JSONWriter4nameEPKcj>

000b453c <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE>:
    }
    return false;
}

void KontaktTag::toJson(JSONWriter *writer) const
{
   b453c:	b530      	push	{r4, r5, lr}
   b453e:	b085      	sub	sp, #20
   b4540:	4604      	mov	r4, r0
   b4542:	460d      	mov	r5, r1
        writer->name(address.toString()).beginObject();
   b4544:	2200      	movs	r2, #0
   b4546:	1dc1      	adds	r1, r0, #7
   b4548:	4668      	mov	r0, sp
   b454a:	f003 f925 	bl	b7798 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b454e:	9a02      	ldr	r2, [sp, #8]
   b4550:	9900      	ldr	r1, [sp, #0]
   b4552:	4628      	mov	r0, r5
   b4554:	f005 fede 	bl	ba314 <_ZN5spark10JSONWriter4nameEPKcj>
   b4558:	f005 fe22 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
   b455c:	4668      	mov	r0, sp
   b455e:	f002 fe29 	bl	b71b4 <_ZN6StringD1Ev>
        if (battery != 0xFF)
   b4562:	7ce3      	ldrb	r3, [r4, #19]
   b4564:	2bff      	cmp	r3, #255	; 0xff
   b4566:	d006      	beq.n	b4576 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x3a>
            writer->name("batt").value(battery);
   b4568:	4923      	ldr	r1, [pc, #140]	; (b45f8 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xbc>)
   b456a:	4628      	mov	r0, r5
   b456c:	f7ff ffd8 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4570:	7ce1      	ldrb	r1, [r4, #19]
   b4572:	f005 fe39 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        if (temperature != 0xFF)
            writer->name("temp").value(temperature);
   b4576:	4921      	ldr	r1, [pc, #132]	; (b45fc <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc0>)
   b4578:	4628      	mov	r0, r5
   b457a:	f7ff ffd1 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b457e:	f994 101f 	ldrsb.w	r1, [r4, #31]
   b4582:	f005 fe31 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        if (button_time != 0xFFFF)
   b4586:	8ae2      	ldrh	r2, [r4, #22]
   b4588:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b458c:	429a      	cmp	r2, r3
   b458e:	d006      	beq.n	b459e <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x62>
            writer->name("button").value(button_time);
   b4590:	491b      	ldr	r1, [pc, #108]	; (b4600 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc4>)
   b4592:	4628      	mov	r0, r5
   b4594:	f7ff ffc4 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4598:	8ae1      	ldrh	r1, [r4, #22]
   b459a:	f005 fe25 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        if (accel_data)
   b459e:	f894 3020 	ldrb.w	r3, [r4, #32]
   b45a2:	b1bb      	cbz	r3, b45d4 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x98>
        {
            writer->name("x_axis").value(x_axis);
   b45a4:	4917      	ldr	r1, [pc, #92]	; (b4604 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc8>)
   b45a6:	4628      	mov	r0, r5
   b45a8:	f7ff ffba 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b45ac:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b45b0:	f005 fe1a 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->name("y_axis").value(y_axis);
   b45b4:	4914      	ldr	r1, [pc, #80]	; (b4608 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xcc>)
   b45b6:	4628      	mov	r0, r5
   b45b8:	f7ff ffb2 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b45bc:	f994 101d 	ldrsb.w	r1, [r4, #29]
   b45c0:	f005 fe12 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->name("z_axis").value(z_axis);
   b45c4:	4911      	ldr	r1, [pc, #68]	; (b460c <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xd0>)
   b45c6:	4628      	mov	r0, r5
   b45c8:	f7ff ffaa 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b45cc:	f994 101e 	ldrsb.w	r1, [r4, #30]
   b45d0:	f005 fe0a 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        }
        writer->name("rssi").value(getRssi());
   b45d4:	490e      	ldr	r1, [pc, #56]	; (b4610 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xd4>)
   b45d6:	4628      	mov	r0, r5
   b45d8:	f7ff ffa2 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b45dc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b45e0:	7ca3      	ldrb	r3, [r4, #18]
   b45e2:	fb91 f1f3 	sdiv	r1, r1, r3
   b45e6:	b249      	sxtb	r1, r1
   b45e8:	f005 fdfe 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b45ec:	4628      	mov	r0, r5
}
   b45ee:	b005      	add	sp, #20
   b45f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        writer->endObject();
   b45f4:	f005 bdbe 	b.w	ba174 <_ZN5spark10JSONWriter9endObjectEv>
   b45f8:	000bb408 	.word	0x000bb408
   b45fc:	000bb08c 	.word	0x000bb08c
   b4600:	000bb091 	.word	0x000bb091
   b4604:	000bb098 	.word	0x000bb098
   b4608:	000bb09f 	.word	0x000bb09f
   b460c:	000bb0a6 	.word	0x000bb0a6
   b4610:	000bb0ad 	.word	0x000bb0ad

000b4614 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4614:	b40e      	push	{r1, r2, r3}
   b4616:	b500      	push	{lr}
   b4618:	b08c      	sub	sp, #48	; 0x30
   b461a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b461c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4620:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4624:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4626:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b462a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b462c:	6801      	ldr	r1, [r0, #0]
   b462e:	aa04      	add	r2, sp, #16
   b4630:	201e      	movs	r0, #30
    attr.flags = 0;
   b4632:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4636:	f002 fc79 	bl	b6f2c <log_message_v>
}
   b463a:	b00c      	add	sp, #48	; 0x30
   b463c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4640:	b003      	add	sp, #12
   b4642:	4770      	bx	lr

000b4644 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE>:
{
   b4644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4648:	460c      	mov	r4, r1
   b464a:	b0a3      	sub	sp, #140	; 0x8c
   b464c:	4605      	mov	r5, r0
    Beacon::populateData(scanResult);
   b464e:	f7ff fd2e 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b4652:	4621      	mov	r1, r4
   b4654:	1de8      	adds	r0, r5, #7
   b4656:	f003 f812 	bl	b767e <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, sizeof(buf));
   b465a:	231f      	movs	r3, #31
   b465c:	aa01      	add	r2, sp, #4
   b465e:	2116      	movs	r1, #22
   b4660:	f104 0008 	add.w	r0, r4, #8
   b4664:	f003 fa1d 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b4668:	b2c6      	uxtb	r6, r0
    if (count > 3 && buf[0] == 0x6A && buf[1] == 0xFE) // Kontakt UUID
   b466a:	2e03      	cmp	r6, #3
   b466c:	d94f      	bls.n	b470e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
   b466e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4672:	2b6a      	cmp	r3, #106	; 0x6a
   b4674:	d14b      	bne.n	b470e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
   b4676:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b467a:	2bfe      	cmp	r3, #254	; 0xfe
   b467c:	d147      	bne.n	b470e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
        if (buf[cursor] == 0x03) // Telemetry v1 packet
   b467e:	f89d 4006 	ldrb.w	r4, [sp, #6]
   b4682:	2c03      	cmp	r4, #3
   b4684:	d143      	bne.n	b470e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
                cursor++;
   b4686:	1c62      	adds	r2, r4, #1
                switch (buf[cursor++])
   b4688:	a922      	add	r1, sp, #136	; 0x88
                cursor++;
   b468a:	fa5f f982 	uxtb.w	r9, r2
                switch (buf[cursor++])
   b468e:	fa51 f282 	uxtab	r2, r1, r2
   b4692:	1ca3      	adds	r3, r4, #2
   b4694:	f812 2c84 	ldrb.w	r2, [r2, #-132]
   b4698:	2a05      	cmp	r2, #5
   b469a:	b2db      	uxtb	r3, r3
   b469c:	d06d      	beq.n	b477a <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x136>
   b469e:	d81d      	bhi.n	b46dc <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x98>
   b46a0:	2a01      	cmp	r2, #1
   b46a2:	d029      	beq.n	b46f8 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xb4>
   b46a4:	2a02      	cmp	r2, #2
   b46a6:	d035      	beq.n	b4714 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xd0>
                uint8_t size = buf[cursor];
   b46a8:	ab22      	add	r3, sp, #136	; 0x88
   b46aa:	441c      	add	r4, r3
   b46ac:	af09      	add	r7, sp, #36	; 0x24
   b46ae:	ab01      	add	r3, sp, #4
   b46b0:	f814 4c84 	ldrb.w	r4, [r4, #-132]
   b46b4:	eb03 0a09 	add.w	sl, r3, r9
   b46b8:	f04f 0800 	mov.w	r8, #0
   b46bc:	46bb      	mov	fp, r7
                    for (uint8_t i = 0; i < size; i++)
   b46be:	fa5f f388 	uxtb.w	r3, r8
   b46c2:	429c      	cmp	r4, r3
   b46c4:	d963      	bls.n	b478e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x14a>
                        snprintf(nbuf + i * 2, sizeof(nbuf), "%02X", buf[cursor + i]);
   b46c6:	4638      	mov	r0, r7
   b46c8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   b46cc:	4a36      	ldr	r2, [pc, #216]	; (b47a8 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x164>)
   b46ce:	2164      	movs	r1, #100	; 0x64
   b46d0:	f002 fcf0 	bl	b70b4 <snprintf>
                    for (uint8_t i = 0; i < size; i++)
   b46d4:	f108 0801 	add.w	r8, r8, #1
   b46d8:	3702      	adds	r7, #2
   b46da:	e7f0      	b.n	b46be <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x7a>
                switch (buf[cursor++])
   b46dc:	2a0d      	cmp	r2, #13
   b46de:	d1e3      	bne.n	b46a8 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x64>
                    button_time = buf[cursor] + buf[cursor + 1] * 256;
   b46e0:	aa22      	add	r2, sp, #136	; 0x88
   b46e2:	4413      	add	r3, r2
                    cursor += 2;
   b46e4:	3404      	adds	r4, #4
                    button_time = buf[cursor] + buf[cursor + 1] * 256;
   b46e6:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b46ea:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b46ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b46f2:	82eb      	strh	r3, [r5, #22]
                    cursor += size;
   b46f4:	b2e4      	uxtb	r4, r4
   b46f6:	e008      	b.n	b470a <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    cursor += 4; // Advance to battery level
   b46f8:	1da3      	adds	r3, r4, #6
                    battery = buf[cursor++];
   b46fa:	aa22      	add	r2, sp, #136	; 0x88
   b46fc:	fa52 f383 	uxtab	r3, r2, r3
   b4700:	3407      	adds	r4, #7
   b4702:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4706:	74eb      	strb	r3, [r5, #19]
   b4708:	b2e4      	uxtb	r4, r4
            while (cursor < count)
   b470a:	42b4      	cmp	r4, r6
   b470c:	d3bb      	bcc.n	b4686 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x42>
}
   b470e:	b023      	add	sp, #140	; 0x8c
   b4710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    accel_sensitivity = buf[cursor++];
   b4714:	aa22      	add	r2, sp, #136	; 0x88
   b4716:	4413      	add	r3, r2
   b4718:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b471c:	752b      	strb	r3, [r5, #20]
   b471e:	1ce3      	adds	r3, r4, #3
                    x_axis = buf[cursor++];
   b4720:	fa52 f383 	uxtab	r3, r2, r3
   b4724:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4728:	772b      	strb	r3, [r5, #28]
   b472a:	1d23      	adds	r3, r4, #4
                    y_axis = buf[cursor++];
   b472c:	fa52 f383 	uxtab	r3, r2, r3
   b4730:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4734:	776b      	strb	r3, [r5, #29]
   b4736:	1d63      	adds	r3, r4, #5
                    z_axis = buf[cursor++];
   b4738:	fa52 f383 	uxtab	r3, r2, r3
   b473c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4740:	77ab      	strb	r3, [r5, #30]
   b4742:	1da3      	adds	r3, r4, #6
                    accel_last_double_tap = buf[cursor] + buf[cursor + 1] * 256;
   b4744:	fa52 f383 	uxtab	r3, r2, r3
   b4748:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b474c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4750:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4754:	832b      	strh	r3, [r5, #24]
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4756:	aa22      	add	r2, sp, #136	; 0x88
                    cursor += 2;
   b4758:	f104 0308 	add.w	r3, r4, #8
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b475c:	fa52 f383 	uxtab	r3, r2, r3
                    cursor += 2;
   b4760:	340a      	adds	r4, #10
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4762:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b4766:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b476a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b476e:	836b      	strh	r3, [r5, #26]
                    accel_data = true;
   b4770:	2301      	movs	r3, #1
                    cursor += 2;
   b4772:	b2e4      	uxtb	r4, r4
                    accel_data = true;
   b4774:	f885 3020 	strb.w	r3, [r5, #32]
                    break;
   b4778:	e7c7      	b.n	b470a <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    cursor++;
   b477a:	1ce3      	adds	r3, r4, #3
                    temperature = buf[cursor++];
   b477c:	aa22      	add	r2, sp, #136	; 0x88
   b477e:	fa52 f383 	uxtab	r3, r2, r3
   b4782:	3404      	adds	r4, #4
   b4784:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4788:	77eb      	strb	r3, [r5, #31]
   b478a:	b2e4      	uxtb	r4, r4
                    break;
   b478c:	e7bd      	b.n	b470a <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    nbuf[size * 2] = '\0';
   b478e:	ab22      	add	r3, sp, #136	; 0x88
   b4790:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   b4794:	2200      	movs	r2, #0
   b4796:	f803 2c64 	strb.w	r2, [r3, #-100]
                    Log.info("%s", nbuf);
   b479a:	4904      	ldr	r1, [pc, #16]	; (b47ac <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x168>)
   b479c:	4804      	ldr	r0, [pc, #16]	; (b47b0 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x16c>)
   b479e:	465a      	mov	r2, fp
   b47a0:	f7ff ff38 	bl	b4614 <_ZNK5spark6Logger4infoEPKcz>
                    cursor += size;
   b47a4:	444c      	add	r4, r9
   b47a6:	e7a5      	b.n	b46f4 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xb0>
   b47a8:	000bb340 	.word	0x000bb340
   b47ac:	000bb1fe 	.word	0x000bb1fe
   b47b0:	2003e6f8 	.word	0x2003e6f8

000b47b4 <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE>:
{
   b47b4:	b530      	push	{r4, r5, lr}
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b47b6:	f100 0508 	add.w	r5, r0, #8
   b47ba:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).contains(BleAdvertisingDataType::SERVICE_DATA))
   b47bc:	2116      	movs	r1, #22
   b47be:	4628      	mov	r0, r5
   b47c0:	f003 f9d1 	bl	b7b66 <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>
   b47c4:	4604      	mov	r4, r0
   b47c6:	b188      	cbz	r0, b47ec <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x38>
        uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b47c8:	231f      	movs	r3, #31
   b47ca:	466a      	mov	r2, sp
   b47cc:	2116      	movs	r1, #22
   b47ce:	4628      	mov	r0, r5
   b47d0:	f003 f967 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        if (count > 3 && buf[0] == 0x6A && buf[1] == 0xFE) // Kontakt UUID
   b47d4:	b2c0      	uxtb	r0, r0
   b47d6:	2803      	cmp	r0, #3
   b47d8:	d907      	bls.n	b47ea <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x36>
   b47da:	f89d 3000 	ldrb.w	r3, [sp]
   b47de:	2b6a      	cmp	r3, #106	; 0x6a
   b47e0:	d103      	bne.n	b47ea <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x36>
   b47e2:	f89d 3001 	ldrb.w	r3, [sp, #1]
   b47e6:	2bfe      	cmp	r3, #254	; 0xfe
   b47e8:	d000      	beq.n	b47ec <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x38>
    return false;
   b47ea:	2400      	movs	r4, #0
}
   b47ec:	4620      	mov	r0, r4
   b47ee:	b009      	add	sp, #36	; 0x24
   b47f0:	bd30      	pop	{r4, r5, pc}
	...

000b47f4 <_ZN10KontaktTagC1ERKS_>:
#ifndef KONTAKT_TAG_H
#define KONTAKT_TAG_H

#include "beacon.h"

class KontaktTag : public Beacon
   b47f4:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b47f6:	4b11      	ldr	r3, [pc, #68]	; (b483c <_ZN10KontaktTagC1ERKS_+0x48>)
   b47f8:	888a      	ldrh	r2, [r1, #4]
   b47fa:	6003      	str	r3, [r0, #0]
   b47fc:	460d      	mov	r5, r1
   b47fe:	798b      	ldrb	r3, [r1, #6]
   b4800:	8082      	strh	r2, [r0, #4]
   b4802:	4604      	mov	r4, r0
   b4804:	7183      	strb	r3, [r0, #6]
   b4806:	3107      	adds	r1, #7
   b4808:	3007      	adds	r0, #7
   b480a:	f002 ff33 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
   b480e:	8a2b      	ldrh	r3, [r5, #16]
   b4810:	8223      	strh	r3, [r4, #16]
   b4812:	7cab      	ldrb	r3, [r5, #18]
   b4814:	74a3      	strb	r3, [r4, #18]
   b4816:	4b0a      	ldr	r3, [pc, #40]	; (b4840 <_ZN10KontaktTagC1ERKS_+0x4c>)
   b4818:	8aea      	ldrh	r2, [r5, #22]
   b481a:	6023      	str	r3, [r4, #0]
   b481c:	7ceb      	ldrb	r3, [r5, #19]
   b481e:	74e3      	strb	r3, [r4, #19]
   b4820:	82e2      	strh	r2, [r4, #22]
   b4822:	7d2b      	ldrb	r3, [r5, #20]
   b4824:	69aa      	ldr	r2, [r5, #24]
   b4826:	7523      	strb	r3, [r4, #20]
   b4828:	61a2      	str	r2, [r4, #24]
   b482a:	f895 3020 	ldrb.w	r3, [r5, #32]
   b482e:	69ea      	ldr	r2, [r5, #28]
   b4830:	61e2      	str	r2, [r4, #28]
   b4832:	f884 3020 	strb.w	r3, [r4, #32]
   b4836:	4620      	mov	r0, r4
   b4838:	bd38      	pop	{r3, r4, r5, pc}
   b483a:	bf00      	nop
   b483c:	000bb084 	.word	0x000bb084
   b4840:	000bb0bc 	.word	0x000bb0bc

000b4844 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4844:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4848:	4604      	mov	r4, r0
   b484a:	460d      	mov	r5, r1
   b484c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b484e:	d911      	bls.n	b4874 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b4850:	4290      	cmp	r0, r2
   b4852:	d210      	bcs.n	b4876 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b4854:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b4858:	1a75      	subs	r5, r6, r1
   b485a:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b485e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4860:	42b7      	cmp	r7, r6
   b4862:	d012      	beq.n	b488a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b4864:	b11c      	cbz	r4, b486e <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b4866:	4631      	mov	r1, r6
   b4868:	4620      	mov	r0, r4
   b486a:	f7ff ffc3 	bl	b47f4 <_ZN10KontaktTagC1ERKS_>
            for (; end != p; --end, --dest) {
   b486e:	3e24      	subs	r6, #36	; 0x24
   b4870:	3c24      	subs	r4, #36	; 0x24
   b4872:	e7f5      	b.n	b4860 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4874:	d009      	beq.n	b488a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b4876:	42b5      	cmp	r5, r6
   b4878:	d007      	beq.n	b488a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b487a:	b11c      	cbz	r4, b4884 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b487c:	4629      	mov	r1, r5
   b487e:	4620      	mov	r0, r4
   b4880:	f7ff ffb8 	bl	b47f4 <_ZN10KontaktTagC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b4884:	3524      	adds	r5, #36	; 0x24
   b4886:	3424      	adds	r4, #36	; 0x24
   b4888:	e7f5      	b.n	b4876 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b488c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE>:

void KontaktTag::addOrUpdate(const BleScanResult *scanResult) {
   b488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b4890:	4c42      	ldr	r4, [pc, #264]	; (b499c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x110>)
   b4892:	b09c      	sub	sp, #112	; 0x70
   b4894:	4606      	mov	r6, r0
   b4896:	2700      	movs	r7, #0
    return data_[i];
   b4898:	f04f 0824 	mov.w	r8, #36	; 0x24
    uint8_t i;
    for (i = 0; i < beacons.size(); i++)
   b489c:	6863      	ldr	r3, [r4, #4]
   b489e:	b2fd      	uxtb	r5, r7
   b48a0:	429d      	cmp	r5, r3
   b48a2:	da0d      	bge.n	b48c0 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b48a4:	6821      	ldr	r1, [r4, #0]
   b48a6:	fb08 1105 	mla	r1, r8, r5, r1
    BleAddress getAddress() const { return address;}
   b48aa:	3107      	adds	r1, #7
   b48ac:	a813      	add	r0, sp, #76	; 0x4c
   b48ae:	f002 fee1 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
    {
        if (beacons.at(i).getAddress() == ADDRESS(scanResult))
   b48b2:	4631      	mov	r1, r6
   b48b4:	a813      	add	r0, sp, #76	; 0x4c
   b48b6:	f002 fef4 	bl	b76a2 <_ZNK8particle10BleAddresseqERKS0_>
   b48ba:	3701      	adds	r7, #1
   b48bc:	2800      	cmp	r0, #0
   b48be:	d0ed      	beq.n	b489c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x10>
        {
            break;
        }
    }
    if (i == beacons.size()) {
   b48c0:	6863      	ldr	r3, [r4, #4]
   b48c2:	429d      	cmp	r5, r3
   b48c4:	d15d      	bne.n	b4982 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf6>
        rssi_count(0) {};
   b48c6:	4b36      	ldr	r3, [pc, #216]	; (b49a0 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x114>)
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	2301      	movs	r3, #1
   b48cc:	f88d 3009 	strb.w	r3, [sp, #9]
   b48d0:	f10d 000b 	add.w	r0, sp, #11
   b48d4:	2302      	movs	r3, #2
   b48d6:	f88d 300a 	strb.w	r3, [sp, #10]
   b48da:	f002 fef6 	bl	b76ca <_ZN8particle10BleAddressC1Ev>
{
public:
    KontaktTag() : Beacon(SCAN_KONTAKT)
   b48de:	4b31      	ldr	r3, [pc, #196]	; (b49a4 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x118>)
   b48e0:	9301      	str	r3, [sp, #4]
    {
        battery = temperature = 0xFF;
   b48e2:	23ff      	movs	r3, #255	; 0xff
   b48e4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   b48e8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   b48ec:	9305      	str	r3, [sp, #20]
        button_time = accel_last_double_tap = accel_last_movement = 0xFFFF;
   b48ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
        KontaktTag new_beacon;
        new_beacon.populateData(scanResult);
   b48f2:	4631      	mov	r1, r6
   b48f4:	f8ad 301a 	strh.w	r3, [sp, #26]
        accel_data = false;
   b48f8:	2500      	movs	r5, #0
        button_time = accel_last_double_tap = accel_last_movement = 0xFFFF;
   b48fa:	f04f 33ff 	mov.w	r3, #4294967295
   b48fe:	a801      	add	r0, sp, #4
   b4900:	9307      	str	r3, [sp, #28]
        accel_data = false;
   b4902:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   b4906:	f7ff fe9d 	bl	b4644 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b490a:	a901      	add	r1, sp, #4
   b490c:	a80a      	add	r0, sp, #40	; 0x28
        new_beacon.missed_scan = 0;
   b490e:	f88d 5008 	strb.w	r5, [sp, #8]
        beacons.append(new_beacon);
   b4912:	f7ff ff6f 	bl	b47f4 <_ZN10KontaktTagC1ERKS_>
    return insert(size_, std::move(value));
   b4916:	a90a      	add	r1, sp, #40	; 0x28
   b4918:	a813      	add	r0, sp, #76	; 0x4c
   b491a:	6866      	ldr	r6, [r4, #4]
   b491c:	f7ff ff6a 	bl	b47f4 <_ZN10KontaktTagC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4920:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b4924:	429f      	cmp	r7, r3
   b4926:	db15      	blt.n	b4954 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xc8>
   b4928:	3701      	adds	r7, #1
        if (n > 0) {
   b492a:	42af      	cmp	r7, r5
   b492c:	dd0d      	ble.n	b494a <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xbe>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b492e:	f04f 0824 	mov.w	r8, #36	; 0x24
    return ::malloc(size);
   b4932:	fb08 f007 	mul.w	r0, r8, r7
   b4936:	f002 fba5 	bl	b7084 <malloc>
            if (!d) {
   b493a:	4605      	mov	r5, r0
   b493c:	b1f0      	cbz	r0, b497c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf0>
            move(d, data_, data_ + size_);
   b493e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4942:	fb08 1202 	mla	r2, r8, r2, r1
   b4946:	f7ff ff7d 	bl	b4844 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b494a:	6820      	ldr	r0, [r4, #0]
   b494c:	f002 fba2 	bl	b7094 <free>
        data_ = d;
   b4950:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4952:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b4954:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b4956:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b4958:	2224      	movs	r2, #36	; 0x24
   b495a:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b495e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b4962:	fb02 3201 	mla	r2, r2, r1, r3
   b4966:	4631      	mov	r1, r6
   b4968:	f7ff ff6c 	bl	b4844 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b496c:	b11e      	cbz	r6, b4976 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xea>
   b496e:	a913      	add	r1, sp, #76	; 0x4c
   b4970:	4630      	mov	r0, r6
   b4972:	f7ff ff3f 	bl	b47f4 <_ZN10KontaktTagC1ERKS_>
    ++size_;
   b4976:	6863      	ldr	r3, [r4, #4]
   b4978:	3301      	adds	r3, #1
   b497a:	6063      	str	r3, [r4, #4]
        KontaktTag& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b497c:	b01c      	add	sp, #112	; 0x70
   b497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b4982:	2324      	movs	r3, #36	; 0x24
   b4984:	435d      	muls	r5, r3
   b4986:	6823      	ldr	r3, [r4, #0]
   b4988:	195c      	adds	r4, r3, r5
        beacon.newly_scanned = false;
   b498a:	2700      	movs	r7, #0
   b498c:	7167      	strb	r7, [r4, #5]
        beacon.populateData(scanResult);
   b498e:	595b      	ldr	r3, [r3, r5]
   b4990:	4631      	mov	r1, r6
   b4992:	685b      	ldr	r3, [r3, #4]
   b4994:	4620      	mov	r0, r4
   b4996:	4798      	blx	r3
        beacon.missed_scan = 0;
   b4998:	7127      	strb	r7, [r4, #4]
   b499a:	e7ef      	b.n	b497c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf0>
   b499c:	2003e68c 	.word	0x2003e68c
   b49a0:	000bb084 	.word	0x000bb084
   b49a4:	000bb0bc 	.word	0x000bb0bc

000b49a8 <_GLOBAL__sub_I__ZN10KontaktTag7beaconsE>:
        capacity_(0) {
   b49a8:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <_GLOBAL__sub_I__ZN10KontaktTag7beaconsE+0xc>)
   b49aa:	2200      	movs	r2, #0
   b49ac:	e9c3 2200 	strd	r2, r2, [r3]
   b49b0:	609a      	str	r2, [r3, #8]
   b49b2:	4770      	bx	lr
   b49b4:	2003e68c 	.word	0x2003e68c

000b49b8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b49b8:	b513      	push	{r0, r1, r4, lr}
   b49ba:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b49bc:	4608      	mov	r0, r1
   b49be:	9101      	str	r1, [sp, #4]
   b49c0:	f006 fabd 	bl	baf3e <strlen>
   b49c4:	9901      	ldr	r1, [sp, #4]
   b49c6:	4602      	mov	r2, r0
   b49c8:	4620      	mov	r0, r4
}
   b49ca:	b002      	add	sp, #8
   b49cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b49d0:	f005 bcb0 	b.w	ba334 <_ZN5spark10JSONWriter5valueEPKcj>

000b49d4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b49d4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b49d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b49d8:	4604      	mov	r4, r0
      if (_M_manager)
   b49da:	b113      	cbz	r3, b49e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b49dc:	2203      	movs	r2, #3
   b49de:	4601      	mov	r1, r0
   b49e0:	4798      	blx	r3
    }
   b49e2:	4620      	mov	r0, r4
   b49e4:	bd10      	pop	{r4, pc}

000b49e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b49e6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b49e8:	6843      	ldr	r3, [r0, #4]
   b49ea:	3b01      	subs	r3, #1
    {
   b49ec:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b49ee:	6043      	str	r3, [r0, #4]
   b49f0:	b963      	cbnz	r3, b4a0c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b49f2:	6803      	ldr	r3, [r0, #0]
   b49f4:	689b      	ldr	r3, [r3, #8]
   b49f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b49f8:	68a3      	ldr	r3, [r4, #8]
   b49fa:	3b01      	subs	r3, #1
   b49fc:	60a3      	str	r3, [r4, #8]
   b49fe:	b92b      	cbnz	r3, b4a0c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4a00:	6823      	ldr	r3, [r4, #0]
   b4a02:	4620      	mov	r0, r4
   b4a04:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4a0a:	4718      	bx	r3
    }
   b4a0c:	bd10      	pop	{r4, pc}

000b4a0e <_ZN11SystemClass6uptimeEv>:
    }

    static unsigned uptime() {
   b4a0e:	b508      	push	{r3, lr}
        return (hal_timer_millis(nullptr) / 1000);
   b4a10:	2000      	movs	r0, #0
   b4a12:	f002 f90f 	bl	b6c34 <hal_timer_millis>
   b4a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4a1a:	2300      	movs	r3, #0
   b4a1c:	f006 f862 	bl	baae4 <__aeabi_uldivmod>
    }
   b4a20:	bd08      	pop	{r3, pc}

000b4a22 <_ZN8particle5ErrorD1Ev>:
inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
   b4a22:	b510      	push	{r4, lr}
   b4a24:	4604      	mov	r4, r0
    free((void*)msg_);
   b4a26:	6800      	ldr	r0, [r0, #0]
   b4a28:	f002 fb34 	bl	b7094 <free>
}
   b4a2c:	4620      	mov	r0, r4
   b4a2e:	bd10      	pop	{r4, pc}

000b4a30 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE>:
            }
    return false;
}

void LairdBt510::toJson(JSONWriter *writer) const
{
   b4a30:	b530      	push	{r4, r5, lr}
   b4a32:	b085      	sub	sp, #20
   b4a34:	460c      	mov	r4, r1
   b4a36:	4605      	mov	r5, r0
        writer->name(address.toString()).beginObject();
   b4a38:	1dc1      	adds	r1, r0, #7
   b4a3a:	2200      	movs	r2, #0
   b4a3c:	4668      	mov	r0, sp
   b4a3e:	f002 feab 	bl	b7798 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b4a42:	9a02      	ldr	r2, [sp, #8]
   b4a44:	9900      	ldr	r1, [sp, #0]
   b4a46:	4620      	mov	r0, r4
   b4a48:	f005 fc64 	bl	ba314 <_ZN5spark10JSONWriter4nameEPKcj>
   b4a4c:	f005 fba8 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
   b4a50:	4668      	mov	r0, sp
   b4a52:	f002 fbaf 	bl	b71b4 <_ZN6StringD1Ev>
        writer->name("magnet_near").value(magnetNear());
   b4a56:	4918      	ldr	r1, [pc, #96]	; (b4ab8 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x88>)
   b4a58:	4620      	mov	r0, r4
   b4a5a:	f7ff fd61 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
    static void setEventCallback(LairdBt510EventCallback callback) { LairdBt510::_eventCallback = callback; };
    static void setAlarmCallback(LairdBt510EventCallback callback) { LairdBt510::_alarmCallback = callback; };

    // Get the sensor data
    int16_t getTemperature() const { return _temp; };
    bool magnetNear() const {return !_magnet_state;};
   b4a5e:	7fe9      	ldrb	r1, [r5, #31]
   b4a60:	f081 0101 	eor.w	r1, r1, #1
   b4a64:	f005 fba8 	bl	ba1b8 <_ZN5spark10JSONWriter5valueEb>
        writer->name("temp").value(getTemperature());
   b4a68:	4914      	ldr	r1, [pc, #80]	; (b4abc <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x8c>)
   b4a6a:	4620      	mov	r0, r4
   b4a6c:	f7ff fd58 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4a70:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
   b4a74:	f005 fbb8 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->name("record").value(getRecordNumber());
   b4a78:	4911      	ldr	r1, [pc, #68]	; (b4ac0 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x90>)
   b4a7a:	4620      	mov	r0, r4
   b4a7c:	f7ff fd50 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4a80:	8b69      	ldrh	r1, [r5, #26]
   b4a82:	f005 fbb1 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->name("batt").value(getBattVoltage());
   b4a86:	490f      	ldr	r1, [pc, #60]	; (b4ac4 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x94>)
   b4a88:	4620      	mov	r0, r4
   b4a8a:	f7ff fd49 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4a8e:	8ba9      	ldrh	r1, [r5, #28]
   b4a90:	f005 fbaa 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->name("rssi").value(getRssi());
   b4a94:	490c      	ldr	r1, [pc, #48]	; (b4ac8 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x98>)
   b4a96:	4620      	mov	r0, r4
   b4a98:	f7ff fd42 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b4a9c:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   b4aa0:	7cab      	ldrb	r3, [r5, #18]
   b4aa2:	fb91 f1f3 	sdiv	r1, r1, r3
   b4aa6:	b249      	sxtb	r1, r1
   b4aa8:	f005 fb9e 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b4aac:	4620      	mov	r0, r4
}
   b4aae:	b005      	add	sp, #20
   b4ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        writer->endObject();
   b4ab4:	f005 bb5e 	b.w	ba174 <_ZN5spark10JSONWriter9endObjectEv>
   b4ab8:	000bb0c4 	.word	0x000bb0c4
   b4abc:	000bb08c 	.word	0x000bb08c
   b4ac0:	000bb0d0 	.word	0x000bb0d0
   b4ac4:	000bb408 	.word	0x000bb408
   b4ac8:	000bb0ad 	.word	0x000bb0ad

000b4acc <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4acc:	b40e      	push	{r1, r2, r3}
   b4ace:	b500      	push	{lr}
   b4ad0:	b08c      	sub	sp, #48	; 0x30
   b4ad2:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b4ad4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4ad8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4adc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ade:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4ae2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ae4:	6801      	ldr	r1, [r0, #0]
   b4ae6:	aa04      	add	r2, sp, #16
   b4ae8:	2001      	movs	r0, #1
    attr.flags = 0;
   b4aea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4aee:	f002 fa1d 	bl	b6f2c <log_message_v>
}
   b4af2:	b00c      	add	sp, #48	; 0x30
   b4af4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4af8:	b003      	add	sp, #12
   b4afa:	4770      	bx	lr

000b4afc <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv>:

private:
    Vector<char> v_;
};

void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b4afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LairdBt510* ctx = (LairdBt510*)context;
    // TODO: Check the returned JSON to make sure it is ok
    Log.trace("Received %d bytes", size);
   b4b00:	f8df 8048 	ldr.w	r8, [pc, #72]	; b4b4c <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x50>
void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b4b04:	af00      	add	r7, sp, #0
   b4b06:	460c      	mov	r4, r1
   b4b08:	4606      	mov	r6, r0
    Log.trace("Received %d bytes", size);
   b4b0a:	460a      	mov	r2, r1
   b4b0c:	4640      	mov	r0, r8
   b4b0e:	490e      	ldr	r1, [pc, #56]	; (b4b48 <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b4b10:	461d      	mov	r5, r3
    Log.trace("Received %d bytes", size);
   b4b12:	f7ff ffdb 	bl	b4acc <_ZNK5spark6Logger5traceEPKcz>
    uint8_t buf[size+1];
   b4b16:	f104 0308 	add.w	r3, r4, #8
   b4b1a:	f023 0307 	bic.w	r3, r3, #7
   b4b1e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(buf, data, size);
   b4b22:	4622      	mov	r2, r4
   b4b24:	4631      	mov	r1, r6
   b4b26:	4668      	mov	r0, sp
   b4b28:	f006 f97c 	bl	bae24 <memcpy>
    buf[size] = 0;
   b4b2c:	2300      	movs	r3, #0
    Log.trace((char*)buf);
   b4b2e:	4669      	mov	r1, sp
   b4b30:	4640      	mov	r0, r8
    buf[size] = 0;
   b4b32:	f80d 3004 	strb.w	r3, [sp, r4]
    Log.trace((char*)buf);
   b4b36:	f7ff ffc9 	bl	b4acc <_ZNK5spark6Logger5traceEPKcz>
    ctx->state_ = DISCONNECT;
   b4b3a:	2304      	movs	r3, #4
   b4b3c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   b4b40:	46bd      	mov	sp, r7
   b4b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4b46:	bf00      	nop
   b4b48:	000bb0d7 	.word	0x000bb0d7
   b4b4c:	2003e6f8 	.word	0x2003e6f8

000b4b50 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE>:
{
   b4b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    size_t size = ADVERTISING_DATA(scanResult).get(buf, 9);
   b4b52:	2209      	movs	r2, #9
   b4b54:	a901      	add	r1, sp, #4
   b4b56:	3008      	adds	r0, #8
   b4b58:	f002 ff95 	bl	b7a86 <_ZNK8particle18BleAdvertisingData3getEPhj>
    if (size >= 9 && buf[0] == 0x02 && buf[1] == 0x01 && buf[2] == 0x06 && (buf[3] == 0x1b || buf[3] == 0x26) && buf[4] == 0xFF &&
   b4b5c:	2808      	cmp	r0, #8
   b4b5e:	d929      	bls.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b4b60:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4b64:	2b02      	cmp	r3, #2
   b4b66:	d125      	bne.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b4b68:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4b6c:	2b01      	cmp	r3, #1
   b4b6e:	d121      	bne.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b4b70:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4b74:	2b06      	cmp	r3, #6
   b4b76:	d11d      	bne.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b4b78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4b7c:	2b1b      	cmp	r3, #27
   b4b7e:	d001      	beq.n	b4b84 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x34>
   b4b80:	2b26      	cmp	r3, #38	; 0x26
   b4b82:	d117      	bne.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b4b84:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b4b88:	2bff      	cmp	r3, #255	; 0xff
   b4b8a:	d113      	bne.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b4b8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4b90:	2b77      	cmp	r3, #119	; 0x77
   b4b92:	d10f      	bne.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
            buf[5] == 0x77 && buf[6] == 0x00 && (buf[7] == 0x01 || buf[7] == 0x02) && buf[8] == 0x00) { 
   b4b94:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b4b98:	3b01      	subs	r3, #1
   b4b9a:	2b01      	cmp	r3, #1
   b4b9c:	d80a      	bhi.n	b4bb4 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b4b9e:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b4ba2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b4ba6:	4313      	orrs	r3, r2
   b4ba8:	bf0c      	ite	eq
   b4baa:	2001      	moveq	r0, #1
   b4bac:	2000      	movne	r0, #0
}
   b4bae:	b005      	add	sp, #20
   b4bb0:	f85d fb04 	ldr.w	pc, [sp], #4
    return false;
   b4bb4:	2000      	movs	r0, #0
   b4bb6:	e7fa      	b.n	b4bae <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x5e>

000b4bb8 <_ZN16LairdBt510ConfigC1Ev>:
   b4bb8:	2200      	movs	r2, #0
   b4bba:	e9c0 2200 	strd	r2, r2, [r0]
   b4bbe:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b4bc2:	e9c0 2204 	strd	r2, r2, [r0, #16]
        advInterval_(0xFFFF),
        connTimeout_(0xFFFF),
        tempAggregationCount_(0xFF),
        configFlags_(Bt510ConfigFields::NONE),
        coded_(2),
        passkey_{0x31, 0x32, 0x33, 0x34, 0x35, 0x36}
   b4bc6:	f04f 32ff 	mov.w	r2, #4294967295
   b4bca:	e9c0 2206 	strd	r2, r2, [r0, #24]
   b4bce:	6202      	str	r2, [r0, #32]
   b4bd0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   b4bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b4bd8:	84c2      	strh	r2, [r0, #38]	; 0x26
   b4bda:	4a04      	ldr	r2, [pc, #16]	; (b4bec <_ZN16LairdBt510ConfigC1Ev+0x34>)
LairdBt510Config::LairdBt510Config():
   b4bdc:	4603      	mov	r3, r0
        passkey_{0x31, 0x32, 0x33, 0x34, 0x35, 0x36}
   b4bde:	6810      	ldr	r0, [r2, #0]
   b4be0:	8892      	ldrh	r2, [r2, #4]
   b4be2:	62d8      	str	r0, [r3, #44]	; 0x2c
   b4be4:	861a      	strh	r2, [r3, #48]	; 0x30
        {};
   b4be6:	4618      	mov	r0, r3
   b4be8:	4770      	bx	lr
   b4bea:	bf00      	nop
   b4bec:	000bb290 	.word	0x000bb290

000b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4bf0:	b510      	push	{r4, lr}
   b4bf2:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b4bf4:	6800      	ldr	r0, [r0, #0]
   b4bf6:	b108      	cbz	r0, b4bfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4bf8:	f7ff fef5 	bl	b49e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	bd10      	pop	{r4, pc}

000b4c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   b4c00:	680b      	ldr	r3, [r1, #0]
   b4c02:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   b4c04:	b113      	cbz	r3, b4c0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b4c06:	685a      	ldr	r2, [r3, #4]
   b4c08:	3201      	adds	r2, #1
   b4c0a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   b4c0c:	4770      	bx	lr

000b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4c0e:	b510      	push	{r4, lr}
   b4c10:	4604      	mov	r4, r0
    ::free(ptr);
   b4c12:	6800      	ldr	r0, [r0, #0]
   b4c14:	f002 fa3e 	bl	b7094 <free>
}
   b4c18:	4620      	mov	r0, r4
   b4c1a:	bd10      	pop	{r4, pc}

000b4c1c <_ZN10LairdBt510D1Ev>:
    ~LairdBt510() = default;
   b4c1c:	b538      	push	{r3, r4, r5, lr}
   b4c1e:	4605      	mov	r5, r0
   b4c20:	4b0d      	ldr	r3, [pc, #52]	; (b4c58 <_ZN10LairdBt510D1Ev+0x3c>)
   b4c22:	f845 3b4c 	str.w	r3, [r5], #76
   b4c26:	4604      	mov	r4, r0
    ~LairdBt510Config() = default;
   b4c28:	3058      	adds	r0, #88	; 0x58
   b4c2a:	f7ff fff0 	bl	b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b4c2e:	4628      	mov	r0, r5
   b4c30:	f7ff ffed 	bl	b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
    ~LairdBt510() = default;
   b4c34:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b4c38:	f003 fa80 	bl	b813c <_ZN8particle17BleCharacteristicD1Ev>
   b4c3c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4c40:	f003 fa7c 	bl	b813c <_ZN8particle17BleCharacteristicD1Ev>
   b4c44:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b4c48:	f003 fa7f 	bl	b814a <_ZN8particle13BlePeerDeviceD1Ev>
   b4c4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4c50:	f7ff ffdd 	bl	b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b4c54:	4620      	mov	r0, r4
   b4c56:	bd38      	pop	{r3, r4, r5, pc}
   b4c58:	000bb2a0 	.word	0x000bb2a0

000b4c5c <_ZN16JSONVectorWriterD1Ev>:
    ~JSONVectorWriter() = default;
   b4c5c:	b510      	push	{r4, lr}
   b4c5e:	4b04      	ldr	r3, [pc, #16]	; (b4c70 <_ZN16JSONVectorWriterD1Ev+0x14>)
   b4c60:	4604      	mov	r4, r0
   b4c62:	f840 3b08 	str.w	r3, [r0], #8
   b4c66:	f7ff ffd2 	bl	b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b4c6a:	4620      	mov	r0, r4
   b4c6c:	bd10      	pop	{r4, pc}
   b4c6e:	bf00      	nop
   b4c70:	000bb280 	.word	0x000bb280

000b4c74 <_ZN16JSONVectorWriterD0Ev>:
   b4c74:	b510      	push	{r4, lr}
   b4c76:	4604      	mov	r4, r0
   b4c78:	f7ff fff0 	bl	b4c5c <_ZN16JSONVectorWriterD1Ev>
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	2114      	movs	r1, #20
   b4c80:	f7ff fa0b 	bl	b409a <_ZdlPvj>
   b4c84:	4620      	mov	r0, r4
   b4c86:	bd10      	pop	{r4, pc}

000b4c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4c88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4c8a:	460e      	mov	r6, r1
   b4c8c:	4604      	mov	r4, r0
   b4c8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4c92:	9300      	str	r3, [sp, #0]
   b4c94:	460d      	mov	r5, r1
   b4c96:	a801      	add	r0, sp, #4
   b4c98:	4631      	mov	r1, r6
   b4c9a:	f7ff ffb1 	bl	b4c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4c9e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4ca0:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   b4ca2:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4ca4:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   b4ca6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4ca8:	2300      	movs	r3, #0
   b4caa:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4cac:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4cae:	f7ff ff9f 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4cb2:	4630      	mov	r0, r6
   b4cb4:	f7ff ff9c 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4cb8:	4628      	mov	r0, r5
   b4cba:	2108      	movs	r1, #8
   b4cbc:	f7ff f9ed 	bl	b409a <_ZdlPvj>
        return p;
    }
   b4cc0:	4620      	mov	r0, r4
   b4cc2:	b002      	add	sp, #8
   b4cc4:	bd70      	pop	{r4, r5, r6, pc}

000b4cc6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>:
    bool realloc(int n) {
   b4cc6:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b4cc8:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4cca:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4ccc:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b4cce:	dd03      	ble.n	b4cd8 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b4cd0:	f002 f9e8 	bl	b70a4 <realloc>
            if (!d) {
   b4cd4:	b918      	cbnz	r0, b4cde <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x18>
    }
   b4cd6:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b4cd8:	f002 f9dc 	bl	b7094 <free>
        T* d = nullptr;
   b4cdc:	2000      	movs	r0, #0
        data_ = d;
   b4cde:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b4ce0:	60a5      	str	r5, [r4, #8]
        return true;
   b4ce2:	2001      	movs	r0, #1
   b4ce4:	e7f7      	b.n	b4cd6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x10>

000b4ce6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4ce6:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b4ce8:	2300      	movs	r3, #0
   b4cea:	e9c0 3300 	strd	r3, r3, [r0]
   b4cee:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4cf0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4cf2:	6849      	ldr	r1, [r1, #4]
   b4cf4:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4cf6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4cf8:	dd10      	ble.n	b4d1c <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b4cfa:	f7ff ffe4 	bl	b4cc6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b4cfe:	b168      	cbz	r0, b4d1c <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4d00:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4d04:	6822      	ldr	r2, [r4, #0]
   b4d06:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b4d08:	4299      	cmp	r1, r3
   b4d0a:	d005      	beq.n	b4d18 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b4d0c:	b10a      	cbz	r2, b4d12 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b4d0e:	7818      	ldrb	r0, [r3, #0]
   b4d10:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b4d12:	3301      	adds	r3, #1
   b4d14:	3201      	adds	r2, #1
   b4d16:	e7f7      	b.n	b4d08 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b4d18:	686b      	ldr	r3, [r5, #4]
   b4d1a:	6063      	str	r3, [r4, #4]
}
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	bd38      	pop	{r3, r4, r5, pc}

000b4d20 <_ZN10LairdBt510C1ERKS_>:
class LairdBt510 : public Beacon
   b4d20:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b4d22:	4b30      	ldr	r3, [pc, #192]	; (b4de4 <_ZN10LairdBt510C1ERKS_+0xc4>)
   b4d24:	888a      	ldrh	r2, [r1, #4]
   b4d26:	6003      	str	r3, [r0, #0]
   b4d28:	460d      	mov	r5, r1
   b4d2a:	798b      	ldrb	r3, [r1, #6]
   b4d2c:	8082      	strh	r2, [r0, #4]
   b4d2e:	4604      	mov	r4, r0
   b4d30:	7183      	strb	r3, [r0, #6]
   b4d32:	3107      	adds	r1, #7
   b4d34:	3007      	adds	r0, #7
   b4d36:	f002 fc9d 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
   b4d3a:	8a2b      	ldrh	r3, [r5, #16]
   b4d3c:	8223      	strh	r3, [r4, #16]
   b4d3e:	7cab      	ldrb	r3, [r5, #18]
   b4d40:	74a3      	strb	r3, [r4, #18]
   b4d42:	696a      	ldr	r2, [r5, #20]
   b4d44:	6162      	str	r2, [r4, #20]
   b4d46:	4b28      	ldr	r3, [pc, #160]	; (b4de8 <_ZN10LairdBt510C1ERKS_+0xc8>)
   b4d48:	69aa      	ldr	r2, [r5, #24]
   b4d4a:	6023      	str	r3, [r4, #0]
   b4d4c:	61a2      	str	r2, [r4, #24]
   b4d4e:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4d52:	69ea      	ldr	r2, [r5, #28]
   b4d54:	61e2      	str	r2, [r4, #28]
   b4d56:	f884 3020 	strb.w	r3, [r4, #32]
   b4d5a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b4d5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4d62:	f7ff ffc0 	bl	b4ce6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b4d66:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   b4d68:	8623      	strh	r3, [r4, #48]	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4d6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   b4d6c:	6363      	str	r3, [r4, #52]	; 0x34
   b4d6e:	f105 0138 	add.w	r1, r5, #56	; 0x38
   b4d72:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4d76:	f7ff ff43 	bl	b4c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b4d7a:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b4d7e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4d82:	f003 f9b9 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b4d86:	f105 0144 	add.w	r1, r5, #68	; 0x44
   b4d8a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b4d8e:	f003 f9b3 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
class LairdBt510Config {
   b4d92:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b4d96:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b4d9a:	f7ff ffa4 	bl	b4ce6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b4d9e:	f105 0158 	add.w	r1, r5, #88	; 0x58
   b4da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4da6:	f7ff ff9e 	bl	b4ce6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b4daa:	e9d5 2319 	ldrd	r2, r3, [r5, #100]	; 0x64
   b4dae:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
   b4db2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   b4db4:	66e3      	str	r3, [r4, #108]	; 0x6c
   b4db6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   b4db8:	6723      	str	r3, [r4, #112]	; 0x70
   b4dba:	e9d5 011e 	ldrd	r0, r1, [r5, #120]	; 0x78
   b4dbe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   b4dc0:	6763      	str	r3, [r4, #116]	; 0x74
   b4dc2:	f8d5 307e 	ldr.w	r3, [r5, #126]	; 0x7e
   b4dc6:	f8c4 307e 	str.w	r3, [r4, #126]	; 0x7e
   b4dca:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
   b4dce:	67a0      	str	r0, [r4, #120]	; 0x78
   b4dd0:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
   b4dd4:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
class LairdBt510 : public Beacon
   b4dd8:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
   b4ddc:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
   b4de0:	4620      	mov	r0, r4
   b4de2:	bd38      	pop	{r3, r4, r5, pc}
   b4de4:	000bb084 	.word	0x000bb084
   b4de8:	000bb2a0 	.word	0x000bb2a0

000b4dec <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b4dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4dee:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b4df2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b4df4:	4604      	mov	r4, r0
   b4df6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4df8:	da0c      	bge.n	b4e14 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0x28>
    T* const p = data_ + i;
   b4dfa:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4dfc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b4dfe:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4e00:	1b52      	subs	r2, r2, r5
   b4e02:	1c48      	adds	r0, r1, #1
   b4e04:	f006 f81c 	bl	bae40 <memmove>
    new(p) T(std::move(value));
   b4e08:	557e      	strb	r6, [r7, r5]
    ++size_;
   b4e0a:	6863      	ldr	r3, [r4, #4]
   b4e0c:	3301      	adds	r3, #1
   b4e0e:	6063      	str	r3, [r4, #4]
    return true;
   b4e10:	2001      	movs	r0, #1
}
   b4e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4e14:	1c69      	adds	r1, r5, #1
   b4e16:	f7ff ff56 	bl	b4cc6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b4e1a:	2800      	cmp	r0, #0
   b4e1c:	d1ed      	bne.n	b4dfa <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0xe>
   b4e1e:	e7f8      	b.n	b4e12 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0x26>

000b4e20 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt>:
void LairdBt510Config::createJson(JSONVectorWriter& writer, uint16_t& configId) const {
   b4e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e22:	460d      	mov	r5, r1
   b4e24:	b085      	sub	sp, #20
   b4e26:	4604      	mov	r4, r0
    writer.beginObject();
   b4e28:	4608      	mov	r0, r1
void LairdBt510Config::createJson(JSONVectorWriter& writer, uint16_t& configId) const {
   b4e2a:	4616      	mov	r6, r2
    writer.beginObject();
   b4e2c:	f005 f9b8 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("jsonrpc").value("2.0");
   b4e30:	4952      	ldr	r1, [pc, #328]	; (b4f7c <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x15c>)
   b4e32:	4628      	mov	r0, r5
   b4e34:	f7ff fb74 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4e38:	4951      	ldr	r1, [pc, #324]	; (b4f80 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x160>)
   b4e3a:	f7ff fdbd 	bl	b49b8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("method").value("set");
   b4e3e:	4951      	ldr	r1, [pc, #324]	; (b4f84 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x164>)
   b4e40:	4628      	mov	r0, r5
   b4e42:	f7ff fb6d 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4e46:	4950      	ldr	r1, [pc, #320]	; (b4f88 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x168>)
   b4e48:	f7ff fdb6 	bl	b49b8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("params").beginObject();
   b4e4c:	494f      	ldr	r1, [pc, #316]	; (b4f8c <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x16c>)
   b4e4e:	4628      	mov	r0, r5
   b4e50:	f7ff fb66 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4e54:	f005 f9a4 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
    if (!name_.isEmpty()) writer.name("sensorName").value(name_.data());
   b4e58:	6863      	ldr	r3, [r4, #4]
   b4e5a:	b133      	cbz	r3, b4e6a <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x4a>
   b4e5c:	494c      	ldr	r1, [pc, #304]	; (b4f90 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x170>)
   b4e5e:	4628      	mov	r0, r5
   b4e60:	f7ff fb5e 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4e64:	6821      	ldr	r1, [r4, #0]
   b4e66:	f7ff fda7 	bl	b49b8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    if (tempSenseInterval_ <= 86400) writer.name("temperatureSenseInterval").value((unsigned int)tempSenseInterval_);
   b4e6a:	4f4a      	ldr	r7, [pc, #296]	; (b4f94 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x174>)
   b4e6c:	69a3      	ldr	r3, [r4, #24]
   b4e6e:	42bb      	cmp	r3, r7
   b4e70:	d806      	bhi.n	b4e80 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x60>
   b4e72:	4949      	ldr	r1, [pc, #292]	; (b4f98 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x178>)
   b4e74:	4628      	mov	r0, r5
   b4e76:	f7ff fb53 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4e7a:	69a1      	ldr	r1, [r4, #24]
   b4e7c:	f005 f9c6 	bl	ba20c <_ZN5spark10JSONWriter5valueEj>
    if (battSenseInterval_ <= 86400) writer.name("batterySenseInterval").value((unsigned int)battSenseInterval_);
   b4e80:	69e3      	ldr	r3, [r4, #28]
   b4e82:	42bb      	cmp	r3, r7
   b4e84:	d806      	bhi.n	b4e94 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x74>
   b4e86:	4945      	ldr	r1, [pc, #276]	; (b4f9c <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x17c>)
   b4e88:	4628      	mov	r0, r5
   b4e8a:	f7ff fb49 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4e8e:	69e1      	ldr	r1, [r4, #28]
   b4e90:	f005 f9bc 	bl	ba20c <_ZN5spark10JSONWriter5valueEj>
    if (configFlags_ & ConfigHighTempAlarm1) writer.name("highTemperatureAlarmThreshold1").value((int)highTempAlarm1_);
   b4e94:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b4e98:	07db      	lsls	r3, r3, #31
   b4e9a:	d507      	bpl.n	b4eac <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x8c>
   b4e9c:	4940      	ldr	r1, [pc, #256]	; (b4fa0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x180>)
   b4e9e:	4628      	mov	r0, r5
   b4ea0:	f7ff fb3e 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4ea4:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   b4ea8:	f005 f99e 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigHighTempAlarm2) writer.name("highTemperatureAlarmThreshold2").value((int)highTempAlarm2_);
   b4eac:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b4eb0:	079f      	lsls	r7, r3, #30
   b4eb2:	d507      	bpl.n	b4ec4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xa4>
   b4eb4:	493b      	ldr	r1, [pc, #236]	; (b4fa4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x184>)
   b4eb6:	4628      	mov	r0, r5
   b4eb8:	f7ff fb32 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4ebc:	f994 1029 	ldrsb.w	r1, [r4, #41]	; 0x29
   b4ec0:	f005 f992 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigLowTempAlarm1) writer.name("lowTemperatureAlarmThreshold1").value((int)lowTempAlarm1_);
   b4ec4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b4ec8:	0758      	lsls	r0, r3, #29
   b4eca:	d507      	bpl.n	b4edc <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xbc>
   b4ecc:	4936      	ldr	r1, [pc, #216]	; (b4fa8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x188>)
   b4ece:	4628      	mov	r0, r5
   b4ed0:	f7ff fb26 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4ed4:	f994 102a 	ldrsb.w	r1, [r4, #42]	; 0x2a
   b4ed8:	f005 f986 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigLowTempAlarm2) writer.name("lowTemperatureAlarmThreshold2").value((int)lowTempAlarm2_);
   b4edc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b4ee0:	0719      	lsls	r1, r3, #28
   b4ee2:	d507      	bpl.n	b4ef4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xd4>
   b4ee4:	4931      	ldr	r1, [pc, #196]	; (b4fac <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x18c>)
   b4ee6:	4628      	mov	r0, r5
   b4ee8:	f7ff fb1a 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4eec:	f994 102b 	ldrsb.w	r1, [r4, #43]	; 0x2b
   b4ef0:	f005 f97a 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigDeltaTempAlarm) writer.name("deltaTemperatureAlarmThreshold").value((unsigned)deltaTempAlarm_);
   b4ef4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b4ef8:	06da      	lsls	r2, r3, #27
   b4efa:	d507      	bpl.n	b4f0c <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xec>
   b4efc:	492c      	ldr	r1, [pc, #176]	; (b4fb0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x190>)
   b4efe:	4628      	mov	r0, r5
   b4f00:	f7ff fb0e 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4f04:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   b4f08:	f005 f980 	bl	ba20c <_ZN5spark10JSONWriter5valueEj>
    if (configFlags_ & ConfigNewPasskey) writer.name("passkey").value((const char *)newPasskey_, 6);
   b4f0c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b4f10:	065b      	lsls	r3, r3, #25
   b4f12:	d508      	bpl.n	b4f26 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x106>
   b4f14:	4927      	ldr	r1, [pc, #156]	; (b4fb4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x194>)
   b4f16:	4628      	mov	r0, r5
   b4f18:	f7ff fb02 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4f1c:	2206      	movs	r2, #6
   b4f1e:	f104 0132 	add.w	r1, r4, #50	; 0x32
   b4f22:	f005 fa07 	bl	ba334 <_ZN5spark10JSONWriter5valueEPKcj>
    if (coded_ < 2) writer.name("useCodedPhy").value((int)coded_);
   b4f26:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b4f2a:	2b01      	cmp	r3, #1
   b4f2c:	d807      	bhi.n	b4f3e <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x11e>
   b4f2e:	4922      	ldr	r1, [pc, #136]	; (b4fb8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x198>)
   b4f30:	4628      	mov	r0, r5
   b4f32:	f7ff faf5 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4f36:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   b4f3a:	f005 f955 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
    writer.endObject();
   b4f3e:	4628      	mov	r0, r5
   b4f40:	f005 f918 	bl	ba174 <_ZN5spark10JSONWriter9endObjectEv>
    writer.name("id").value(++configId);
   b4f44:	491d      	ldr	r1, [pc, #116]	; (b4fbc <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x19c>)
   b4f46:	4628      	mov	r0, r5
   b4f48:	f7ff faea 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b4f4c:	8831      	ldrh	r1, [r6, #0]
   b4f4e:	3101      	adds	r1, #1
   b4f50:	b289      	uxth	r1, r1
   b4f52:	8031      	strh	r1, [r6, #0]
   b4f54:	f005 f948 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
    writer.endObject();
   b4f58:	4628      	mov	r0, r5
   b4f5a:	f005 f90b 	bl	ba174 <_ZN5spark10JSONWriter9endObjectEv>
    Vector<char> vector() const {return v_;}
   b4f5e:	f105 0108 	add.w	r1, r5, #8
   b4f62:	a801      	add	r0, sp, #4
   b4f64:	f7ff febf 	bl	b4ce6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
    writer.vector().append((char)0);
   b4f68:	2100      	movs	r1, #0
   b4f6a:	a801      	add	r0, sp, #4
   b4f6c:	f7ff ff3e 	bl	b4dec <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>
   b4f70:	a801      	add	r0, sp, #4
   b4f72:	f7ff fe4c 	bl	b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
}
   b4f76:	b005      	add	sp, #20
   b4f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4f7a:	bf00      	nop
   b4f7c:	000bb0e9 	.word	0x000bb0e9
   b4f80:	000bb0f1 	.word	0x000bb0f1
   b4f84:	000bb0f5 	.word	0x000bb0f5
   b4f88:	000bb0fc 	.word	0x000bb0fc
   b4f8c:	000bb100 	.word	0x000bb100
   b4f90:	000bb107 	.word	0x000bb107
   b4f94:	00015180 	.word	0x00015180
   b4f98:	000bb112 	.word	0x000bb112
   b4f9c:	000bb12b 	.word	0x000bb12b
   b4fa0:	000bb140 	.word	0x000bb140
   b4fa4:	000bb15f 	.word	0x000bb15f
   b4fa8:	000bb17e 	.word	0x000bb17e
   b4fac:	000bb19c 	.word	0x000bb19c
   b4fb0:	000bb1ba 	.word	0x000bb1ba
   b4fb4:	000bb1d9 	.word	0x000bb1d9
   b4fb8:	000bb1e1 	.word	0x000bb1e1
   b4fbc:	000bb2ef 	.word	0x000bb2ef

000b4fc0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>:
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b4fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return insert(size_, values, n);
   b4fc4:	6847      	ldr	r7, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4fc6:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b4fc8:	4688      	mov	r8, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4fca:	18b9      	adds	r1, r7, r2
   b4fcc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b4fce:	4604      	mov	r4, r0
   b4fd0:	4615      	mov	r5, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4fd2:	dc12      	bgt.n	b4ffa <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x3a>
    T* const p = data_ + i;
   b4fd4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4fd6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b4fd8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4fda:	1bd2      	subs	r2, r2, r7
   b4fdc:	4631      	mov	r1, r6
   b4fde:	1970      	adds	r0, r6, r5
   b4fe0:	f005 ff2e 	bl	bae40 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b4fe4:	462a      	mov	r2, r5
   b4fe6:	4641      	mov	r1, r8
   b4fe8:	4630      	mov	r0, r6
   b4fea:	f005 ff1b 	bl	bae24 <memcpy>
    size_ += n;
   b4fee:	6862      	ldr	r2, [r4, #4]
   b4ff0:	442a      	add	r2, r5
   b4ff2:	6062      	str	r2, [r4, #4]
    return true;
   b4ff4:	2001      	movs	r0, #1
}
   b4ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4ffa:	f7ff fe64 	bl	b4cc6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b4ffe:	2800      	cmp	r0, #0
   b5000:	d1e8      	bne.n	b4fd4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x14>
   b5002:	e7f8      	b.n	b4ff6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x36>

000b5004 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE>:
{
   b5004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5008:	4689      	mov	r9, r1
   b500a:	b08c      	sub	sp, #48	; 0x30
   b500c:	4604      	mov	r4, r0
   b500e:	f109 0a08 	add.w	sl, r9, #8
    Beacon::populateData(scanResult);
   b5012:	f7ff f84c 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b5016:	4649      	mov	r1, r9
   b5018:	1de0      	adds	r0, r4, #7
   b501a:	f002 fb30 	bl	b767e <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, MAX_MANUFACTURER_DATA_LEN);
   b501e:	2325      	movs	r3, #37	; 0x25
   b5020:	aa02      	add	r2, sp, #8
   b5022:	21ff      	movs	r1, #255	; 0xff
   b5024:	4650      	mov	r0, sl
   b5026:	f002 fd3c 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b502a:	b2c3      	uxtb	r3, r0
    if (count > 25) {   // Advertising data is correct, either table 1 or table 3
   b502c:	2b19      	cmp	r3, #25
   b502e:	f240 8081 	bls.w	b5134 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
   b5032:	f8bd 600e 	ldrh.w	r6, [sp, #14]
        lairdbt510_event_type event = (lairdbt510_event_type)buf[14];
   b5036:	f89d 5016 	ldrb.w	r5, [sp, #22]
        bool prev_magnet = _magnet_state;
   b503a:	7fe7      	ldrb	r7, [r4, #31]
    uint16_t prev_record = _record_number;
   b503c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
        _magnet_state = (flags & (uint16_t)lairdbt510_flags::MAGNET_STATE);
   b5040:	0bf2      	lsrs	r2, r6, #15
   b5042:	77e2      	strb	r2, [r4, #31]
        _record_number = buf[16] << 8 | buf[15];
   b5044:	f8bd 2017 	ldrh.w	r2, [sp, #23]
   b5048:	8362      	strh	r2, [r4, #26]
        switch (event)
   b504a:	1e6a      	subs	r2, r5, #1
   b504c:	2a0f      	cmp	r2, #15
   b504e:	d80c      	bhi.n	b506a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
   b5050:	e8df f002 	tbb	[pc, r2]
   b5054:	080b7308 	.word	0x080b7308
   b5058:	08080808 	.word	0x08080808
   b505c:	7a0b0808 	.word	0x7a0b0808
   b5060:	7a0b0b7a 	.word	0x7a0b0b7a
            _temp = buf[22] << 8 | buf[21];
   b5064:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   b5068:	8322      	strh	r2, [r4, #24]
        if (count == 37 && buf[2] == 0x02) { 
   b506a:	2b25      	cmp	r3, #37	; 0x25
   b506c:	d170      	bne.n	b5150 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x14c>
   b506e:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b5072:	2a02      	cmp	r2, #2
   b5074:	d121      	bne.n	b50ba <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
            count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5076:	aa02      	add	r2, sp, #8
   b5078:	2109      	movs	r1, #9
   b507a:	4650      	mov	r0, sl
                count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::SHORT_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b507c:	f002 fd11 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (count > 0 && memcmp(buf, _name.data(), count)) {
   b5080:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
   b5084:	d019      	beq.n	b50ba <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
   b5086:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5088:	9201      	str	r2, [sp, #4]
   b508a:	a802      	add	r0, sp, #8
   b508c:	f005 feba 	bl	bae04 <memcmp>
   b5090:	9a01      	ldr	r2, [sp, #4]
   b5092:	b190      	cbz	r0, b50ba <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
    size_ = 0;
   b5094:	f04f 0a00 	mov.w	sl, #0
                _name.append((const char*)buf, count);
   b5098:	f104 0924 	add.w	r9, r4, #36	; 0x24
   b509c:	a902      	add	r1, sp, #8
   b509e:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
   b50a2:	4648      	mov	r0, r9
   b50a4:	f7ff ff8c 	bl	b4fc0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>
                _name.append('\0');
   b50a8:	4651      	mov	r1, sl
   b50aa:	4648      	mov	r0, r9
   b50ac:	f7ff fe9e 	bl	b4dec <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>
                Log.trace("New device name: %s", _name.data());
   b50b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b50b2:	4932      	ldr	r1, [pc, #200]	; (b517c <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x178>)
   b50b4:	4832      	ldr	r0, [pc, #200]	; (b5180 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x17c>)
   b50b6:	f7ff fd09 	bl	b4acc <_ZNK5spark6Logger5traceEPKcz>
        if (_eventCallback && _record_number != prev_record)
   b50ba:	4b32      	ldr	r3, [pc, #200]	; (b5184 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x180>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	b12b      	cbz	r3, b50cc <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xc8>
   b50c0:	8b62      	ldrh	r2, [r4, #26]
   b50c2:	4542      	cmp	r2, r8
   b50c4:	d002      	beq.n	b50cc <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xc8>
            _eventCallback(*this, event);
   b50c6:	4629      	mov	r1, r5
   b50c8:	4620      	mov	r0, r4
   b50ca:	4798      	blx	r3
        if (_alarmCallback != nullptr) {
   b50cc:	4d2e      	ldr	r5, [pc, #184]	; (b5188 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x184>)
   b50ce:	682b      	ldr	r3, [r5, #0]
   b50d0:	2b00      	cmp	r3, #0
   b50d2:	d02f      	beq.n	b5134 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
            if (flags & (uint16_t)lairdbt510_flags::LOW_BATTERY_ALARM)
   b50d4:	0631      	lsls	r1, r6, #24
   b50d6:	d502      	bpl.n	b50de <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xda>
                _alarmCallback(*this, lairdbt510_event_type::BATTERY_BAD);
   b50d8:	2110      	movs	r1, #16
   b50da:	4620      	mov	r0, r4
   b50dc:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::HIGH_TEMP_ALARM_0)
   b50de:	05f2      	lsls	r2, r6, #23
   b50e0:	d503      	bpl.n	b50ea <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xe6>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_HIGH_TEMP_1);
   b50e2:	682b      	ldr	r3, [r5, #0]
   b50e4:	2104      	movs	r1, #4
   b50e6:	4620      	mov	r0, r4
   b50e8:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::HIGH_TEMP_ALARM_1)
   b50ea:	05b3      	lsls	r3, r6, #22
   b50ec:	d503      	bpl.n	b50f6 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xf2>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_HIGH_TEMP_2);
   b50ee:	682b      	ldr	r3, [r5, #0]
   b50f0:	2105      	movs	r1, #5
   b50f2:	4620      	mov	r0, r4
   b50f4:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::LOW_TEMP_ALARM_0)
   b50f6:	0570      	lsls	r0, r6, #21
   b50f8:	d503      	bpl.n	b5102 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xfe>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_LOW_TEMP_1);
   b50fa:	682b      	ldr	r3, [r5, #0]
   b50fc:	2107      	movs	r1, #7
   b50fe:	4620      	mov	r0, r4
   b5100:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::LOW_TEMP_ALARM_1)
   b5102:	0531      	lsls	r1, r6, #20
   b5104:	d503      	bpl.n	b510e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x10a>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_LOW_TEMP_2);
   b5106:	682b      	ldr	r3, [r5, #0]
   b5108:	2108      	movs	r1, #8
   b510a:	4620      	mov	r0, r4
   b510c:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::DELTA_TEMP_ALARM)
   b510e:	04f2      	lsls	r2, r6, #19
   b5110:	d503      	bpl.n	b511a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x116>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_DELTA_TEMP);
   b5112:	682b      	ldr	r3, [r5, #0]
   b5114:	210a      	movs	r1, #10
   b5116:	4620      	mov	r0, r4
   b5118:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::MOVEMENT_ALARM)
   b511a:	0473      	lsls	r3, r6, #17
   b511c:	d503      	bpl.n	b5126 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x122>
                _alarmCallback(*this, lairdbt510_event_type::MOVEMENT);
   b511e:	682b      	ldr	r3, [r5, #0]
   b5120:	2103      	movs	r1, #3
   b5122:	4620      	mov	r0, r4
   b5124:	4798      	blx	r3
            if (prev_magnet != _magnet_state)
   b5126:	7fe3      	ldrb	r3, [r4, #31]
   b5128:	42bb      	cmp	r3, r7
   b512a:	d003      	beq.n	b5134 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
                _alarmCallback(*this, lairdbt510_event_type::MAGNET_PROXIMITY);
   b512c:	682b      	ldr	r3, [r5, #0]
   b512e:	2102      	movs	r1, #2
   b5130:	4620      	mov	r0, r4
   b5132:	4798      	blx	r3
}
   b5134:	b00c      	add	sp, #48	; 0x30
   b5136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            _magnet_event = buf[21] == 0x01;
   b513a:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b513e:	1e50      	subs	r0, r2, #1
   b5140:	4242      	negs	r2, r0
   b5142:	4142      	adcs	r2, r0
   b5144:	77a2      	strb	r2, [r4, #30]
            break;
   b5146:	e790      	b.n	b506a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
            _batt_voltage = buf[22] << 8 | buf[21];
   b5148:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   b514c:	83a2      	strh	r2, [r4, #28]
            break;
   b514e:	e78c      	b.n	b506a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
        else if (count == 26 && buf[2] == 0x01) { // This is a 1MB PHY advertisement
   b5150:	2b1a      	cmp	r3, #26
   b5152:	d1b2      	bne.n	b50ba <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
   b5154:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b5158:	2b01      	cmp	r3, #1
   b515a:	d1ae      	bne.n	b50ba <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
    }

    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
   b515c:	f109 0914 	add.w	r9, r9, #20
            count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5160:	aa02      	add	r2, sp, #8
   b5162:	2325      	movs	r3, #37	; 0x25
   b5164:	2109      	movs	r1, #9
   b5166:	4648      	mov	r0, r9
   b5168:	f002 fc9b 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (count == 0)
   b516c:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
   b5170:	d189      	bne.n	b5086 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x82>
                count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::SHORT_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5172:	2325      	movs	r3, #37	; 0x25
   b5174:	aa02      	add	r2, sp, #8
   b5176:	2108      	movs	r1, #8
   b5178:	4648      	mov	r0, r9
   b517a:	e77f      	b.n	b507c <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x78>
   b517c:	000bb1ed 	.word	0x000bb1ed
   b5180:	2003e6f8 	.word	0x2003e6f8
   b5184:	2003e6a0 	.word	0x2003e6a0
   b5188:	2003e69c 	.word	0x2003e69c

000b518c <_ZN16JSONVectorWriter5writeEPKcj>:
    virtual void write(const char *data, size_t size) override {
   b518c:	b508      	push	{r3, lr}
        v_.append(data, (int)size);
   b518e:	3008      	adds	r0, #8
   b5190:	f7ff ff16 	bl	b4fc0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>
    }
   b5194:	bd08      	pop	{r3, pc}

000b5196 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5196:	b513      	push	{r0, r1, r4, lr}
   b5198:	460b      	mov	r3, r1
   b519a:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b519c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b51a0:	466c      	mov	r4, sp
   b51a2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b51a6:	e893 0003 	ldmia.w	r3, {r0, r1}
   b51aa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b51ae:	e894 0003 	ldmia.w	r4, {r0, r1}
   b51b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b51b6:	b002      	add	sp, #8
   b51b8:	bd10      	pop	{r4, pc}

000b51ba <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b51ba:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b51bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51be:	4604      	mov	r4, r0
   b51c0:	460d      	mov	r5, r1
   b51c2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b51c4:	d914      	bls.n	b51f0 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b51c6:	4290      	cmp	r0, r2
   b51c8:	d213      	bcs.n	b51f2 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b51ca:	f1a2 0688 	sub.w	r6, r2, #136	; 0x88
            dest += end - p - 1;
   b51ce:	1a75      	subs	r5, r6, r1
   b51d0:	f1a1 0788 	sub.w	r7, r1, #136	; 0x88
   b51d4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b51d6:	42b7      	cmp	r7, r6
   b51d8:	d018      	beq.n	b520c <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b51da:	b11c      	cbz	r4, b51e4 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b51dc:	4631      	mov	r1, r6
   b51de:	4620      	mov	r0, r4
   b51e0:	f7ff fd9e 	bl	b4d20 <_ZN10LairdBt510C1ERKS_>
                end->~T();
   b51e4:	4630      	mov	r0, r6
   b51e6:	f7ff fd19 	bl	b4c1c <_ZN10LairdBt510D1Ev>
            for (; end != p; --end, --dest) {
   b51ea:	3e88      	subs	r6, #136	; 0x88
   b51ec:	3c88      	subs	r4, #136	; 0x88
   b51ee:	e7f2      	b.n	b51d6 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b51f0:	d00c      	beq.n	b520c <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b51f2:	42b5      	cmp	r5, r6
   b51f4:	d00a      	beq.n	b520c <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b51f6:	b11c      	cbz	r4, b5200 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b51f8:	4629      	mov	r1, r5
   b51fa:	4620      	mov	r0, r4
   b51fc:	f7ff fd90 	bl	b4d20 <_ZN10LairdBt510C1ERKS_>
                p->~T();
   b5200:	4628      	mov	r0, r5
   b5202:	f7ff fd0b 	bl	b4c1c <_ZN10LairdBt510D1Ev>
            for (; p != end; ++p, ++dest) {
   b5206:	3588      	adds	r5, #136	; 0x88
   b5208:	3488      	adds	r4, #136	; 0x88
   b520a:	e7f2      	b.n	b51f2 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5210 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE>:
void LairdBt510::addOrUpdate(const BleScanResult *scanResult) {
   b5210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b5214:	4c4b      	ldr	r4, [pc, #300]	; (b5344 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x134>)
   b5216:	b0e6      	sub	sp, #408	; 0x198
   b5218:	4606      	mov	r6, r0
   b521a:	2700      	movs	r7, #0
    return data_[i];
   b521c:	f04f 0888 	mov.w	r8, #136	; 0x88
    for (i = 0; i < beacons.size(); ++i)
   b5220:	6863      	ldr	r3, [r4, #4]
   b5222:	b2fd      	uxtb	r5, r7
   b5224:	429d      	cmp	r5, r3
   b5226:	da0d      	bge.n	b5244 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b5228:	6821      	ldr	r1, [r4, #0]
   b522a:	fb08 1105 	mla	r1, r8, r5, r1
    BleAddress getAddress() const { return address;}
   b522e:	3107      	adds	r1, #7
   b5230:	a844      	add	r0, sp, #272	; 0x110
   b5232:	f002 fa1f 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult))
   b5236:	4631      	mov	r1, r6
   b5238:	a844      	add	r0, sp, #272	; 0x110
   b523a:	f002 fa32 	bl	b76a2 <_ZNK8particle10BleAddresseqERKS0_>
   b523e:	3701      	adds	r7, #1
   b5240:	2800      	cmp	r0, #0
   b5242:	d0ed      	beq.n	b5220 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x10>
    if(i == beacons.size()) {
   b5244:	6863      	ldr	r3, [r4, #4]
   b5246:	429d      	cmp	r5, r3
   b5248:	d16e      	bne.n	b5328 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x118>
        rssi_count(0) {};
   b524a:	4b3f      	ldr	r3, [pc, #252]	; (b5348 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x138>)
   b524c:	9300      	str	r3, [sp, #0]
   b524e:	2301      	movs	r3, #1
   b5250:	f88d 3005 	strb.w	r3, [sp, #5]
   b5254:	f10d 0007 	add.w	r0, sp, #7
   b5258:	2308      	movs	r3, #8
   b525a:	2500      	movs	r5, #0
   b525c:	f88d 3006 	strb.w	r3, [sp, #6]
   b5260:	f002 fa33 	bl	b76ca <_ZN8particle10BleAddressC1Ev>
        configId_(0)
   b5264:	4b39      	ldr	r3, [pc, #228]	; (b534c <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x13c>)
   b5266:	9300      	str	r3, [sp, #0]
   b5268:	a80d      	add	r0, sp, #52	; 0x34
        capacity_(0) {
   b526a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b526e:	f8ad 5010 	strh.w	r5, [sp, #16]
   b5272:	f88d 5012 	strb.w	r5, [sp, #18]
   b5276:	950b      	str	r5, [sp, #44]	; 0x2c
   b5278:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
   b527c:	f002 fda2 	bl	b7dc4 <_ZN8particle13BlePeerDeviceC1Ev>
   b5280:	a80f      	add	r0, sp, #60	; 0x3c
   b5282:	f002 fcc3 	bl	b7c0c <_ZN8particle17BleCharacteristicC1Ev>
   b5286:	a811      	add	r0, sp, #68	; 0x44
   b5288:	f002 fcc0 	bl	b7c0c <_ZN8particle17BleCharacteristicC1Ev>
   b528c:	a813      	add	r0, sp, #76	; 0x4c
   b528e:	f7ff fc93 	bl	b4bb8 <_ZN16LairdBt510ConfigC1Ev>
        new_beacon.populateData(scanResult);
   b5292:	4631      	mov	r1, r6
   b5294:	4668      	mov	r0, sp
   b5296:	f8ad 5084 	strh.w	r5, [sp, #132]	; 0x84
   b529a:	f7ff feb3 	bl	b5004 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE>
        beacons.append(new_beacon);
   b529e:	4669      	mov	r1, sp
   b52a0:	a822      	add	r0, sp, #136	; 0x88
        new_beacon.missed_scan = 0;
   b52a2:	f88d 5004 	strb.w	r5, [sp, #4]
        beacons.append(new_beacon);
   b52a6:	f7ff fd3b 	bl	b4d20 <_ZN10LairdBt510C1ERKS_>
    return insert(size_, std::move(value));
   b52aa:	a922      	add	r1, sp, #136	; 0x88
   b52ac:	a844      	add	r0, sp, #272	; 0x110
   b52ae:	6866      	ldr	r6, [r4, #4]
   b52b0:	f7ff fd36 	bl	b4d20 <_ZN10LairdBt510C1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b52b4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b52b8:	429f      	cmp	r7, r3
   b52ba:	db15      	blt.n	b52e8 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xd8>
   b52bc:	3701      	adds	r7, #1
        if (n > 0) {
   b52be:	42af      	cmp	r7, r5
   b52c0:	dd0d      	ble.n	b52de <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xce>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b52c2:	f04f 0888 	mov.w	r8, #136	; 0x88
    return ::malloc(size);
   b52c6:	fb08 f007 	mul.w	r0, r8, r7
   b52ca:	f001 fedb 	bl	b7084 <malloc>
            if (!d) {
   b52ce:	4605      	mov	r5, r0
   b52d0:	b1f0      	cbz	r0, b5310 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x100>
            move(d, data_, data_ + size_);
   b52d2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b52d6:	fb08 1202 	mla	r2, r8, r2, r1
   b52da:	f7ff ff6e 	bl	b51ba <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b52de:	6820      	ldr	r0, [r4, #0]
   b52e0:	f001 fed8 	bl	b7094 <free>
        data_ = d;
   b52e4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b52e6:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b52e8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b52ea:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b52ec:	2288      	movs	r2, #136	; 0x88
   b52ee:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b52f2:	f106 0088 	add.w	r0, r6, #136	; 0x88
   b52f6:	fb02 3201 	mla	r2, r2, r1, r3
   b52fa:	4631      	mov	r1, r6
   b52fc:	f7ff ff5d 	bl	b51ba <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5300:	b11e      	cbz	r6, b530a <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xfa>
   b5302:	a944      	add	r1, sp, #272	; 0x110
   b5304:	4630      	mov	r0, r6
   b5306:	f7ff fd0b 	bl	b4d20 <_ZN10LairdBt510C1ERKS_>
    ++size_;
   b530a:	6863      	ldr	r3, [r4, #4]
   b530c:	3301      	adds	r3, #1
   b530e:	6063      	str	r3, [r4, #4]
    return insert(size_, std::move(value));
   b5310:	a844      	add	r0, sp, #272	; 0x110
   b5312:	f7ff fc83 	bl	b4c1c <_ZN10LairdBt510D1Ev>
   b5316:	a822      	add	r0, sp, #136	; 0x88
   b5318:	f7ff fc80 	bl	b4c1c <_ZN10LairdBt510D1Ev>
        LairdBt510 new_beacon;
   b531c:	4668      	mov	r0, sp
   b531e:	f7ff fc7d 	bl	b4c1c <_ZN10LairdBt510D1Ev>
}
   b5322:	b066      	add	sp, #408	; 0x198
   b5324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b5328:	2388      	movs	r3, #136	; 0x88
   b532a:	435d      	muls	r5, r3
   b532c:	6823      	ldr	r3, [r4, #0]
   b532e:	195c      	adds	r4, r3, r5
        beacon.newly_scanned = false;
   b5330:	2700      	movs	r7, #0
   b5332:	7167      	strb	r7, [r4, #5]
        beacon.populateData(scanResult);
   b5334:	595b      	ldr	r3, [r3, r5]
   b5336:	4631      	mov	r1, r6
   b5338:	685b      	ldr	r3, [r3, #4]
   b533a:	4620      	mov	r0, r4
   b533c:	4798      	blx	r3
        beacon.missed_scan = 0;
   b533e:	7127      	strb	r7, [r4, #4]
}
   b5340:	e7ef      	b.n	b5322 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x112>
   b5342:	bf00      	nop
   b5344:	2003e6a4 	.word	0x2003e6a4
   b5348:	000bb084 	.word	0x000bb084
   b534c:	000bb2a0 	.word	0x000bb2a0

000b5350 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5350:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5352:	b510      	push	{r4, lr}
      if (_M_empty())
   b5354:	b90a      	cbnz	r2, b535a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5356:	f005 f8f4 	bl	ba542 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b535a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b535e:	68c3      	ldr	r3, [r0, #12]
   b5360:	4718      	bx	r3

000b5362 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5362:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5364:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5366:	f100 0110 	add.w	r1, r0, #16
   b536a:	f7ff fff1 	bl	b5350 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b536e:	bd08      	pop	{r3, pc}

000b5370 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5370:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5372:	b510      	push	{r4, lr}
      if (_M_empty())
   b5374:	b90a      	cbnz	r2, b537a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5376:	f005 f8e4 	bl	ba542 <_ZSt25__throw_bad_function_callv>
    }
   b537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b537e:	68c3      	ldr	r3, [r0, #12]
   b5380:	4718      	bx	r3

000b5382 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5382:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5384:	6800      	ldr	r0, [r0, #0]
   b5386:	f100 0110 	add.w	r1, r0, #16
   b538a:	f7ff fff1 	bl	b5370 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b538e:	bd08      	pop	{r3, pc}

000b5390 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5390:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5392:	2300      	movs	r3, #0
   b5394:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5396:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5398:	4604      	mov	r4, r0
   b539a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b539c:	b12b      	cbz	r3, b53aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b539e:	2202      	movs	r2, #2
   b53a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b53a2:	68eb      	ldr	r3, [r5, #12]
   b53a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b53a6:	68ab      	ldr	r3, [r5, #8]
   b53a8:	60a3      	str	r3, [r4, #8]
    }
   b53aa:	4620      	mov	r0, r4
   b53ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b53b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b53b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53b2:	b089      	sub	sp, #36	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b53b4:	888b      	ldrh	r3, [r1, #4]
   b53b6:	680a      	ldr	r2, [r1, #0]
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b53b8:	6804      	ldr	r4, [r0, #0]
   b53ba:	f8ad 3004 	strh.w	r3, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b53be:	2000      	movs	r0, #0
   b53c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
      __a = _GLIBCXX_MOVE(__b);
   b53c4:	9200      	str	r2, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b53c6:	808b      	strh	r3, [r1, #4]
   b53c8:	6008      	str	r0, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b53ca:	f04f 0202 	mov.w	r2, #2
   b53ce:	e8d4 1f4f 	ldrexb	r1, [r4]
   b53d2:	4281      	cmp	r1, r0
   b53d4:	d103      	bne.n	b53de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   b53d6:	e8c4 2f45 	strexb	r5, r2, [r4]
   b53da:	2d00      	cmp	r5, #0
   b53dc:	d1f7      	bne.n	b53ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x1e>
        if (this->changeState(State::FAILED)) {
   b53de:	d127      	bne.n	b5430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x80>
      __a = _GLIBCXX_MOVE(__b);
   b53e0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b53e4:	f8ad 3004 	strh.w	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   b53e8:	9b00      	ldr	r3, [sp, #0]
   b53ea:	60e3      	str	r3, [r4, #12]
   b53ec:	8222      	strh	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b53ee:	9000      	str	r0, [sp, #0]
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
   b53f0:	2301      	movs	r3, #1
   b53f2:	f3bf 8f5b 	dmb	ish
   b53f6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b53f8:	f104 0308 	add.w	r3, r4, #8
   b53fc:	f3bf 8f5b 	dmb	ish
   b5400:	e853 6f00 	ldrex	r6, [r3]
   b5404:	e843 0200 	strex	r2, r0, [r3]
   b5408:	2a00      	cmp	r2, #0
   b540a:	d1f9      	bne.n	b5400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x50>
   b540c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5410:	b176      	cbz	r6, b5430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x80>
        return (application_thread_current(nullptr) != 0);
   b5412:	f001 fda3 	bl	b6f5c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5416:	b180      	cbz	r0, b543a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5418:	f104 010c 	add.w	r1, r4, #12
   b541c:	4630      	mov	r0, r6
   b541e:	f7ff ff97 	bl	b5350 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5422:	4630      	mov	r0, r6
   b5424:	f7ff fad6 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5428:	2110      	movs	r1, #16
   b542a:	4630      	mov	r0, r6
   b542c:	f7fe fe35 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b5430:	4668      	mov	r0, sp
   b5432:	f7ff faf6 	bl	b4a22 <_ZN8particle5ErrorD1Ev>
    }
   b5436:	b009      	add	sp, #36	; 0x24
   b5438:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b543a:	4631      	mov	r1, r6
   b543c:	a802      	add	r0, sp, #8
   b543e:	f7ff ffa7 	bl	b5390 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5442:	68e0      	ldr	r0, [r4, #12]
   b5444:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5448:	b108      	cbz	r0, b544e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x9e>
   b544a:	f005 fd5b 	bl	baf04 <strdup>
        type_(type) {
   b544e:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5450:	2010      	movs	r0, #16
   b5452:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5456:	f7fe fe1c 	bl	b4092 <_Znwj>
   b545a:	4605      	mov	r5, r0
   b545c:	b310      	cbz	r0, b54a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>
    _Function_base() : _M_manager(nullptr) { }
   b545e:	2700      	movs	r7, #0
   b5460:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5462:	2018      	movs	r0, #24
   b5464:	f7fe fe15 	bl	b4092 <_Znwj>
   b5468:	4604      	mov	r4, r0
   b546a:	b1b0      	cbz	r0, b549a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xea>
    _Function_base() : _M_manager(nullptr) { }
   b546c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b546e:	4601      	mov	r1, r0
   b5470:	a802      	add	r0, sp, #8
   b5472:	f7ff fe90 	bl	b5196 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5476:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5478:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b547a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b547c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b547e:	9204      	str	r2, [sp, #16]
   b5480:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5482:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5484:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   b5488:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b548a:	f64f 739c 	movw	r3, #65436	; 0xff9c
   b548e:	f8ad 301c 	strh.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5492:	9b06      	ldr	r3, [sp, #24]
   b5494:	9205      	str	r2, [sp, #20]
   b5496:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5498:	9706      	str	r7, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b549a:	4b08      	ldr	r3, [pc, #32]	; (b54bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10c>)
   b549c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b549e:	4b08      	ldr	r3, [pc, #32]	; (b54c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54a0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b54a2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b54a4:	a806      	add	r0, sp, #24
   b54a6:	f7ff fabc 	bl	b4a22 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b54aa:	a802      	add	r0, sp, #8
   b54ac:	f7ff fa92 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b54b0:	2200      	movs	r2, #0
   b54b2:	4629      	mov	r1, r5
   b54b4:	4803      	ldr	r0, [pc, #12]	; (b54c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x114>)
   b54b6:	f001 fd59 	bl	b6f6c <application_thread_invoke>
   b54ba:	e7b2      	b.n	b5422 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
   b54bc:	000b5363 	.word	0x000b5363
   b54c0:	000b54c9 	.word	0x000b54c9
   b54c4:	000b9ee5 	.word	0x000b9ee5

000b54c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b54c8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b54ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54cc:	4605      	mov	r5, r0
	switch (__op)
   b54ce:	d103      	bne.n	b54d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b54d0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b54d2:	6003      	str	r3, [r0, #0]
      }
   b54d4:	2000      	movs	r0, #0
   b54d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b54d8:	2a02      	cmp	r2, #2
   b54da:	d010      	beq.n	b54fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b54dc:	2a03      	cmp	r2, #3
   b54de:	d1f9      	bne.n	b54d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b54e0:	6804      	ldr	r4, [r0, #0]
   b54e2:	2c00      	cmp	r4, #0
   b54e4:	d0f6      	beq.n	b54d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b54e6:	f104 0010 	add.w	r0, r4, #16
   b54ea:	f7ff fa9a 	bl	b4a22 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b54ee:	4620      	mov	r0, r4
   b54f0:	f7ff fa70 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b54f4:	2118      	movs	r1, #24
   b54f6:	4620      	mov	r0, r4
   b54f8:	f7fe fdcf 	bl	b409a <_ZdlPvj>
   b54fc:	e7ea      	b.n	b54d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b54fe:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5500:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5502:	f7fe fdc6 	bl	b4092 <_Znwj>
   b5506:	4604      	mov	r4, r0
   b5508:	b150      	cbz	r0, b5520 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b550a:	4631      	mov	r1, r6
   b550c:	f7ff ff40 	bl	b5390 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5510:	6930      	ldr	r0, [r6, #16]
   b5512:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5516:	b108      	cbz	r0, b551c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5518:	f005 fcf4 	bl	baf04 <strdup>
        type_(type) {
   b551c:	6120      	str	r0, [r4, #16]
   b551e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5520:	602c      	str	r4, [r5, #0]
	}
   b5522:	e7d7      	b.n	b54d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5524 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5524:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5526:	2300      	movs	r3, #0
   b5528:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b552a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b552c:	4604      	mov	r4, r0
   b552e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5530:	b12b      	cbz	r3, b553e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5532:	2202      	movs	r2, #2
   b5534:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5536:	68eb      	ldr	r3, [r5, #12]
   b5538:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b553a:	68ab      	ldr	r3, [r5, #8]
   b553c:	60a3      	str	r3, [r4, #8]
    }
   b553e:	4620      	mov	r0, r4
   b5540:	bd38      	pop	{r3, r4, r5, pc}

000b5542 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5542:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5544:	b570      	push	{r4, r5, r6, lr}
   b5546:	4604      	mov	r4, r0
	switch (__op)
   b5548:	d103      	bne.n	b5552 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b554a:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b554c:	6003      	str	r3, [r0, #0]
      }
   b554e:	2000      	movs	r0, #0
   b5550:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5552:	2a02      	cmp	r2, #2
   b5554:	d00c      	beq.n	b5570 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5556:	2a03      	cmp	r2, #3
   b5558:	d1f9      	bne.n	b554e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b555a:	6804      	ldr	r4, [r0, #0]
   b555c:	2c00      	cmp	r4, #0
   b555e:	d0f6      	beq.n	b554e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5560:	4620      	mov	r0, r4
   b5562:	f7ff fa37 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5566:	2114      	movs	r1, #20
   b5568:	4620      	mov	r0, r4
   b556a:	f7fe fd96 	bl	b409a <_ZdlPvj>
   b556e:	e7ee      	b.n	b554e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5570:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5572:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5574:	f7fe fd8d 	bl	b4092 <_Znwj>
   b5578:	4605      	mov	r5, r0
   b557a:	b120      	cbz	r0, b5586 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b557c:	4631      	mov	r1, r6
   b557e:	f7ff ffd1 	bl	b5524 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5582:	7c33      	ldrb	r3, [r6, #16]
   b5584:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5586:	6025      	str	r5, [r4, #0]
	}
   b5588:	e7e1      	b.n	b554e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b558c <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb>:
template<typename ResultT, typename ContextT = detail::FutureContext>
class Promise: public PromiseBase<ResultT, ContextT> {
public:
    using PromiseBase<ResultT, ContextT>::PromiseBase;

    void setResult(ResultT result) {
   b558c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b558e:	6804      	ldr	r4, [r0, #0]
   b5590:	b087      	sub	sp, #28
   b5592:	2301      	movs	r3, #1
   b5594:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5598:	2a00      	cmp	r2, #0
   b559a:	d103      	bne.n	b55a4 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x18>
   b559c:	e8c4 3f40 	strexb	r0, r3, [r4]
   b55a0:	2800      	cmp	r0, #0
   b55a2:	d1f7      	bne.n	b5594 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x8>
        if (this->changeState(State::SUCCEEDED)) {
   b55a4:	d154      	bne.n	b5650 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc4>
            new(&result_) ResultT(std::move(result));
   b55a6:	7321      	strb	r1, [r4, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b55a8:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b55ac:	2000      	movs	r0, #0
	__atomic_store_n(&_M_i, __i, int(__m));
   b55ae:	7063      	strb	r3, [r4, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b55b0:	1d23      	adds	r3, r4, #4
   b55b2:	f3bf 8f5b 	dmb	ish
   b55b6:	e853 6f00 	ldrex	r6, [r3]
   b55ba:	e843 0200 	strex	r2, r0, [r3]
   b55be:	2a00      	cmp	r2, #0
   b55c0:	d1f9      	bne.n	b55b6 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x2a>
   b55c2:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b55c6:	2e00      	cmp	r6, #0
   b55c8:	d042      	beq.n	b5650 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc4>
        return (application_thread_current(nullptr) != 0);
   b55ca:	f001 fcc7 	bl	b6f5c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b55ce:	4607      	mov	r7, r0
   b55d0:	b170      	cbz	r0, b55f0 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x64>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b55d2:	f104 010c 	add.w	r1, r4, #12
   b55d6:	4630      	mov	r0, r6
   b55d8:	f7ff feca 	bl	b5370 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b55dc:	4630      	mov	r0, r6
   b55de:	f7ff f9f9 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b55e2:	2110      	movs	r1, #16
   b55e4:	4630      	mov	r0, r6
        this->p_->setResult(std::move(result));
    }
   b55e6:	b007      	add	sp, #28
   b55e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            delete callbackPtr;
   b55ec:	f7fe bd55 	b.w	b409a <_ZdlPvj>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b55f0:	4631      	mov	r1, r6
   b55f2:	a801      	add	r0, sp, #4
   b55f4:	f7ff ff96 	bl	b5524 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b55f8:	7b23      	ldrb	r3, [r4, #12]
   b55fa:	f88d 3014 	strb.w	r3, [sp, #20]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b55fe:	2010      	movs	r0, #16
   b5600:	f7fe fd47 	bl	b4092 <_Znwj>
   b5604:	4605      	mov	r5, r0
   b5606:	b1d0      	cbz	r0, b563e <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xb2>
    _Function_base() : _M_manager(nullptr) { }
   b5608:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b560a:	2014      	movs	r0, #20
   b560c:	f7fe fd41 	bl	b4092 <_Znwj>
   b5610:	4604      	mov	r4, r0
   b5612:	b178      	cbz	r0, b5634 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xa8>
    _Function_base() : _M_manager(nullptr) { }
   b5614:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5616:	4601      	mov	r1, r0
   b5618:	a801      	add	r0, sp, #4
   b561a:	f7ff fdbc 	bl	b5196 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b561e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5620:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5622:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5624:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5626:	9203      	str	r2, [sp, #12]
   b5628:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b562a:	60e3      	str	r3, [r4, #12]
   b562c:	f89d 3014 	ldrb.w	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5630:	9204      	str	r2, [sp, #16]
   b5632:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5634:	4b07      	ldr	r3, [pc, #28]	; (b5654 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc8>)
   b5636:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5638:	4b07      	ldr	r3, [pc, #28]	; (b5658 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xcc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b563a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b563c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b563e:	a801      	add	r0, sp, #4
   b5640:	f7ff f9c8 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5644:	2200      	movs	r2, #0
   b5646:	4629      	mov	r1, r5
   b5648:	4804      	ldr	r0, [pc, #16]	; (b565c <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xd0>)
   b564a:	f001 fc8f 	bl	b6f6c <application_thread_invoke>
   b564e:	e7c5      	b.n	b55dc <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x50>
    }
   b5650:	b007      	add	sp, #28
   b5652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5654:	000b5383 	.word	0x000b5383
   b5658:	000b5543 	.word	0x000b5543
   b565c:	000b9ee5 	.word	0x000b9ee5

000b5660 <_ZN10LairdBt5104loopEv>:
void LairdBt510::loop() {
   b5660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static unsigned int timer = System.uptime();
   b5664:	4d9d      	ldr	r5, [pc, #628]	; (b58dc <_ZN10LairdBt5104loopEv+0x27c>)
void LairdBt510::loop() {
   b5666:	b089      	sub	sp, #36	; 0x24
    static unsigned int timer = System.uptime();
   b5668:	782b      	ldrb	r3, [r5, #0]
   b566a:	f3bf 8f5b 	dmb	ish
   b566e:	07db      	lsls	r3, r3, #31
void LairdBt510::loop() {
   b5670:	af00      	add	r7, sp, #0
   b5672:	4604      	mov	r4, r0
    static unsigned int timer = System.uptime();
   b5674:	d40a      	bmi.n	b568c <_ZN10LairdBt5104loopEv+0x2c>
   b5676:	4628      	mov	r0, r5
   b5678:	f7fe fd11 	bl	b409e <__cxa_guard_acquire>
   b567c:	b130      	cbz	r0, b568c <_ZN10LairdBt5104loopEv+0x2c>
   b567e:	f7ff f9c6 	bl	b4a0e <_ZN11SystemClass6uptimeEv>
   b5682:	4b97      	ldr	r3, [pc, #604]	; (b58e0 <_ZN10LairdBt5104loopEv+0x280>)
   b5684:	6018      	str	r0, [r3, #0]
   b5686:	4628      	mov	r0, r5
   b5688:	f7fe fd0e 	bl	b40a8 <__cxa_guard_release>
    if (state_ != prev_state_ || timer != System.uptime()) {
   b568c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   b5690:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   b5694:	429a      	cmp	r2, r3
   b5696:	d00e      	beq.n	b56b6 <_ZN10LairdBt5104loopEv+0x56>
        prev_state_ = state_;
   b5698:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b569c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        switch (state_)
   b56a0:	3b01      	subs	r3, #1
   b56a2:	2b05      	cmp	r3, #5
   b56a4:	d846      	bhi.n	b5734 <_ZN10LairdBt5104loopEv+0xd4>
   b56a6:	e8df f013 	tbh	[pc, r3, lsl #1]
   b56aa:	0010      	.short	0x0010
   b56ac:	004a003b 	.word	0x004a003b
   b56b0:	00e500ef 	.word	0x00e500ef
   b56b4:	0111      	.short	0x0111
    if (state_ != prev_state_ || timer != System.uptime()) {
   b56b6:	f7ff f9aa 	bl	b4a0e <_ZN11SystemClass6uptimeEv>
   b56ba:	4b89      	ldr	r3, [pc, #548]	; (b58e0 <_ZN10LairdBt5104loopEv+0x280>)
   b56bc:	681b      	ldr	r3, [r3, #0]
   b56be:	4298      	cmp	r0, r3
   b56c0:	d1ea      	bne.n	b5698 <_ZN10LairdBt5104loopEv+0x38>
}
   b56c2:	3724      	adds	r7, #36	; 0x24
   b56c4:	46bd      	mov	sp, r7
   b56c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            peer_ = BLE.connect(getAddress(), false);
   b56ca:	f002 fc2b 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
    BleAddress getAddress() const { return address;}
   b56ce:	1de1      	adds	r1, r4, #7
   b56d0:	4605      	mov	r5, r0
   b56d2:	4638      	mov	r0, r7
   b56d4:	f001 ffce 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
   b56d8:	2300      	movs	r3, #0
   b56da:	4629      	mov	r1, r5
   b56dc:	463a      	mov	r2, r7
   b56de:	f107 000c 	add.w	r0, r7, #12
   b56e2:	f003 ff27 	bl	b9534 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b56e6:	68fb      	ldr	r3, [r7, #12]
   b56e8:	693d      	ldr	r5, [r7, #16]
   b56ea:	6363      	str	r3, [r4, #52]	; 0x34
	if (__tmp != _M_pi)
   b56ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b56ee:	429d      	cmp	r5, r3
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b56f0:	f104 0634 	add.w	r6, r4, #52	; 0x34
   b56f4:	d008      	beq.n	b5708 <_ZN10LairdBt5104loopEv+0xa8>
	    if (__tmp != 0)
   b56f6:	b115      	cbz	r5, b56fe <_ZN10LairdBt5104loopEv+0x9e>
    { ++_M_use_count; }
   b56f8:	686b      	ldr	r3, [r5, #4]
   b56fa:	3301      	adds	r3, #1
   b56fc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b56fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   b5700:	b108      	cbz	r0, b5706 <_ZN10LairdBt5104loopEv+0xa6>
	      _M_pi->_M_release();
   b5702:	f7ff f970 	bl	b49e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5706:	63a5      	str	r5, [r4, #56]	; 0x38
   b5708:	f107 000c 	add.w	r0, r7, #12
   b570c:	f002 fd1d 	bl	b814a <_ZN8particle13BlePeerDeviceD1Ev>
            if (peer_.connected()) {
   b5710:	4630      	mov	r0, r6
   b5712:	f002 fb79 	bl	b7e08 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5716:	b168      	cbz	r0, b5734 <_ZN10LairdBt5104loopEv+0xd4>
                state_ = PAIRING;
   b5718:	2302      	movs	r3, #2
                state_ = DISCONNECT;
   b571a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b571e:	e009      	b.n	b5734 <_ZN10LairdBt5104loopEv+0xd4>
            BLE.startPairing(peer_);
   b5720:	f002 fc00 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5724:	f104 0134 	add.w	r1, r4, #52	; 0x34
   b5728:	f002 fc71 	bl	b800e <_ZNK8particle14BleLocalDevice12startPairingERKNS_13BlePeerDeviceE>
            Log.trace("Pairing");
   b572c:	496d      	ldr	r1, [pc, #436]	; (b58e4 <_ZN10LairdBt5104loopEv+0x284>)
   b572e:	486e      	ldr	r0, [pc, #440]	; (b58e8 <_ZN10LairdBt5104loopEv+0x288>)
   b5730:	f7ff f9cc 	bl	b4acc <_ZNK5spark6Logger5traceEPKcz>
        timer = System.uptime();
   b5734:	f7ff f96b 	bl	b4a0e <_ZN11SystemClass6uptimeEv>
   b5738:	4b69      	ldr	r3, [pc, #420]	; (b58e0 <_ZN10LairdBt5104loopEv+0x280>)
   b573a:	6018      	str	r0, [r3, #0]
}
   b573c:	e7c1      	b.n	b56c2 <_ZN10LairdBt5104loopEv+0x62>
            peer_.discoverAllServices();
   b573e:	f104 0934 	add.w	r9, r4, #52	; 0x34
   b5742:	4649      	mov	r1, r9
   b5744:	f107 000c 	add.w	r0, r7, #12
   b5748:	f003 fc46 	bl	b8fd8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
    destruct(data_, data_ + size_);
   b574c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
            break;
   b5750:	46e8      	mov	r8, sp
   b5752:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5756:	42ae      	cmp	r6, r5
   b5758:	d004      	beq.n	b5764 <_ZN10LairdBt5104loopEv+0x104>
      ~__shared_ptr() = default;
   b575a:	1d28      	adds	r0, r5, #4
   b575c:	f7ff fa48 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5760:	3508      	adds	r5, #8
   b5762:	e7f8      	b.n	b5756 <_ZN10LairdBt5104loopEv+0xf6>
    ::free(ptr);
   b5764:	68f8      	ldr	r0, [r7, #12]
   b5766:	f001 fc95 	bl	b7094 <free>
            peer_.discoverAllCharacteristics();
   b576a:	4649      	mov	r1, r9
   b576c:	f107 000c 	add.w	r0, r7, #12
   b5770:	f003 fe1e 	bl	b93b0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
    destruct(data_, data_ + size_);
   b5774:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
   b5778:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b577c:	42ae      	cmp	r6, r5
   b577e:	d004      	beq.n	b578a <_ZN10LairdBt5104loopEv+0x12a>
            p->~T();
   b5780:	4628      	mov	r0, r5
   b5782:	f002 fcdb 	bl	b813c <_ZN8particle17BleCharacteristicD1Ev>
        for (; p != end; ++p) {
   b5786:	3508      	adds	r5, #8
   b5788:	e7f8      	b.n	b577c <_ZN10LairdBt5104loopEv+0x11c>
    ::free(ptr);
   b578a:	68f8      	ldr	r0, [r7, #12]
   b578c:	f001 fc82 	bl	b7094 <free>
            peer_.getCharacteristicByUUID(rx, BleUuid("569a2001-b87f-490c-92cb-11ba5ea5167c"));
   b5790:	f104 0644 	add.w	r6, r4, #68	; 0x44
   b5794:	4955      	ldr	r1, [pc, #340]	; (b58ec <_ZN10LairdBt5104loopEv+0x28c>)
   b5796:	f107 000c 	add.w	r0, r7, #12
   b579a:	f002 f8e7 	bl	b796c <_ZN8particle7BleUuidC1EPKc>
   b579e:	f107 020c 	add.w	r2, r7, #12
   b57a2:	4631      	mov	r1, r6
   b57a4:	4648      	mov	r0, r9
   b57a6:	f003 fb59 	bl	b8e5c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
            peer_.getCharacteristicByUUID(tx, BleUuid("569a2000-b87f-490c-92cb-11ba5ea5167c"));
   b57aa:	f104 053c 	add.w	r5, r4, #60	; 0x3c
   b57ae:	4950      	ldr	r1, [pc, #320]	; (b58f0 <_ZN10LairdBt5104loopEv+0x290>)
   b57b0:	f107 000c 	add.w	r0, r7, #12
   b57b4:	f002 f8da 	bl	b796c <_ZN8particle7BleUuidC1EPKc>
   b57b8:	4629      	mov	r1, r5
   b57ba:	f107 020c 	add.w	r2, r7, #12
   b57be:	4648      	mov	r0, r9
   b57c0:	f003 fb4c 	bl	b8e5c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
            tx.onDataReceived(onDataReceived, this);
   b57c4:	4622      	mov	r2, r4
   b57c6:	4628      	mov	r0, r5
   b57c8:	494a      	ldr	r1, [pc, #296]	; (b58f4 <_ZN10LairdBt5104loopEv+0x294>)
   b57ca:	f003 fb71 	bl	b8eb0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
            tx.subscribe(true);
   b57ce:	2101      	movs	r1, #1
   b57d0:	4628      	mov	r0, r5
   b57d2:	f002 faa1 	bl	b7d18 <_ZNK8particle17BleCharacteristic9subscribeEb>
        state_(BEGIN) {
   b57d6:	2500      	movs	r5, #0
    JSONVectorWriter(): v_(Vector<char>()) {}
   b57d8:	4b47      	ldr	r3, [pc, #284]	; (b58f8 <_ZN10LairdBt5104loopEv+0x298>)
   b57da:	60fb      	str	r3, [r7, #12]
            config_.createJson(writer_, configId_);
   b57dc:	f104 0284 	add.w	r2, r4, #132	; 0x84
   b57e0:	f107 010c 	add.w	r1, r7, #12
   b57e4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
        capacity_(0) {
   b57e8:	e9c7 5505 	strd	r5, r5, [r7, #20]
   b57ec:	743d      	strb	r5, [r7, #16]
   b57ee:	61fd      	str	r5, [r7, #28]
   b57f0:	f7ff fb16 	bl	b4e20 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt>
            char buf[writer_.vectorSize()];
   b57f4:	69bb      	ldr	r3, [r7, #24]
   b57f6:	3307      	adds	r3, #7
   b57f8:	f023 0307 	bic.w	r3, r3, #7
   b57fc:	ebad 0d03 	sub.w	sp, sp, r3
   b5800:	46e9      	mov	r9, sp
            for (size_t i = 0; i < writer_.vectorSize(); ++i) {
   b5802:	69bb      	ldr	r3, [r7, #24]
   b5804:	429d      	cmp	r5, r3
   b5806:	d20d      	bcs.n	b5824 <_ZN10LairdBt5104loopEv+0x1c4>
    Vector<char> vector() const {return v_;}
   b5808:	f107 0114 	add.w	r1, r7, #20
   b580c:	4638      	mov	r0, r7
   b580e:	f7ff fa6a 	bl	b4ce6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
                buf[i] = writer_.vector().at(i);
   b5812:	683b      	ldr	r3, [r7, #0]
   b5814:	5d5b      	ldrb	r3, [r3, r5]
   b5816:	f809 3005 	strb.w	r3, [r9, r5]
   b581a:	4638      	mov	r0, r7
   b581c:	f7ff f9f7 	bl	b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
            for (size_t i = 0; i < writer_.vectorSize(); ++i) {
   b5820:	3501      	adds	r5, #1
   b5822:	e7ee      	b.n	b5802 <_ZN10LairdBt5104loopEv+0x1a2>
            Log.trace("Send value: %s", buf);
   b5824:	464a      	mov	r2, r9
   b5826:	4935      	ldr	r1, [pc, #212]	; (b58fc <_ZN10LairdBt5104loopEv+0x29c>)
   b5828:	482f      	ldr	r0, [pc, #188]	; (b58e8 <_ZN10LairdBt5104loopEv+0x288>)
   b582a:	f7ff f94f 	bl	b4acc <_ZNK5spark6Logger5traceEPKcz>
    Vector<char> vector() const {return v_;}
   b582e:	f107 0114 	add.w	r1, r7, #20
   b5832:	4638      	mov	r0, r7
   b5834:	f7ff fa57 	bl	b4ce6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
            Log.trace("set value return: %d",rx.setValue(reinterpret_cast<const uint8_t*>(writer_.vector().data()), writer_.vectorSize(), BleTxRxType::ACK));
   b5838:	2301      	movs	r3, #1
   b583a:	69ba      	ldr	r2, [r7, #24]
   b583c:	6839      	ldr	r1, [r7, #0]
   b583e:	4630      	mov	r0, r6
   b5840:	f002 fa0a 	bl	b7c58 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5844:	492e      	ldr	r1, [pc, #184]	; (b5900 <_ZN10LairdBt5104loopEv+0x2a0>)
   b5846:	4602      	mov	r2, r0
   b5848:	4827      	ldr	r0, [pc, #156]	; (b58e8 <_ZN10LairdBt5104loopEv+0x288>)
   b584a:	f7ff f93f 	bl	b4acc <_ZNK5spark6Logger5traceEPKcz>
   b584e:	4638      	mov	r0, r7
   b5850:	f7ff f9dd 	bl	b4c0e <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
            if (state_ == SENDING) {
   b5854:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b5858:	2b03      	cmp	r3, #3
   b585a:	d105      	bne.n	b5868 <_ZN10LairdBt5104loopEv+0x208>
                state_ = RECEIVING;
   b585c:	2305      	movs	r3, #5
   b585e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                timeout = 0;
   b5862:	4b28      	ldr	r3, [pc, #160]	; (b5904 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5864:	2200      	movs	r2, #0
   b5866:	701a      	strb	r2, [r3, #0]
            JSONVectorWriter writer_;
   b5868:	f107 000c 	add.w	r0, r7, #12
   b586c:	f7ff f9f6 	bl	b4c5c <_ZN16JSONVectorWriterD1Ev>
   b5870:	46c5      	mov	sp, r8
   b5872:	e75f      	b.n	b5734 <_ZN10LairdBt5104loopEv+0xd4>
            if (++timeout > RECEIVE_TIMEOUT_LOOPS) {
   b5874:	4a23      	ldr	r2, [pc, #140]	; (b5904 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5876:	7813      	ldrb	r3, [r2, #0]
   b5878:	3301      	adds	r3, #1
   b587a:	b2db      	uxtb	r3, r3
   b587c:	2b14      	cmp	r3, #20
   b587e:	7013      	strb	r3, [r2, #0]
   b5880:	f67f af58 	bls.w	b5734 <_ZN10LairdBt5104loopEv+0xd4>
                state_ = DISCONNECT;
   b5884:	2304      	movs	r3, #4
   b5886:	e748      	b.n	b571a <_ZN10LairdBt5104loopEv+0xba>
            auto p = Promise<bool>::fromDataPtr(handler_data_);
   b5888:	6961      	ldr	r1, [r4, #20]
   b588a:	4638      	mov	r0, r7
   b588c:	f7ff f9fc 	bl	b4c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
            if (timeout > RECEIVE_TIMEOUT_LOOPS) {
   b5890:	4b1c      	ldr	r3, [pc, #112]	; (b5904 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5892:	781b      	ldrb	r3, [r3, #0]
   b5894:	2b14      	cmp	r3, #20
   b5896:	d914      	bls.n	b58c2 <_ZN10LairdBt5104loopEv+0x262>
        type_(type) {
   b5898:	2300      	movs	r3, #0
   b589a:	60fb      	str	r3, [r7, #12]
                p.setError(Error::TIMEOUT);
   b589c:	4638      	mov	r0, r7
   b589e:	f64f 7360 	movw	r3, #65376	; 0xff60
   b58a2:	f107 010c 	add.w	r1, r7, #12
   b58a6:	823b      	strh	r3, [r7, #16]
   b58a8:	f7ff fd82 	bl	b53b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b58ac:	f107 000c 	add.w	r0, r7, #12
   b58b0:	f7ff f8b7 	bl	b4a22 <_ZN8particle5ErrorD1Ev>
            state_ = CLEANUP;
   b58b4:	2306      	movs	r3, #6
   b58b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b58ba:	1d38      	adds	r0, r7, #4
   b58bc:	f7ff f998 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b58c0:	e738      	b.n	b5734 <_ZN10LairdBt5104loopEv+0xd4>
                p.setResult(true);
   b58c2:	2101      	movs	r1, #1
   b58c4:	4638      	mov	r0, r7
   b58c6:	f7ff fe61 	bl	b558c <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb>
   b58ca:	e7f3      	b.n	b58b4 <_ZN10LairdBt5104loopEv+0x254>
            state_ = IDLE;
   b58cc:	2300      	movs	r3, #0
   b58ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            peer_.disconnect();
   b58d2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b58d6:	f003 f8b3 	bl	b8a40 <_ZNK8particle13BlePeerDevice10disconnectEv>
            break;
   b58da:	e72b      	b.n	b5734 <_ZN10LairdBt5104loopEv+0xd4>
   b58dc:	2003e698 	.word	0x2003e698
   b58e0:	2003e6b0 	.word	0x2003e6b0
   b58e4:	000bb201 	.word	0x000bb201
   b58e8:	2003e6f8 	.word	0x2003e6f8
   b58ec:	000bb209 	.word	0x000bb209
   b58f0:	000bb22e 	.word	0x000bb22e
   b58f4:	000b4afd 	.word	0x000b4afd
   b58f8:	000bb280 	.word	0x000bb280
   b58fc:	000bb253 	.word	0x000bb253
   b5900:	000bb262 	.word	0x000bb262
   b5904:	2003e6b4 	.word	0x2003e6b4

000b5908 <_GLOBAL__sub_I__ZN10LairdBt51014_eventCallbackE>:
   b5908:	4b02      	ldr	r3, [pc, #8]	; (b5914 <_GLOBAL__sub_I__ZN10LairdBt51014_eventCallbackE+0xc>)
   b590a:	2200      	movs	r2, #0
   b590c:	e9c3 2200 	strd	r2, r2, [r3]
   b5910:	609a      	str	r2, [r3, #8]
        {};
   b5912:	4770      	bx	lr
   b5914:	2003e6a4 	.word	0x2003e6a4

000b5918 <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE>:
#include "iBeacon-scan.h"

Vector<iBeaconScan> iBeaconScan::beacons;

void iBeaconScan::populateData(const BleScanResult *scanResult)
{
   b5918:	b530      	push	{r4, r5, lr}
   b591a:	4604      	mov	r4, r0
   b591c:	b099      	sub	sp, #100	; 0x64
   b591e:	460d      	mov	r5, r1
    Beacon::populateData(scanResult);
   b5920:	f7fe fbc5 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b5924:	4629      	mov	r1, r5
   b5926:	1de0      	adds	r0, r4, #7
   b5928:	f001 fea9 	bl	b767e <_ZN8particle10BleAddressaSERKS0_>
    uint8_t custom_data[BLE_MAX_ADV_DATA_LEN];
    ADVERTISING_DATA(scanResult).customData(custom_data, sizeof(custom_data));
   b592c:	a910      	add	r1, sp, #64	; 0x40
   b592e:	221f      	movs	r2, #31
   b5930:	f105 0008 	add.w	r0, r5, #8
   b5934:	f002 f906 	bl	b7b44 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
    snprintf(uuid, sizeof(uuid), "%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X",
   b5938:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   b593c:	930e      	str	r3, [sp, #56]	; 0x38
   b593e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
   b5942:	930d      	str	r3, [sp, #52]	; 0x34
   b5944:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   b5948:	930c      	str	r3, [sp, #48]	; 0x30
   b594a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   b594e:	930b      	str	r3, [sp, #44]	; 0x2c
   b5950:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   b5954:	930a      	str	r3, [sp, #40]	; 0x28
   b5956:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   b595a:	9309      	str	r3, [sp, #36]	; 0x24
   b595c:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
   b5960:	9308      	str	r3, [sp, #32]
   b5962:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   b5966:	9307      	str	r3, [sp, #28]
   b5968:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
   b596c:	9306      	str	r3, [sp, #24]
   b596e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   b5972:	9305      	str	r3, [sp, #20]
   b5974:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   b5978:	9304      	str	r3, [sp, #16]
   b597a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   b597e:	9303      	str	r3, [sp, #12]
   b5980:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   b5984:	9302      	str	r3, [sp, #8]
   b5986:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
   b598a:	9301      	str	r3, [sp, #4]
   b598c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   b5990:	9300      	str	r3, [sp, #0]
   b5992:	4a0e      	ldr	r2, [pc, #56]	; (b59cc <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE+0xb4>)
   b5994:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   b5998:	2125      	movs	r1, #37	; 0x25
   b599a:	f104 0013 	add.w	r0, r4, #19
   b599e:	f001 fb89 	bl	b70b4 <snprintf>
                custom_data[4], custom_data[5], custom_data[6], custom_data[7], custom_data[8], custom_data[9], custom_data[10], custom_data[11], custom_data[12],
                custom_data[13], custom_data[14], custom_data[15], custom_data[16], custom_data[17], custom_data[18], custom_data[19]);
    major = custom_data[20] * 256 + custom_data[21];
   b59a2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b59a6:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   b59aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b59ae:	8723      	strh	r3, [r4, #56]	; 0x38
    minor = custom_data[22] * 256 + custom_data[23];
   b59b0:	f89d 2056 	ldrb.w	r2, [sp, #86]	; 0x56
   b59b4:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   b59b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b59bc:	8763      	strh	r3, [r4, #58]	; 0x3a
    power = (int8_t)custom_data[24];
   b59be:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b59c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
   b59c6:	b019      	add	sp, #100	; 0x64
   b59c8:	bd30      	pop	{r4, r5, pc}
   b59ca:	bf00      	nop
   b59cc:	000bb2a8 	.word	0x000bb2a8

000b59d0 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE>:
    }
    return false;
}

void iBeaconScan::toJson(JSONWriter *writer) const
{
   b59d0:	b570      	push	{r4, r5, r6, lr}
   b59d2:	b086      	sub	sp, #24
   b59d4:	460c      	mov	r4, r1
   b59d6:	4605      	mov	r5, r0
        writer->name(address.toString()).beginObject();
   b59d8:	1dc1      	adds	r1, r0, #7
   b59da:	2200      	movs	r2, #0
   b59dc:	a802      	add	r0, sp, #8
   b59de:	f001 fedb 	bl	b7798 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b59e2:	9a04      	ldr	r2, [sp, #16]
   b59e4:	9902      	ldr	r1, [sp, #8]
   b59e6:	4620      	mov	r0, r4
   b59e8:	f004 fc94 	bl	ba314 <_ZN5spark10JSONWriter4nameEPKcj>
   b59ec:	f004 fbd8 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
   b59f0:	a802      	add	r0, sp, #8
   b59f2:	f001 fbdf 	bl	b71b4 <_ZN6StringD1Ev>
        writer->name("uuid").value(getUuid());
   b59f6:	491c      	ldr	r1, [pc, #112]	; (b5a68 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0x98>)
   b59f8:	4620      	mov	r0, r4
   b59fa:	f7fe fd91 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
    iBeaconScan() : Beacon(SCAN_IBEACON) {};
    ~iBeaconScan() = default;

    void toJson(JSONWriter *writer) const override;

    const char* getUuid() const {return uuid;};
   b59fe:	f105 0113 	add.w	r1, r5, #19
   b5a02:	4606      	mov	r6, r0
    return value(val, strlen(val));
   b5a04:	4608      	mov	r0, r1
   b5a06:	9101      	str	r1, [sp, #4]
   b5a08:	f005 fa99 	bl	baf3e <strlen>
   b5a0c:	9901      	ldr	r1, [sp, #4]
   b5a0e:	4602      	mov	r2, r0
   b5a10:	4630      	mov	r0, r6
   b5a12:	f004 fc8f 	bl	ba334 <_ZN5spark10JSONWriter5valueEPKcj>
        writer->name("major").value(getMajor());
   b5a16:	4915      	ldr	r1, [pc, #84]	; (b5a6c <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0x9c>)
   b5a18:	4620      	mov	r0, r4
   b5a1a:	f7fe fd81 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b5a1e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
   b5a20:	f004 fbe2 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->name("minor").value(getMinor());
   b5a24:	4912      	ldr	r1, [pc, #72]	; (b5a70 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa0>)
   b5a26:	4620      	mov	r0, r4
   b5a28:	f7fe fd7a 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b5a2c:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
   b5a2e:	f004 fbdb 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->name("power").value(getPower());
   b5a32:	4910      	ldr	r1, [pc, #64]	; (b5a74 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa4>)
   b5a34:	4620      	mov	r0, r4
   b5a36:	f7fe fd73 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b5a3a:	f995 103c 	ldrsb.w	r1, [r5, #60]	; 0x3c
   b5a3e:	f004 fbd3 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->name("rssi").value(getRssi());
   b5a42:	490d      	ldr	r1, [pc, #52]	; (b5a78 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa8>)
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7fe fd6b 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b5a4a:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   b5a4e:	7cab      	ldrb	r3, [r5, #18]
   b5a50:	fb91 f1f3 	sdiv	r1, r1, r3
   b5a54:	b249      	sxtb	r1, r1
   b5a56:	f004 fbc7 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b5a5a:	4620      	mov	r0, r4
}
   b5a5c:	b006      	add	sp, #24
   b5a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer->endObject();
   b5a62:	f004 bb87 	b.w	ba174 <_ZN5spark10JSONWriter9endObjectEv>
   b5a66:	bf00      	nop
   b5a68:	000bb2ed 	.word	0x000bb2ed
   b5a6c:	000bb2f2 	.word	0x000bb2f2
   b5a70:	000bb2f8 	.word	0x000bb2f8
   b5a74:	000bb2fe 	.word	0x000bb2fe
   b5a78:	000bb0ad 	.word	0x000bb0ad

000b5a7c <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE>:
{
   b5a7c:	b500      	push	{lr}
   b5a7e:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).customData(custom_data, sizeof(custom_data)) == 25)
   b5a80:	221f      	movs	r2, #31
   b5a82:	4669      	mov	r1, sp
   b5a84:	3008      	adds	r0, #8
   b5a86:	f002 f85d 	bl	b7b44 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
   b5a8a:	2819      	cmp	r0, #25
   b5a8c:	d113      	bne.n	b5ab6 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
        if (custom_data[0] == 0x4c && custom_data[1] == 0x00 && custom_data[2] == 0x02 && custom_data[3] == 0x15)
   b5a8e:	f89d 3000 	ldrb.w	r3, [sp]
   b5a92:	2b4c      	cmp	r3, #76	; 0x4c
   b5a94:	d10f      	bne.n	b5ab6 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
   b5a96:	f89d 0001 	ldrb.w	r0, [sp, #1]
   b5a9a:	b960      	cbnz	r0, b5ab6 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
   b5a9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   b5aa0:	2b02      	cmp	r3, #2
   b5aa2:	d105      	bne.n	b5ab0 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x34>
   b5aa4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   b5aa8:	f1a0 0315 	sub.w	r3, r0, #21
   b5aac:	4258      	negs	r0, r3
   b5aae:	4158      	adcs	r0, r3
}
   b5ab0:	b009      	add	sp, #36	; 0x24
   b5ab2:	f85d fb04 	ldr.w	pc, [sp], #4
    return false;
   b5ab6:	2000      	movs	r0, #0
   b5ab8:	e7fa      	b.n	b5ab0 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x34>
	...

000b5abc <_ZN11iBeaconScanC1ERKS_>:
class iBeaconScan : public Beacon
   b5abc:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b5abe:	4b14      	ldr	r3, [pc, #80]	; (b5b10 <_ZN11iBeaconScanC1ERKS_+0x54>)
   b5ac0:	888a      	ldrh	r2, [r1, #4]
   b5ac2:	6003      	str	r3, [r0, #0]
   b5ac4:	460d      	mov	r5, r1
   b5ac6:	798b      	ldrb	r3, [r1, #6]
   b5ac8:	8082      	strh	r2, [r0, #4]
   b5aca:	4604      	mov	r4, r0
   b5acc:	7183      	strb	r3, [r0, #6]
   b5ace:	3107      	adds	r1, #7
   b5ad0:	3007      	adds	r0, #7
   b5ad2:	f001 fdcf 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
   b5ad6:	8a2b      	ldrh	r3, [r5, #16]
   b5ad8:	8223      	strh	r3, [r4, #16]
   b5ada:	7cab      	ldrb	r3, [r5, #18]
   b5adc:	74a3      	strb	r3, [r4, #18]
   b5ade:	4623      	mov	r3, r4
   b5ae0:	4a0c      	ldr	r2, [pc, #48]	; (b5b14 <_ZN11iBeaconScanC1ERKS_+0x58>)
   b5ae2:	f843 2b13 	str.w	r2, [r3], #19
   b5ae6:	f105 0137 	add.w	r1, r5, #55	; 0x37
   b5aea:	f105 0213 	add.w	r2, r5, #19
   b5aee:	f852 0b04 	ldr.w	r0, [r2], #4
   b5af2:	f843 0b04 	str.w	r0, [r3], #4
   b5af6:	428a      	cmp	r2, r1
   b5af8:	d1f9      	bne.n	b5aee <_ZN11iBeaconScanC1ERKS_+0x32>
   b5afa:	7812      	ldrb	r2, [r2, #0]
   b5afc:	701a      	strb	r2, [r3, #0]
   b5afe:	f995 303c 	ldrsb.w	r3, [r5, #60]	; 0x3c
   b5b02:	6baa      	ldr	r2, [r5, #56]	; 0x38
   b5b04:	63a2      	str	r2, [r4, #56]	; 0x38
   b5b06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	bd38      	pop	{r3, r4, r5, pc}
   b5b0e:	bf00      	nop
   b5b10:	000bb084 	.word	0x000bb084
   b5b14:	000bb30c 	.word	0x000bb30c

000b5b18 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5b18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b1c:	4604      	mov	r4, r0
   b5b1e:	460d      	mov	r5, r1
   b5b20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b22:	d911      	bls.n	b5b48 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b5b24:	4290      	cmp	r0, r2
   b5b26:	d210      	bcs.n	b5b4a <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b5b28:	f1a2 0640 	sub.w	r6, r2, #64	; 0x40
            dest += end - p - 1;
   b5b2c:	1a75      	subs	r5, r6, r1
   b5b2e:	f1a1 0740 	sub.w	r7, r1, #64	; 0x40
   b5b32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b34:	42b7      	cmp	r7, r6
   b5b36:	d012      	beq.n	b5b5e <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b5b38:	b11c      	cbz	r4, b5b42 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5b3a:	4631      	mov	r1, r6
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	f7ff ffbd 	bl	b5abc <_ZN11iBeaconScanC1ERKS_>
            for (; end != p; --end, --dest) {
   b5b42:	3e40      	subs	r6, #64	; 0x40
   b5b44:	3c40      	subs	r4, #64	; 0x40
   b5b46:	e7f5      	b.n	b5b34 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5b48:	d009      	beq.n	b5b5e <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b5b4a:	42b5      	cmp	r5, r6
   b5b4c:	d007      	beq.n	b5b5e <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b5b4e:	b11c      	cbz	r4, b5b58 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b5b50:	4629      	mov	r1, r5
   b5b52:	4620      	mov	r0, r4
   b5b54:	f7ff ffb2 	bl	b5abc <_ZN11iBeaconScanC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b5b58:	3540      	adds	r5, #64	; 0x40
   b5b5a:	3440      	adds	r4, #64	; 0x40
   b5b5c:	e7f5      	b.n	b5b4a <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b5b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b60 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE>:

void iBeaconScan::addOrUpdate(const BleScanResult *scanResult)
{
   b5b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    return size_;
   b5b62:	4c39      	ldr	r4, [pc, #228]	; (b5c48 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xe8>)
   b5b64:	b0b1      	sub	sp, #196	; 0xc4
   b5b66:	4606      	mov	r6, r0
   b5b68:	2700      	movs	r7, #0
    uint8_t i;
    for (i = 0; i < beacons.size(); ++i) {
   b5b6a:	6863      	ldr	r3, [r4, #4]
   b5b6c:	b2fd      	uxtb	r5, r7
   b5b6e:	429d      	cmp	r5, r3
   b5b70:	da0d      	bge.n	b5b8e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0x2e>
    return data_[i];
   b5b72:	6821      	ldr	r1, [r4, #0]
   b5b74:	eb01 1185 	add.w	r1, r1, r5, lsl #6
    BleAddress getAddress() const { return address;}
   b5b78:	3107      	adds	r1, #7
   b5b7a:	a820      	add	r0, sp, #128	; 0x80
   b5b7c:	f001 fd7a 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult)) {
   b5b80:	4631      	mov	r1, r6
   b5b82:	a820      	add	r0, sp, #128	; 0x80
   b5b84:	f001 fd8d 	bl	b76a2 <_ZNK8particle10BleAddresseqERKS0_>
   b5b88:	3701      	adds	r7, #1
   b5b8a:	2800      	cmp	r0, #0
   b5b8c:	d0ed      	beq.n	b5b6a <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xa>
            break;
        }
    }
    if (i == beacons.size()) {
   b5b8e:	6863      	ldr	r3, [r4, #4]
   b5b90:	429d      	cmp	r5, r3
   b5b92:	d14c      	bne.n	b5c2e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xce>
        rssi_count(0) {};
   b5b94:	4b2d      	ldr	r3, [pc, #180]	; (b5c4c <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xec>)
   b5b96:	9300      	str	r3, [sp, #0]
   b5b98:	f10d 0007 	add.w	r0, sp, #7
   b5b9c:	2301      	movs	r3, #1
   b5b9e:	2500      	movs	r5, #0
   b5ba0:	f88d 3005 	strb.w	r3, [sp, #5]
   b5ba4:	f88d 3006 	strb.w	r3, [sp, #6]
   b5ba8:	f001 fd8f 	bl	b76ca <_ZN8particle10BleAddressC1Ev>
    iBeaconScan() : Beacon(SCAN_IBEACON) {};
   b5bac:	4b28      	ldr	r3, [pc, #160]	; (b5c50 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xf0>)
   b5bae:	9300      	str	r3, [sp, #0]
        iBeaconScan new_beacon;
        new_beacon.populateData(scanResult);
   b5bb0:	4631      	mov	r1, r6
   b5bb2:	4668      	mov	r0, sp
   b5bb4:	f8ad 5010 	strh.w	r5, [sp, #16]
   b5bb8:	f88d 5012 	strb.w	r5, [sp, #18]
   b5bbc:	f7ff feac 	bl	b5918 <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b5bc0:	4669      	mov	r1, sp
   b5bc2:	a810      	add	r0, sp, #64	; 0x40
        new_beacon.missed_scan = 0;
   b5bc4:	f88d 5004 	strb.w	r5, [sp, #4]
        beacons.append(new_beacon);
   b5bc8:	f7ff ff78 	bl	b5abc <_ZN11iBeaconScanC1ERKS_>
    return insert(size_, std::move(value));
   b5bcc:	a910      	add	r1, sp, #64	; 0x40
   b5bce:	a820      	add	r0, sp, #128	; 0x80
   b5bd0:	6866      	ldr	r6, [r4, #4]
   b5bd2:	f7ff ff73 	bl	b5abc <_ZN11iBeaconScanC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5bd6:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5bda:	429f      	cmp	r7, r3
   b5bdc:	db12      	blt.n	b5c04 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xa4>
   b5bde:	3701      	adds	r7, #1
        if (n > 0) {
   b5be0:	42af      	cmp	r7, r5
   b5be2:	dd0a      	ble.n	b5bfa <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0x9a>
    return ::malloc(size);
   b5be4:	01b8      	lsls	r0, r7, #6
   b5be6:	f001 fa4d 	bl	b7084 <malloc>
            if (!d) {
   b5bea:	4605      	mov	r5, r0
   b5bec:	b1e8      	cbz	r0, b5c2a <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xca>
            move(d, data_, data_ + size_);
   b5bee:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5bf2:	eb01 1282 	add.w	r2, r1, r2, lsl #6
   b5bf6:	f7ff ff8f 	bl	b5b18 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5bfa:	6820      	ldr	r0, [r4, #0]
   b5bfc:	f001 fa4a 	bl	b7094 <free>
        data_ = d;
   b5c00:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5c02:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5c04:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5c06:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5c08:	eb03 1686 	add.w	r6, r3, r6, lsl #6
    move(p + 1, p, data_ + size_);
   b5c0c:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   b5c10:	4631      	mov	r1, r6
   b5c12:	f106 0040 	add.w	r0, r6, #64	; 0x40
   b5c16:	f7ff ff7f 	bl	b5b18 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5c1a:	b11e      	cbz	r6, b5c24 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xc4>
   b5c1c:	a920      	add	r1, sp, #128	; 0x80
   b5c1e:	4630      	mov	r0, r6
   b5c20:	f7ff ff4c 	bl	b5abc <_ZN11iBeaconScanC1ERKS_>
    ++size_;
   b5c24:	6863      	ldr	r3, [r4, #4]
   b5c26:	3301      	adds	r3, #1
   b5c28:	6063      	str	r3, [r4, #4]
        iBeaconScan& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b5c2a:	b031      	add	sp, #196	; 0xc4
   b5c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return data_[i];
   b5c2e:	6823      	ldr	r3, [r4, #0]
   b5c30:	01aa      	lsls	r2, r5, #6
   b5c32:	eb03 1585 	add.w	r5, r3, r5, lsl #6
        beacon.newly_scanned = false;
   b5c36:	2400      	movs	r4, #0
   b5c38:	716c      	strb	r4, [r5, #5]
        beacon.populateData(scanResult);
   b5c3a:	589b      	ldr	r3, [r3, r2]
   b5c3c:	4631      	mov	r1, r6
   b5c3e:	685b      	ldr	r3, [r3, #4]
   b5c40:	4628      	mov	r0, r5
   b5c42:	4798      	blx	r3
        beacon.missed_scan = 0;
   b5c44:	712c      	strb	r4, [r5, #4]
   b5c46:	e7f0      	b.n	b5c2a <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xca>
   b5c48:	2003e6b8 	.word	0x2003e6b8
   b5c4c:	000bb084 	.word	0x000bb084
   b5c50:	000bb30c 	.word	0x000bb30c

000b5c54 <_GLOBAL__sub_I__ZN11iBeaconScan7beaconsE>:
        capacity_(0) {
   b5c54:	4b02      	ldr	r3, [pc, #8]	; (b5c60 <_GLOBAL__sub_I__ZN11iBeaconScan7beaconsE+0xc>)
   b5c56:	2200      	movs	r2, #0
   b5c58:	e9c3 2200 	strd	r2, r2, [r3]
   b5c5c:	609a      	str	r2, [r3, #8]
   b5c5e:	4770      	bx	lr
   b5c60:	2003e6b8 	.word	0x2003e6b8

000b5c64 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b5c64:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b5c66:	2301      	movs	r3, #1
   b5c68:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b5c6a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b5c6c:	4604      	mov	r4, r0
        if (th->func) {
   b5c6e:	b143      	cbz	r3, b5c82 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b5c70:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5c72:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b5c74:	2301      	movs	r3, #1
   b5c76:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b5c78:	2000      	movs	r0, #0
    }
   b5c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b5c7e:	f001 b8bd 	b.w	b6dfc <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5c82:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b5c84:	2800      	cmp	r0, #0
   b5c86:	d0f5      	beq.n	b5c74 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b5c88:	6883      	ldr	r3, [r0, #8]
   b5c8a:	b90b      	cbnz	r3, b5c90 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b5c8c:	f004 fc59 	bl	ba542 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5c90:	68c3      	ldr	r3, [r0, #12]
   b5c92:	e7ee      	b.n	b5c72 <_ZN6Thread3runEPv+0xe>

000b5c94 <_ZN21SingleThreadedSectionC1Ev>:
    SingleThreadedSection() {
   b5c94:	b510      	push	{r4, lr}
        os_thread_scheduling(false, NULL);
   b5c96:	2100      	movs	r1, #0
    SingleThreadedSection() {
   b5c98:	4604      	mov	r4, r0
        os_thread_scheduling(false, NULL);
   b5c9a:	4608      	mov	r0, r1
   b5c9c:	f001 f88e 	bl	b6dbc <os_thread_scheduling>
    }
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	bd10      	pop	{r4, pc}

000b5ca4 <_ZN21SingleThreadedSectionD1Ev>:
    ~SingleThreadedSection() {
   b5ca4:	b510      	push	{r4, lr}
        os_thread_scheduling(true, NULL);
   b5ca6:	2100      	movs	r1, #0
    ~SingleThreadedSection() {
   b5ca8:	4604      	mov	r4, r0
        os_thread_scheduling(true, NULL);
   b5caa:	2001      	movs	r0, #1
   b5cac:	f001 f886 	bl	b6dbc <os_thread_scheduling>
    }
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	bd10      	pop	{r4, pc}

000b5cb4 <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b5cb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5cb8:	4604      	mov	r4, r0
   b5cba:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b5cbc:	2014      	movs	r0, #20
   b5cbe:	491d      	ldr	r1, [pc, #116]	; (b5d34 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b5cc0:	4690      	mov	r8, r2
   b5cc2:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b5cc4:	f004 fb86 	bl	ba3d4 <_ZnwjRKSt9nothrow_t>
   b5cc8:	b130      	cbz	r0, b5cd8 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>
      : _M_head_impl() { }
   b5cca:	2500      	movs	r5, #0
            exited(false) {
   b5ccc:	e9c0 5500 	strd	r5, r5, [r0]
   b5cd0:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5cd4:	7405      	strb	r5, [r0, #16]
   b5cd6:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5cd8:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b5cda:	b198      	cbz	r0, b5d04 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b5cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5cde:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b5ce2:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b5ce6:	4631      	mov	r1, r6
   b5ce8:	e9cd 0300 	strd	r0, r3, [sp]
   b5cec:	4b12      	ldr	r3, [pc, #72]	; (b5d38 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x84>)
   b5cee:	3004      	adds	r0, #4
   b5cf0:	f001 f854 	bl	b6d9c <os_thread_create>
   b5cf4:	b930      	cbnz	r0, b5d04 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5cf6:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b5cf8:	7c1b      	ldrb	r3, [r3, #16]
   b5cfa:	b9bb      	cbnz	r3, b5d2c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
            HAL_Delay_Milliseconds(1);
   b5cfc:	2001      	movs	r0, #1
   b5cfe:	f000 ff81 	bl	b6c04 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b5d02:	e7f8      	b.n	b5cf6 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b5d04:	6826      	ldr	r6, [r4, #0]
	_M_ptr() = __p;
   b5d06:	2300      	movs	r3, #0
   b5d08:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b5d0a:	b17e      	cbz	r6, b5d2c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b5d0c:	6835      	ldr	r5, [r6, #0]
   b5d0e:	b14d      	cbz	r5, b5d24 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x70>
      if (_M_manager)
   b5d10:	68ab      	ldr	r3, [r5, #8]
   b5d12:	b11b      	cbz	r3, b5d1c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5d14:	2203      	movs	r2, #3
   b5d16:	4629      	mov	r1, r5
   b5d18:	4628      	mov	r0, r5
   b5d1a:	4798      	blx	r3
	delete __ptr;
   b5d1c:	2110      	movs	r1, #16
   b5d1e:	4628      	mov	r0, r5
   b5d20:	f7fe f9bb 	bl	b409a <_ZdlPvj>
   b5d24:	2114      	movs	r1, #20
   b5d26:	4630      	mov	r0, r6
   b5d28:	f7fe f9b7 	bl	b409a <_ZdlPvj>
    }
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	b002      	add	sp, #8
   b5d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5d34:	000bb821 	.word	0x000bb821
   b5d38:	000b5c65 	.word	0x000b5c65

000b5d3c <_Z18custom_scan_paramsv>:
    }
    ctx->writer->endObject();
    return String::format("%.*s", ctx->writer->dataSize(), ctx->writer->buffer());
}

void custom_scan_params() {
   b5d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     *  To be able to get all the data, we have to scan multiple times for the duration.
     * 
     *  This function makes a short scan (150ms) and runs it for the number of seconds passed in.
     */
    BleScanParams scanParams;
    scanParams.size = sizeof(BleScanParams);
   b5d3e:	2310      	movs	r3, #16
   b5d40:	f8ad 3002 	strh.w	r3, [sp, #2]
    BLE.getScanParameters(&scanParams);
   b5d44:	f002 f8ee 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d48:	4669      	mov	r1, sp
   b5d4a:	f002 f95c 	bl	b8006 <_ZNK8particle14BleLocalDevice17getScanParametersEPNS_13BleScanParamsE>
#if SYSTEM_VERSION >= SYSTEM_VERSION_RC(3, 1, 0, 1)
    if (scanParams.scan_phys != BLE_PHYS_1MBPS && 
   b5d4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b5d52:	2b01      	cmp	r3, #1
   b5d54:	d005      	beq.n	b5d62 <_Z18custom_scan_paramsv+0x26>
   b5d56:	3b04      	subs	r3, #4
   b5d58:	2b01      	cmp	r3, #1
            scanParams.scan_phys != BLE_PHYS_CODED &&
            scanParams.scan_phys != (BLE_PHYS_1MBPS | BLE_PHYS_CODED))
                scanParams.scan_phys = BLE_PHYS_1MBPS;
   b5d5a:	bf84      	itt	hi
   b5d5c:	2301      	movhi	r3, #1
   b5d5e:	f88d 300c 	strbhi.w	r3, [sp, #12]
#endif
    scanParams.interval = 80;   // 50ms
   b5d62:	2350      	movs	r3, #80	; 0x50
   b5d64:	f8ad 3004 	strh.w	r3, [sp, #4]
    scanParams.window = 40;     // 25ms
   b5d68:	2328      	movs	r3, #40	; 0x28
   b5d6a:	f8ad 3006 	strh.w	r3, [sp, #6]
    scanParams.timeout = 15;    // 150ms
   b5d6e:	230f      	movs	r3, #15
   b5d70:	f8ad 3008 	strh.w	r3, [sp, #8]
    scanParams.active = true;
   b5d74:	2301      	movs	r3, #1
   b5d76:	f8ad 300a 	strh.w	r3, [sp, #10]
    scanParams.filter_policy = BLE_SCAN_FP_ACCEPT_ALL;
    BLE.setScanParameters(&scanParams); 
   b5d7a:	f002 f8d3 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d7e:	4669      	mov	r1, sp
   b5d80:	f002 f93d 	bl	b7ffe <_ZNK8particle14BleLocalDevice17setScanParametersEPKNS_13BleScanParamsE>
}
   b5d84:	b005      	add	sp, #20
   b5d86:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d8a <_ZN8particle13BleScanResultD1Ev>:
class BleScanResult {
   b5d8a:	b510      	push	{r4, lr}
   b5d8c:	4604      	mov	r4, r0
    ::free(ptr);
   b5d8e:	6940      	ldr	r0, [r0, #20]
   b5d90:	f001 f980 	bl	b7094 <free>
   b5d94:	68a0      	ldr	r0, [r4, #8]
   b5d96:	f001 f97d 	bl	b7094 <free>
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	bd10      	pop	{r4, pc}
	...

000b5da0 <_ZN13Beaconscanner15startContinuousEi>:
        _instance->_scan_done = true;
        os_thread_yield();
    }
}

void Beaconscanner::startContinuous(int flags) {
   b5da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    _flags = flags;
    _run = true;
    if (_thread == nullptr) 
   b5da2:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    _flags = flags;
   b5da4:	6081      	str	r1, [r0, #8]
    _run = true;
   b5da6:	2301      	movs	r3, #1
void Beaconscanner::startContinuous(int flags) {
   b5da8:	4604      	mov	r4, r0
    _run = true;
   b5daa:	7183      	strb	r3, [r0, #6]
    if (_thread == nullptr) 
   b5dac:	b97e      	cbnz	r6, b5dce <_ZN13Beaconscanner15startContinuousEi+0x2e>
        _thread = new Thread("scan_thread", scan_thread);
   b5dae:	2004      	movs	r0, #4
   b5db0:	f7fe f96f 	bl	b4092 <_Znwj>
   b5db4:	4605      	mov	r5, r0
   b5db6:	b148      	cbz	r0, b5dcc <_ZN13Beaconscanner15startContinuousEi+0x2c>
   b5db8:	2302      	movs	r3, #2
   b5dba:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b5dbe:	e9cd 3200 	strd	r3, r2, [sp]
   b5dc2:	4904      	ldr	r1, [pc, #16]	; (b5dd4 <_ZN13Beaconscanner15startContinuousEi+0x34>)
   b5dc4:	4a04      	ldr	r2, [pc, #16]	; (b5dd8 <_ZN13Beaconscanner15startContinuousEi+0x38>)
   b5dc6:	4633      	mov	r3, r6
   b5dc8:	f7ff ff74 	bl	b5cb4 <_ZN6ThreadC1EPKcPFvPvES2_hj>
   b5dcc:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   b5dce:	b002      	add	sp, #8
   b5dd0:	bd70      	pop	{r4, r5, r6, pc}
   b5dd2:	bf00      	nop
   b5dd4:	000bb314 	.word	0x000bb314
   b5dd8:	000b6121 	.word	0x000b6121

000b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5ddc:	b570      	push	{r4, r5, r6, lr}
   b5dde:	4604      	mov	r4, r0
        capacity_(0) {
   b5de0:	2000      	movs	r0, #0
   b5de2:	e9c4 0000 	strd	r0, r0, [r4]
   b5de6:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5de8:	684e      	ldr	r6, [r1, #4]
   b5dea:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5dec:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5dee:	dd11      	ble.n	b5e14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x38>
    return ::realloc(ptr, size);
   b5df0:	4631      	mov	r1, r6
   b5df2:	f001 f957 	bl	b70a4 <realloc>
            if (!d) {
   b5df6:	b168      	cbz	r0, b5e14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x38>
        data_ = d;
   b5df8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5dfa:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5dfc:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5e00:	441a      	add	r2, r3
        for (; it != end; ++it, ++dest) {
   b5e02:	429a      	cmp	r2, r3
   b5e04:	d004      	beq.n	b5e10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x34>
            new(dest) T(*it);
   b5e06:	f813 1b01 	ldrb.w	r1, [r3], #1
   b5e0a:	f800 1b01 	strb.w	r1, [r0], #1
        for (; it != end; ++it, ++dest) {
   b5e0e:	e7f8      	b.n	b5e02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x26>
        size_ = vector.size_;
   b5e10:	686b      	ldr	r3, [r5, #4]
   b5e12:	6063      	str	r3, [r4, #4]
}
   b5e14:	4620      	mov	r0, r4
   b5e16:	bd70      	pop	{r4, r5, r6, pc}

000b5e18 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>:
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
   b5e18:	b570      	push	{r4, r5, r6, lr}
    return find(data_, data_ + size_, value);
   b5e1a:	e9d0 4500 	ldrd	r4, r5, [r0]
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
   b5e1e:	460e      	mov	r6, r1
    return find(data_, data_ + size_, value);
   b5e20:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        for (; p != end; ++p) {
   b5e24:	42a5      	cmp	r5, r4
   b5e26:	d006      	beq.n	b5e36 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0x1e>
            if (*p == value) {
   b5e28:	4631      	mov	r1, r6
   b5e2a:	4620      	mov	r0, r4
   b5e2c:	f001 fc39 	bl	b76a2 <_ZNK8particle10BleAddresseqERKS0_>
   b5e30:	b910      	cbnz	r0, b5e38 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0x20>
        for (; p != end; ++p) {
   b5e32:	3408      	adds	r4, #8
   b5e34:	e7f6      	b.n	b5e24 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0xc>
        return nullptr;
   b5e36:	2400      	movs	r4, #0
}
   b5e38:	1e20      	subs	r0, r4, #0
   b5e3a:	bf18      	it	ne
   b5e3c:	2001      	movne	r0, #1
   b5e3e:	bd70      	pop	{r4, r5, r6, pc}

000b5e40 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5e40:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5e42:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5e46:	2624      	movs	r6, #36	; 0x24
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5e48:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5e4a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5e4e:	42ae      	cmp	r6, r5
   b5e50:	d004      	beq.n	b5e5c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
   b5e52:	4628      	mov	r0, r5
   b5e54:	f7ff ff99 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b5e58:	3524      	adds	r5, #36	; 0x24
   b5e5a:	e7f8      	b.n	b5e4e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5e5c:	6820      	ldr	r0, [r4, #0]
   b5e5e:	f001 f919 	bl	b7094 <free>
}
   b5e62:	4620      	mov	r0, r4
   b5e64:	bd70      	pop	{r4, r5, r6, pc}

000b5e66 <_ZN8particle13BleScanResultC1EOS0_>:
   b5e66:	b538      	push	{r3, r4, r5, lr}
   b5e68:	4604      	mov	r4, r0
   b5e6a:	460d      	mov	r5, r1
   b5e6c:	f001 fc02 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
class BleAdvertisingData {
   b5e70:	f105 0108 	add.w	r1, r5, #8
   b5e74:	f104 0008 	add.w	r0, r4, #8
   b5e78:	f7ff ffb0 	bl	b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b5e7c:	f105 0114 	add.w	r1, r5, #20
   b5e80:	f104 0014 	add.w	r0, r4, #20
   b5e84:	f7ff ffaa 	bl	b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b5e88:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5e8c:	f884 3020 	strb.w	r3, [r4, #32]
   b5e90:	4620      	mov	r0, r4
   b5e92:	bd38      	pop	{r3, r4, r5, pc}

000b5e94 <_ZN6BeaconC1ERKS_>:
class Beacon {
   b5e94:	b538      	push	{r3, r4, r5, lr}
   b5e96:	4b09      	ldr	r3, [pc, #36]	; (b5ebc <_ZN6BeaconC1ERKS_+0x28>)
   b5e98:	888a      	ldrh	r2, [r1, #4]
   b5e9a:	6003      	str	r3, [r0, #0]
   b5e9c:	460d      	mov	r5, r1
   b5e9e:	798b      	ldrb	r3, [r1, #6]
   b5ea0:	8082      	strh	r2, [r0, #4]
   b5ea2:	4604      	mov	r4, r0
   b5ea4:	7183      	strb	r3, [r0, #6]
   b5ea6:	3107      	adds	r1, #7
   b5ea8:	3007      	adds	r0, #7
   b5eaa:	f001 fbe3 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
   b5eae:	8a2b      	ldrh	r3, [r5, #16]
   b5eb0:	8223      	strh	r3, [r4, #16]
   b5eb2:	7cab      	ldrb	r3, [r5, #18]
   b5eb4:	74a3      	strb	r3, [r4, #18]
   b5eb6:	4620      	mov	r0, r4
   b5eb8:	bd38      	pop	{r3, r4, r5, pc}
   b5eba:	bf00      	nop
   b5ebc:	000bb084 	.word	0x000bb084

000b5ec0 <_ZN9EddystoneC1ERKS_>:

#include "beacon.h"

// Eddystone specification: https://github.com/google/eddystone/blob/master/protocol-specification.md

class Eddystone : public Beacon
   b5ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ec2:	4607      	mov	r7, r0
   b5ec4:	460c      	mov	r4, r1
   b5ec6:	463d      	mov	r5, r7
   b5ec8:	f7ff ffe4 	bl	b5e94 <_ZN6BeaconC1ERKS_>
   b5ecc:	f104 0614 	add.w	r6, r4, #20
   b5ed0:	4b13      	ldr	r3, [pc, #76]	; (b5f20 <_ZN9EddystoneC1ERKS_+0x60>)
   b5ed2:	f845 3b14 	str.w	r3, [r5], #20
   b5ed6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5eda:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5ede:	f845 0b04 	str.w	r0, [r5], #4
   b5ee2:	f104 032a 	add.w	r3, r4, #42	; 0x2a
   b5ee6:	8029      	strh	r1, [r5, #0]
   b5ee8:	f107 022a 	add.w	r2, r7, #42	; 0x2a
   b5eec:	f104 0142 	add.w	r1, r4, #66	; 0x42
   b5ef0:	f853 0b04 	ldr.w	r0, [r3], #4
   b5ef4:	f842 0b04 	str.w	r0, [r2], #4
   b5ef8:	428b      	cmp	r3, r1
   b5efa:	d1f9      	bne.n	b5ef0 <_ZN9EddystoneC1ERKS_+0x30>
   b5efc:	881b      	ldrh	r3, [r3, #0]
   b5efe:	8013      	strh	r3, [r2, #0]
   b5f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
   b5f04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5f06:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b5f0a:	3454      	adds	r4, #84	; 0x54
   b5f0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b5f10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5f14:	f107 0554 	add.w	r5, r7, #84	; 0x54
   b5f18:	c507      	stmia	r5!, {r0, r1, r2}
   b5f1a:	802b      	strh	r3, [r5, #0]
   b5f1c:	4638      	mov	r0, r7
   b5f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5f20:	000bb42c 	.word	0x000bb42c

000b5f24 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5f24:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f28:	4604      	mov	r4, r0
   b5f2a:	460d      	mov	r5, r1
   b5f2c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f2e:	d911      	bls.n	b5f54 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b5f30:	4290      	cmp	r0, r2
   b5f32:	d210      	bcs.n	b5f56 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b5f34:	f1a2 0664 	sub.w	r6, r2, #100	; 0x64
            dest += end - p - 1;
   b5f38:	1a75      	subs	r5, r6, r1
   b5f3a:	f1a1 0764 	sub.w	r7, r1, #100	; 0x64
   b5f3e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f40:	42b7      	cmp	r7, r6
   b5f42:	d012      	beq.n	b5f6a <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b5f44:	b11c      	cbz	r4, b5f4e <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5f46:	4631      	mov	r1, r6
   b5f48:	4620      	mov	r0, r4
   b5f4a:	f7ff ffb9 	bl	b5ec0 <_ZN9EddystoneC1ERKS_>
            for (; end != p; --end, --dest) {
   b5f4e:	3e64      	subs	r6, #100	; 0x64
   b5f50:	3c64      	subs	r4, #100	; 0x64
   b5f52:	e7f5      	b.n	b5f40 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5f54:	d009      	beq.n	b5f6a <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b5f56:	42b5      	cmp	r5, r6
   b5f58:	d007      	beq.n	b5f6a <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b5f5a:	b11c      	cbz	r4, b5f64 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b5f5c:	4629      	mov	r1, r5
   b5f5e:	4620      	mov	r0, r4
   b5f60:	f7ff ffae 	bl	b5ec0 <_ZN9EddystoneC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b5f64:	3564      	adds	r5, #100	; 0x64
   b5f66:	3464      	adds	r4, #100	; 0x64
   b5f68:	e7f5      	b.n	b5f56 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b5f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f6c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5f6c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f70:	4604      	mov	r4, r0
   b5f72:	460d      	mov	r5, r1
   b5f74:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f76:	d914      	bls.n	b5fa2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5f78:	4290      	cmp	r0, r2
   b5f7a:	d213      	bcs.n	b5fa4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5f7c:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b5f80:	1a75      	subs	r5, r6, r1
   b5f82:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b5f86:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f88:	42b7      	cmp	r7, r6
   b5f8a:	d018      	beq.n	b5fbe <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5f8c:	b11c      	cbz	r4, b5f96 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b5f8e:	4631      	mov	r1, r6
   b5f90:	4620      	mov	r0, r4
   b5f92:	f7ff ff68 	bl	b5e66 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b5f96:	4630      	mov	r0, r6
   b5f98:	f7ff fef7 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b5f9c:	3e24      	subs	r6, #36	; 0x24
   b5f9e:	3c24      	subs	r4, #36	; 0x24
   b5fa0:	e7f2      	b.n	b5f88 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5fa2:	d00c      	beq.n	b5fbe <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5fa4:	42b5      	cmp	r5, r6
   b5fa6:	d00a      	beq.n	b5fbe <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5fa8:	b11c      	cbz	r4, b5fb2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5faa:	4629      	mov	r1, r5
   b5fac:	4620      	mov	r0, r4
   b5fae:	f7ff ff5a 	bl	b5e66 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b5fb2:	4628      	mov	r0, r5
   b5fb4:	f7ff fee9 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b5fb8:	3524      	adds	r5, #36	; 0x24
   b5fba:	3424      	adds	r4, #36	; 0x24
   b5fbc:	e7f2      	b.n	b5fa4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fc0 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE>:
void Beaconscanner::processScan(Vector<BleScanResult> scans) {
   b5fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fc4:	4604      	mov	r4, r0
   b5fc6:	b08a      	sub	sp, #40	; 0x28
   b5fc8:	460d      	mov	r5, r1
    move(p, p + 1, data_ + size_);
   b5fca:	2724      	movs	r7, #36	; 0x24
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b5fcc:	f100 081c 	add.w	r8, r0, #28
    while(!scans.isEmpty()) {
   b5fd0:	686b      	ldr	r3, [r5, #4]
   b5fd2:	2b00      	cmp	r3, #0
   b5fd4:	d061      	beq.n	b609a <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xda>
    T* const p = data_ + i;
   b5fd6:	682e      	ldr	r6, [r5, #0]
    T v(std::move(*p));
   b5fd8:	a801      	add	r0, sp, #4
   b5fda:	4631      	mov	r1, r6
   b5fdc:	f7ff ff43 	bl	b5e66 <_ZN8particle13BleScanResultC1EOS0_>
    p->~T();
   b5fe0:	4630      	mov	r0, r6
   b5fe2:	f7ff fed2 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
    move(p, p + 1, data_ + size_);
   b5fe6:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5fea:	4630      	mov	r0, r6
   b5fec:	fb07 3202 	mla	r2, r7, r2, r3
   b5ff0:	f106 0124 	add.w	r1, r6, #36	; 0x24
   b5ff4:	f7ff ffba 	bl	b5f6c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5ff8:	686b      	ldr	r3, [r5, #4]
   b5ffa:	3b01      	subs	r3, #1
   b5ffc:	606b      	str	r3, [r5, #4]
        else if ((_flags & SCAN_IBEACON) && iBeaconScan::isBeacon(scanResult) && !iPublished.contains(ADDRESS(scanResult)))
   b5ffe:	68a3      	ldr	r3, [r4, #8]
   b6000:	07d8      	lsls	r0, r3, #31
   b6002:	d510      	bpl.n	b6026 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
   b6004:	a801      	add	r0, sp, #4
   b6006:	f7ff fd39 	bl	b5a7c <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE>
   b600a:	b160      	cbz	r0, b6026 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
   b600c:	a901      	add	r1, sp, #4
   b600e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6012:	f7ff ff01 	bl	b5e18 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6016:	b930      	cbnz	r0, b6026 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
            iBeaconScan::addOrUpdate(scanResult);
   b6018:	a801      	add	r0, sp, #4
   b601a:	f7ff fda1 	bl	b5b60 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE>
        BleScanResult scan = scans.takeFirst();
   b601e:	a801      	add	r0, sp, #4
   b6020:	f7ff feb3 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
    while(!scans.isEmpty()) {
   b6024:	e7d4      	b.n	b5fd0 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x10>
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b6026:	68a3      	ldr	r3, [r4, #8]
   b6028:	0799      	lsls	r1, r3, #30
   b602a:	d410      	bmi.n	b604e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x8e>
        else if ((_flags & SCAN_EDDYSTONE) && Eddystone::isBeacon(scanResult) && !ePublished.contains(ADDRESS(scanResult)))
   b602c:	68a3      	ldr	r3, [r4, #8]
   b602e:	075a      	lsls	r2, r3, #29
   b6030:	d51c      	bpl.n	b606c <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
   b6032:	a801      	add	r0, sp, #4
   b6034:	f000 fa0e 	bl	b6454 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE>
   b6038:	b1c0      	cbz	r0, b606c <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
   b603a:	a901      	add	r1, sp, #4
   b603c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6040:	f7ff feea 	bl	b5e18 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6044:	b990      	cbnz	r0, b606c <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
            Eddystone::addOrUpdate(scanResult);
   b6046:	a801      	add	r0, sp, #4
   b6048:	f000 fd2e 	bl	b6aa8 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE>
   b604c:	e7e7      	b.n	b601e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b604e:	a801      	add	r0, sp, #4
   b6050:	f7fe fbb0 	bl	b47b4 <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE>
   b6054:	2800      	cmp	r0, #0
   b6056:	d0e9      	beq.n	b602c <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x6c>
   b6058:	a901      	add	r1, sp, #4
   b605a:	4640      	mov	r0, r8
   b605c:	f7ff fedc 	bl	b5e18 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6060:	2800      	cmp	r0, #0
   b6062:	d1e3      	bne.n	b602c <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x6c>
            KontaktTag::addOrUpdate(scanResult);
   b6064:	a801      	add	r0, sp, #4
   b6066:	f7fe fc11 	bl	b488c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE>
   b606a:	e7d8      	b.n	b601e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if ((_flags & SCAN_LAIRDBT510) && LairdBt510::isBeacon(scanResult) && !lPublished.contains(ADDRESS(scanResult)))
   b606c:	68a3      	ldr	r3, [r4, #8]
   b606e:	071b      	lsls	r3, r3, #28
   b6070:	d50d      	bpl.n	b608e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
   b6072:	a801      	add	r0, sp, #4
   b6074:	f7fe fd6c 	bl	b4b50 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE>
   b6078:	b148      	cbz	r0, b608e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
   b607a:	a901      	add	r1, sp, #4
   b607c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b6080:	f7ff feca 	bl	b5e18 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6084:	b918      	cbnz	r0, b608e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
            LairdBt510::addOrUpdate(scanResult);          
   b6086:	a801      	add	r0, sp, #4
   b6088:	f7ff f8c2 	bl	b5210 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE>
   b608c:	e7c7      	b.n	b601e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if (_customCallback) {
   b608e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6090:	2b00      	cmp	r3, #0
   b6092:	d0c4      	beq.n	b601e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
            _customCallback(scanResult);
   b6094:	a801      	add	r0, sp, #4
   b6096:	4798      	blx	r3
   b6098:	e7c1      	b.n	b601e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
}
   b609a:	b00a      	add	sp, #40	; 0x28
   b609c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b60a0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b60a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b60a4:	2300      	movs	r3, #0
   b60a6:	e9c0 3300 	strd	r3, r3, [r0]
   b60aa:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b60ac:	684e      	ldr	r6, [r1, #4]
   b60ae:	429e      	cmp	r6, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b60b0:	4604      	mov	r4, r0
   b60b2:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b60b4:	dd31      	ble.n	b611a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x7a>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b60b6:	f04f 0824 	mov.w	r8, #36	; 0x24
    return ::malloc(size);
   b60ba:	fb08 f006 	mul.w	r0, r8, r6
   b60be:	f000 ffe1 	bl	b7084 <malloc>
            if (!d) {
   b60c2:	4605      	mov	r5, r0
   b60c4:	b348      	cbz	r0, b611a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x7a>
            move(d, data_, data_ + size_);
   b60c6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b60ca:	fb08 1202 	mla	r2, r8, r2, r1
   b60ce:	f7ff ff4d 	bl	b5f6c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b60d2:	6820      	ldr	r0, [r4, #0]
   b60d4:	f000 ffde 	bl	b7094 <free>
        data_ = d;
   b60d8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b60da:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b60dc:	e9d7 6300 	ldrd	r6, r3, [r7]
   b60e0:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   b60e4:	45b0      	cmp	r8, r6
   b60e6:	d016      	beq.n	b6116 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x76>
   b60e8:	4631      	mov	r1, r6
   b60ea:	4628      	mov	r0, r5
   b60ec:	f001 fac2 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
class BleAdvertisingData {
   b60f0:	f106 0108 	add.w	r1, r6, #8
   b60f4:	f105 0008 	add.w	r0, r5, #8
   b60f8:	f7ff fe70 	bl	b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b60fc:	f106 0114 	add.w	r1, r6, #20
   b6100:	f105 0014 	add.w	r0, r5, #20
   b6104:	f7ff fe6a 	bl	b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b6108:	f996 3020 	ldrsb.w	r3, [r6, #32]
   b610c:	f885 3020 	strb.w	r3, [r5, #32]
   b6110:	3624      	adds	r6, #36	; 0x24
   b6112:	3524      	adds	r5, #36	; 0x24
   b6114:	e7e6      	b.n	b60e4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x44>
        size_ = vector.size_;
   b6116:	687b      	ldr	r3, [r7, #4]
   b6118:	6063      	str	r3, [r4, #4]
}
   b611a:	4620      	mov	r0, r4
   b611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6120 <_ZN13Beaconscanner11scan_threadEPv>:
void Beaconscanner::scan_thread(void *param) {
   b6120:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (!_instance->_run) {
   b6122:	4c1a      	ldr	r4, [pc, #104]	; (b618c <_ZN13Beaconscanner11scan_threadEPv+0x6c>)
void Beaconscanner::scan_thread(void *param) {
   b6124:	b087      	sub	sp, #28
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b6126:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
        if (!_instance->_run) {
   b612a:	6823      	ldr	r3, [r4, #0]
   b612c:	799b      	ldrb	r3, [r3, #6]
   b612e:	b913      	cbnz	r3, b6136 <_ZN13Beaconscanner11scan_threadEPv+0x16>
        os_thread_yield();
   b6130:	f000 fe3c 	bl	b6dac <os_thread_yield>
   b6134:	e7f9      	b.n	b612a <_ZN13Beaconscanner11scan_threadEPv+0xa>
        custom_scan_params();
   b6136:	f7ff fe01 	bl	b5d3c <_Z18custom_scan_paramsv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b613a:	f000 fd73 	bl	b6c24 <HAL_Timer_Get_Milli_Seconds>
   b613e:	4605      	mov	r5, r0
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b6140:	6823      	ldr	r3, [r4, #0]
   b6142:	799b      	ldrb	r3, [r3, #6]
   b6144:	b1eb      	cbz	r3, b6182 <_ZN13Beaconscanner11scan_threadEPv+0x62>
   b6146:	f000 fd6d 	bl	b6c24 <HAL_Timer_Get_Milli_Seconds>
   b614a:	6823      	ldr	r3, [r4, #0]
   b614c:	7b5b      	ldrb	r3, [r3, #13]
   b614e:	1b40      	subs	r0, r0, r5
   b6150:	4373      	muls	r3, r6
   b6152:	4298      	cmp	r0, r3
   b6154:	d215      	bcs.n	b6182 <_ZN13Beaconscanner11scan_threadEPv+0x62>
            Vector<BleScanResult> cur_responses = BLE.scan();
   b6156:	f001 fee5 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b615a:	4601      	mov	r1, r0
   b615c:	4668      	mov	r0, sp
   b615e:	f003 fb07 	bl	b9770 <_ZNK8particle14BleLocalDevice4scanEv>
            _instance->processScan(cur_responses);
   b6162:	6827      	ldr	r7, [r4, #0]
   b6164:	4669      	mov	r1, sp
   b6166:	a803      	add	r0, sp, #12
   b6168:	f7ff ff9a 	bl	b60a0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
   b616c:	a903      	add	r1, sp, #12
   b616e:	4638      	mov	r0, r7
   b6170:	f7ff ff26 	bl	b5fc0 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE>
   b6174:	a803      	add	r0, sp, #12
   b6176:	f7ff fe63 	bl	b5e40 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>
            Vector<BleScanResult> cur_responses = BLE.scan();
   b617a:	4668      	mov	r0, sp
   b617c:	f7ff fe60 	bl	b5e40 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b6180:	e7de      	b.n	b6140 <_ZN13Beaconscanner11scan_threadEPv+0x20>
        _instance->_scan_done = true;
   b6182:	6823      	ldr	r3, [r4, #0]
   b6184:	2201      	movs	r2, #1
   b6186:	71da      	strb	r2, [r3, #7]
   b6188:	e7d2      	b.n	b6130 <_ZN13Beaconscanner11scan_threadEPv+0x10>
   b618a:	bf00      	nop
   b618c:	2003e6c4 	.word	0x2003e6c4

000b6190 <_ZN13Beaconscanner4loopEv>:

void Beaconscanner::stopContinuous() {
    _run = false;
}

void Beaconscanner::loop() {
   b6190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_;
   b6194:	f8df 92ac 	ldr.w	r9, [pc, #684]	; b6444 <_ZN13Beaconscanner4loopEv+0x2b4>
    return data_ + size_;
   b6198:	e9d9 5300 	ldrd	r5, r3, [r9]
   b619c:	4604      	mov	r4, r0
   b619e:	eb05 1683 	add.w	r6, r5, r3, lsl #6
#ifdef SUPPORT_IBEACON
    for (auto& i : iBeaconScan::beacons) {
        if (_callback && i.newly_scanned) {
            _callback(i, NEW);
            i.newly_scanned = false;
   b61a2:	2700      	movs	r7, #0
    for (auto& i : iBeaconScan::beacons) {
   b61a4:	42ae      	cmp	r6, r5
   b61a6:	d009      	beq.n	b61bc <_ZN13Beaconscanner4loopEv+0x2c>
        if (_callback && i.newly_scanned) {
   b61a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b61aa:	b12b      	cbz	r3, b61b8 <_ZN13Beaconscanner4loopEv+0x28>
   b61ac:	796a      	ldrb	r2, [r5, #5]
   b61ae:	b11a      	cbz	r2, b61b8 <_ZN13Beaconscanner4loopEv+0x28>
            _callback(i, NEW);
   b61b0:	2101      	movs	r1, #1
   b61b2:	4628      	mov	r0, r5
   b61b4:	4798      	blx	r3
            i.newly_scanned = false;
   b61b6:	716f      	strb	r7, [r5, #5]
    for (auto& i : iBeaconScan::beacons) {
   b61b8:	3540      	adds	r5, #64	; 0x40
   b61ba:	e7f3      	b.n	b61a4 <_ZN13Beaconscanner4loopEv+0x14>
    return data_;
   b61bc:	f8df 8288 	ldr.w	r8, [pc, #648]	; b6448 <_ZN13Beaconscanner4loopEv+0x2b8>
    return data_ + size_;
   b61c0:	e9d8 5300 	ldrd	r5, r3, [r8]
   b61c4:	2664      	movs	r6, #100	; 0x64
   b61c6:	fb06 5603 	mla	r6, r6, r3, r5
#endif
#ifdef SUPPORT_EDDYSTONE
    for (auto& e : Eddystone::beacons) {
        if (_callback && e.newly_scanned) {
            _callback(e, NEW);
            e.newly_scanned = false;
   b61ca:	2700      	movs	r7, #0
    for (auto& e : Eddystone::beacons) {
   b61cc:	42ae      	cmp	r6, r5
   b61ce:	d009      	beq.n	b61e4 <_ZN13Beaconscanner4loopEv+0x54>
        if (_callback && e.newly_scanned) {
   b61d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b61d2:	b12b      	cbz	r3, b61e0 <_ZN13Beaconscanner4loopEv+0x50>
   b61d4:	796a      	ldrb	r2, [r5, #5]
   b61d6:	b11a      	cbz	r2, b61e0 <_ZN13Beaconscanner4loopEv+0x50>
            _callback(e, NEW);
   b61d8:	2101      	movs	r1, #1
   b61da:	4628      	mov	r0, r5
   b61dc:	4798      	blx	r3
            e.newly_scanned = false;
   b61de:	716f      	strb	r7, [r5, #5]
    for (auto& e : Eddystone::beacons) {
   b61e0:	3564      	adds	r5, #100	; 0x64
   b61e2:	e7f3      	b.n	b61cc <_ZN13Beaconscanner4loopEv+0x3c>
    return data_;
   b61e4:	4f95      	ldr	r7, [pc, #596]	; (b643c <_ZN13Beaconscanner4loopEv+0x2ac>)
    return data_ + size_;
   b61e6:	e9d7 5300 	ldrd	r5, r3, [r7]
   b61ea:	2624      	movs	r6, #36	; 0x24
   b61ec:	fb06 5603 	mla	r6, r6, r3, r5
#endif
#ifdef SUPPORT_KONTAKT
    for (KontaktTag& k : KontaktTag::beacons) {
        if (_callback && k.newly_scanned) {
            _callback(k, NEW);
            k.newly_scanned = false;
   b61f0:	f04f 0a00 	mov.w	sl, #0
    for (KontaktTag& k : KontaktTag::beacons) {
   b61f4:	42ae      	cmp	r6, r5
   b61f6:	d00a      	beq.n	b620e <_ZN13Beaconscanner4loopEv+0x7e>
        if (_callback && k.newly_scanned) {
   b61f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b61fa:	b133      	cbz	r3, b620a <_ZN13Beaconscanner4loopEv+0x7a>
   b61fc:	796a      	ldrb	r2, [r5, #5]
   b61fe:	b122      	cbz	r2, b620a <_ZN13Beaconscanner4loopEv+0x7a>
            _callback(k, NEW);
   b6200:	2101      	movs	r1, #1
   b6202:	4628      	mov	r0, r5
   b6204:	4798      	blx	r3
            k.newly_scanned = false;
   b6206:	f885 a005 	strb.w	sl, [r5, #5]
    for (KontaktTag& k : KontaktTag::beacons) {
   b620a:	3524      	adds	r5, #36	; 0x24
   b620c:	e7f2      	b.n	b61f4 <_ZN13Beaconscanner4loopEv+0x64>
    return data_;
   b620e:	4e8c      	ldr	r6, [pc, #560]	; (b6440 <_ZN13Beaconscanner4loopEv+0x2b0>)
    return data_ + size_;
   b6210:	e9d6 5300 	ldrd	r5, r3, [r6]
   b6214:	f04f 0a88 	mov.w	sl, #136	; 0x88
   b6218:	fb0a 5a03 	mla	sl, sl, r3, r5
#endif
#ifdef SUPPORT_LAIRDBT510
    for (LairdBt510& l : LairdBt510::beacons) {
        if (_callback && l.newly_scanned) {
            _callback(l, NEW);
            l.newly_scanned = false;
   b621c:	f04f 0b00 	mov.w	fp, #0
    for (LairdBt510& l : LairdBt510::beacons) {
   b6220:	4555      	cmp	r5, sl
   b6222:	d00d      	beq.n	b6240 <_ZN13Beaconscanner4loopEv+0xb0>
        if (_callback && l.newly_scanned) {
   b6224:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6226:	b133      	cbz	r3, b6236 <_ZN13Beaconscanner4loopEv+0xa6>
   b6228:	796a      	ldrb	r2, [r5, #5]
   b622a:	b122      	cbz	r2, b6236 <_ZN13Beaconscanner4loopEv+0xa6>
            _callback(l, NEW);
   b622c:	2101      	movs	r1, #1
   b622e:	4628      	mov	r0, r5
   b6230:	4798      	blx	r3
            l.newly_scanned = false;
   b6232:	f885 b005 	strb.w	fp, [r5, #5]
        }
        l.loop();
   b6236:	4628      	mov	r0, r5
   b6238:	f7ff fa12 	bl	b5660 <_ZN10LairdBt5104loopEv>
    for (LairdBt510& l : LairdBt510::beacons) {
   b623c:	3588      	adds	r5, #136	; 0x88
   b623e:	e7ef      	b.n	b6220 <_ZN13Beaconscanner4loopEv+0x90>
    }
#endif

    if (_scan_done) {
   b6240:	79e3      	ldrb	r3, [r4, #7]
   b6242:	2b00      	cmp	r3, #0
   b6244:	f000 80dd 	beq.w	b6402 <_ZN13Beaconscanner4loopEv+0x272>
   b6248:	e9d9 5300 	ldrd	r5, r3, [r9]
        for (auto& i : iBeaconScan::beacons) {
            if (i.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(i, REMOVED);
                }
                i.missed_scan = -1; // Use an invalid value to mark for removal
   b624c:	f04f 0bff 	mov.w	fp, #255	; 0xff
   b6250:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
        for (auto& i : iBeaconScan::beacons) {
   b6254:	45aa      	cmp	sl, r5
   b6256:	d010      	beq.n	b627a <_ZN13Beaconscanner4loopEv+0xea>
            if (i.missed_scan >= _clear_missed) {
   b6258:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b625c:	7b22      	ldrb	r2, [r4, #12]
   b625e:	4293      	cmp	r3, r2
   b6260:	db08      	blt.n	b6274 <_ZN13Beaconscanner4loopEv+0xe4>
                if (_callback) {
   b6262:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6264:	b113      	cbz	r3, b626c <_ZN13Beaconscanner4loopEv+0xdc>
                    _callback(i, REMOVED);
   b6266:	2102      	movs	r1, #2
   b6268:	4628      	mov	r0, r5
   b626a:	4798      	blx	r3
                i.missed_scan = -1; // Use an invalid value to mark for removal
   b626c:	f885 b004 	strb.w	fp, [r5, #4]
        for (auto& i : iBeaconScan::beacons) {
   b6270:	3540      	adds	r5, #64	; 0x40
   b6272:	e7ef      	b.n	b6254 <_ZN13Beaconscanner4loopEv+0xc4>
            } else {
                i.missed_scan++;
   b6274:	3301      	adds	r3, #1
   b6276:	712b      	strb	r3, [r5, #4]
   b6278:	e7fa      	b.n	b6270 <_ZN13Beaconscanner4loopEv+0xe0>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b627a:	a801      	add	r0, sp, #4
   b627c:	f7ff fd0a 	bl	b5c94 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < iBeaconScan::beacons.size(); i++) {
   b6280:	2500      	movs	r5, #0
    return size_;
   b6282:	f8d9 2004 	ldr.w	r2, [r9, #4]
   b6286:	4295      	cmp	r5, r2
   b6288:	db1a      	blt.n	b62c0 <_ZN13Beaconscanner4loopEv+0x130>
        SINGLE_THREADED_BLOCK() {
   b628a:	a801      	add	r0, sp, #4
   b628c:	f7ff fd0a 	bl	b5ca4 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b6290:	e9d8 5300 	ldrd	r5, r3, [r8]
   b6294:	f04f 0964 	mov.w	r9, #100	; 0x64
   b6298:	fb09 5903 	mla	r9, r9, r3, r5
        for (auto& e : Eddystone::beacons) {
            if (e.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(e, REMOVED);
                }
                e.missed_scan = -1;
   b629c:	f04f 0aff 	mov.w	sl, #255	; 0xff
        for (auto& e : Eddystone::beacons) {
   b62a0:	45a9      	cmp	r9, r5
   b62a2:	d026      	beq.n	b62f2 <_ZN13Beaconscanner4loopEv+0x162>
            if (e.missed_scan >= _clear_missed) {
   b62a4:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b62a8:	7b22      	ldrb	r2, [r4, #12]
   b62aa:	4293      	cmp	r3, r2
   b62ac:	db1e      	blt.n	b62ec <_ZN13Beaconscanner4loopEv+0x15c>
                if (_callback) {
   b62ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b62b0:	b113      	cbz	r3, b62b8 <_ZN13Beaconscanner4loopEv+0x128>
                    _callback(e, REMOVED);
   b62b2:	2102      	movs	r1, #2
   b62b4:	4628      	mov	r0, r5
   b62b6:	4798      	blx	r3
                e.missed_scan = -1;
   b62b8:	f885 a004 	strb.w	sl, [r5, #4]
        for (auto& e : Eddystone::beacons) {
   b62bc:	3564      	adds	r5, #100	; 0x64
   b62be:	e7ef      	b.n	b62a0 <_ZN13Beaconscanner4loopEv+0x110>
    return data_[i];
   b62c0:	f8d9 3000 	ldr.w	r3, [r9]
   b62c4:	eb03 1085 	add.w	r0, r3, r5, lsl #6
                if (iBeaconScan::beacons.at(i).missed_scan < 0) {
   b62c8:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b62cc:	2900      	cmp	r1, #0
   b62ce:	da0b      	bge.n	b62e8 <_ZN13Beaconscanner4loopEv+0x158>
    move(p, p + n, data_ + size_);
   b62d0:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   b62d4:	f100 0140 	add.w	r1, r0, #64	; 0x40
   b62d8:	f7ff fc1e 	bl	b5b18 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b62dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   b62e0:	3b01      	subs	r3, #1
   b62e2:	f8c9 3004 	str.w	r3, [r9, #4]
                    i--;
   b62e6:	3d01      	subs	r5, #1
            for (int i = 0; i < iBeaconScan::beacons.size(); i++) {
   b62e8:	3501      	adds	r5, #1
   b62ea:	e7ca      	b.n	b6282 <_ZN13Beaconscanner4loopEv+0xf2>
            } else {
                e.missed_scan++;
   b62ec:	3301      	adds	r3, #1
   b62ee:	712b      	strb	r3, [r5, #4]
   b62f0:	e7e4      	b.n	b62bc <_ZN13Beaconscanner4loopEv+0x12c>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b62f2:	a801      	add	r0, sp, #4
   b62f4:	f7ff fcce 	bl	b5c94 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < Eddystone::beacons.size(); i++) {
   b62f8:	2500      	movs	r5, #0
    return data_[i];
   b62fa:	f04f 0964 	mov.w	r9, #100	; 0x64
    return size_;
   b62fe:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b6302:	4295      	cmp	r5, r2
   b6304:	db1a      	blt.n	b633c <_ZN13Beaconscanner4loopEv+0x1ac>
        SINGLE_THREADED_BLOCK() {
   b6306:	a801      	add	r0, sp, #4
   b6308:	f7ff fccc 	bl	b5ca4 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b630c:	e9d7 5300 	ldrd	r5, r3, [r7]
   b6310:	f04f 0824 	mov.w	r8, #36	; 0x24
   b6314:	fb08 5803 	mla	r8, r8, r3, r5
        for (auto& k : KontaktTag::beacons) {
            if (k.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(k, REMOVED);
                } 
                k.missed_scan = -1;
   b6318:	f04f 09ff 	mov.w	r9, #255	; 0xff
        for (auto& k : KontaktTag::beacons) {
   b631c:	45a8      	cmp	r8, r5
   b631e:	d026      	beq.n	b636e <_ZN13Beaconscanner4loopEv+0x1de>
            if (k.missed_scan >= _clear_missed) {
   b6320:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6324:	7b22      	ldrb	r2, [r4, #12]
   b6326:	4293      	cmp	r3, r2
   b6328:	db1e      	blt.n	b6368 <_ZN13Beaconscanner4loopEv+0x1d8>
                if (_callback) {
   b632a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b632c:	b113      	cbz	r3, b6334 <_ZN13Beaconscanner4loopEv+0x1a4>
                    _callback(k, REMOVED);
   b632e:	2102      	movs	r1, #2
   b6330:	4628      	mov	r0, r5
   b6332:	4798      	blx	r3
                k.missed_scan = -1;
   b6334:	f885 9004 	strb.w	r9, [r5, #4]
        for (auto& k : KontaktTag::beacons) {
   b6338:	3524      	adds	r5, #36	; 0x24
   b633a:	e7ef      	b.n	b631c <_ZN13Beaconscanner4loopEv+0x18c>
    return data_[i];
   b633c:	f8d8 3000 	ldr.w	r3, [r8]
   b6340:	fb09 3005 	mla	r0, r9, r5, r3
                if (Eddystone::beacons.at(i).missed_scan < 0) {
   b6344:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b6348:	2900      	cmp	r1, #0
   b634a:	da0b      	bge.n	b6364 <_ZN13Beaconscanner4loopEv+0x1d4>
    move(p, p + n, data_ + size_);
   b634c:	fb09 3202 	mla	r2, r9, r2, r3
   b6350:	f100 0164 	add.w	r1, r0, #100	; 0x64
   b6354:	f7ff fde6 	bl	b5f24 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b6358:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b635c:	3b01      	subs	r3, #1
   b635e:	f8c8 3004 	str.w	r3, [r8, #4]
                    i--;
   b6362:	3d01      	subs	r5, #1
            for (int i = 0; i < Eddystone::beacons.size(); i++) {
   b6364:	3501      	adds	r5, #1
   b6366:	e7ca      	b.n	b62fe <_ZN13Beaconscanner4loopEv+0x16e>
            } else {
                k.missed_scan++;
   b6368:	3301      	adds	r3, #1
   b636a:	712b      	strb	r3, [r5, #4]
   b636c:	e7e4      	b.n	b6338 <_ZN13Beaconscanner4loopEv+0x1a8>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b636e:	a801      	add	r0, sp, #4
   b6370:	f7ff fc90 	bl	b5c94 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < KontaktTag::beacons.size(); i++) {
   b6374:	2500      	movs	r5, #0
    return data_[i];
   b6376:	f04f 0824 	mov.w	r8, #36	; 0x24
    return size_;
   b637a:	687a      	ldr	r2, [r7, #4]
   b637c:	4295      	cmp	r5, r2
   b637e:	db1c      	blt.n	b63ba <_ZN13Beaconscanner4loopEv+0x22a>
        SINGLE_THREADED_BLOCK() {
   b6380:	a801      	add	r0, sp, #4
   b6382:	f7ff fc8f 	bl	b5ca4 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b6386:	e9d6 5700 	ldrd	r5, r7, [r6]
   b638a:	2388      	movs	r3, #136	; 0x88
   b638c:	fb03 5707 	mla	r7, r3, r7, r5
        for (auto& l : LairdBt510::beacons) {
            if (l.state_ == LairdBt510::State::IDLE && l.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(l, REMOVED);
                }
                l.missed_scan = -1;
   b6390:	f04f 08ff 	mov.w	r8, #255	; 0xff
        for (auto& l : LairdBt510::beacons) {
   b6394:	42af      	cmp	r7, r5
   b6396:	d026      	beq.n	b63e6 <_ZN13Beaconscanner4loopEv+0x256>
            if (l.state_ == LairdBt510::State::IDLE && l.missed_scan >= _clear_missed) {
   b6398:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   b639c:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b63a0:	b9f2      	cbnz	r2, b63e0 <_ZN13Beaconscanner4loopEv+0x250>
   b63a2:	7b22      	ldrb	r2, [r4, #12]
   b63a4:	4293      	cmp	r3, r2
   b63a6:	db1b      	blt.n	b63e0 <_ZN13Beaconscanner4loopEv+0x250>
                if (_callback) {
   b63a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b63aa:	b113      	cbz	r3, b63b2 <_ZN13Beaconscanner4loopEv+0x222>
                    _callback(l, REMOVED);
   b63ac:	2102      	movs	r1, #2
   b63ae:	4628      	mov	r0, r5
   b63b0:	4798      	blx	r3
                l.missed_scan = -1;
   b63b2:	f885 8004 	strb.w	r8, [r5, #4]
        for (auto& l : LairdBt510::beacons) {
   b63b6:	3588      	adds	r5, #136	; 0x88
   b63b8:	e7ec      	b.n	b6394 <_ZN13Beaconscanner4loopEv+0x204>
    return data_[i];
   b63ba:	683b      	ldr	r3, [r7, #0]
   b63bc:	fb08 3005 	mla	r0, r8, r5, r3
                if (KontaktTag::beacons.at(i).missed_scan < 0) {
   b63c0:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b63c4:	2900      	cmp	r1, #0
   b63c6:	da09      	bge.n	b63dc <_ZN13Beaconscanner4loopEv+0x24c>
    move(p, p + n, data_ + size_);
   b63c8:	fb08 3202 	mla	r2, r8, r2, r3
   b63cc:	f100 0124 	add.w	r1, r0, #36	; 0x24
   b63d0:	f7fe fa38 	bl	b4844 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b63d4:	687b      	ldr	r3, [r7, #4]
   b63d6:	3b01      	subs	r3, #1
   b63d8:	607b      	str	r3, [r7, #4]
                    i--;
   b63da:	3d01      	subs	r5, #1
            for (int i = 0; i < KontaktTag::beacons.size(); i++) {
   b63dc:	3501      	adds	r5, #1
   b63de:	e7cc      	b.n	b637a <_ZN13Beaconscanner4loopEv+0x1ea>
            } else {
                l.missed_scan++;
   b63e0:	3301      	adds	r3, #1
   b63e2:	712b      	strb	r3, [r5, #4]
   b63e4:	e7e7      	b.n	b63b6 <_ZN13Beaconscanner4loopEv+0x226>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b63e6:	a801      	add	r0, sp, #4
   b63e8:	f7ff fc54 	bl	b5c94 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < LairdBt510::beacons.size(); i++) {
   b63ec:	2700      	movs	r7, #0
    return data_[i];
   b63ee:	f04f 0888 	mov.w	r8, #136	; 0x88
   b63f2:	6873      	ldr	r3, [r6, #4]
   b63f4:	429f      	cmp	r7, r3
   b63f6:	db07      	blt.n	b6408 <_ZN13Beaconscanner4loopEv+0x278>
        SINGLE_THREADED_BLOCK() {
   b63f8:	a801      	add	r0, sp, #4
   b63fa:	f7ff fc53 	bl	b5ca4 <_ZN21SingleThreadedSectionD1Ev>
                    i--;
                }
            }
        }
#endif
        _scan_done = false;
   b63fe:	2300      	movs	r3, #0
   b6400:	71e3      	strb	r3, [r4, #7]
    }
}
   b6402:	b003      	add	sp, #12
   b6404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6408:	6835      	ldr	r5, [r6, #0]
   b640a:	fb08 5507 	mla	r5, r8, r7, r5
                if (LairdBt510::beacons.at(i).missed_scan < 0) {
   b640e:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6412:	2b00      	cmp	r3, #0
   b6414:	da0f      	bge.n	b6436 <_ZN13Beaconscanner4loopEv+0x2a6>
            p->~T();
   b6416:	4628      	mov	r0, r5
   b6418:	f7fe fc00 	bl	b4c1c <_ZN10LairdBt510D1Ev>
    move(p, p + n, data_ + size_);
   b641c:	e9d6 3200 	ldrd	r3, r2, [r6]
   b6420:	f105 0188 	add.w	r1, r5, #136	; 0x88
   b6424:	fb08 3202 	mla	r2, r8, r2, r3
   b6428:	4628      	mov	r0, r5
   b642a:	f7fe fec6 	bl	b51ba <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b642e:	6873      	ldr	r3, [r6, #4]
   b6430:	3b01      	subs	r3, #1
   b6432:	6073      	str	r3, [r6, #4]
                    i--;
   b6434:	3f01      	subs	r7, #1
            for (int i = 0; i < LairdBt510::beacons.size(); i++) {
   b6436:	3701      	adds	r7, #1
   b6438:	e7db      	b.n	b63f2 <_ZN13Beaconscanner4loopEv+0x262>
   b643a:	bf00      	nop
   b643c:	2003e68c 	.word	0x2003e68c
   b6440:	2003e6a4 	.word	0x2003e6a4
   b6444:	2003e6b8 	.word	0x2003e6b8
   b6448:	2003e6c8 	.word	0x2003e6c8

000b644c <_ZN5spark10JSONWriter5valueERK6String>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
   b644c:	688a      	ldr	r2, [r1, #8]
   b644e:	6809      	ldr	r1, [r1, #0]
   b6450:	f003 bf70 	b.w	ba334 <_ZN5spark10JSONWriter5valueEPKcj>

000b6454 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE>:
        }
    }
}

bool Eddystone::isBeacon(const BleScanResult *scanResult)
{
   b6454:	b530      	push	{r4, r5, lr}
        return advertisingData_;
   b6456:	f100 0508 	add.w	r5, r0, #8
   b645a:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).contains(BleAdvertisingDataType::SERVICE_DATA))
   b645c:	2116      	movs	r1, #22
   b645e:	4628      	mov	r0, r5
   b6460:	f001 fb81 	bl	b7b66 <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>
   b6464:	4604      	mov	r4, r0
   b6466:	b188      	cbz	r0, b648c <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x38>
    {
        uint8_t buf[BLE_MAX_ADV_DATA_LEN];
        uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b6468:	231f      	movs	r3, #31
   b646a:	466a      	mov	r2, sp
   b646c:	2116      	movs	r1, #22
   b646e:	4628      	mov	r0, r5
   b6470:	f001 fb17 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        if (count > 3 && buf[0] == 0xAA && buf[1] == 0xFE) // Eddystone UUID
   b6474:	b2c0      	uxtb	r0, r0
   b6476:	2803      	cmp	r0, #3
   b6478:	d907      	bls.n	b648a <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x36>
   b647a:	f89d 3000 	ldrb.w	r3, [sp]
   b647e:	2baa      	cmp	r3, #170	; 0xaa
   b6480:	d103      	bne.n	b648a <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x36>
   b6482:	f89d 3001 	ldrb.w	r3, [sp, #1]
   b6486:	2bfe      	cmp	r3, #254	; 0xfe
   b6488:	d000      	beq.n	b648c <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x38>
            return true;
    }
    return false;
   b648a:	2400      	movs	r4, #0
}
   b648c:	4620      	mov	r0, r4
   b648e:	b009      	add	sp, #36	; 0x24
   b6490:	bd30      	pop	{r4, r5, pc}

000b6492 <_ZN9Eddystone3Uid12populateDataEPha>:
        writer->endObject();
}

void Eddystone::Uid::populateData(uint8_t *buf, int8_t rssi)
{
    found = true;
   b6492:	2301      	movs	r3, #1
   b6494:	7003      	strb	r3, [r0, #0]
    power = (int8_t)buf[3];
   b6496:	78cb      	ldrb	r3, [r1, #3]
   b6498:	7143      	strb	r3, [r0, #5]
    memcpy(name,buf+4,10);
   b649a:	684b      	ldr	r3, [r1, #4]
   b649c:	f8c0 3006 	str.w	r3, [r0, #6]
   b64a0:	688b      	ldr	r3, [r1, #8]
   b64a2:	f8c0 300a 	str.w	r3, [r0, #10]
   b64a6:	898b      	ldrh	r3, [r1, #12]
   b64a8:	81c3      	strh	r3, [r0, #14]
    memcpy(instance, buf+14,6);
   b64aa:	f8d1 300e 	ldr.w	r3, [r1, #14]
   b64ae:	6103      	str	r3, [r0, #16]
   b64b0:	8a4b      	ldrh	r3, [r1, #18]
   b64b2:	8283      	strh	r3, [r0, #20]
    this->rssi+=rssi;
   b64b4:	8843      	ldrh	r3, [r0, #2]
   b64b6:	441a      	add	r2, r3
    rssi_count++;
   b64b8:	7903      	ldrb	r3, [r0, #4]
    this->rssi+=rssi;
   b64ba:	8042      	strh	r2, [r0, #2]
    rssi_count++;
   b64bc:	3301      	adds	r3, #1
   b64be:	7103      	strb	r3, [r0, #4]
}
   b64c0:	4770      	bx	lr

000b64c2 <_ZN9Eddystone3Url12populateDataEPhah>:

void Eddystone::Url::populateData(uint8_t *buf, int8_t rssi, uint8_t packet_size)
{
   b64c2:	b538      	push	{r3, r4, r5, lr}
   b64c4:	4615      	mov	r5, r2
    found = true;
   b64c6:	2201      	movs	r2, #1
   b64c8:	7002      	strb	r2, [r0, #0]
    power = (int8_t)buf[3];
   b64ca:	78ca      	ldrb	r2, [r1, #3]
   b64cc:	7142      	strb	r2, [r0, #5]
    scheme = (uint8_t)buf[4];
   b64ce:	790a      	ldrb	r2, [r1, #4]
   b64d0:	7182      	strb	r2, [r0, #6]
    locator_size = packet_size - 5;
   b64d2:	3b05      	subs	r3, #5
{
   b64d4:	4604      	mov	r4, r0
    locator_size = packet_size - 5;
   b64d6:	b2da      	uxtb	r2, r3
   b64d8:	7602      	strb	r2, [r0, #24]
    memcpy(locator, buf+5,locator_size);
   b64da:	3105      	adds	r1, #5
   b64dc:	3007      	adds	r0, #7
   b64de:	f004 fca1 	bl	bae24 <memcpy>
    this->rssi+=rssi;
   b64e2:	8862      	ldrh	r2, [r4, #2]
    rssi_count++;
   b64e4:	7923      	ldrb	r3, [r4, #4]
    this->rssi+=rssi;
   b64e6:	4415      	add	r5, r2
    rssi_count++;
   b64e8:	3301      	adds	r3, #1
    this->rssi+=rssi;
   b64ea:	8065      	strh	r5, [r4, #2]
    rssi_count++;
   b64ec:	7123      	strb	r3, [r4, #4]
}
   b64ee:	bd38      	pop	{r3, r4, r5, pc}

000b64f0 <_ZN9Eddystone3Tlm12populateDataEPh>:

void Eddystone::Tlm::populateData(uint8_t *buf)
{
    if (buf[3] == 0x00)     // Version. Only one that exists right now
   b64f0:	78cb      	ldrb	r3, [r1, #3]
   b64f2:	b9f3      	cbnz	r3, b6532 <_ZN9Eddystone3Tlm12populateDataEPh+0x42>
    {
        found = true;
   b64f4:	2301      	movs	r3, #1
   b64f6:	7003      	strb	r3, [r0, #0]
        vbatt = (buf[4]<<8)+buf[5];
   b64f8:	790a      	ldrb	r2, [r1, #4]
   b64fa:	794b      	ldrb	r3, [r1, #5]
   b64fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6500:	8043      	strh	r3, [r0, #2]
        memcpy(temp, buf+6, 2);
   b6502:	88cb      	ldrh	r3, [r1, #6]
   b6504:	8083      	strh	r3, [r0, #4]
        adv_cnt = (buf[8]<<24)+(buf[9]<<16)+(buf[10]<<8)+buf[11];
   b6506:	7a4b      	ldrb	r3, [r1, #9]
   b6508:	7a0a      	ldrb	r2, [r1, #8]
   b650a:	041b      	lsls	r3, r3, #16
   b650c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   b6510:	7a8a      	ldrb	r2, [r1, #10]
   b6512:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6516:	7aca      	ldrb	r2, [r1, #11]
   b6518:	4413      	add	r3, r2
   b651a:	6083      	str	r3, [r0, #8]
        sec_cnt = (buf[12]<<24)+(buf[13]<<16)+(buf[14]<<8)+buf[15];
   b651c:	7b4b      	ldrb	r3, [r1, #13]
   b651e:	7b0a      	ldrb	r2, [r1, #12]
   b6520:	041b      	lsls	r3, r3, #16
   b6522:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   b6526:	7b8a      	ldrb	r2, [r1, #14]
   b6528:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b652c:	7bca      	ldrb	r2, [r1, #15]
   b652e:	4413      	add	r3, r2
   b6530:	60c3      	str	r3, [r0, #12]
    }
}
   b6532:	4770      	bx	lr

000b6534 <_ZN9Eddystone3Kkm12populateDataEPhh>:
#define KKM_SENSOR_MASK_VOLTAGE     0x1
#define KKM_SENSOR_MASK_TEMP        0x2
#define KKM_SENSOR_MASK_HUME        0x4
#define KKM_SENSOR_MASK_ACC_AIX     0x8
void Eddystone::Kkm::populateData(uint8_t *buf, uint8_t size) {
    found = true;
   b6534:	2301      	movs	r3, #1
   b6536:	7003      	strb	r3, [r0, #0]
void Eddystone::Kkm::populateData(uint8_t *buf, uint8_t size) {
   b6538:	b570      	push	{r4, r5, r6, lr}
    uint8_t cursor = 3;
    //uint8_t version = buf[cursor++];
    cursor++;   // Currently not using version. Remove this statement if version is uncommented out.
    uint8_t sensorMask = buf[cursor++];
   b653a:	790c      	ldrb	r4, [r1, #4]
    if ( (sensorMask & KKM_SENSOR_MASK_VOLTAGE) != 0) {
   b653c:	07e3      	lsls	r3, r4, #31
   b653e:	d53a      	bpl.n	b65b6 <_ZN9Eddystone3Kkm12populateDataEPhh+0x82>
        if ( cursor + 2 > size) return;
   b6540:	2a06      	cmp	r2, #6
   b6542:	d937      	bls.n	b65b4 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        vbatt = buf[cursor] << 8 | buf[cursor+1];
   b6544:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   b6548:	ba5b      	rev16	r3, r3
   b654a:	8043      	strh	r3, [r0, #2]
        cursor += 2;
   b654c:	2307      	movs	r3, #7
    }
    if ( (sensorMask & KKM_SENSOR_MASK_TEMP) != 0) {
   b654e:	07a6      	lsls	r6, r4, #30
   b6550:	d509      	bpl.n	b6566 <_ZN9Eddystone3Kkm12populateDataEPhh+0x32>
        if ( cursor + 2 > size) return;
   b6552:	1c5d      	adds	r5, r3, #1
   b6554:	b2ed      	uxtb	r5, r5
   b6556:	4295      	cmp	r5, r2
   b6558:	d22c      	bcs.n	b65b4 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        temp_integer = buf[cursor++];
   b655a:	5cce      	ldrb	r6, [r1, r3]
   b655c:	7106      	strb	r6, [r0, #4]
        temp_fraction = buf[cursor++]; 
   b655e:	5d4d      	ldrb	r5, [r1, r5]
   b6560:	7145      	strb	r5, [r0, #5]
   b6562:	3302      	adds	r3, #2
   b6564:	b2db      	uxtb	r3, r3
    }
    if ( (sensorMask & KKM_SENSOR_MASK_HUME) != 0) {
   b6566:	0765      	lsls	r5, r4, #29
   b6568:	d505      	bpl.n	b6576 <_ZN9Eddystone3Kkm12populateDataEPhh+0x42>
        if (cursor + 2 > size) return;
   b656a:	1c5d      	adds	r5, r3, #1
   b656c:	b2ed      	uxtb	r5, r5
   b656e:	4295      	cmp	r5, r2
   b6570:	d220      	bcs.n	b65b4 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        // TODO: Add humidity
        cursor +=2;
   b6572:	3302      	adds	r3, #2
   b6574:	b2db      	uxtb	r3, r3
    }
    if ( (sensorMask & KKM_SENSOR_MASK_ACC_AIX) != 0) {
   b6576:	0724      	lsls	r4, r4, #28
   b6578:	d51c      	bpl.n	b65b4 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        if (cursor + 6 > size) return;
   b657a:	1d5c      	adds	r4, r3, #5
   b657c:	b2e4      	uxtb	r4, r4
   b657e:	4294      	cmp	r4, r2
   b6580:	d218      	bcs.n	b65b4 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        accel_data = true;
   b6582:	2201      	movs	r2, #1
        x_axis = buf[cursor] << 8 | buf[cursor+1];
   b6584:	189d      	adds	r5, r3, r2
   b6586:	b2ed      	uxtb	r5, r5
        accel_data = true;
   b6588:	7302      	strb	r2, [r0, #12]
        x_axis = buf[cursor] << 8 | buf[cursor+1];
   b658a:	5cce      	ldrb	r6, [r1, r3]
   b658c:	5d4a      	ldrb	r2, [r1, r5]
   b658e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   b6592:	80c2      	strh	r2, [r0, #6]
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b6594:	1cdd      	adds	r5, r3, #3
   b6596:	1c9a      	adds	r2, r3, #2
   b6598:	b2d2      	uxtb	r2, r2
   b659a:	b2ed      	uxtb	r5, r5
   b659c:	5c8e      	ldrb	r6, [r1, r2]
   b659e:	5d4a      	ldrb	r2, [r1, r5]
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b65a0:	3304      	adds	r3, #4
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b65a2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b65a6:	b2db      	uxtb	r3, r3
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b65a8:	8102      	strh	r2, [r0, #8]
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b65aa:	5cca      	ldrb	r2, [r1, r3]
   b65ac:	5d0b      	ldrb	r3, [r1, r4]
   b65ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   b65b2:	8143      	strh	r3, [r0, #10]
        cursor += 6;
    }
}
   b65b4:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t sensorMask = buf[cursor++];
   b65b6:	2305      	movs	r3, #5
   b65b8:	e7c9      	b.n	b654e <_ZN9Eddystone3Kkm12populateDataEPhh+0x1a>
	...

000b65bc <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE>:
{
   b65bc:	b530      	push	{r4, r5, lr}
   b65be:	460d      	mov	r5, r1
   b65c0:	b089      	sub	sp, #36	; 0x24
   b65c2:	4604      	mov	r4, r0
    address = ADDRESS(scanResult);
   b65c4:	3007      	adds	r0, #7
   b65c6:	f001 f85a 	bl	b767e <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, sizeof(buf));
   b65ca:	231f      	movs	r3, #31
   b65cc:	466a      	mov	r2, sp
   b65ce:	2116      	movs	r1, #22
   b65d0:	f105 0008 	add.w	r0, r5, #8
   b65d4:	f001 fa65 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b65d8:	b2c3      	uxtb	r3, r0
    if (count > 2 && buf[0] == 0xAA && buf[1] == 0xFE) // Eddystone UUID
   b65da:	2b02      	cmp	r3, #2
   b65dc:	d928      	bls.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b65de:	f89d 2000 	ldrb.w	r2, [sp]
   b65e2:	2aaa      	cmp	r2, #170	; 0xaa
   b65e4:	d124      	bne.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b65e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
   b65ea:	2afe      	cmp	r2, #254	; 0xfe
   b65ec:	d120      	bne.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
        switch (buf[2])
   b65ee:	f89d 2002 	ldrb.w	r2, [sp, #2]
   b65f2:	2a20      	cmp	r2, #32
   b65f4:	d028      	beq.n	b6648 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x8c>
   b65f6:	d807      	bhi.n	b6608 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x4c>
   b65f8:	b18a      	cbz	r2, b661e <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x62>
   b65fa:	2a10      	cmp	r2, #16
   b65fc:	d01a      	beq.n	b6634 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x78>
            Log.info("Eddystone format not supported: %02X", buf[2]);
   b65fe:	4916      	ldr	r1, [pc, #88]	; (b6658 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x9c>)
   b6600:	4816      	ldr	r0, [pc, #88]	; (b665c <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0xa0>)
   b6602:	f7fe f807 	bl	b4614 <_ZNK5spark6Logger4infoEPKcz>
}
   b6606:	e013      	b.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
        switch (buf[2])
   b6608:	2a21      	cmp	r2, #33	; 0x21
   b660a:	d1f8      	bne.n	b65fe <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x42>
            if (count >= 5) kkm.populateData(buf, count);
   b660c:	2b04      	cmp	r3, #4
   b660e:	d90f      	bls.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6610:	461a      	mov	r2, r3
   b6612:	4669      	mov	r1, sp
   b6614:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6618:	f7ff ff8c 	bl	b6534 <_ZN9Eddystone3Kkm12populateDataEPhh>
   b661c:	e008      	b.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
            if (count > 19)
   b661e:	2b13      	cmp	r3, #19
   b6620:	d906      	bls.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                uid.populateData(buf, RSSI(scanResult));
   b6622:	f995 2020 	ldrsb.w	r2, [r5, #32]
   b6626:	4669      	mov	r1, sp
   b6628:	f104 0014 	add.w	r0, r4, #20
   b662c:	f7ff ff31 	bl	b6492 <_ZN9Eddystone3Uid12populateDataEPha>
}
   b6630:	b009      	add	sp, #36	; 0x24
   b6632:	bd30      	pop	{r4, r5, pc}
            if (count > 5)
   b6634:	2b05      	cmp	r3, #5
   b6636:	d9fb      	bls.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                url.populateData(buf, RSSI(scanResult), count);
   b6638:	f995 2020 	ldrsb.w	r2, [r5, #32]
   b663c:	4669      	mov	r1, sp
   b663e:	f104 002a 	add.w	r0, r4, #42	; 0x2a
   b6642:	f7ff ff3e 	bl	b64c2 <_ZN9Eddystone3Url12populateDataEPhah>
   b6646:	e7f3      	b.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
            if (count == 16)      // According to the spec, packet length must be 16
   b6648:	2b10      	cmp	r3, #16
   b664a:	d1f1      	bne.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                tlm.populateData(buf);
   b664c:	4669      	mov	r1, sp
   b664e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6652:	f7ff ff4d 	bl	b64f0 <_ZN9Eddystone3Tlm12populateDataEPh>
   b6656:	e7eb      	b.n	b6630 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6658:	000bb320 	.word	0x000bb320
   b665c:	2003e6f8 	.word	0x2003e6f8

000b6660 <_ZNK9Eddystone3Url9urlStringEv>:
#endif

String Eddystone::Url::urlString() const
{
   b6660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6664:	798b      	ldrb	r3, [r1, #6]
   b6666:	b08e      	sub	sp, #56	; 0x38
   b6668:	4606      	mov	r6, r0
   b666a:	460d      	mov	r5, r1
   b666c:	2b03      	cmp	r3, #3
   b666e:	d826      	bhi.n	b66be <_ZNK9Eddystone3Url9urlStringEv+0x5e>
   b6670:	e8df f003 	tbb	[pc, r3]
   b6674:	2d271f02 	.word	0x2d271f02
    char buf[50];
    uint8_t cursor=0;
    switch(scheme)
    {
        case 0x00:
            cursor+=snprintf(buf,sizeof(buf),"http://www.");
   b6678:	493a      	ldr	r1, [pc, #232]	; (b6764 <_ZNK9Eddystone3Url9urlStringEv+0x104>)
   b667a:	a801      	add	r0, sp, #4
   b667c:	f004 fc3a 	bl	baef4 <strcpy>
   b6680:	240b      	movs	r4, #11
                break;
            case 0x0c:
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
                break;
            case 0x0d:
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b6682:	f8df 8120 	ldr.w	r8, [pc, #288]	; b67a4 <_ZNK9Eddystone3Url9urlStringEv+0x144>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
   b6686:	f8df 9120 	ldr.w	r9, [pc, #288]	; b67a8 <_ZNK9Eddystone3Url9urlStringEv+0x148>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info");
   b668a:	f8df a120 	ldr.w	sl, [pc, #288]	; b67ac <_ZNK9Eddystone3Url9urlStringEv+0x14c>
    switch(scheme)
   b668e:	2700      	movs	r7, #0
    for(uint8_t i=0;i<locator_size;i++)
   b6690:	7e2a      	ldrb	r2, [r5, #24]
   b6692:	b2fb      	uxtb	r3, r7
   b6694:	429a      	cmp	r2, r3
   b6696:	d95b      	bls.n	b6750 <_ZNK9Eddystone3Url9urlStringEv+0xf0>
        switch(locator[i])
   b6698:	442b      	add	r3, r5
   b669a:	79da      	ldrb	r2, [r3, #7]
   b669c:	2a0d      	cmp	r2, #13
   b669e:	d850      	bhi.n	b6742 <_ZNK9Eddystone3Url9urlStringEv+0xe2>
   b66a0:	e8df f002 	tbb	[pc, r2]
   b66a4:	2b29271b 	.word	0x2b29271b
   b66a8:	3a38362d 	.word	0x3a38362d
   b66ac:	49474543 	.word	0x49474543
   b66b0:	4d4b      	.short	0x4d4b
            cursor+=snprintf(buf,sizeof(buf),"https://www.");
   b66b2:	492d      	ldr	r1, [pc, #180]	; (b6768 <_ZNK9Eddystone3Url9urlStringEv+0x108>)
   b66b4:	a801      	add	r0, sp, #4
   b66b6:	f004 fc1d 	bl	baef4 <strcpy>
   b66ba:	240c      	movs	r4, #12
            break;
   b66bc:	e7e1      	b.n	b6682 <_ZNK9Eddystone3Url9urlStringEv+0x22>
    switch(scheme)
   b66be:	2400      	movs	r4, #0
   b66c0:	e7df      	b.n	b6682 <_ZNK9Eddystone3Url9urlStringEv+0x22>
            cursor+=snprintf(buf,sizeof(buf),"http://");
   b66c2:	492a      	ldr	r1, [pc, #168]	; (b676c <_ZNK9Eddystone3Url9urlStringEv+0x10c>)
   b66c4:	a801      	add	r0, sp, #4
   b66c6:	f004 fc15 	bl	baef4 <strcpy>
   b66ca:	2407      	movs	r4, #7
            break;
   b66cc:	e7d9      	b.n	b6682 <_ZNK9Eddystone3Url9urlStringEv+0x22>
            cursor+=snprintf(buf,sizeof(buf),"https://");
   b66ce:	4928      	ldr	r1, [pc, #160]	; (b6770 <_ZNK9Eddystone3Url9urlStringEv+0x110>)
   b66d0:	a801      	add	r0, sp, #4
   b66d2:	f004 fc0f 	bl	baef4 <strcpy>
   b66d6:	2408      	movs	r4, #8
            break;
   b66d8:	e7d3      	b.n	b6682 <_ZNK9Eddystone3Url9urlStringEv+0x22>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".com/");
   b66da:	4a26      	ldr	r2, [pc, #152]	; (b6774 <_ZNK9Eddystone3Url9urlStringEv+0x114>)
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org/");
   b66dc:	ab01      	add	r3, sp, #4
   b66de:	1918      	adds	r0, r3, r4
   b66e0:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b66e4:	f000 fce6 	bl	b70b4 <snprintf>
   b66e8:	1d63      	adds	r3, r4, #5
   b66ea:	b2db      	uxtb	r3, r3
    for(uint8_t i=0;i<locator_size;i++)
   b66ec:	3701      	adds	r7, #1
   b66ee:	461c      	mov	r4, r3
   b66f0:	e7ce      	b.n	b6690 <_ZNK9Eddystone3Url9urlStringEv+0x30>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org/");
   b66f2:	4a21      	ldr	r2, [pc, #132]	; (b6778 <_ZNK9Eddystone3Url9urlStringEv+0x118>)
   b66f4:	e7f2      	b.n	b66dc <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".edu/");
   b66f6:	4a21      	ldr	r2, [pc, #132]	; (b677c <_ZNK9Eddystone3Url9urlStringEv+0x11c>)
   b66f8:	e7f0      	b.n	b66dc <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".net/");
   b66fa:	4a21      	ldr	r2, [pc, #132]	; (b6780 <_ZNK9Eddystone3Url9urlStringEv+0x120>)
   b66fc:	e7ee      	b.n	b66dc <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info/");
   b66fe:	ab01      	add	r3, sp, #4
   b6700:	1918      	adds	r0, r3, r4
   b6702:	4a20      	ldr	r2, [pc, #128]	; (b6784 <_ZNK9Eddystone3Url9urlStringEv+0x124>)
   b6704:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6708:	f000 fcd4 	bl	b70b4 <snprintf>
   b670c:	1da3      	adds	r3, r4, #6
   b670e:	e7ec      	b.n	b66ea <_ZNK9Eddystone3Url9urlStringEv+0x8a>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz/");
   b6710:	4a1d      	ldr	r2, [pc, #116]	; (b6788 <_ZNK9Eddystone3Url9urlStringEv+0x128>)
   b6712:	e7e3      	b.n	b66dc <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov/");
   b6714:	4a1d      	ldr	r2, [pc, #116]	; (b678c <_ZNK9Eddystone3Url9urlStringEv+0x12c>)
   b6716:	e7e1      	b.n	b66dc <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".com");
   b6718:	4a1d      	ldr	r2, [pc, #116]	; (b6790 <_ZNK9Eddystone3Url9urlStringEv+0x130>)
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b671a:	ab01      	add	r3, sp, #4
   b671c:	1918      	adds	r0, r3, r4
   b671e:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6722:	f000 fcc7 	bl	b70b4 <snprintf>
   b6726:	1d23      	adds	r3, r4, #4
   b6728:	e7df      	b.n	b66ea <_ZNK9Eddystone3Url9urlStringEv+0x8a>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org");
   b672a:	4a1a      	ldr	r2, [pc, #104]	; (b6794 <_ZNK9Eddystone3Url9urlStringEv+0x134>)
   b672c:	e7f5      	b.n	b671a <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".edu");
   b672e:	4a1a      	ldr	r2, [pc, #104]	; (b6798 <_ZNK9Eddystone3Url9urlStringEv+0x138>)
   b6730:	e7f3      	b.n	b671a <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".net");
   b6732:	4a1a      	ldr	r2, [pc, #104]	; (b679c <_ZNK9Eddystone3Url9urlStringEv+0x13c>)
   b6734:	e7f1      	b.n	b671a <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info");
   b6736:	4652      	mov	r2, sl
   b6738:	e7d0      	b.n	b66dc <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
   b673a:	464a      	mov	r2, r9
   b673c:	e7ed      	b.n	b671a <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b673e:	4642      	mov	r2, r8
   b6740:	e7eb      	b.n	b671a <_ZNK9Eddystone3Url9urlStringEv+0xba>
                break;
            default:
                buf[cursor++] = locator[i];
   b6742:	a90e      	add	r1, sp, #56	; 0x38
   b6744:	1c63      	adds	r3, r4, #1
   b6746:	440c      	add	r4, r1
   b6748:	b2db      	uxtb	r3, r3
   b674a:	f804 2c34 	strb.w	r2, [r4, #-52]
   b674e:	e7cd      	b.n	b66ec <_ZNK9Eddystone3Url9urlStringEv+0x8c>
        }
    }
    return String::format("%.*s", cursor, buf);
   b6750:	4630      	mov	r0, r6
   b6752:	4913      	ldr	r1, [pc, #76]	; (b67a0 <_ZNK9Eddystone3Url9urlStringEv+0x140>)
   b6754:	ab01      	add	r3, sp, #4
   b6756:	4622      	mov	r2, r4
   b6758:	f000 fe2a 	bl	b73b0 <_ZN6String6formatEPKcz>
}
   b675c:	4630      	mov	r0, r6
   b675e:	b00e      	add	sp, #56	; 0x38
   b6760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6764:	000bb345 	.word	0x000bb345
   b6768:	000bb351 	.word	0x000bb351
   b676c:	000bb35e 	.word	0x000bb35e
   b6770:	000bb366 	.word	0x000bb366
   b6774:	000bb36f 	.word	0x000bb36f
   b6778:	000bb375 	.word	0x000bb375
   b677c:	000bb37b 	.word	0x000bb37b
   b6780:	000bb381 	.word	0x000bb381
   b6784:	000bb387 	.word	0x000bb387
   b6788:	000bb38e 	.word	0x000bb38e
   b678c:	000bb394 	.word	0x000bb394
   b6790:	000bb39a 	.word	0x000bb39a
   b6794:	000bb39f 	.word	0x000bb39f
   b6798:	000bb3a4 	.word	0x000bb3a4
   b679c:	000bb3a9 	.word	0x000bb3a9
   b67a0:	000bb3be 	.word	0x000bb3be
   b67a4:	000bb3b9 	.word	0x000bb3b9
   b67a8:	000bb3b4 	.word	0x000bb3b4
   b67ac:	000bb3ae 	.word	0x000bb3ae

000b67b0 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE>:
{
   b67b0:	b570      	push	{r4, r5, r6, lr}
   b67b2:	b08c      	sub	sp, #48	; 0x30
   b67b4:	4604      	mov	r4, r0
   b67b6:	460d      	mov	r5, r1
        writer->name(address.toString()).beginObject();
   b67b8:	2200      	movs	r2, #0
   b67ba:	1dc1      	adds	r1, r0, #7
   b67bc:	a808      	add	r0, sp, #32
   b67be:	f000 ffeb 	bl	b7798 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b67c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b67c4:	9908      	ldr	r1, [sp, #32]
   b67c6:	4628      	mov	r0, r5
   b67c8:	f003 fda4 	bl	ba314 <_ZN5spark10JSONWriter4nameEPKcj>
   b67cc:	f003 fce8 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
   b67d0:	a808      	add	r0, sp, #32
   b67d2:	f000 fcef 	bl	b71b4 <_ZN6StringD1Ev>
        if (uid.found) 
   b67d6:	7d23      	ldrb	r3, [r4, #20]
   b67d8:	2b00      	cmp	r3, #0
   b67da:	d062      	beq.n	b68a2 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0xf2>
            writer->name("uid").beginObject();
   b67dc:	499f      	ldr	r1, [pc, #636]	; (b6a5c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2ac>)
   b67de:	4628      	mov	r0, r5
   b67e0:	f7fd fe9e 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b67e4:	f003 fcdc 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("power").value(uid.getPower());
   b67e8:	499d      	ldr	r1, [pc, #628]	; (b6a60 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b0>)
   b67ea:	4628      	mov	r0, r5
   b67ec:	f7fd fe98 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b67f0:	f994 1019 	ldrsb.w	r1, [r4, #25]
   b67f4:	f003 fcf8 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->name("namespace").value(uid.namespaceString());
   b67f8:	499a      	ldr	r1, [pc, #616]	; (b6a64 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b4>)
   b67fa:	4628      	mov	r0, r5
   b67fc:	f7fd fe90 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
        uint8_t* getNamespace() {return name;}
        uint8_t* getInstance() {return instance;}
        String namespaceString() const {
            return String::format("%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
                        name[0],name[1],name[2],name[3],name[4],
                        name[5],name[6],name[7],name[8],name[9]);
   b6800:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   b6804:	9307      	str	r3, [sp, #28]
   b6806:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b680a:	9306      	str	r3, [sp, #24]
   b680c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   b6810:	9305      	str	r3, [sp, #20]
   b6812:	f894 3020 	ldrb.w	r3, [r4, #32]
   b6816:	9304      	str	r3, [sp, #16]
   b6818:	7fe3      	ldrb	r3, [r4, #31]
   b681a:	9303      	str	r3, [sp, #12]
   b681c:	7fa3      	ldrb	r3, [r4, #30]
   b681e:	9302      	str	r3, [sp, #8]
   b6820:	7f63      	ldrb	r3, [r4, #29]
   b6822:	9301      	str	r3, [sp, #4]
   b6824:	7f23      	ldrb	r3, [r4, #28]
   b6826:	7ea2      	ldrb	r2, [r4, #26]
   b6828:	498f      	ldr	r1, [pc, #572]	; (b6a68 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b8>)
   b682a:	9300      	str	r3, [sp, #0]
   b682c:	4606      	mov	r6, r0
   b682e:	7ee3      	ldrb	r3, [r4, #27]
   b6830:	a808      	add	r0, sp, #32
   b6832:	f000 fdbd 	bl	b73b0 <_ZN6String6formatEPKcz>
   b6836:	a908      	add	r1, sp, #32
   b6838:	4630      	mov	r0, r6
   b683a:	f7ff fe07 	bl	b644c <_ZN5spark10JSONWriter5valueERK6String>
   b683e:	a808      	add	r0, sp, #32
   b6840:	f000 fcb8 	bl	b71b4 <_ZN6StringD1Ev>
            writer->name("instance").value(uid.instanceString());
   b6844:	4989      	ldr	r1, [pc, #548]	; (b6a6c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2bc>)
   b6846:	4628      	mov	r0, r5
   b6848:	f7fd fe6a 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
        }
        String instanceString() const {
            return String::format("%02X%02X%02X%02X%02X%02X",instance[0],instance[1],instance[2],instance[3],
                        instance[4],instance[5]);
   b684c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   b6850:	9303      	str	r3, [sp, #12]
   b6852:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b6856:	9302      	str	r3, [sp, #8]
   b6858:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b685c:	9301      	str	r3, [sp, #4]
   b685e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b6862:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   b6866:	4982      	ldr	r1, [pc, #520]	; (b6a70 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c0>)
   b6868:	9300      	str	r3, [sp, #0]
   b686a:	4606      	mov	r6, r0
   b686c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   b6870:	a808      	add	r0, sp, #32
   b6872:	f000 fd9d 	bl	b73b0 <_ZN6String6formatEPKcz>
   b6876:	a908      	add	r1, sp, #32
   b6878:	4630      	mov	r0, r6
   b687a:	f7ff fde7 	bl	b644c <_ZN5spark10JSONWriter5valueERK6String>
   b687e:	a808      	add	r0, sp, #32
   b6880:	f000 fc98 	bl	b71b4 <_ZN6StringD1Ev>
            writer->name("rssi").value(uid.getRssi());
   b6884:	497b      	ldr	r1, [pc, #492]	; (b6a74 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c4>)
   b6886:	4628      	mov	r0, r5
   b6888:	f7fd fe4a 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
        int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b688c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
   b6890:	7e23      	ldrb	r3, [r4, #24]
   b6892:	fb91 f1f3 	sdiv	r1, r1, r3
   b6896:	b249      	sxtb	r1, r1
   b6898:	f003 fca6 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b689c:	4628      	mov	r0, r5
   b689e:	f003 fc69 	bl	ba174 <_ZN5spark10JSONWriter9endObjectEv>
        if (url.found)
   b68a2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   b68a6:	b373      	cbz	r3, b6906 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x156>
            writer->name("url").beginObject();
   b68a8:	4973      	ldr	r1, [pc, #460]	; (b6a78 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c8>)
   b68aa:	4628      	mov	r0, r5
   b68ac:	f7fd fe38 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b68b0:	f003 fc76 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("url").value(url.urlString());
   b68b4:	4970      	ldr	r1, [pc, #448]	; (b6a78 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c8>)
   b68b6:	4628      	mov	r0, r5
   b68b8:	f7fd fe32 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b68bc:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   b68c0:	4606      	mov	r6, r0
   b68c2:	a808      	add	r0, sp, #32
   b68c4:	f7ff fecc 	bl	b6660 <_ZNK9Eddystone3Url9urlStringEv>
   b68c8:	a908      	add	r1, sp, #32
   b68ca:	4630      	mov	r0, r6
   b68cc:	f7ff fdbe 	bl	b644c <_ZN5spark10JSONWriter5valueERK6String>
   b68d0:	a808      	add	r0, sp, #32
   b68d2:	f000 fc6f 	bl	b71b4 <_ZN6StringD1Ev>
            writer->name("power").value(url.getPower());
   b68d6:	4962      	ldr	r1, [pc, #392]	; (b6a60 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b0>)
   b68d8:	4628      	mov	r0, r5
   b68da:	f7fd fe21 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b68de:	f994 102f 	ldrsb.w	r1, [r4, #47]	; 0x2f
   b68e2:	f003 fc81 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->name("rssi").value(url.getRssi());
   b68e6:	4963      	ldr	r1, [pc, #396]	; (b6a74 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c4>)
   b68e8:	4628      	mov	r0, r5
   b68ea:	f7fd fe19 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
        Url() {
            found=false;
            rssi=rssi_count=0;
            }
        ~Url() = default;
        int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b68ee:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   b68f2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   b68f6:	fb91 f1f3 	sdiv	r1, r1, r3
   b68fa:	b249      	sxtb	r1, r1
   b68fc:	f003 fc74 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6900:	4628      	mov	r0, r5
   b6902:	f003 fc37 	bl	ba174 <_ZN5spark10JSONWriter9endObjectEv>
        if (tlm.found)
   b6906:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   b690a:	2b00      	cmp	r3, #0
   b690c:	d04c      	beq.n	b69a8 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x1f8>
            writer->name("tlm").beginObject();
   b690e:	495b      	ldr	r1, [pc, #364]	; (b6a7c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2cc>)
   b6910:	4628      	mov	r0, r5
   b6912:	f7fd fe05 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b6916:	f003 fc43 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("vbatt").value(tlm.getVbatt());
   b691a:	4959      	ldr	r1, [pc, #356]	; (b6a80 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d0>)
   b691c:	4628      	mov	r0, r5
   b691e:	f7fd fdff 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
    class Tlm {
    public:
        Tlm() {found=false;}
        ~Tlm() = default;

        float getVbatt() const {return (uint16_t)vbatt/(float)1000;}
   b6922:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   b6926:	ed9f 7a57 	vldr	s14, [pc, #348]	; b6a84 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d4>
   b692a:	ee07 3a90 	vmov	s15, r3
   b692e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6932:	4606      	mov	r6, r0
   b6934:	eec7 7a87 	vdiv.f32	s15, s15, s14
   b6938:	ee17 0a90 	vmov	r0, s15
   b693c:	f004 f87a 	bl	baa34 <__aeabi_f2d>
   b6940:	ec41 0b10 	vmov	d0, r0, r1
   b6944:	4630      	mov	r0, r6
   b6946:	f003 fc73 	bl	ba230 <_ZN5spark10JSONWriter5valueEd>
            writer->name("temp").value(tlm.getTemp());
   b694a:	494f      	ldr	r1, [pc, #316]	; (b6a88 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d8>)
   b694c:	4628      	mov	r0, r5
   b694e:	f7fd fde7 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
        float getTemp() const {return (float)((int8_t)temp[0]+(uint8_t)temp[1]/(float)256);}
   b6952:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   b6956:	eddf 6a4d 	vldr	s13, [pc, #308]	; b6a8c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2dc>
   b695a:	ee07 3a10 	vmov	s14, r3
   b695e:	f994 3048 	ldrsb.w	r3, [r4, #72]	; 0x48
   b6962:	ee07 3a90 	vmov	s15, r3
   b6966:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   b696a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b696e:	4606      	mov	r6, r0
   b6970:	eee7 7a26 	vfma.f32	s15, s14, s13
   b6974:	ee17 0a90 	vmov	r0, s15
   b6978:	f004 f85c 	bl	baa34 <__aeabi_f2d>
   b697c:	ec41 0b10 	vmov	d0, r0, r1
   b6980:	4630      	mov	r0, r6
   b6982:	f003 fc55 	bl	ba230 <_ZN5spark10JSONWriter5valueEd>
            writer->name("adv_cnt").value((unsigned int)tlm.getAdvCnt());
   b6986:	4942      	ldr	r1, [pc, #264]	; (b6a90 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e0>)
   b6988:	4628      	mov	r0, r5
   b698a:	f7fd fdc9 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b698e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6990:	f003 fc3c 	bl	ba20c <_ZN5spark10JSONWriter5valueEj>
            writer->name("sec_cnt").value((unsigned int)tlm.getSecCnt());
   b6994:	493f      	ldr	r1, [pc, #252]	; (b6a94 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e4>)
   b6996:	4628      	mov	r0, r5
   b6998:	f7fd fdc2 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b699c:	6d21      	ldr	r1, [r4, #80]	; 0x50
   b699e:	f003 fc35 	bl	ba20c <_ZN5spark10JSONWriter5valueEj>
            writer->endObject();
   b69a2:	4628      	mov	r0, r5
   b69a4:	f003 fbe6 	bl	ba174 <_ZN5spark10JSONWriter9endObjectEv>
        if (kkm.found)
   b69a8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   b69ac:	2b00      	cmp	r3, #0
   b69ae:	d04e      	beq.n	b6a4e <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x29e>
            writer->name("kkm").beginObject();
   b69b0:	4939      	ldr	r1, [pc, #228]	; (b6a98 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e8>)
   b69b2:	4628      	mov	r0, r5
   b69b4:	f7fd fdb4 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b69b8:	f003 fbf2 	bl	ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("vbatt").value(kkm.getVbatt());
   b69bc:	4930      	ldr	r1, [pc, #192]	; (b6a80 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d0>)
   b69be:	4628      	mov	r0, r5
   b69c0:	f7fd fdae 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b69c4:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
   b69c8:	f003 fc0e 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->name("temp").value(kkm.getTemp());
   b69cc:	492e      	ldr	r1, [pc, #184]	; (b6a88 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d8>)
   b69ce:	4628      	mov	r0, r5
   b69d0:	f7fd fda6 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
            accel_data = false;
        }
        ~Kkm() = default;
        uint16_t getVbatt() const { return vbatt; };
        float getTemp() const { 
            if (temp_integer > 0) {
   b69d4:	f994 3058 	ldrsb.w	r3, [r4, #88]	; 0x58
   b69d8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
   b69dc:	eddf 6a2b 	vldr	s13, [pc, #172]	; b6a8c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2dc>
   b69e0:	ee07 3a90 	vmov	s15, r3
   b69e4:	ee07 2a10 	vmov	s14, r2
   b69e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                return (float)(temp_integer+temp_fraction/(float)256); 
   b69ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            if (temp_integer > 0) {
   b69f0:	2b00      	cmp	r3, #0
                return (float)(temp_integer+temp_fraction/(float)256); 
   b69f2:	bfc8      	it	gt
   b69f4:	eee7 7a26 	vfmagt.f32	s15, s14, s13
   b69f8:	4606      	mov	r6, r0
            }
            return (float)(temp_integer-temp_fraction/(float)256);
   b69fa:	bfd8      	it	le
   b69fc:	eee7 7a66 	vfmsle.f32	s15, s14, s13
   b6a00:	ee17 0a90 	vmov	r0, s15
   b6a04:	f004 f816 	bl	baa34 <__aeabi_f2d>
   b6a08:	ec41 0b10 	vmov	d0, r0, r1
   b6a0c:	4630      	mov	r0, r6
   b6a0e:	f003 fc0f 	bl	ba230 <_ZN5spark10JSONWriter5valueEd>
            if (kkm.hasAccelData()) {
   b6a12:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   b6a16:	b1bb      	cbz	r3, b6a48 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x298>
                writer->name("x_axis").value(kkm.getAccelXaxis());
   b6a18:	4920      	ldr	r1, [pc, #128]	; (b6a9c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2ec>)
   b6a1a:	4628      	mov	r0, r5
   b6a1c:	f7fd fd80 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b6a20:	f9b4 105a 	ldrsh.w	r1, [r4, #90]	; 0x5a
   b6a24:	f003 fbe0 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
                writer->name("y_axis").value(kkm.getAccelYaxis());
   b6a28:	491d      	ldr	r1, [pc, #116]	; (b6aa0 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2f0>)
   b6a2a:	4628      	mov	r0, r5
   b6a2c:	f7fd fd78 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b6a30:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
   b6a34:	f003 fbd8 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
                writer->name("z_axis").value(kkm.getAccelZaxis());
   b6a38:	491a      	ldr	r1, [pc, #104]	; (b6aa4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2f4>)
   b6a3a:	4628      	mov	r0, r5
   b6a3c:	f7fd fd70 	bl	b4520 <_ZN5spark10JSONWriter4nameEPKc>
   b6a40:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
   b6a44:	f003 fbd0 	bl	ba1e8 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6a48:	4628      	mov	r0, r5
   b6a4a:	f003 fb93 	bl	ba174 <_ZN5spark10JSONWriter9endObjectEv>
        writer->endObject();
   b6a4e:	4628      	mov	r0, r5
}
   b6a50:	b00c      	add	sp, #48	; 0x30
   b6a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer->endObject();
   b6a56:	f003 bb8d 	b.w	ba174 <_ZN5spark10JSONWriter9endObjectEv>
   b6a5a:	bf00      	nop
   b6a5c:	000bb2ee 	.word	0x000bb2ee
   b6a60:	000bb2fe 	.word	0x000bb2fe
   b6a64:	000bb3c3 	.word	0x000bb3c3
   b6a68:	000bb3cd 	.word	0x000bb3cd
   b6a6c:	000bb3f6 	.word	0x000bb3f6
   b6a70:	000bb2d4 	.word	0x000bb2d4
   b6a74:	000bb0ad 	.word	0x000bb0ad
   b6a78:	000bb3ff 	.word	0x000bb3ff
   b6a7c:	000bb403 	.word	0x000bb403
   b6a80:	000bb407 	.word	0x000bb407
   b6a84:	447a0000 	.word	0x447a0000
   b6a88:	000bb08c 	.word	0x000bb08c
   b6a8c:	3b800000 	.word	0x3b800000
   b6a90:	000bb40d 	.word	0x000bb40d
   b6a94:	000bb415 	.word	0x000bb415
   b6a98:	000bb41d 	.word	0x000bb41d
   b6a9c:	000bb098 	.word	0x000bb098
   b6aa0:	000bb09f 	.word	0x000bb09f
   b6aa4:	000bb0a6 	.word	0x000bb0a6

000b6aa8 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE>:

void Eddystone::addOrUpdate(const BleScanResult *scanResult)
{
   b6aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b6aac:	4d42      	ldr	r5, [pc, #264]	; (b6bb8 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x110>)
   b6aae:	b0cc      	sub	sp, #304	; 0x130
   b6ab0:	4606      	mov	r6, r0
   b6ab2:	2700      	movs	r7, #0
    return data_[i];
   b6ab4:	f04f 0864 	mov.w	r8, #100	; 0x64
    uint8_t i;
    for (i = 0; i < beacons.size(); ++i) {
   b6ab8:	686b      	ldr	r3, [r5, #4]
   b6aba:	b2fc      	uxtb	r4, r7
   b6abc:	429c      	cmp	r4, r3
   b6abe:	da0d      	bge.n	b6adc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b6ac0:	6829      	ldr	r1, [r5, #0]
   b6ac2:	fb08 1104 	mla	r1, r8, r4, r1
    BleAddress getAddress() const { return address;}
   b6ac6:	3107      	adds	r1, #7
   b6ac8:	a833      	add	r0, sp, #204	; 0xcc
   b6aca:	f000 fdd3 	bl	b7674 <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult)) {
   b6ace:	4631      	mov	r1, r6
   b6ad0:	a833      	add	r0, sp, #204	; 0xcc
   b6ad2:	f000 fde6 	bl	b76a2 <_ZNK8particle10BleAddresseqERKS0_>
   b6ad6:	3701      	adds	r7, #1
   b6ad8:	2800      	cmp	r0, #0
   b6ada:	d0ed      	beq.n	b6ab8 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x10>
            break;
        }
    }
    if (i == beacons.size()) {
   b6adc:	686b      	ldr	r3, [r5, #4]
   b6ade:	429c      	cmp	r4, r3
   b6ae0:	d15c      	bne.n	b6b9c <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xf4>
        rssi_count(0) {};
   b6ae2:	4b36      	ldr	r3, [pc, #216]	; (b6bbc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x114>)
   b6ae4:	9301      	str	r3, [sp, #4]
   b6ae6:	2301      	movs	r3, #1
   b6ae8:	f88d 3009 	strb.w	r3, [sp, #9]
   b6aec:	f10d 000b 	add.w	r0, sp, #11
   b6af0:	2304      	movs	r3, #4
   b6af2:	2400      	movs	r4, #0
   b6af4:	f88d 300a 	strb.w	r3, [sp, #10]
   b6af8:	f000 fde7 	bl	b76ca <_ZN8particle10BleAddressC1Ev>
    Eddystone() : Beacon(SCAN_EDDYSTONE) {};
   b6afc:	4b30      	ldr	r3, [pc, #192]	; (b6bc0 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x118>)
   b6afe:	9301      	str	r3, [sp, #4]
        Eddystone new_beacon;
        new_beacon.populateData(scanResult);
   b6b00:	4631      	mov	r1, r6
   b6b02:	a801      	add	r0, sp, #4
        Uid() {rssi=rssi_count=0;found=false;}
   b6b04:	e9cd 4406 	strd	r4, r4, [sp, #24]
        Url() {
   b6b08:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
   b6b0c:	f8ad 4014 	strh.w	r4, [sp, #20]
   b6b10:	f88d 4016 	strb.w	r4, [sp, #22]
        Tlm() {found=false;}
   b6b14:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
            found = false;
   b6b18:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
            accel_data = false;
   b6b1c:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
   b6b20:	f7ff fd4c 	bl	b65bc <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b6b24:	a901      	add	r1, sp, #4
   b6b26:	a81a      	add	r0, sp, #104	; 0x68
        new_beacon.missed_scan = 0;
   b6b28:	f88d 4008 	strb.w	r4, [sp, #8]
        beacons.append(new_beacon);
   b6b2c:	f7ff f9c8 	bl	b5ec0 <_ZN9EddystoneC1ERKS_>
    return insert(size_, std::move(value));
   b6b30:	a91a      	add	r1, sp, #104	; 0x68
   b6b32:	a833      	add	r0, sp, #204	; 0xcc
   b6b34:	686e      	ldr	r6, [r5, #4]
   b6b36:	f7ff f9c3 	bl	b5ec0 <_ZN9EddystoneC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b3a:	e9d5 7301 	ldrd	r7, r3, [r5, #4]
   b6b3e:	429f      	cmp	r7, r3
   b6b40:	db15      	blt.n	b6b6e <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xc6>
   b6b42:	3701      	adds	r7, #1
        if (n > 0) {
   b6b44:	42a7      	cmp	r7, r4
   b6b46:	dd0d      	ble.n	b6b64 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xbc>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6b48:	f04f 0864 	mov.w	r8, #100	; 0x64
    return ::malloc(size);
   b6b4c:	fb08 f007 	mul.w	r0, r8, r7
   b6b50:	f000 fa98 	bl	b7084 <malloc>
            if (!d) {
   b6b54:	4604      	mov	r4, r0
   b6b56:	b1f0      	cbz	r0, b6b96 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xee>
            move(d, data_, data_ + size_);
   b6b58:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6b5c:	fb08 1202 	mla	r2, r8, r2, r1
   b6b60:	f7ff f9e0 	bl	b5f24 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6b64:	6828      	ldr	r0, [r5, #0]
   b6b66:	f000 fa95 	bl	b7094 <free>
        data_ = d;
   b6b6a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6b6c:	60af      	str	r7, [r5, #8]
    T* const p = data_ + i;
   b6b6e:	682b      	ldr	r3, [r5, #0]
    move(p + 1, p, data_ + size_);
   b6b70:	6869      	ldr	r1, [r5, #4]
    T* const p = data_ + i;
   b6b72:	2264      	movs	r2, #100	; 0x64
   b6b74:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b6b78:	f106 0064 	add.w	r0, r6, #100	; 0x64
   b6b7c:	fb02 3201 	mla	r2, r2, r1, r3
   b6b80:	4631      	mov	r1, r6
   b6b82:	f7ff f9cf 	bl	b5f24 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6b86:	b11e      	cbz	r6, b6b90 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xe8>
   b6b88:	a933      	add	r1, sp, #204	; 0xcc
   b6b8a:	4630      	mov	r0, r6
   b6b8c:	f7ff f998 	bl	b5ec0 <_ZN9EddystoneC1ERKS_>
    ++size_;
   b6b90:	686b      	ldr	r3, [r5, #4]
   b6b92:	3301      	adds	r3, #1
   b6b94:	606b      	str	r3, [r5, #4]
        Eddystone& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b6b96:	b04c      	add	sp, #304	; 0x130
   b6b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b6b9c:	2364      	movs	r3, #100	; 0x64
   b6b9e:	435c      	muls	r4, r3
   b6ba0:	682b      	ldr	r3, [r5, #0]
   b6ba2:	191d      	adds	r5, r3, r4
        beacon.newly_scanned = false;
   b6ba4:	2700      	movs	r7, #0
   b6ba6:	716f      	strb	r7, [r5, #5]
        beacon.populateData(scanResult);
   b6ba8:	591b      	ldr	r3, [r3, r4]
   b6baa:	4631      	mov	r1, r6
   b6bac:	685b      	ldr	r3, [r3, #4]
   b6bae:	4628      	mov	r0, r5
   b6bb0:	4798      	blx	r3
        beacon.missed_scan = 0;
   b6bb2:	712f      	strb	r7, [r5, #4]
   b6bb4:	e7ef      	b.n	b6b96 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xee>
   b6bb6:	bf00      	nop
   b6bb8:	2003e6c8 	.word	0x2003e6c8
   b6bbc:	000bb084 	.word	0x000bb084
   b6bc0:	000bb42c 	.word	0x000bb42c

000b6bc4 <_GLOBAL__sub_I__ZN9Eddystone7beaconsE>:
        capacity_(0) {
   b6bc4:	4b02      	ldr	r3, [pc, #8]	; (b6bd0 <_GLOBAL__sub_I__ZN9Eddystone7beaconsE+0xc>)
   b6bc6:	2200      	movs	r2, #0
   b6bc8:	e9c3 2200 	strd	r2, r2, [r3]
   b6bcc:	609a      	str	r2, [r3, #8]
   b6bce:	4770      	bx	lr
   b6bd0:	2003e6c8 	.word	0x2003e6c8

000b6bd4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6bd4:	b508      	push	{r3, lr}
   b6bd6:	4b02      	ldr	r3, [pc, #8]	; (b6be0 <netdb_freeaddrinfo+0xc>)
   b6bd8:	681b      	ldr	r3, [r3, #0]
   b6bda:	689b      	ldr	r3, [r3, #8]
   b6bdc:	9301      	str	r3, [sp, #4]
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	00030268 	.word	0x00030268

000b6be4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6be4:	b508      	push	{r3, lr}
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <netdb_getaddrinfo+0xc>)
   b6be8:	681b      	ldr	r3, [r3, #0]
   b6bea:	68db      	ldr	r3, [r3, #12]
   b6bec:	9301      	str	r3, [sp, #4]
   b6bee:	bd08      	pop	{r3, pc}
   b6bf0:	00030268 	.word	0x00030268

000b6bf4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <HAL_RNG_GetRandomNumber+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	685b      	ldr	r3, [r3, #4]
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	00030218 	.word	0x00030218

000b6c04 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <HAL_Delay_Milliseconds+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	689b      	ldr	r3, [r3, #8]
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	00030218 	.word	0x00030218

000b6c14 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <HAL_Delay_Microseconds+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	68db      	ldr	r3, [r3, #12]
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	00030218 	.word	0x00030218

000b6c24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	695b      	ldr	r3, [r3, #20]
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	00030218 	.word	0x00030218

000b6c34 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <hal_timer_millis+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	00030218 	.word	0x00030218

000b6c44 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <hal_ble_stack_init+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	689b      	ldr	r3, [r3, #8]
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	00030278 	.word	0x00030278

000b6c54 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <hal_ble_gap_set_scan_parameters+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	00030278 	.word	0x00030278

000b6c64 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <hal_ble_gap_get_scan_parameters+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	00030278 	.word	0x00030278

000b6c74 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <hal_ble_gap_start_scan+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	00030278 	.word	0x00030278

000b6c84 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b6c84:	b508      	push	{r3, lr}
   b6c86:	4b03      	ldr	r3, [pc, #12]	; (b6c94 <hal_ble_gap_stop_scan+0x10>)
   b6c88:	681b      	ldr	r3, [r3, #0]
   b6c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b6c8e:	9301      	str	r3, [sp, #4]
   b6c90:	bd08      	pop	{r3, pc}
   b6c92:	0000      	.short	0x0000
   b6c94:	00030278 	.word	0x00030278

000b6c98 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6c98:	b508      	push	{r3, lr}
   b6c9a:	4b03      	ldr	r3, [pc, #12]	; (b6ca8 <hal_ble_gap_disconnect+0x10>)
   b6c9c:	681b      	ldr	r3, [r3, #0]
   b6c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6ca2:	9301      	str	r3, [sp, #4]
   b6ca4:	bd08      	pop	{r3, pc}
   b6ca6:	0000      	.short	0x0000
   b6ca8:	00030278 	.word	0x00030278

000b6cac <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b03      	ldr	r3, [pc, #12]	; (b6cbc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6cb6:	9301      	str	r3, [sp, #4]
   b6cb8:	bd08      	pop	{r3, pc}
   b6cba:	0000      	.short	0x0000
   b6cbc:	00030278 	.word	0x00030278

000b6cc0 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b03      	ldr	r3, [pc, #12]	; (b6cd0 <hal_ble_gatt_client_discover_all_services+0x10>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b6cca:	9301      	str	r3, [sp, #4]
   b6ccc:	bd08      	pop	{r3, pc}
   b6cce:	0000      	.short	0x0000
   b6cd0:	00030278 	.word	0x00030278

000b6cd4 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b6cd4:	b508      	push	{r3, lr}
   b6cd6:	4b03      	ldr	r3, [pc, #12]	; (b6ce4 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b6cd8:	681b      	ldr	r3, [r3, #0]
   b6cda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b6cde:	9301      	str	r3, [sp, #4]
   b6ce0:	bd08      	pop	{r3, pc}
   b6ce2:	0000      	.short	0x0000
   b6ce4:	00030278 	.word	0x00030278

000b6ce8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ce8:	b508      	push	{r3, lr}
   b6cea:	4b03      	ldr	r3, [pc, #12]	; (b6cf8 <hal_ble_gatt_client_write_with_response+0x10>)
   b6cec:	681b      	ldr	r3, [r3, #0]
   b6cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6cf2:	9301      	str	r3, [sp, #4]
   b6cf4:	bd08      	pop	{r3, pc}
   b6cf6:	0000      	.short	0x0000
   b6cf8:	00030278 	.word	0x00030278

000b6cfc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b03      	ldr	r3, [pc, #12]	; (b6d0c <hal_ble_gatt_client_write_without_response+0x10>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6d06:	9301      	str	r3, [sp, #4]
   b6d08:	bd08      	pop	{r3, pc}
   b6d0a:	0000      	.short	0x0000
   b6d0c:	00030278 	.word	0x00030278

000b6d10 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b6d10:	b508      	push	{r3, lr}
   b6d12:	4b03      	ldr	r3, [pc, #12]	; (b6d20 <hal_ble_gatt_client_read+0x10>)
   b6d14:	681b      	ldr	r3, [r3, #0]
   b6d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b6d1a:	9301      	str	r3, [sp, #4]
   b6d1c:	bd08      	pop	{r3, pc}
   b6d1e:	0000      	.short	0x0000
   b6d20:	00030278 	.word	0x00030278

000b6d24 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b6d24:	b508      	push	{r3, lr}
   b6d26:	4b03      	ldr	r3, [pc, #12]	; (b6d34 <hal_ble_gap_connect+0x10>)
   b6d28:	681b      	ldr	r3, [r3, #0]
   b6d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b6d2e:	9301      	str	r3, [sp, #4]
   b6d30:	bd08      	pop	{r3, pc}
   b6d32:	0000      	.short	0x0000
   b6d34:	00030278 	.word	0x00030278

000b6d38 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b03      	ldr	r3, [pc, #12]	; (b6d48 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6d42:	9301      	str	r3, [sp, #4]
   b6d44:	bd08      	pop	{r3, pc}
   b6d46:	0000      	.short	0x0000
   b6d48:	00030278 	.word	0x00030278

000b6d4c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b03      	ldr	r3, [pc, #12]	; (b6d5c <hal_ble_gatt_client_configure_cccd+0x10>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b6d56:	9301      	str	r3, [sp, #4]
   b6d58:	bd08      	pop	{r3, pc}
   b6d5a:	0000      	.short	0x0000
   b6d5c:	00030278 	.word	0x00030278

000b6d60 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6d60:	b508      	push	{r3, lr}
   b6d62:	4b03      	ldr	r3, [pc, #12]	; (b6d70 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6d64:	681b      	ldr	r3, [r3, #0]
   b6d66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6d6a:	9301      	str	r3, [sp, #4]
   b6d6c:	bd08      	pop	{r3, pc}
   b6d6e:	0000      	.short	0x0000
   b6d70:	00030278 	.word	0x00030278

000b6d74 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b03      	ldr	r3, [pc, #12]	; (b6d84 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6d7e:	9301      	str	r3, [sp, #4]
   b6d80:	bd08      	pop	{r3, pc}
   b6d82:	0000      	.short	0x0000
   b6d84:	00030278 	.word	0x00030278

000b6d88 <hal_ble_gap_start_pairing>:

DYNALIB_FN(66, hal_ble, hal_ble_gap_set_pairing_config, int(const hal_ble_pairing_config_t*, void*))
DYNALIB_FN(67, hal_ble, hal_ble_gap_start_pairing, int(hal_ble_conn_handle_t, void*))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b03      	ldr	r3, [pc, #12]	; (b6d98 <hal_ble_gap_start_pairing+0x10>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   b6d92:	9301      	str	r3, [sp, #4]
   b6d94:	bd08      	pop	{r3, pc}
   b6d96:	0000      	.short	0x0000
   b6d98:	00030278 	.word	0x00030278

000b6d9c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b6d9c:	b508      	push	{r3, lr}
   b6d9e:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <os_thread_create+0xc>)
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	685b      	ldr	r3, [r3, #4]
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	bd08      	pop	{r3, pc}
   b6da8:	00030248 	.word	0x00030248

000b6dac <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6dac:	b508      	push	{r3, lr}
   b6dae:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <os_thread_yield+0xc>)
   b6db0:	681b      	ldr	r3, [r3, #0]
   b6db2:	68db      	ldr	r3, [r3, #12]
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	bd08      	pop	{r3, pc}
   b6db8:	00030248 	.word	0x00030248

000b6dbc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <os_thread_scheduling+0xc>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	69db      	ldr	r3, [r3, #28]
   b6dc4:	9301      	str	r3, [sp, #4]
   b6dc6:	bd08      	pop	{r3, pc}
   b6dc8:	00030248 	.word	0x00030248

000b6dcc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b02      	ldr	r3, [pc, #8]	; (b6dd8 <os_mutex_recursive_create+0xc>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6dd4:	9301      	str	r3, [sp, #4]
   b6dd6:	bd08      	pop	{r3, pc}
   b6dd8:	00030248 	.word	0x00030248

000b6ddc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <os_mutex_recursive_lock+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	00030248 	.word	0x00030248

000b6dec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <os_mutex_recursive_unlock+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	00030248 	.word	0x00030248

000b6dfc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b6dfc:	b508      	push	{r3, lr}
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <os_thread_exit+0xc>)
   b6e00:	681b      	ldr	r3, [r3, #0]
   b6e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6e04:	9301      	str	r3, [sp, #4]
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	00030248 	.word	0x00030248

000b6e0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <inet_inet_ntop+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	695b      	ldr	r3, [r3, #20]
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	00030264 	.word	0x00030264

000b6e1c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <hal_usart_write+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	68db      	ldr	r3, [r3, #12]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	0003023c 	.word	0x0003023c

000b6e2c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <hal_usart_available+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	691b      	ldr	r3, [r3, #16]
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	0003023c 	.word	0x0003023c

000b6e3c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <hal_usart_read+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	695b      	ldr	r3, [r3, #20]
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	0003023c 	.word	0x0003023c

000b6e4c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <hal_usart_peek+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	699b      	ldr	r3, [r3, #24]
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	0003023c 	.word	0x0003023c

000b6e5c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <hal_usart_flush+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	69db      	ldr	r3, [r3, #28]
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	0003023c 	.word	0x0003023c

000b6e6c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <hal_usart_available_data_for_write+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	0003023c 	.word	0x0003023c

000b6e7c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <hal_usart_init_ex+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	0003023c 	.word	0x0003023c

000b6e8c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <HAL_USB_USART_Init+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	681b      	ldr	r3, [r3, #0]
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	0003024c 	.word	0x0003024c

000b6e9c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <HAL_USB_USART_Begin+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	685b      	ldr	r3, [r3, #4]
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	0003024c 	.word	0x0003024c

000b6eac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <HAL_USB_USART_Available_Data+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	691b      	ldr	r3, [r3, #16]
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	0003024c 	.word	0x0003024c

000b6ebc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	695b      	ldr	r3, [r3, #20]
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	0003024c 	.word	0x0003024c

000b6ecc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <HAL_USB_USART_Receive_Data+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	699b      	ldr	r3, [r3, #24]
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	0003024c 	.word	0x0003024c

000b6edc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <HAL_USB_USART_Send_Data+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	69db      	ldr	r3, [r3, #28]
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	0003024c 	.word	0x0003024c

000b6eec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <HAL_USB_USART_Flush_Data+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	6a1b      	ldr	r3, [r3, #32]
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	0003024c 	.word	0x0003024c

000b6efc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <HAL_USB_USART_Is_Connected+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	0003024c 	.word	0x0003024c

000b6f0c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <panic_+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030260 	.word	0x00030260

000b6f1c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <log_message+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030260 	.word	0x00030260

000b6f2c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <log_message_v+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030260 	.word	0x00030260

000b6f3c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <set_system_mode+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	685b      	ldr	r3, [r3, #4]
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030220 	.word	0x00030220

000b6f4c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <system_thread_set_state+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030220 	.word	0x00030220

000b6f5c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <application_thread_current+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030220 	.word	0x00030220

000b6f6c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <application_thread_invoke+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030220 	.word	0x00030220

000b6f7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b03      	ldr	r3, [pc, #12]	; (b6f8c <system_ctrl_set_app_request_handler+0x10>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6f86:	9301      	str	r3, [sp, #4]
   b6f88:	bd08      	pop	{r3, pc}
   b6f8a:	0000      	.short	0x0000
   b6f8c:	00030220 	.word	0x00030220

000b6f90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6f90:	b508      	push	{r3, lr}
   b6f92:	4b03      	ldr	r3, [pc, #12]	; (b6fa0 <system_ctrl_set_result+0x10>)
   b6f94:	681b      	ldr	r3, [r3, #0]
   b6f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6f9a:	9301      	str	r3, [sp, #4]
   b6f9c:	bd08      	pop	{r3, pc}
   b6f9e:	0000      	.short	0x0000
   b6fa0:	00030220 	.word	0x00030220

000b6fa4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <network_connect+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	685b      	ldr	r3, [r3, #4]
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	00030240 	.word	0x00030240

000b6fb4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <network_connecting+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	689b      	ldr	r3, [r3, #8]
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	00030240 	.word	0x00030240

000b6fc4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6fc4:	b508      	push	{r3, lr}
   b6fc6:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <network_disconnect+0xc>)
   b6fc8:	681b      	ldr	r3, [r3, #0]
   b6fca:	68db      	ldr	r3, [r3, #12]
   b6fcc:	9301      	str	r3, [sp, #4]
   b6fce:	bd08      	pop	{r3, pc}
   b6fd0:	00030240 	.word	0x00030240

000b6fd4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6fd4:	b508      	push	{r3, lr}
   b6fd6:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <network_ready+0xc>)
   b6fd8:	681b      	ldr	r3, [r3, #0]
   b6fda:	691b      	ldr	r3, [r3, #16]
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	bd08      	pop	{r3, pc}
   b6fe0:	00030240 	.word	0x00030240

000b6fe4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <network_on+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	695b      	ldr	r3, [r3, #20]
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	00030240 	.word	0x00030240

000b6ff4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <network_off+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	699b      	ldr	r3, [r3, #24]
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	00030240 	.word	0x00030240

000b7004 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <network_listen+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	69db      	ldr	r3, [r3, #28]
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	00030240 	.word	0x00030240

000b7014 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <network_listening+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	6a1b      	ldr	r3, [r3, #32]
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	00030240 	.word	0x00030240

000b7024 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <network_set_listen_timeout+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	00030240 	.word	0x00030240

000b7034 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7034:	b508      	push	{r3, lr}
   b7036:	4b02      	ldr	r3, [pc, #8]	; (b7040 <network_get_listen_timeout+0xc>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b703c:	9301      	str	r3, [sp, #4]
   b703e:	bd08      	pop	{r3, pc}
   b7040:	00030240 	.word	0x00030240

000b7044 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7044:	b508      	push	{r3, lr}
   b7046:	4b02      	ldr	r3, [pc, #8]	; (b7050 <network_is_on+0xc>)
   b7048:	681b      	ldr	r3, [r3, #0]
   b704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b704c:	9301      	str	r3, [sp, #4]
   b704e:	bd08      	pop	{r3, pc}
   b7050:	00030240 	.word	0x00030240

000b7054 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7054:	b508      	push	{r3, lr}
   b7056:	4b02      	ldr	r3, [pc, #8]	; (b7060 <network_is_off+0xc>)
   b7058:	681b      	ldr	r3, [r3, #0]
   b705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b705c:	9301      	str	r3, [sp, #4]
   b705e:	bd08      	pop	{r3, pc}
   b7060:	00030240 	.word	0x00030240

000b7064 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7064:	b508      	push	{r3, lr}
   b7066:	4b02      	ldr	r3, [pc, #8]	; (b7070 <spark_process+0xc>)
   b7068:	681b      	ldr	r3, [r3, #0]
   b706a:	689b      	ldr	r3, [r3, #8]
   b706c:	9301      	str	r3, [sp, #4]
   b706e:	bd08      	pop	{r3, pc}
   b7070:	00030244 	.word	0x00030244

000b7074 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7074:	b508      	push	{r3, lr}
   b7076:	4b02      	ldr	r3, [pc, #8]	; (b7080 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7078:	681b      	ldr	r3, [r3, #0]
   b707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b707c:	9301      	str	r3, [sp, #4]
   b707e:	bd08      	pop	{r3, pc}
   b7080:	00030244 	.word	0x00030244

000b7084 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7084:	b508      	push	{r3, lr}
   b7086:	4b02      	ldr	r3, [pc, #8]	; (b7090 <malloc+0xc>)
   b7088:	681b      	ldr	r3, [r3, #0]
   b708a:	681b      	ldr	r3, [r3, #0]
   b708c:	9301      	str	r3, [sp, #4]
   b708e:	bd08      	pop	{r3, pc}
   b7090:	0003021c 	.word	0x0003021c

000b7094 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7094:	b508      	push	{r3, lr}
   b7096:	4b02      	ldr	r3, [pc, #8]	; (b70a0 <free+0xc>)
   b7098:	681b      	ldr	r3, [r3, #0]
   b709a:	685b      	ldr	r3, [r3, #4]
   b709c:	9301      	str	r3, [sp, #4]
   b709e:	bd08      	pop	{r3, pc}
   b70a0:	0003021c 	.word	0x0003021c

000b70a4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b70a4:	b508      	push	{r3, lr}
   b70a6:	4b02      	ldr	r3, [pc, #8]	; (b70b0 <realloc+0xc>)
   b70a8:	681b      	ldr	r3, [r3, #0]
   b70aa:	689b      	ldr	r3, [r3, #8]
   b70ac:	9301      	str	r3, [sp, #4]
   b70ae:	bd08      	pop	{r3, pc}
   b70b0:	0003021c 	.word	0x0003021c

000b70b4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b70b4:	b508      	push	{r3, lr}
   b70b6:	4b02      	ldr	r3, [pc, #8]	; (b70c0 <snprintf+0xc>)
   b70b8:	681b      	ldr	r3, [r3, #0]
   b70ba:	69db      	ldr	r3, [r3, #28]
   b70bc:	9301      	str	r3, [sp, #4]
   b70be:	bd08      	pop	{r3, pc}
   b70c0:	0003021c 	.word	0x0003021c

000b70c4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b70c4:	b508      	push	{r3, lr}
   b70c6:	4b02      	ldr	r3, [pc, #8]	; (b70d0 <vsnprintf+0xc>)
   b70c8:	681b      	ldr	r3, [r3, #0]
   b70ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70cc:	9301      	str	r3, [sp, #4]
   b70ce:	bd08      	pop	{r3, pc}
   b70d0:	0003021c 	.word	0x0003021c

000b70d4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b70d4:	b508      	push	{r3, lr}
   b70d6:	4b02      	ldr	r3, [pc, #8]	; (b70e0 <abort+0xc>)
   b70d8:	681b      	ldr	r3, [r3, #0]
   b70da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70dc:	9301      	str	r3, [sp, #4]
   b70de:	bd08      	pop	{r3, pc}
   b70e0:	0003021c 	.word	0x0003021c

000b70e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b70e4:	b508      	push	{r3, lr}
   b70e6:	4b02      	ldr	r3, [pc, #8]	; (b70f0 <_malloc_r+0xc>)
   b70e8:	681b      	ldr	r3, [r3, #0]
   b70ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b70ec:	9301      	str	r3, [sp, #4]
   b70ee:	bd08      	pop	{r3, pc}
   b70f0:	0003021c 	.word	0x0003021c

000b70f4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b70f4:	b508      	push	{r3, lr}
   b70f6:	4b02      	ldr	r3, [pc, #8]	; (b7100 <__assert_func+0xc>)
   b70f8:	681b      	ldr	r3, [r3, #0]
   b70fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70fc:	9301      	str	r3, [sp, #4]
   b70fe:	bd08      	pop	{r3, pc}
   b7100:	0003021c 	.word	0x0003021c

000b7104 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7104:	b508      	push	{r3, lr}
   b7106:	4b02      	ldr	r3, [pc, #8]	; (b7110 <newlib_impure_ptr_callback+0xc>)
   b7108:	681b      	ldr	r3, [r3, #0]
   b710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b710c:	9301      	str	r3, [sp, #4]
   b710e:	bd08      	pop	{r3, pc}
   b7110:	0003021c 	.word	0x0003021c

000b7114 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7114:	2200      	movs	r2, #0
   b7116:	6840      	ldr	r0, [r0, #4]
   b7118:	4611      	mov	r1, r2
   b711a:	f7ff bf7b 	b.w	b7014 <network_listening>

000b711e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b711e:	2200      	movs	r2, #0
   b7120:	6840      	ldr	r0, [r0, #4]
   b7122:	4611      	mov	r1, r2
   b7124:	f7ff bf86 	b.w	b7034 <network_get_listen_timeout>

000b7128 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7128:	6840      	ldr	r0, [r0, #4]
   b712a:	2200      	movs	r2, #0
   b712c:	f7ff bf7a 	b.w	b7024 <network_set_listen_timeout>

000b7130 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7130:	6840      	ldr	r0, [r0, #4]
   b7132:	2200      	movs	r2, #0
   b7134:	f081 0101 	eor.w	r1, r1, #1
   b7138:	f7ff bf64 	b.w	b7004 <network_listen>

000b713c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b713c:	2300      	movs	r3, #0
   b713e:	6840      	ldr	r0, [r0, #4]
   b7140:	461a      	mov	r2, r3
   b7142:	4619      	mov	r1, r3
   b7144:	f7ff bf56 	b.w	b6ff4 <network_off>

000b7148 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7148:	2300      	movs	r3, #0
   b714a:	6840      	ldr	r0, [r0, #4]
   b714c:	461a      	mov	r2, r3
   b714e:	4619      	mov	r1, r3
   b7150:	f7ff bf48 	b.w	b6fe4 <network_on>

000b7154 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7154:	2200      	movs	r2, #0
   b7156:	6840      	ldr	r0, [r0, #4]
   b7158:	4611      	mov	r1, r2
   b715a:	f7ff bf3b 	b.w	b6fd4 <network_ready>

000b715e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b715e:	2200      	movs	r2, #0
   b7160:	6840      	ldr	r0, [r0, #4]
   b7162:	4611      	mov	r1, r2
   b7164:	f7ff bf26 	b.w	b6fb4 <network_connecting>

000b7168 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7168:	6840      	ldr	r0, [r0, #4]
   b716a:	2200      	movs	r2, #0
   b716c:	2102      	movs	r1, #2
   b716e:	f7ff bf29 	b.w	b6fc4 <network_disconnect>

000b7172 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7172:	2300      	movs	r3, #0
   b7174:	6840      	ldr	r0, [r0, #4]
   b7176:	461a      	mov	r2, r3
   b7178:	f7ff bf14 	b.w	b6fa4 <network_connect>

000b717c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b717c:	4b02      	ldr	r3, [pc, #8]	; (b7188 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b717e:	2203      	movs	r2, #3
   b7180:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7182:	4a02      	ldr	r2, [pc, #8]	; (b718c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7184:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7186:	4770      	bx	lr
   b7188:	2003e6d4 	.word	0x2003e6d4
   b718c:	000bb43c 	.word	0x000bb43c

000b7190 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7190:	4b05      	ldr	r3, [pc, #20]	; (b71a8 <_GLOBAL__sub_I_System+0x18>)
   b7192:	2202      	movs	r2, #2
   b7194:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7196:	4b05      	ldr	r3, [pc, #20]	; (b71ac <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7198:	4a05      	ldr	r2, [pc, #20]	; (b71b0 <_GLOBAL__sub_I_System+0x20>)
   b719a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b719c:	2000      	movs	r0, #0
   b719e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b71a2:	f7ff becb 	b.w	b6f3c <set_system_mode>
   b71a6:	bf00      	nop
   b71a8:	2003e6e8 	.word	0x2003e6e8
   b71ac:	2003e6dc 	.word	0x2003e6dc
   b71b0:	ffff0000 	.word	0xffff0000

000b71b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b71b4:	b510      	push	{r4, lr}
   b71b6:	4604      	mov	r4, r0
{
	free(buffer);
   b71b8:	6800      	ldr	r0, [r0, #0]
   b71ba:	f7ff ff6b 	bl	b7094 <free>
}
   b71be:	4620      	mov	r0, r4
   b71c0:	bd10      	pop	{r4, pc}

000b71c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b71c2:	b510      	push	{r4, lr}
   b71c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b71c6:	6800      	ldr	r0, [r0, #0]
   b71c8:	b108      	cbz	r0, b71ce <_ZN6String10invalidateEv+0xc>
   b71ca:	f7ff ff63 	bl	b7094 <free>
	buffer = NULL;
   b71ce:	2300      	movs	r3, #0
	capacity = len = 0;
   b71d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b71d4:	6023      	str	r3, [r4, #0]
}
   b71d6:	bd10      	pop	{r4, pc}

000b71d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b71d8:	b538      	push	{r3, r4, r5, lr}
   b71da:	4604      	mov	r4, r0
   b71dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b71de:	6800      	ldr	r0, [r0, #0]
   b71e0:	3101      	adds	r1, #1
   b71e2:	f7ff ff5f 	bl	b70a4 <realloc>
	if (newbuffer) {
   b71e6:	b110      	cbz	r0, b71ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b71e8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b71ec:	2001      	movs	r0, #1
	}
	return 0;
}
   b71ee:	bd38      	pop	{r3, r4, r5, pc}

000b71f0 <_ZN6String7reserveEj>:
{
   b71f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b71f2:	6803      	ldr	r3, [r0, #0]
{
   b71f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b71f6:	b123      	cbz	r3, b7202 <_ZN6String7reserveEj+0x12>
   b71f8:	6843      	ldr	r3, [r0, #4]
   b71fa:	428b      	cmp	r3, r1
   b71fc:	d301      	bcc.n	b7202 <_ZN6String7reserveEj+0x12>
   b71fe:	2001      	movs	r0, #1
}
   b7200:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7202:	4620      	mov	r0, r4
   b7204:	f7ff ffe8 	bl	b71d8 <_ZN6String12changeBufferEj>
   b7208:	2800      	cmp	r0, #0
   b720a:	d0f9      	beq.n	b7200 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b720c:	68a3      	ldr	r3, [r4, #8]
   b720e:	2b00      	cmp	r3, #0
   b7210:	d1f5      	bne.n	b71fe <_ZN6String7reserveEj+0xe>
   b7212:	6822      	ldr	r2, [r4, #0]
   b7214:	7013      	strb	r3, [r2, #0]
   b7216:	e7f2      	b.n	b71fe <_ZN6String7reserveEj+0xe>

000b7218 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b721a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b721c:	4611      	mov	r1, r2
   b721e:	9201      	str	r2, [sp, #4]
{
   b7220:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7222:	f7ff ffe5 	bl	b71f0 <_ZN6String7reserveEj>
   b7226:	9a01      	ldr	r2, [sp, #4]
   b7228:	b928      	cbnz	r0, b7236 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b722a:	4620      	mov	r0, r4
   b722c:	f7ff ffc9 	bl	b71c2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7230:	4620      	mov	r0, r4
   b7232:	b003      	add	sp, #12
   b7234:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7236:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7238:	4629      	mov	r1, r5
   b723a:	6820      	ldr	r0, [r4, #0]
   b723c:	f003 fdf2 	bl	bae24 <memcpy>
	buffer[len] = 0;
   b7240:	6822      	ldr	r2, [r4, #0]
   b7242:	68a3      	ldr	r3, [r4, #8]
   b7244:	2100      	movs	r1, #0
   b7246:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7248:	e7f2      	b.n	b7230 <_ZN6String4copyEPKcj+0x18>

000b724a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b724a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b724c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b724e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7252:	4604      	mov	r4, r0
	len = 0;
   b7254:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7256:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7258:	b141      	cbz	r1, b726c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b725a:	4608      	mov	r0, r1
   b725c:	9101      	str	r1, [sp, #4]
   b725e:	f003 fe6e 	bl	baf3e <strlen>
   b7262:	9901      	ldr	r1, [sp, #4]
   b7264:	4602      	mov	r2, r0
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff ffd6 	bl	b7218 <_ZN6String4copyEPKcj>
}
   b726c:	4620      	mov	r0, r4
   b726e:	b002      	add	sp, #8
   b7270:	bd10      	pop	{r4, pc}

000b7272 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7272:	b538      	push	{r3, r4, r5, lr}
   b7274:	4605      	mov	r5, r0
	if (buffer) {
   b7276:	6800      	ldr	r0, [r0, #0]
{
   b7278:	460c      	mov	r4, r1
	if (buffer) {
   b727a:	b168      	cbz	r0, b7298 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b727c:	686a      	ldr	r2, [r5, #4]
   b727e:	688b      	ldr	r3, [r1, #8]
   b7280:	429a      	cmp	r2, r3
   b7282:	d307      	bcc.n	b7294 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7284:	6809      	ldr	r1, [r1, #0]
   b7286:	f003 fe35 	bl	baef4 <strcpy>
			len = rhs.len;
   b728a:	68a3      	ldr	r3, [r4, #8]
   b728c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b728e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7290:	60a3      	str	r3, [r4, #8]
}
   b7292:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7294:	f7ff fefe 	bl	b7094 <free>
	buffer = rhs.buffer;
   b7298:	6823      	ldr	r3, [r4, #0]
   b729a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b729c:	6863      	ldr	r3, [r4, #4]
   b729e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b72a0:	68a3      	ldr	r3, [r4, #8]
   b72a2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b72a4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b72a6:	e9c4 3300 	strd	r3, r3, [r4]
   b72aa:	e7f1      	b.n	b7290 <_ZN6String4moveERS_+0x1e>

000b72ac <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b72ac:	b510      	push	{r4, lr}
	buffer = NULL;
   b72ae:	2300      	movs	r3, #0
	capacity = 0;
   b72b0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b72b4:	4604      	mov	r4, r0
	len = 0;
   b72b6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b72b8:	7303      	strb	r3, [r0, #12]
	move(rval);
   b72ba:	f7ff ffda 	bl	b7272 <_ZN6String4moveERS_>
}
   b72be:	4620      	mov	r0, r4
   b72c0:	bd10      	pop	{r4, pc}

000b72c2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b72c2:	4288      	cmp	r0, r1
{
   b72c4:	b510      	push	{r4, lr}
   b72c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b72c8:	d005      	beq.n	b72d6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b72ca:	680b      	ldr	r3, [r1, #0]
   b72cc:	b12b      	cbz	r3, b72da <_ZN6StringaSERKS_+0x18>
   b72ce:	688a      	ldr	r2, [r1, #8]
   b72d0:	4619      	mov	r1, r3
   b72d2:	f7ff ffa1 	bl	b7218 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b72d6:	4620      	mov	r0, r4
   b72d8:	bd10      	pop	{r4, pc}
	else invalidate();
   b72da:	f7ff ff72 	bl	b71c2 <_ZN6String10invalidateEv>
   b72de:	e7fa      	b.n	b72d6 <_ZN6StringaSERKS_+0x14>

000b72e0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b72e0:	b510      	push	{r4, lr}
	buffer = NULL;
   b72e2:	2300      	movs	r3, #0
String::String(const String &value)
   b72e4:	4604      	mov	r4, r0
	capacity = 0;
   b72e6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b72ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   b72ec:	7303      	strb	r3, [r0, #12]
	*this = value;
   b72ee:	f7ff ffe8 	bl	b72c2 <_ZN6StringaSERKS_>
}
   b72f2:	4620      	mov	r0, r4
   b72f4:	bd10      	pop	{r4, pc}

000b72f6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b72f6:	b513      	push	{r0, r1, r4, lr}
   b72f8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b72fa:	b159      	cbz	r1, b7314 <_ZN6StringaSEPKc+0x1e>
   b72fc:	4608      	mov	r0, r1
   b72fe:	9101      	str	r1, [sp, #4]
   b7300:	f003 fe1d 	bl	baf3e <strlen>
   b7304:	9901      	ldr	r1, [sp, #4]
   b7306:	4602      	mov	r2, r0
   b7308:	4620      	mov	r0, r4
   b730a:	f7ff ff85 	bl	b7218 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b730e:	4620      	mov	r0, r4
   b7310:	b002      	add	sp, #8
   b7312:	bd10      	pop	{r4, pc}
	else invalidate();
   b7314:	f7ff ff55 	bl	b71c2 <_ZN6String10invalidateEv>
   b7318:	e7f9      	b.n	b730e <_ZN6StringaSEPKc+0x18>

000b731a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b731a:	b570      	push	{r4, r5, r6, lr}
   b731c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b731e:	460e      	mov	r6, r1
   b7320:	b909      	cbnz	r1, b7326 <_ZN6String6concatEPKcj+0xc>
   b7322:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7324:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7326:	b16a      	cbz	r2, b7344 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7328:	6884      	ldr	r4, [r0, #8]
   b732a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b732c:	4621      	mov	r1, r4
   b732e:	f7ff ff5f 	bl	b71f0 <_ZN6String7reserveEj>
   b7332:	2800      	cmp	r0, #0
   b7334:	d0f5      	beq.n	b7322 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7336:	6828      	ldr	r0, [r5, #0]
   b7338:	68ab      	ldr	r3, [r5, #8]
   b733a:	4631      	mov	r1, r6
   b733c:	4418      	add	r0, r3
   b733e:	f003 fdd9 	bl	baef4 <strcpy>
	len = newlen;
   b7342:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7344:	2001      	movs	r0, #1
   b7346:	e7ed      	b.n	b7324 <_ZN6String6concatEPKcj+0xa>

000b7348 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b7348:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b734a:	2300      	movs	r3, #0
	buf[0] = c;
   b734c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7350:	2201      	movs	r2, #1
   b7352:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7354:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7358:	f7ff ffdf 	bl	b731a <_ZN6String6concatEPKcj>
}
   b735c:	b003      	add	sp, #12
   b735e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7362 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b7362:	6802      	ldr	r2, [r0, #0]
{
   b7364:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b7366:	6809      	ldr	r1, [r1, #0]
   b7368:	b162      	cbz	r2, b7384 <_ZNK6String9compareToERKS_+0x22>
   b736a:	b941      	cbnz	r1, b737e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b736c:	6880      	ldr	r0, [r0, #8]
   b736e:	b160      	cbz	r0, b738a <_ZNK6String9compareToERKS_+0x28>
   b7370:	7810      	ldrb	r0, [r2, #0]
   b7372:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7374:	6898      	ldr	r0, [r3, #8]
   b7376:	b140      	cbz	r0, b738a <_ZNK6String9compareToERKS_+0x28>
   b7378:	7809      	ldrb	r1, [r1, #0]
   b737a:	4248      	negs	r0, r1
   b737c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b737e:	4610      	mov	r0, r2
   b7380:	f003 bdae 	b.w	baee0 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7384:	2900      	cmp	r1, #0
   b7386:	d1f5      	bne.n	b7374 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b7388:	4608      	mov	r0, r1
}
   b738a:	4770      	bx	lr

000b738c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b738c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b738e:	6882      	ldr	r2, [r0, #8]
   b7390:	688b      	ldr	r3, [r1, #8]
   b7392:	429a      	cmp	r2, r3
   b7394:	d105      	bne.n	b73a2 <_ZNK6String6equalsERKS_+0x16>
   b7396:	f7ff ffe4 	bl	b7362 <_ZNK6String9compareToERKS_>
   b739a:	fab0 f080 	clz	r0, r0
   b739e:	0940      	lsrs	r0, r0, #5
}
   b73a0:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b73a2:	2000      	movs	r0, #0
   b73a4:	e7fc      	b.n	b73a0 <_ZNK6String6equalsERKS_+0x14>

000b73a6 <_ZNK6StringltERKS_>:
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
   b73a6:	b508      	push	{r3, lr}
	return compareTo(rhs) < 0;
   b73a8:	f7ff ffdb 	bl	b7362 <_ZNK6String9compareToERKS_>
}
   b73ac:	0fc0      	lsrs	r0, r0, #31
   b73ae:	bd08      	pop	{r3, pc}

000b73b0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b73b0:	b40e      	push	{r1, r2, r3}
   b73b2:	b570      	push	{r4, r5, r6, lr}
   b73b4:	b087      	sub	sp, #28
   b73b6:	ad0b      	add	r5, sp, #44	; 0x2c
   b73b8:	4604      	mov	r4, r0
   b73ba:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b73be:	9201      	str	r2, [sp, #4]
   b73c0:	462b      	mov	r3, r5
   b73c2:	2105      	movs	r1, #5
   b73c4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b73c6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b73c8:	f7ff fe7c 	bl	b70c4 <vsnprintf>
    va_end(marker);

    String result;
   b73cc:	490b      	ldr	r1, [pc, #44]	; (b73fc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b73ce:	4606      	mov	r6, r0
    String result;
   b73d0:	4620      	mov	r0, r4
   b73d2:	f7ff ff3a 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b73d6:	4631      	mov	r1, r6
   b73d8:	4620      	mov	r0, r4
   b73da:	f7ff ff09 	bl	b71f0 <_ZN6String7reserveEj>
    if (result.buffer) {
   b73de:	6820      	ldr	r0, [r4, #0]
   b73e0:	b130      	cbz	r0, b73f0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b73e2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b73e4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b73e6:	462b      	mov	r3, r5
   b73e8:	1c71      	adds	r1, r6, #1
   b73ea:	f7ff fe6b 	bl	b70c4 <vsnprintf>
        va_end(marker);
        result.len = n;
   b73ee:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b73f0:	4620      	mov	r0, r4
   b73f2:	b007      	add	sp, #28
   b73f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b73f8:	b003      	add	sp, #12
   b73fa:	4770      	bx	lr
   b73fc:	000bb078 	.word	0x000bb078

000b7400 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7400:	4770      	bx	lr

000b7402 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7402:	4770      	bx	lr

000b7404 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7404:	4770      	bx	lr

000b7406 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7406:	4770      	bx	lr

000b7408 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7408:	4b06      	ldr	r3, [pc, #24]	; (b7424 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b740a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b740c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b740e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7412:	d005      	beq.n	b7420 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7414:	4608      	mov	r0, r1
   b7416:	f003 f897 	bl	ba548 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b741a:	2800      	cmp	r0, #0
   b741c:	bf08      	it	eq
   b741e:	2400      	moveq	r4, #0
      }
   b7420:	4620      	mov	r0, r4
   b7422:	bd10      	pop	{r4, pc}
   b7424:	000bb6e0 	.word	0x000bb6e0

000b7428 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7428:	4b06      	ldr	r3, [pc, #24]	; (b7444 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b742a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b742c:	b510      	push	{r4, lr}
   b742e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7432:	d005      	beq.n	b7440 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7434:	4608      	mov	r0, r1
   b7436:	f003 f887 	bl	ba548 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b743a:	2800      	cmp	r0, #0
   b743c:	bf08      	it	eq
   b743e:	2400      	moveq	r4, #0
      }
   b7440:	4620      	mov	r0, r4
   b7442:	bd10      	pop	{r4, pc}
   b7444:	000bb6e0 	.word	0x000bb6e0

000b7448 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7448:	4b06      	ldr	r3, [pc, #24]	; (b7464 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b744a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b744c:	b510      	push	{r4, lr}
   b744e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7452:	d005      	beq.n	b7460 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7454:	4608      	mov	r0, r1
   b7456:	f003 f877 	bl	ba548 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b745a:	2800      	cmp	r0, #0
   b745c:	bf08      	it	eq
   b745e:	2400      	moveq	r4, #0
      }
   b7460:	4620      	mov	r0, r4
   b7462:	bd10      	pop	{r4, pc}
   b7464:	000bb6e0 	.word	0x000bb6e0

000b7468 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7468:	b510      	push	{r4, lr}
   b746a:	2168      	movs	r1, #104	; 0x68
   b746c:	4604      	mov	r4, r0
   b746e:	f7fc fe14 	bl	b409a <_ZdlPvj>
   b7472:	4620      	mov	r0, r4
   b7474:	bd10      	pop	{r4, pc}

000b7476 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7476:	b510      	push	{r4, lr}
   b7478:	2128      	movs	r1, #40	; 0x28
   b747a:	4604      	mov	r4, r0
   b747c:	f7fc fe0d 	bl	b409a <_ZdlPvj>
   b7480:	4620      	mov	r0, r4
   b7482:	bd10      	pop	{r4, pc}

000b7484 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7484:	b510      	push	{r4, lr}
   b7486:	2130      	movs	r1, #48	; 0x30
   b7488:	4604      	mov	r4, r0
   b748a:	f7fc fe06 	bl	b409a <_ZdlPvj>
   b748e:	4620      	mov	r0, r4
   b7490:	bd10      	pop	{r4, pc}

000b7492 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7492:	2168      	movs	r1, #104	; 0x68
   b7494:	f7fc be01 	b.w	b409a <_ZdlPvj>

000b7498 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7498:	2128      	movs	r1, #40	; 0x28
   b749a:	f7fc bdfe 	b.w	b409a <_ZdlPvj>

000b749e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b749e:	2130      	movs	r1, #48	; 0x30
   b74a0:	f7fc bdfb 	b.w	b409a <_ZdlPvj>

000b74a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b74a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b74a6:	2500      	movs	r5, #0
   b74a8:	1cec      	adds	r4, r5, #3
   b74aa:	428c      	cmp	r4, r1
   b74ac:	d80d      	bhi.n	b74ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b74ae:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b74b0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b74b2:	5d87      	ldrb	r7, [r0, r6]
   b74b4:	4297      	cmp	r7, r2
   b74b6:	d105      	bne.n	b74c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b74b8:	4426      	add	r6, r4
   b74ba:	42b1      	cmp	r1, r6
   b74bc:	d305      	bcc.n	b74ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b74be:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b74c0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b74c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b74c4:	3401      	adds	r4, #1
   b74c6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b74c8:	e7ee      	b.n	b74a8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b74ca:	2000      	movs	r0, #0
   b74cc:	e7f9      	b.n	b74c2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b74d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b74d0:	4a02      	ldr	r2, [pc, #8]	; (b74dc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b74d2:	4903      	ldr	r1, [pc, #12]	; (b74e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b74d4:	200a      	movs	r0, #10
   b74d6:	f7ff bd19 	b.w	b6f0c <panic_>
   b74da:	bf00      	nop
   b74dc:	000b6c15 	.word	0x000b6c15
   b74e0:	000bb470 	.word	0x000bb470

000b74e4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b74e4:	b430      	push	{r4, r5}
   b74e6:	460d      	mov	r5, r1
   b74e8:	4611      	mov	r1, r2
   b74ea:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b74ec:	6803      	ldr	r3, [r0, #0]
   b74ee:	6809      	ldr	r1, [r1, #0]
   b74f0:	6828      	ldr	r0, [r5, #0]
   b74f2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b74f6:	46a4      	mov	ip, r4
      }
   b74f8:	bc30      	pop	{r4, r5}
   b74fa:	4760      	bx	ip

000b74fc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b74fc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b74fe:	b538      	push	{r3, r4, r5, lr}
   b7500:	4604      	mov	r4, r0
	switch (__op)
   b7502:	d102      	bne.n	b750a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7504:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7506:	6023      	str	r3, [r4, #0]
	}
   b7508:	e003      	b.n	b7512 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b750a:	2a02      	cmp	r2, #2
   b750c:	d003      	beq.n	b7516 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b750e:	2a03      	cmp	r2, #3
   b7510:	d00d      	beq.n	b752e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7512:	2000      	movs	r0, #0
   b7514:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7516:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7518:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b751a:	f7fc fdba 	bl	b4092 <_Znwj>
   b751e:	4603      	mov	r3, r0
   b7520:	2800      	cmp	r0, #0
   b7522:	d0f0      	beq.n	b7506 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7524:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7528:	e883 0003 	stmia.w	r3, {r0, r1}
   b752c:	e7eb      	b.n	b7506 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b752e:	6800      	ldr	r0, [r0, #0]
   b7530:	2800      	cmp	r0, #0
   b7532:	d0ee      	beq.n	b7512 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7534:	2108      	movs	r1, #8
   b7536:	f7fc fdb0 	bl	b409a <_ZdlPvj>
   b753a:	e7ea      	b.n	b7512 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b753c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b753c:	b510      	push	{r4, lr}
	if (_M_manager)
   b753e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7540:	4604      	mov	r4, r0
	if (_M_manager)
   b7542:	b12b      	cbz	r3, b7550 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7544:	2203      	movs	r2, #3
   b7546:	4601      	mov	r1, r0
   b7548:	4798      	blx	r3
	    _M_manager = nullptr;
   b754a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b754c:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7550:	bd10      	pop	{r4, pc}

000b7552 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7552:	b510      	push	{r4, lr}
	if (_M_manager)
   b7554:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7556:	4604      	mov	r4, r0
	if (_M_manager)
   b7558:	b12b      	cbz	r3, b7566 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b755a:	2203      	movs	r2, #3
   b755c:	4601      	mov	r1, r0
   b755e:	4798      	blx	r3
	    _M_manager = nullptr;
   b7560:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7562:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7566:	bd10      	pop	{r4, pc}

000b7568 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b7568:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b756a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b756c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b756e:	2220      	movs	r2, #32
   b7570:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b7574:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b7576:	4a08      	ldr	r2, [pc, #32]	; (b7598 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b7578:	9200      	str	r2, [sp, #0]
   b757a:	4908      	ldr	r1, [pc, #32]	; (b759c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b757c:	aa02      	add	r2, sp, #8
   b757e:	2001      	movs	r0, #1
   b7580:	f7ff fccc 	bl	b6f1c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7584:	6820      	ldr	r0, [r4, #0]
   b7586:	4906      	ldr	r1, [pc, #24]	; (b75a0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b7588:	8800      	ldrh	r0, [r0, #0]
   b758a:	2300      	movs	r3, #0
   b758c:	4622      	mov	r2, r4
    }
   b758e:	b00a      	add	sp, #40	; 0x28
   b7590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7594:	f7ff bb94 	b.w	b6cc0 <hal_ble_gatt_client_discover_all_services>
   b7598:	000bb492 	.word	0x000bb492
   b759c:	000bb487 	.word	0x000bb487
   b75a0:	000b9059 	.word	0x000b9059

000b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b75a4:	b510      	push	{r4, lr}
   b75a6:	3801      	subs	r0, #1
   b75a8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b75ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b75b0:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b75b2:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b75b6:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b75b8:	bf88      	it	hi
   b75ba:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b75be:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b75c2:	7803      	ldrb	r3, [r0, #0]
   b75c4:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b75c8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b75cc:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b75ce:	bf88      	it	hi
   b75d0:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b75d4:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b75d6:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b75da:	d1e7      	bne.n	b75ac <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b75dc:	bd10      	pop	{r4, pc}

000b75de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b75de:	b510      	push	{r4, lr}
   b75e0:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b75e2:	3058      	adds	r0, #88	; 0x58
   b75e4:	f7fd f9f6 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b75e8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b75ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b75f0:	f7ff bde0 	b.w	b71b4 <_ZN6StringD1Ev>

000b75f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b75f4:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b75f6:	6803      	ldr	r3, [r0, #0]
   b75f8:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b75fa:	4605      	mov	r5, r0
   b75fc:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b75fe:	d008      	beq.n	b7612 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b7600:	b111      	cbz	r1, b7608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b7602:	684b      	ldr	r3, [r1, #4]
   b7604:	3301      	adds	r3, #1
   b7606:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b7608:	6828      	ldr	r0, [r5, #0]
   b760a:	b108      	cbz	r0, b7610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b760c:	f7fd f9eb 	bl	b49e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7610:	602c      	str	r4, [r5, #0]
      }
   b7612:	bd38      	pop	{r3, r4, r5, pc}

000b7614 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7614:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7618:	b2da      	uxtb	r2, r3
   b761a:	2a09      	cmp	r2, #9
   b761c:	d801      	bhi.n	b7622 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b761e:	4618      	mov	r0, r3
   b7620:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7622:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7626:	2b05      	cmp	r3, #5
   b7628:	d801      	bhi.n	b762e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b762a:	3857      	subs	r0, #87	; 0x57
   b762c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b762e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7632:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7634:	bf94      	ite	ls
   b7636:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7638:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b763c:	4770      	bx	lr
	...

000b7640 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7640:	b510      	push	{r4, lr}
            locked_(false) {
   b7642:	2300      	movs	r3, #0
   b7644:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7646:	4b04      	ldr	r3, [pc, #16]	; (b7658 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7648:	4604      	mov	r4, r0
   b764a:	6818      	ldr	r0, [r3, #0]
   b764c:	f7ff fbc6 	bl	b6ddc <os_mutex_recursive_lock>
        locked_ = true;
   b7650:	2301      	movs	r3, #1
   b7652:	7023      	strb	r3, [r4, #0]
    }
   b7654:	4620      	mov	r0, r4
   b7656:	bd10      	pop	{r4, pc}
   b7658:	2003e6f0 	.word	0x2003e6f0

000b765c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b765c:	b510      	push	{r4, lr}
        if (locked_) {
   b765e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7660:	4604      	mov	r4, r0
        if (locked_) {
   b7662:	b11b      	cbz	r3, b766c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7664:	4b02      	ldr	r3, [pc, #8]	; (b7670 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7666:	6818      	ldr	r0, [r3, #0]
   b7668:	f7ff fbc0 	bl	b6dec <os_mutex_recursive_unlock>
    }
   b766c:	4620      	mov	r0, r4
   b766e:	bd10      	pop	{r4, pc}
   b7670:	2003e6f0 	.word	0x2003e6f0

000b7674 <_ZN8particle10BleAddressC1ERKS0_>:
    address_ = addr.address_;
   b7674:	680a      	ldr	r2, [r1, #0]
   b7676:	6002      	str	r2, [r0, #0]
   b7678:	684a      	ldr	r2, [r1, #4]
   b767a:	6042      	str	r2, [r0, #4]
}
   b767c:	4770      	bx	lr

000b767e <_ZN8particle10BleAddressaSERKS0_>:
    address_ = addr.address_;
   b767e:	680a      	ldr	r2, [r1, #0]
   b7680:	6002      	str	r2, [r0, #0]
   b7682:	684a      	ldr	r2, [r1, #4]
   b7684:	6042      	str	r2, [r0, #4]
}
   b7686:	4770      	bx	lr

000b7688 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7688:	b082      	sub	sp, #8
   b768a:	4603      	mov	r3, r0
    address_ = addr;
   b768c:	6808      	ldr	r0, [r1, #0]
   b768e:	6849      	ldr	r1, [r1, #4]
   b7690:	466a      	mov	r2, sp
   b7692:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7694:	466a      	mov	r2, sp
   b7696:	ca03      	ldmia	r2!, {r0, r1}
   b7698:	6018      	str	r0, [r3, #0]
}
   b769a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b769c:	6059      	str	r1, [r3, #4]
}
   b769e:	b002      	add	sp, #8
   b76a0:	4770      	bx	lr

000b76a2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b76a2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b76a4:	7982      	ldrb	r2, [r0, #6]
   b76a6:	798b      	ldrb	r3, [r1, #6]
   b76a8:	429a      	cmp	r2, r3
   b76aa:	d106      	bne.n	b76ba <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b76ac:	2206      	movs	r2, #6
   b76ae:	f003 fba9 	bl	bae04 <memcmp>
   b76b2:	fab0 f080 	clz	r0, r0
   b76b6:	0940      	lsrs	r0, r0, #5
}
   b76b8:	bd08      	pop	{r3, pc}
    return false;
   b76ba:	2000      	movs	r0, #0
   b76bc:	e7fc      	b.n	b76b8 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b76be <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b76be:	f04f 33ff 	mov.w	r3, #4294967295
   b76c2:	6003      	str	r3, [r0, #0]
   b76c4:	8083      	strh	r3, [r0, #4]
}
   b76c6:	2000      	movs	r0, #0
   b76c8:	4770      	bx	lr

000b76ca <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b76ca:	b508      	push	{r3, lr}
   b76cc:	4602      	mov	r2, r0
        : address_{} {
   b76ce:	2100      	movs	r1, #0
   b76d0:	6001      	str	r1, [r0, #0]
   b76d2:	6041      	str	r1, [r0, #4]
    clear();
   b76d4:	f7ff fff3 	bl	b76be <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b76d8:	7191      	strb	r1, [r2, #6]
}
   b76da:	4610      	mov	r0, r2
   b76dc:	bd08      	pop	{r3, pc}

000b76de <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b76de:	b510      	push	{r4, lr}
   b76e0:	1d43      	adds	r3, r0, #5
   b76e2:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b76e4:	781c      	ldrb	r4, [r3, #0]
   b76e6:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b76ea:	4283      	cmp	r3, r0
   b76ec:	f103 33ff 	add.w	r3, r3, #4294967295
   b76f0:	d1f8      	bne.n	b76e4 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b76f2:	bd10      	pop	{r4, pc}

000b76f4 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b76f4:	b570      	push	{r4, r5, r6, lr}
   b76f6:	4614      	mov	r4, r2
   b76f8:	b088      	sub	sp, #32
   b76fa:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b76fc:	460d      	mov	r5, r1
   b76fe:	2900      	cmp	r1, #0
   b7700:	d048      	beq.n	b7794 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b7702:	b1a4      	cbz	r4, b772e <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b7704:	a901      	add	r1, sp, #4
   b7706:	f7ff ffea 	bl	b76de <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b770a:	b19a      	cbz	r2, b7734 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b770c:	aa03      	add	r2, sp, #12
   b770e:	2106      	movs	r1, #6
   b7710:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b7712:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7714:	f7ff ff46 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b7718:	2e11      	cmp	r6, #17
   b771a:	bf28      	it	cs
   b771c:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b771e:	4632      	mov	r2, r6
   b7720:	a903      	add	r1, sp, #12
   b7722:	4628      	mov	r0, r5
   b7724:	f003 fb7e 	bl	bae24 <memcpy>
    buf[len++] = '\0';
   b7728:	2300      	movs	r3, #0
   b772a:	55ab      	strb	r3, [r5, r6]
   b772c:	1c74      	adds	r4, r6, #1
}
   b772e:	4620      	mov	r0, r4
   b7730:	b008      	add	sp, #32
   b7732:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b7734:	aa03      	add	r2, sp, #12
   b7736:	2101      	movs	r1, #1
   b7738:	a801      	add	r0, sp, #4
   b773a:	f7ff ff33 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b773e:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b7740:	f10d 020f 	add.w	r2, sp, #15
   b7744:	2101      	movs	r1, #1
   b7746:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b774a:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b774e:	f7ff ff29 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7752:	f10d 0212 	add.w	r2, sp, #18
   b7756:	2101      	movs	r1, #1
   b7758:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b775c:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7760:	f7ff ff20 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7764:	f10d 0215 	add.w	r2, sp, #21
   b7768:	2101      	movs	r1, #1
   b776a:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b776e:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7772:	f7ff ff17 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7776:	aa06      	add	r2, sp, #24
   b7778:	2101      	movs	r1, #1
   b777a:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b777c:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7780:	f7ff ff10 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b7784:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7788:	f10d 021b 	add.w	r2, sp, #27
   b778c:	2101      	movs	r1, #1
   b778e:	f10d 0009 	add.w	r0, sp, #9
   b7792:	e7be      	b.n	b7712 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b7794:	460c      	mov	r4, r1
   b7796:	e7ca      	b.n	b772e <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b7798 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b7798:	b510      	push	{r4, lr}
   b779a:	b086      	sub	sp, #24
   b779c:	4604      	mov	r4, r0
   b779e:	4613      	mov	r3, r2
   b77a0:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b77a2:	2212      	movs	r2, #18
   b77a4:	a901      	add	r1, sp, #4
   b77a6:	f7ff ffa5 	bl	b76f4 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b77aa:	a901      	add	r1, sp, #4
   b77ac:	4620      	mov	r0, r4
   b77ae:	f7ff fd4c 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b77b2:	4620      	mov	r0, r4
   b77b4:	b006      	add	sp, #24
   b77b6:	bd10      	pop	{r4, pc}

000b77b8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b77b8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b77ba:	2301      	movs	r3, #1
   b77bc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b77be:	4b05      	ldr	r3, [pc, #20]	; (b77d4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b77c0:	4602      	mov	r2, r0
   b77c2:	f103 0110 	add.w	r1, r3, #16
   b77c6:	f853 4b04 	ldr.w	r4, [r3], #4
   b77ca:	f842 4b04 	str.w	r4, [r2], #4
   b77ce:	428b      	cmp	r3, r1
   b77d0:	d1f9      	bne.n	b77c6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b77d2:	bd10      	pop	{r4, pc}
   b77d4:	000bb6ee 	.word	0x000bb6ee

000b77d8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b77d8:	7c0b      	ldrb	r3, [r1, #16]
   b77da:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b77de:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b77e0:	d10d      	bne.n	b77fe <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b77e2:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b77e4:	4b0c      	ldr	r3, [pc, #48]	; (b7818 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b77e6:	4602      	mov	r2, r0
   b77e8:	f103 0410 	add.w	r4, r3, #16
   b77ec:	f853 5b04 	ldr.w	r5, [r3], #4
   b77f0:	f842 5b04 	str.w	r5, [r2], #4
   b77f4:	42a3      	cmp	r3, r4
   b77f6:	d1f9      	bne.n	b77ec <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b77f8:	880b      	ldrh	r3, [r1, #0]
   b77fa:	8183      	strh	r3, [r0, #12]
}
   b77fc:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b77fe:	2301      	movs	r3, #1
   b7800:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7802:	f101 0210 	add.w	r2, r1, #16
   b7806:	4603      	mov	r3, r0
   b7808:	f851 4b04 	ldr.w	r4, [r1], #4
   b780c:	f843 4b04 	str.w	r4, [r3], #4
   b7810:	4291      	cmp	r1, r2
   b7812:	d1f9      	bne.n	b7808 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b7814:	e7f2      	b.n	b77fc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b7816:	bf00      	nop
   b7818:	000bb6ee 	.word	0x000bb6ee

000b781c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b781c:	b510      	push	{r4, lr}
    if (uuid128) {
   b781e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7820:	4604      	mov	r4, r0
    if (uuid128) {
   b7822:	b1b1      	cbz	r1, b7852 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7824:	2a01      	cmp	r2, #1
   b7826:	f101 0210 	add.w	r2, r1, #16
   b782a:	d10a      	bne.n	b7842 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b782c:	4601      	mov	r1, r0
   b782e:	f853 0b04 	ldr.w	r0, [r3], #4
   b7832:	f841 0b04 	str.w	r0, [r1], #4
   b7836:	4293      	cmp	r3, r2
   b7838:	d1f9      	bne.n	b782e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b783a:	2301      	movs	r3, #1
   b783c:	6123      	str	r3, [r4, #16]
}
   b783e:	4620      	mov	r0, r4
   b7840:	bd10      	pop	{r4, pc}
   b7842:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7844:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7848:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b784c:	429a      	cmp	r2, r3
   b784e:	d1f9      	bne.n	b7844 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7850:	e7f3      	b.n	b783a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7852:	2210      	movs	r2, #16
   b7854:	f003 fb0e 	bl	bae74 <memset>
   b7858:	e7f1      	b.n	b783e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b785a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b785a:	b538      	push	{r3, r4, r5, lr}
   b785c:	4604      	mov	r4, r0
   b785e:	460d      	mov	r5, r1
        : BleUuid() {
   b7860:	f7ff ffaa 	bl	b77b8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b7864:	2300      	movs	r3, #0
   b7866:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7868:	81a5      	strh	r5, [r4, #12]
}
   b786a:	4620      	mov	r0, r4
   b786c:	bd38      	pop	{r3, r4, r5, pc}

000b786e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b786e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7870:	6902      	ldr	r2, [r0, #16]
   b7872:	690b      	ldr	r3, [r1, #16]
   b7874:	429a      	cmp	r2, r3
   b7876:	d106      	bne.n	b7886 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7878:	2210      	movs	r2, #16
   b787a:	f003 fac3 	bl	bae04 <memcmp>
   b787e:	fab0 f080 	clz	r0, r0
   b7882:	0940      	lsrs	r0, r0, #5
}
   b7884:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7886:	2000      	movs	r0, #0
   b7888:	e7fc      	b.n	b7884 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b788c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b788c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b788e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7892:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7894:	4b34      	ldr	r3, [pc, #208]	; (b7968 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7896:	460c      	mov	r4, r1
   b7898:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b789a:	4602      	mov	r2, r0
   b789c:	f103 0110 	add.w	r1, r3, #16
   b78a0:	f853 0b04 	ldr.w	r0, [r3], #4
   b78a4:	f842 0b04 	str.w	r0, [r2], #4
   b78a8:	428b      	cmp	r3, r1
   b78aa:	d1f9      	bne.n	b78a0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b78ac:	b344      	cbz	r4, b7900 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b78ae:	2124      	movs	r1, #36	; 0x24
   b78b0:	4620      	mov	r0, r4
   b78b2:	f003 fb4c 	bl	baf4e <strnlen>
   b78b6:	2804      	cmp	r0, #4
   b78b8:	f04f 0500 	mov.w	r5, #0
   b78bc:	d123      	bne.n	b7906 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b78be:	f8ad 5004 	strh.w	r5, [sp, #4]
   b78c2:	af01      	add	r7, sp, #4
   b78c4:	1ca5      	adds	r5, r4, #2
   b78c6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b78c8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b78cc:	f7ff fea2 	bl	b7614 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b78d0:	f1b0 0800 	subs.w	r8, r0, #0
   b78d4:	db12      	blt.n	b78fc <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b78d6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b78da:	f7ff fe9b 	bl	b7614 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b78de:	2800      	cmp	r0, #0
   b78e0:	db0c      	blt.n	b78fc <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b78e2:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b78e4:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b78e8:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b78ea:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b78ee:	d1eb      	bne.n	b78c8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b78f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b78f4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b78f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b78fa:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b78fc:	2300      	movs	r3, #0
   b78fe:	6133      	str	r3, [r6, #16]
}
   b7900:	b002      	add	sp, #8
   b7902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7906:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b790a:	2124      	movs	r1, #36	; 0x24
   b790c:	4620      	mov	r0, r4
   b790e:	f003 fb1e 	bl	baf4e <strnlen>
   b7912:	42a8      	cmp	r0, r5
   b7914:	d807      	bhi.n	b7926 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7916:	4642      	mov	r2, r8
   b7918:	2100      	movs	r1, #0
   b791a:	4630      	mov	r0, r6
}
   b791c:	b002      	add	sp, #8
   b791e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7922:	f003 baa7 	b.w	bae74 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7926:	f1b8 0f00 	cmp.w	r8, #0
   b792a:	d0e9      	beq.n	b7900 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b792c:	5d60      	ldrb	r0, [r4, r5]
   b792e:	f7ff fe71 	bl	b7614 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7932:	0603      	lsls	r3, r0, #24
   b7934:	d415      	bmi.n	b7962 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7936:	0100      	lsls	r0, r0, #4
   b7938:	f108 38ff 	add.w	r8, r8, #4294967295
   b793c:	b2c7      	uxtb	r7, r0
   b793e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7942:	2124      	movs	r1, #36	; 0x24
   b7944:	4620      	mov	r0, r4
   b7946:	f003 fb02 	bl	baf4e <strnlen>
   b794a:	3501      	adds	r5, #1
   b794c:	42a8      	cmp	r0, r5
   b794e:	d908      	bls.n	b7962 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7950:	5d60      	ldrb	r0, [r4, r5]
   b7952:	f7ff fe5f 	bl	b7614 <_ZN8particle11hexToNibbleEc>
   b7956:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7958:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b795a:	bfa4      	itt	ge
   b795c:	4338      	orrge	r0, r7
   b795e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7962:	3501      	adds	r5, #1
   b7964:	e7d1      	b.n	b790a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7966:	bf00      	nop
   b7968:	000bb6ee 	.word	0x000bb6ee

000b796c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b796c:	b513      	push	{r0, r1, r4, lr}
   b796e:	4604      	mov	r4, r0
   b7970:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7972:	f7ff ff21 	bl	b77b8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7976:	4620      	mov	r0, r4
   b7978:	9901      	ldr	r1, [sp, #4]
   b797a:	f7ff ff87 	bl	b788c <_ZN8particle7BleUuid9constructEPKc>
}
   b797e:	4620      	mov	r0, r4
   b7980:	b002      	add	sp, #8
   b7982:	bd10      	pop	{r4, pc}

000b7984 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b7984:	b510      	push	{r4, lr}
   b7986:	f100 030f 	add.w	r3, r0, #15
   b798a:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b798c:	781c      	ldrb	r4, [r3, #0]
   b798e:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7992:	4283      	cmp	r3, r0
   b7994:	f103 33ff 	add.w	r3, r3, #4294967295
   b7998:	d1f8      	bne.n	b798c <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b799a:	bd10      	pop	{r4, pc}

000b799c <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79a0:	461f      	mov	r7, r3
   b79a2:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b79a4:	460d      	mov	r5, r1
   b79a6:	2900      	cmp	r1, #0
   b79a8:	d05b      	beq.n	b7a62 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b79aa:	b1da      	cbz	r2, b79e4 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b79ac:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b79b0:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b79b2:	f1b8 0f00 	cmp.w	r8, #0
   b79b6:	d119      	bne.n	b79ec <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79b8:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b79ba:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79be:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b79c0:	aa05      	add	r2, sp, #20
   b79c2:	2102      	movs	r1, #2
   b79c4:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79c6:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b79ca:	f7ff fdeb 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b79ce:	2c04      	cmp	r4, #4
   b79d0:	bf28      	it	cs
   b79d2:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b79d4:	4622      	mov	r2, r4
   b79d6:	a905      	add	r1, sp, #20
   b79d8:	4628      	mov	r0, r5
   b79da:	f003 fa23 	bl	bae24 <memcpy>
        buf[len++] = '\0';
   b79de:	f805 8004 	strb.w	r8, [r5, r4]
   b79e2:	1c62      	adds	r2, r4, #1
}
   b79e4:	4610      	mov	r0, r2
   b79e6:	b00e      	add	sp, #56	; 0x38
   b79e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b79ec:	a901      	add	r1, sp, #4
   b79ee:	f7ff ffc9 	bl	b7984 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b79f2:	aa05      	add	r2, sp, #20
    if (stripped) {
   b79f4:	b17f      	cbz	r7, b7a16 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b79f6:	2110      	movs	r1, #16
   b79f8:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b79fa:	f7ff fdd3 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b79fe:	2c24      	cmp	r4, #36	; 0x24
   b7a00:	bf28      	it	cs
   b7a02:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b7a04:	4622      	mov	r2, r4
   b7a06:	a905      	add	r1, sp, #20
   b7a08:	4628      	mov	r0, r5
   b7a0a:	f003 fa0b 	bl	bae24 <memcpy>
    buf[len++] = '\0';
   b7a0e:	2300      	movs	r3, #0
   b7a10:	552b      	strb	r3, [r5, r4]
   b7a12:	1c62      	adds	r2, r4, #1
    return len;
   b7a14:	e7e6      	b.n	b79e4 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b7a16:	2104      	movs	r1, #4
   b7a18:	eb0d 0001 	add.w	r0, sp, r1
   b7a1c:	f7ff fdc2 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b7a20:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7a22:	f10d 021d 	add.w	r2, sp, #29
   b7a26:	2102      	movs	r1, #2
   b7a28:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b7a2a:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7a2e:	f7ff fdb9 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7a32:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b7a36:	2102      	movs	r1, #2
   b7a38:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b7a3c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7a40:	f7ff fdb0 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7a44:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b7a48:	2102      	movs	r1, #2
   b7a4a:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b7a4c:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7a50:	f7ff fda8 	bl	b75a4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b7a54:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b7a58:	aa0b      	add	r2, sp, #44	; 0x2c
   b7a5a:	2106      	movs	r1, #6
   b7a5c:	f10d 000e 	add.w	r0, sp, #14
   b7a60:	e7cb      	b.n	b79fa <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b7a62:	460a      	mov	r2, r1
   b7a64:	e7be      	b.n	b79e4 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b7a66 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b7a66:	b510      	push	{r4, lr}
   b7a68:	b08a      	sub	sp, #40	; 0x28
   b7a6a:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b7a6c:	2300      	movs	r3, #0
   b7a6e:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b7a70:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b7a72:	4669      	mov	r1, sp
   b7a74:	f7ff ff92 	bl	b799c <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b7a78:	4669      	mov	r1, sp
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	f7ff fbe5 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7a80:	4620      	mov	r0, r4
   b7a82:	b00a      	add	sp, #40	; 0x28
   b7a84:	bd10      	pop	{r4, pc}

000b7a86 <_ZNK8particle18BleAdvertisingData3getEPhj>:
size_t BleAdvertisingData::get(uint8_t* buf, size_t len) const {
   b7a86:	b510      	push	{r4, lr}
   b7a88:	4603      	mov	r3, r0
        len = std::min(len, (size_t)selfData_.size());
   b7a8a:	6844      	ldr	r4, [r0, #4]
    if (buf != nullptr) {
   b7a8c:	4608      	mov	r0, r1
   b7a8e:	b131      	cbz	r1, b7a9e <_ZNK8particle18BleAdvertisingData3getEPhj+0x18>
    }
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
   b7a90:	4294      	cmp	r4, r2
   b7a92:	bf28      	it	cs
   b7a94:	4614      	movcs	r4, r2
        memcpy(buf, selfData_.data(), len);
   b7a96:	6819      	ldr	r1, [r3, #0]
   b7a98:	4622      	mov	r2, r4
   b7a9a:	f003 f9c3 	bl	bae24 <memcpy>
}
   b7a9e:	4620      	mov	r0, r4
   b7aa0:	bd10      	pop	{r4, pc}

000b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b7aa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7aa4:	4605      	mov	r5, r0
   b7aa6:	4616      	mov	r6, r2
   b7aa8:	461f      	mov	r7, r3
   b7aaa:	460a      	mov	r2, r1
   b7aac:	ab01      	add	r3, sp, #4
   b7aae:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7ab2:	f7ff fcf7 	bl	b74a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b7ab6:	f030 0402 	bics.w	r4, r0, #2
   b7aba:	d00c      	beq.n	b7ad6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b7abc:	1e84      	subs	r4, r0, #2
   b7abe:	42bc      	cmp	r4, r7
   b7ac0:	bf28      	it	cs
   b7ac2:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b7ac4:	b13e      	cbz	r6, b7ad6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b7ac6:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b7ac8:	682b      	ldr	r3, [r5, #0]
   b7aca:	3102      	adds	r1, #2
   b7acc:	4622      	mov	r2, r4
   b7ace:	4419      	add	r1, r3
   b7ad0:	4630      	mov	r0, r6
   b7ad2:	f003 f9a7 	bl	bae24 <memcpy>
}
   b7ad6:	4620      	mov	r0, r4
   b7ad8:	b003      	add	sp, #12
   b7ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7adc <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ade:	4613      	mov	r3, r2
   b7ae0:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7ae2:	9201      	str	r2, [sp, #4]
   b7ae4:	460a      	mov	r2, r1
   b7ae6:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7ae8:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7aea:	f7ff ffda 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b7aee:	b940      	cbnz	r0, b7b02 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7af0:	9b01      	ldr	r3, [sp, #4]
   b7af2:	4622      	mov	r2, r4
   b7af4:	2109      	movs	r1, #9
   b7af6:	4628      	mov	r0, r5
}
   b7af8:	b003      	add	sp, #12
   b7afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7afe:	f7ff bfd0 	b.w	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b7b02:	b003      	add	sp, #12
   b7b04:	bd30      	pop	{r4, r5, pc}
	...

000b7b08 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b7b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7b0a:	460c      	mov	r4, r1
   b7b0c:	b089      	sub	sp, #36	; 0x24
    String name;
   b7b0e:	490c      	ldr	r1, [pc, #48]	; (b7b40 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b7b10:	4605      	mov	r5, r0
    String name;
   b7b12:	f7ff fb9a 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b7b16:	221f      	movs	r2, #31
   b7b18:	4669      	mov	r1, sp
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	f7ff ffde 	bl	b7adc <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b7b20:	4606      	mov	r6, r0
   b7b22:	b150      	cbz	r0, b7b3a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b7b24:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b7b26:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b7b28:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7b2c:	4628      	mov	r0, r5
   b7b2e:	f7ff fc0b 	bl	b7348 <_ZN6String6concatEc>
   b7b32:	b110      	cbz	r0, b7b3a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b7b34:	3701      	adds	r7, #1
   b7b36:	42be      	cmp	r6, r7
   b7b38:	d1f6      	bne.n	b7b28 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b7b3a:	4628      	mov	r0, r5
   b7b3c:	b009      	add	sp, #36	; 0x24
   b7b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7b40:	000bb078 	.word	0x000bb078

000b7b44 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b7b44:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b7b46:	460a      	mov	r2, r1
   b7b48:	21ff      	movs	r1, #255	; 0xff
   b7b4a:	f7ff bfaa 	b.w	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b7b4e <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b7b4e:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b7b50:	2302      	movs	r3, #2
   b7b52:	aa01      	add	r2, sp, #4
   b7b54:	2119      	movs	r1, #25
   b7b56:	f7ff ffa4 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b7b5a:	b108      	cbz	r0, b7b60 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b7b5c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b7b60:	b003      	add	sp, #12
   b7b62:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b66 <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
   b7b66:	b507      	push	{r0, r1, r2, lr}
   b7b68:	460a      	mov	r2, r1
    if (offset == nullptr) {
   b7b6a:	ab01      	add	r3, sp, #4
   b7b6c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7b70:	f7ff fc98 	bl	b74a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
}
   b7b74:	3800      	subs	r0, #0
   b7b76:	bf18      	it	ne
   b7b78:	2001      	movne	r0, #1
   b7b7a:	b003      	add	sp, #12
   b7b7c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b80 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7b80:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7b86:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7b88:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7b8a:	8043      	strh	r3, [r0, #2]
   b7b8c:	220e      	movs	r2, #14
   b7b8e:	4629      	mov	r1, r5
   b7b90:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7b92:	7105      	strb	r5, [r0, #4]
   b7b94:	3006      	adds	r0, #6
   b7b96:	f003 f96d 	bl	bae74 <memset>
   b7b9a:	f104 0014 	add.w	r0, r4, #20
   b7b9e:	f7ff fe0b 	bl	b77b8 <_ZN8particle7BleUuidC1Ev>
   b7ba2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7ba6:	f7ff fe07 	bl	b77b8 <_ZN8particle7BleUuidC1Ev>
   b7baa:	4904      	ldr	r1, [pc, #16]	; (b7bbc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7bac:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7bb0:	f7ff fb4b 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7bb4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7bb6:	4620      	mov	r0, r4
   b7bb8:	bd38      	pop	{r3, r4, r5, pc}
   b7bba:	bf00      	nop
   b7bbc:	000bb078 	.word	0x000bb078

000b7bc0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b7bc0:	b538      	push	{r3, r4, r5, lr}
      { return _M_ptr; }
   b7bc2:	680d      	ldr	r5, [r1, #0]
   b7bc4:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7bc6:	4601      	mov	r1, r0
   b7bc8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b7bcc:	f7ff fe4f 	bl	b786e <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7bd0:	b140      	cbz	r0, b7be4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b7bd2:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7bd4:	8aa2      	ldrh	r2, [r4, #20]
   b7bd6:	429a      	cmp	r2, r3
   b7bd8:	d805      	bhi.n	b7be6 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7bda:	8ae0      	ldrh	r0, [r4, #22]
   b7bdc:	4298      	cmp	r0, r3
   b7bde:	bf34      	ite	cc
   b7be0:	2000      	movcc	r0, #0
   b7be2:	2001      	movcs	r0, #1
    }
   b7be4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b7be6:	2000      	movs	r0, #0
   b7be8:	e7fc      	b.n	b7be4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b7bea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7bea:	b510      	push	{r4, lr}
    return data_ + size_;
   b7bec:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7bf0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7bf4:	4293      	cmp	r3, r2
   b7bf6:	4618      	mov	r0, r3
   b7bf8:	d006      	beq.n	b7c08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7bfa:	6804      	ldr	r4, [r0, #0]
   b7bfc:	8824      	ldrh	r4, [r4, #0]
   b7bfe:	428c      	cmp	r4, r1
   b7c00:	f103 0308 	add.w	r3, r3, #8
   b7c04:	d1f6      	bne.n	b7bf4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7c06:	bd10      	pop	{r4, pc}
        return nullptr;
   b7c08:	2000      	movs	r0, #0
   b7c0a:	e7fc      	b.n	b7c06 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b7c0c <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7c0c:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b7c0e:	b570      	push	{r4, r5, r6, lr}
   b7c10:	6003      	str	r3, [r0, #0]
   b7c12:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c14:	2068      	movs	r0, #104	; 0x68
   b7c16:	f7fc fa3c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7c1a:	1e04      	subs	r4, r0, #0
   b7c1c:	f104 060c 	add.w	r6, r4, #12
   b7c20:	d007      	beq.n	b7c32 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b7c22:	2301      	movs	r3, #1
   b7c24:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7c28:	4b04      	ldr	r3, [pc, #16]	; (b7c3c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b7c2a:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c2c:	4630      	mov	r0, r6
   b7c2e:	f7ff ffa7 	bl	b7b80 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b7c32:	e9c5 6400 	strd	r6, r4, [r5]
}
   b7c36:	4628      	mov	r0, r5
   b7c38:	bd70      	pop	{r4, r5, r6, pc}
   b7c3a:	bf00      	nop
   b7c3c:	000bb694 	.word	0x000bb694

000b7c40 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b7c40:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b7c42:	680c      	ldr	r4, [r1, #0]
   b7c44:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b7c46:	4606      	mov	r6, r0
    return impl()->charUUID();
   b7c48:	4605      	mov	r5, r0
   b7c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7c4e:	6823      	ldr	r3, [r4, #0]
   b7c50:	602b      	str	r3, [r5, #0]
}
   b7c52:	4630      	mov	r0, r6
   b7c54:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7c58 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c5a:	4606      	mov	r6, r0
   b7c5c:	b085      	sub	sp, #20
   b7c5e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7c60:	460d      	mov	r5, r1
   b7c62:	2900      	cmp	r1, #0
   b7c64:	d050      	beq.n	b7d08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7c66:	2a00      	cmp	r2, #0
   b7c68:	d04e      	beq.n	b7d08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b7c6a:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b7c6c:	7823      	ldrb	r3, [r4, #0]
   b7c6e:	2af4      	cmp	r2, #244	; 0xf4
   b7c70:	bf28      	it	cs
   b7c72:	22f4      	movcs	r2, #244	; 0xf4
   b7c74:	b343      	cbz	r3, b7cc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7c76:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7c78:	0798      	lsls	r0, r3, #30
   b7c7a:	d509      	bpl.n	b7c90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7c7c:	89a0      	ldrh	r0, [r4, #12]
   b7c7e:	9203      	str	r2, [sp, #12]
   b7c80:	2300      	movs	r3, #0
   b7c82:	f7ff f813 	bl	b6cac <hal_ble_gatt_server_set_characteristic_value>
   b7c86:	2800      	cmp	r0, #0
   b7c88:	9a03      	ldr	r2, [sp, #12]
   b7c8a:	da03      	bge.n	b7c94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b7c8c:	b005      	add	sp, #20
   b7c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7c90:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7c94:	6834      	ldr	r4, [r6, #0]
   b7c96:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7c98:	06d9      	lsls	r1, r3, #27
   b7c9a:	d509      	bpl.n	b7cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7c9c:	2f01      	cmp	r7, #1
   b7c9e:	d007      	beq.n	b7cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7ca0:	89a0      	ldrh	r0, [r4, #12]
   b7ca2:	2300      	movs	r3, #0
   b7ca4:	4629      	mov	r1, r5
}
   b7ca6:	b005      	add	sp, #20
   b7ca8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cac:	f7ff b858 	b.w	b6d60 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7cb0:	069b      	lsls	r3, r3, #26
   b7cb2:	d5eb      	bpl.n	b7c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7cb4:	2f02      	cmp	r7, #2
   b7cb6:	d0e9      	beq.n	b7c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cb8:	89a0      	ldrh	r0, [r4, #12]
   b7cba:	2300      	movs	r3, #0
   b7cbc:	4629      	mov	r1, r5
}
   b7cbe:	b005      	add	sp, #20
   b7cc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cc4:	f7ff b856 	b.w	b6d74 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7cc8:	8860      	ldrh	r0, [r4, #2]
   b7cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7cce:	4288      	cmp	r0, r1
   b7cd0:	d01c      	beq.n	b7d0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7cd2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7cd4:	074e      	lsls	r6, r1, #29
   b7cd6:	d501      	bpl.n	b7cdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7cd8:	2f01      	cmp	r7, #1
   b7cda:	d104      	bne.n	b7ce6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7cdc:	070b      	lsls	r3, r1, #28
   b7cde:	d409      	bmi.n	b7cf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7ce0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7ce4:	e7d2      	b.n	b7c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7ce6:	89a1      	ldrh	r1, [r4, #12]
   b7ce8:	9300      	str	r3, [sp, #0]
   b7cea:	4613      	mov	r3, r2
   b7cec:	462a      	mov	r2, r5
   b7cee:	f7ff f805 	bl	b6cfc <hal_ble_gatt_client_write_without_response>
   b7cf2:	e7cb      	b.n	b7c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7cf4:	2f02      	cmp	r7, #2
   b7cf6:	d0f3      	beq.n	b7ce0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cf8:	2300      	movs	r3, #0
   b7cfa:	89a1      	ldrh	r1, [r4, #12]
   b7cfc:	9300      	str	r3, [sp, #0]
   b7cfe:	4613      	mov	r3, r2
   b7d00:	462a      	mov	r2, r5
   b7d02:	f7fe fff1 	bl	b6ce8 <hal_ble_gatt_client_write_with_response>
   b7d06:	e7c1      	b.n	b7c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7d08:	4802      	ldr	r0, [pc, #8]	; (b7d14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7d0a:	e7bf      	b.n	b7c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7d0c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7d10:	e7bc      	b.n	b7c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7d12:	bf00      	nop
   b7d14:	fffffef2 	.word	0xfffffef2

000b7d18 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b7d18:	b510      	push	{r4, lr}
   b7d1a:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7d1c:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b7d1e:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7d20:	bb52      	cbnz	r2, b7d78 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b7d22:	885c      	ldrh	r4, [r3, #2]
   b7d24:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7d28:	4284      	cmp	r4, r0
   b7d2a:	d025      	beq.n	b7d78 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b7d2c:	8a18      	ldrh	r0, [r3, #16]
   b7d2e:	b330      	cbz	r0, b7d7e <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b7d30:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b7d34:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b7d36:	4a13      	ldr	r2, [pc, #76]	; (b7d84 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b7d38:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b7d3a:	4a13      	ldr	r2, [pc, #76]	; (b7d88 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b7d3c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b7d40:	885a      	ldrh	r2, [r3, #2]
   b7d42:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b7d46:	8a1a      	ldrh	r2, [r3, #16]
   b7d48:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b7d4c:	899a      	ldrh	r2, [r3, #12]
   b7d4e:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b7d52:	b159      	cbz	r1, b7d6c <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b7d54:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b7d56:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b7d58:	bf44      	itt	mi
   b7d5a:	2202      	movmi	r2, #2
   b7d5c:	9205      	strmi	r2, [sp, #20]
   b7d5e:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b7d60:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b7d62:	bf42      	ittt	mi
   b7d64:	9b05      	ldrmi	r3, [sp, #20]
   b7d66:	f043 0301 	orrmi.w	r3, r3, #1
   b7d6a:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b7d6c:	2100      	movs	r1, #0
   b7d6e:	4668      	mov	r0, sp
   b7d70:	f7fe ffec 	bl	b6d4c <hal_ble_gatt_client_configure_cccd>
}
   b7d74:	b006      	add	sp, #24
   b7d76:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7d78:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7d7c:	e7fa      	b.n	b7d74 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b7d7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7d82:	e7f7      	b.n	b7d74 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b7d84:	00180003 	.word	0x00180003
   b7d88:	000b7f5d 	.word	0x000b7f5d

000b7d8c <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b7d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d8e:	2600      	movs	r6, #0
   b7d90:	6006      	str	r6, [r0, #0]
   b7d92:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7d94:	2028      	movs	r0, #40	; 0x28
   b7d96:	f7fc f97c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7d9a:	1e04      	subs	r4, r0, #0
   b7d9c:	f104 070c 	add.w	r7, r4, #12
   b7da0:	d00a      	beq.n	b7db8 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7da2:	2301      	movs	r3, #1
   b7da4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7da8:	4b05      	ldr	r3, [pc, #20]	; (b7dc0 <_ZN8particle10BleServiceC1Ev+0x34>)
   b7daa:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b7dac:	4638      	mov	r0, r7
   b7dae:	f7ff fd03 	bl	b77b8 <_ZN8particle7BleUuidC1Ev>
   b7db2:	6226      	str	r6, [r4, #32]
   b7db4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b7db8:	e9c5 7400 	strd	r7, r4, [r5]
}
   b7dbc:	4628      	mov	r0, r5
   b7dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7dc0:	000bb6b0 	.word	0x000bb6b0

000b7dc4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7dc4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7dc6:	2500      	movs	r5, #0
   b7dc8:	6005      	str	r5, [r0, #0]
   b7dca:	4606      	mov	r6, r0
   b7dcc:	2030      	movs	r0, #48	; 0x30
   b7dce:	f7fc f960 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7dd2:	4604      	mov	r4, r0
   b7dd4:	b188      	cbz	r0, b7dfa <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7dd6:	2301      	movs	r3, #1
   b7dd8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7ddc:	4b09      	ldr	r3, [pc, #36]	; (b7e04 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7dde:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7de4:	8183      	strh	r3, [r0, #12]
   b7de6:	300e      	adds	r0, #14
   b7de8:	f7ff fc6f 	bl	b76ca <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7dec:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7df0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7df4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7df8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7dfa:	6074      	str	r4, [r6, #4]
   b7dfc:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7dfe:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7e00:	4630      	mov	r0, r6
   b7e02:	bd70      	pop	{r4, r5, r6, pc}
   b7e04:	000bb6cc 	.word	0x000bb6cc

000b7e08 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b7e08:	b513      	push	{r0, r1, r4, lr}
   b7e0a:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7e0c:	a801      	add	r0, sp, #4
   b7e0e:	f7ff fc17 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7e12:	6823      	ldr	r3, [r4, #0]
   b7e14:	881c      	ldrh	r4, [r3, #0]
   b7e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7e1a:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7e1c:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7e1e:	bf18      	it	ne
   b7e20:	2401      	movne	r4, #1
    WiringBleLock lk;
   b7e22:	f7ff fc1b 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7e26:	4620      	mov	r0, r4
   b7e28:	b002      	add	sp, #8
   b7e2a:	bd10      	pop	{r4, pc}

000b7e2c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b7e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e2e:	4605      	mov	r5, r0
   b7e30:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7e32:	a801      	add	r0, sp, #4
   b7e34:	f7ff fc04 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7e38:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7e3a:	6823      	ldr	r3, [r4, #0]
   b7e3c:	f8c2 3002 	str.w	r3, [r2, #2]
   b7e40:	6863      	ldr	r3, [r4, #4]
   b7e42:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b7e46:	a801      	add	r0, sp, #4
   b7e48:	f7ff fc08 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b7e4c:	b003      	add	sp, #12
   b7e4e:	bd30      	pop	{r4, r5, pc}

000b7e50 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b7e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e52:	460d      	mov	r5, r1
   b7e54:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7e56:	a801      	add	r0, sp, #4
   b7e58:	f7ff fbf2 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
   b7e5c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7e5e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7e62:	6023      	str	r3, [r4, #0]
   b7e64:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7e68:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7e6a:	a801      	add	r0, sp, #4
   b7e6c:	f7ff fbf6 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7e70:	4620      	mov	r0, r4
   b7e72:	b003      	add	sp, #12
   b7e74:	bd30      	pop	{r4, r5, pc}

000b7e76 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7e76:	b530      	push	{r4, r5, lr}
   b7e78:	4605      	mov	r5, r0
   b7e7a:	b087      	sub	sp, #28
   b7e7c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7e7e:	a801      	add	r0, sp, #4
   b7e80:	f7ff fbde 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7e84:	682a      	ldr	r2, [r5, #0]
   b7e86:	6823      	ldr	r3, [r4, #0]
   b7e88:	8812      	ldrh	r2, [r2, #0]
   b7e8a:	881b      	ldrh	r3, [r3, #0]
   b7e8c:	429a      	cmp	r2, r3
   b7e8e:	d10d      	bne.n	b7eac <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7e90:	4629      	mov	r1, r5
   b7e92:	a802      	add	r0, sp, #8
   b7e94:	f7ff ffdc 	bl	b7e50 <_ZNK8particle13BlePeerDevice7addressEv>
   b7e98:	4621      	mov	r1, r4
   b7e9a:	a804      	add	r0, sp, #16
   b7e9c:	f7ff ffd8 	bl	b7e50 <_ZNK8particle13BlePeerDevice7addressEv>
   b7ea0:	a904      	add	r1, sp, #16
   b7ea2:	a802      	add	r0, sp, #8
   b7ea4:	f7ff fbfd 	bl	b76a2 <_ZNK8particle10BleAddresseqERKS0_>
   b7ea8:	4604      	mov	r4, r0
   b7eaa:	b900      	cbnz	r0, b7eae <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7eac:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7eae:	a801      	add	r0, sp, #4
   b7eb0:	f7ff fbd4 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7eb4:	4620      	mov	r0, r4
   b7eb6:	b007      	add	sp, #28
   b7eb8:	bd30      	pop	{r4, r5, pc}
	...

000b7ebc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7ebc:	b510      	push	{r4, lr}
   b7ebe:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7ec0:	2064      	movs	r0, #100	; 0x64
   b7ec2:	f7fc f8e6 	bl	b4092 <_Znwj>
   b7ec6:	b168      	cbz	r0, b7ee4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7ec8:	2300      	movs	r3, #0
   b7eca:	e9c0 3300 	strd	r3, r3, [r0]
   b7ece:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7ed6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7eda:	6203      	str	r3, [r0, #32]
   b7edc:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7ede:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7ee0:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7ee2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7ee4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7ee6:	b920      	cbnz	r0, b7ef2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7ee8:	4a0a      	ldr	r2, [pc, #40]	; (b7f14 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7eea:	490b      	ldr	r1, [pc, #44]	; (b7f18 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7eec:	200a      	movs	r0, #10
   b7eee:	f7ff f80d 	bl	b6f0c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7ef2:	2000      	movs	r0, #0
   b7ef4:	f7fe fea6 	bl	b6c44 <hal_ble_stack_init>
   b7ef8:	b120      	cbz	r0, b7f04 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7efa:	4a06      	ldr	r2, [pc, #24]	; (b7f14 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7efc:	4907      	ldr	r1, [pc, #28]	; (b7f1c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7efe:	200a      	movs	r0, #10
   b7f00:	f7ff f804 	bl	b6f0c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7f04:	6821      	ldr	r1, [r4, #0]
   b7f06:	4806      	ldr	r0, [pc, #24]	; (b7f20 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7f08:	2200      	movs	r2, #0
   b7f0a:	f7fe ff15 	bl	b6d38 <hal_ble_set_callback_on_periph_link_events>
}
   b7f0e:	4620      	mov	r0, r4
   b7f10:	bd10      	pop	{r4, pc}
   b7f12:	bf00      	nop
   b7f14:	000b6c15 	.word	0x000b6c15
   b7f18:	000bb470 	.word	0x000bb470
   b7f1c:	000bb4ae 	.word	0x000bb4ae
   b7f20:	000b8849 	.word	0x000b8849

000b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7f24:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7f26:	4c0a      	ldr	r4, [pc, #40]	; (b7f50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7f28:	7823      	ldrb	r3, [r4, #0]
   b7f2a:	f3bf 8f5b 	dmb	ish
   b7f2e:	07db      	lsls	r3, r3, #31
   b7f30:	d40c      	bmi.n	b7f4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7f32:	4620      	mov	r0, r4
   b7f34:	f7fc f8b3 	bl	b409e <__cxa_guard_acquire>
   b7f38:	b140      	cbz	r0, b7f4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7f3a:	4806      	ldr	r0, [pc, #24]	; (b7f54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7f3c:	f7ff ffbe 	bl	b7ebc <_ZN8particle14BleLocalDeviceC1Ev>
   b7f40:	4620      	mov	r0, r4
   b7f42:	f7fc f8b1 	bl	b40a8 <__cxa_guard_release>
   b7f46:	4804      	ldr	r0, [pc, #16]	; (b7f58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7f48:	f002 ff4e 	bl	bade8 <atexit>
    return instance;
}
   b7f4c:	4801      	ldr	r0, [pc, #4]	; (b7f54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7f4e:	bd10      	pop	{r4, pc}
   b7f50:	2003e6ec 	.word	0x2003e6ec
   b7f54:	2003e6f4 	.word	0x2003e6f4
   b7f58:	000b81b5 	.word	0x000b81b5

000b7f5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7f5c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7f5e:	6803      	ldr	r3, [r0, #0]
   b7f60:	3b09      	subs	r3, #9
   b7f62:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7f64:	b08d      	sub	sp, #52	; 0x34
   b7f66:	4604      	mov	r4, r0
   b7f68:	460d      	mov	r5, r1
    switch (event->type) {
   b7f6a:	d811      	bhi.n	b7f90 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7f6c:	f7ff ffda 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7f70:	88a1      	ldrh	r1, [r4, #4]
   b7f72:	6800      	ldr	r0, [r0, #0]
   b7f74:	f7ff fe39 	bl	b7bea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7f78:	4603      	mov	r3, r0
   b7f7a:	b958      	cbnz	r0, b7f94 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7f7c:	2220      	movs	r2, #32
   b7f7e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7f82:	4a0b      	ldr	r2, [pc, #44]	; (b7fb0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7f84:	9200      	str	r2, [sp, #0]
   b7f86:	490b      	ldr	r1, [pc, #44]	; (b7fb4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7f88:	aa04      	add	r2, sp, #16
   b7f8a:	2032      	movs	r0, #50	; 0x32
   b7f8c:	f7fe ffc6 	bl	b6f1c <log_message>
}
   b7f90:	b00d      	add	sp, #52	; 0x34
   b7f92:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7f94:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7f96:	2a00      	cmp	r2, #0
   b7f98:	d0fa      	beq.n	b7f90 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7f9a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7f9e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7fa2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7fa6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7fa8:	aa04      	add	r2, sp, #16
   b7faa:	a903      	add	r1, sp, #12
   b7fac:	47a0      	blx	r4
}
   b7fae:	e7ef      	b.n	b7f90 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7fb0:	000bb4f0 	.word	0x000bb4f0
   b7fb4:	000bb487 	.word	0x000bb487

000b7fb8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7fb8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7fba:	2000      	movs	r0, #0
   b7fbc:	f7fe fe42 	bl	b6c44 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7fc0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7fc4:	bd08      	pop	{r3, pc}

000b7fc6 <_ZN8particle16BleScanDelegatorC1Ev>:
   b7fc6:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b7fc8:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b7fcc:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b7fd0:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b7fd4:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b7fd8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b7fdc:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b7fe0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b7fe4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b7fe8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b7fec:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b7ff0:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b7ff4:	6202      	str	r2, [r0, #32]
   b7ff6:	6302      	str	r2, [r0, #48]	; 0x30
   b7ff8:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b7ffc:	4770      	bx	lr

000b7ffe <_ZNK8particle14BleLocalDevice17setScanParametersEPKNS_13BleScanParamsE>:
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.scan_phys = static_cast<uint8_t>(phy.value());
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}

int BleLocalDevice::setScanParameters(const BleScanParams* params) const {
   b7ffe:	4608      	mov	r0, r1
    return hal_ble_gap_set_scan_parameters(params, nullptr);
   b8000:	2100      	movs	r1, #0
   b8002:	f7fe be27 	b.w	b6c54 <hal_ble_gap_set_scan_parameters>

000b8006 <_ZNK8particle14BleLocalDevice17getScanParametersEPNS_13BleScanParamsE>:

int BleLocalDevice::setScanParameters(const BleScanParams& params) const {
    return setScanParameters(&params);
}

int BleLocalDevice::getScanParameters(BleScanParams* params) const {
   b8006:	4608      	mov	r0, r1
    return hal_ble_gap_get_scan_parameters(params, nullptr);
   b8008:	2100      	movs	r1, #0
   b800a:	f7fe be2b 	b.w	b6c64 <hal_ble_gap_get_scan_parameters>

000b800e <_ZNK8particle14BleLocalDevice12startPairingERKNS_13BlePeerDeviceE>:
    config.algorithm = static_cast<hal_ble_pairing_algorithm_t>(algorithm);
    return hal_ble_gap_set_pairing_config(&config, nullptr);
}

int BleLocalDevice::startPairing(const BlePeerDevice& peer) const {
    return hal_ble_gap_start_pairing(peer.impl()->connHandle(), nullptr);
   b800e:	680b      	ldr	r3, [r1, #0]
   b8010:	2100      	movs	r1, #0
   b8012:	8818      	ldrh	r0, [r3, #0]
   b8014:	f7fe beb8 	b.w	b6d88 <hal_ble_gap_start_pairing>

000b8018 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8018:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b801a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b801e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8020:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8024:	42ae      	cmp	r6, r5
   b8026:	d004      	beq.n	b8032 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8028:	4628      	mov	r0, r5
   b802a:	f7ff f8c3 	bl	b71b4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b802e:	3510      	adds	r5, #16
   b8030:	e7f8      	b.n	b8024 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8032:	6820      	ldr	r0, [r4, #0]
   b8034:	f7ff f82e 	bl	b7094 <free>
}
   b8038:	4620      	mov	r0, r4
   b803a:	bd70      	pop	{r4, r5, r6, pc}

000b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b803c:	b510      	push	{r4, lr}
   b803e:	4604      	mov	r4, r0
    ::free(ptr);
   b8040:	6800      	ldr	r0, [r0, #0]
   b8042:	f7ff f827 	bl	b7094 <free>
}
   b8046:	4620      	mov	r0, r4
   b8048:	bd10      	pop	{r4, pc}

000b804a <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b804a:	b570      	push	{r4, r5, r6, lr}
   b804c:	4604      	mov	r4, r0
    ::free(ptr);
   b804e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8050:	f7ff f820 	bl	b7094 <free>
   b8054:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b8056:	f7ff f81d 	bl	b7094 <free>
    }
    ~BleScanFilter() = default;
   b805a:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b805e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8062:	f7ff ffeb 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b8066:	4628      	mov	r0, r5
   b8068:	f7ff ffd6 	bl	b8018 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b806c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8070:	f7fc fcb0 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
   b8074:	f104 0018 	add.w	r0, r4, #24
   b8078:	f7fc fcac 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b807c:	e9d4 5300 	ldrd	r5, r3, [r4]
   b8080:	2624      	movs	r6, #36	; 0x24
   b8082:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8086:	42ae      	cmp	r6, r5
   b8088:	d004      	beq.n	b8094 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b808a:	4628      	mov	r0, r5
   b808c:	f7fd fe7d 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b8090:	3524      	adds	r5, #36	; 0x24
   b8092:	e7f8      	b.n	b8086 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b8094:	6820      	ldr	r0, [r4, #0]
   b8096:	f7fe fffd 	bl	b7094 <free>
   b809a:	4620      	mov	r0, r4
   b809c:	bd70      	pop	{r4, r5, r6, pc}

000b809e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b809e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b80a0:	1e14      	subs	r4, r2, #0
   b80a2:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b80a4:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b80a6:	db02      	blt.n	b80ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b80a8:	1862      	adds	r2, r4, r1
   b80aa:	429a      	cmp	r2, r3
   b80ac:	dd00      	ble.n	b80b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b80ae:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b80b0:	682a      	ldr	r2, [r5, #0]
   b80b2:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b80b4:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b80b6:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b80b8:	1a52      	subs	r2, r2, r1
   b80ba:	f002 fec1 	bl	bae40 <memmove>
    size_ -= n;
   b80be:	686a      	ldr	r2, [r5, #4]
   b80c0:	1b12      	subs	r2, r2, r4
   b80c2:	606a      	str	r2, [r5, #4]
}
   b80c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b80c8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b80c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b80ca:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b80cc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b80ce:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b80d0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b80d2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b80d4:	f7fb ffdd 	bl	b4092 <_Znwj>
   b80d8:	b118      	cbz	r0, b80e2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
      _Bind(_Bind&&) = default;
   b80da:	682b      	ldr	r3, [r5, #0]
   b80dc:	6003      	str	r3, [r0, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b80de:	686b      	ldr	r3, [r5, #4]
   b80e0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b80e2:	4b03      	ldr	r3, [pc, #12]	; (b80f0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b80e4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b80e6:	4b03      	ldr	r3, [pc, #12]	; (b80f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b80e8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b80ea:	60a3      	str	r3, [r4, #8]
      }
   b80ec:	4620      	mov	r0, r4
   b80ee:	bd38      	pop	{r3, r4, r5, pc}
   b80f0:	000b74e5 	.word	0x000b74e5
   b80f4:	000b74fd 	.word	0x000b74fd

000b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b80f8:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b80fa:	f851 3b04 	ldr.w	r3, [r1], #4
   b80fe:	4604      	mov	r4, r0
   b8100:	f840 3b04 	str.w	r3, [r0], #4
   b8104:	f7fc fd7c 	bl	b4c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8108:	6823      	ldr	r3, [r4, #0]
   b810a:	b90b      	cbnz	r3, b8110 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b810c:	f7ff f9e0 	bl	b74d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8110:	4620      	mov	r0, r4
   b8112:	bd10      	pop	{r4, pc}

000b8114 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8114:	b510      	push	{r4, lr}
   b8116:	f851 3b04 	ldr.w	r3, [r1], #4
   b811a:	4604      	mov	r4, r0
   b811c:	f840 3b04 	str.w	r3, [r0], #4
   b8120:	f7fc fd6e 	bl	b4c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8124:	4620      	mov	r0, r4
   b8126:	bd10      	pop	{r4, pc}

000b8128 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8128:	b510      	push	{r4, lr}
   b812a:	f851 3b04 	ldr.w	r3, [r1], #4
   b812e:	4604      	mov	r4, r0
   b8130:	f840 3b04 	str.w	r3, [r0], #4
   b8134:	f7fc fd64 	bl	b4c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8138:	4620      	mov	r0, r4
   b813a:	bd10      	pop	{r4, pc}

000b813c <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b813c:	b510      	push	{r4, lr}
   b813e:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8140:	3004      	adds	r0, #4
   b8142:	f7fc fd55 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8146:	4620      	mov	r0, r4
   b8148:	bd10      	pop	{r4, pc}

000b814a <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b814a:	b510      	push	{r4, lr}
   b814c:	4604      	mov	r4, r0
   b814e:	3004      	adds	r0, #4
   b8150:	f7fc fd4e 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8154:	4620      	mov	r0, r4
   b8156:	bd10      	pop	{r4, pc}

000b8158 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8158:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b815a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b815e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8160:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8164:	42ae      	cmp	r6, r5
   b8166:	d004      	beq.n	b8172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8168:	1d28      	adds	r0, r5, #4
   b816a:	f7fc fd41 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b816e:	3508      	adds	r5, #8
   b8170:	e7f8      	b.n	b8164 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8172:	6820      	ldr	r0, [r4, #0]
   b8174:	f7fe ff8e 	bl	b7094 <free>
}
   b8178:	4620      	mov	r0, r4
   b817a:	bd70      	pop	{r4, r5, r6, pc}

000b817c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b817c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b817e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8182:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8184:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8188:	42ae      	cmp	r6, r5
   b818a:	d004      	beq.n	b8196 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b818c:	1d28      	adds	r0, r5, #4
   b818e:	f7fc fd2f 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8192:	3508      	adds	r5, #8
   b8194:	e7f8      	b.n	b8188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8196:	6820      	ldr	r0, [r4, #0]
   b8198:	f7fe ff7c 	bl	b7094 <free>
}
   b819c:	4620      	mov	r0, r4
   b819e:	bd70      	pop	{r4, r5, r6, pc}

000b81a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b81a0:	b510      	push	{r4, lr}
   b81a2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b81a4:	3024      	adds	r0, #36	; 0x24
   b81a6:	f7ff ffe9 	bl	b817c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b81aa:	f104 0018 	add.w	r0, r4, #24
   b81ae:	f7ff ffd3 	bl	b8158 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b81b2:	bd10      	pop	{r4, pc}

000b81b4 <__tcf_0>:
    static BleLocalDevice instance;
   b81b4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b81b6:	4b17      	ldr	r3, [pc, #92]	; (b8214 <__tcf_0+0x60>)
   b81b8:	681c      	ldr	r4, [r3, #0]
   b81ba:	b354      	cbz	r4, b8212 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b81bc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b81c0:	f7fc fc08 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
   b81c4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b81c8:	f7fc fc04 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
   b81cc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b81d0:	f7fc fc00 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
   b81d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b81d8:	f7fc fbfc 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b81dc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b81e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b81e4:	42ae      	cmp	r6, r5
   b81e6:	d004      	beq.n	b81f2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b81e8:	1d28      	adds	r0, r5, #4
   b81ea:	f7fc fd01 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81ee:	3508      	adds	r5, #8
   b81f0:	e7f8      	b.n	b81e4 <__tcf_0+0x30>
    ::free(ptr);
   b81f2:	69a0      	ldr	r0, [r4, #24]
   b81f4:	f7fe ff4e 	bl	b7094 <free>
    ~BleLocalDeviceImpl() = default;
   b81f8:	f104 000c 	add.w	r0, r4, #12
   b81fc:	f7ff ffbe 	bl	b817c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8200:	4620      	mov	r0, r4
   b8202:	f7ff ffa9 	bl	b8158 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8206:	4620      	mov	r0, r4
   b8208:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b820a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b820e:	f7fb bf44 	b.w	b409a <_ZdlPvj>
   b8212:	bd70      	pop	{r4, r5, r6, pc}
   b8214:	2003e6f4 	.word	0x2003e6f4

000b8218 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8218:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b821a:	b510      	push	{r4, lr}
      if (_M_empty())
   b821c:	b90a      	cbnz	r2, b8222 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b821e:	f002 f990 	bl	ba542 <_ZSt25__throw_bad_function_callv>
    }
   b8222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8226:	68c3      	ldr	r3, [r0, #12]
   b8228:	4718      	bx	r3

000b822a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b822a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b822e:	2300      	movs	r3, #0
   b8230:	e9c0 3300 	strd	r3, r3, [r0]
   b8234:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8236:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b823a:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b823c:	4605      	mov	r5, r0
   b823e:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8240:	dd4a      	ble.n	b82d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b8242:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b8246:	f7fe ff1d 	bl	b7084 <malloc>
            if (!d) {
   b824a:	4606      	mov	r6, r0
   b824c:	2800      	cmp	r0, #0
   b824e:	d043      	beq.n	b82d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b8250:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b8254:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b8256:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b825a:	d916      	bls.n	b828a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b825c:	4550      	cmp	r0, sl
   b825e:	d215      	bcs.n	b828c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b8260:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b8264:	f1a4 0910 	sub.w	r9, r4, #16
   b8268:	ebaa 0404 	sub.w	r4, sl, r4
   b826c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b826e:	45d1      	cmp	r9, sl
   b8270:	d01d      	beq.n	b82ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b8272:	b11c      	cbz	r4, b827c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b8274:	4651      	mov	r1, sl
   b8276:	4620      	mov	r0, r4
   b8278:	f7ff f818 	bl	b72ac <_ZN6StringC1EOS_>
                end->~T();
   b827c:	4650      	mov	r0, sl
   b827e:	f7fe ff99 	bl	b71b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8282:	f1aa 0a10 	sub.w	sl, sl, #16
   b8286:	3c10      	subs	r4, #16
   b8288:	e7f1      	b.n	b826e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b828a:	d010      	beq.n	b82ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b828c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b828e:	45a2      	cmp	sl, r4
   b8290:	d00d      	beq.n	b82ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b8292:	f1b9 0f00 	cmp.w	r9, #0
   b8296:	d003      	beq.n	b82a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b8298:	4621      	mov	r1, r4
   b829a:	4648      	mov	r0, r9
   b829c:	f7ff f806 	bl	b72ac <_ZN6StringC1EOS_>
                p->~T();
   b82a0:	4620      	mov	r0, r4
   b82a2:	f7fe ff87 	bl	b71b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b82a6:	3410      	adds	r4, #16
   b82a8:	f109 0910 	add.w	r9, r9, #16
   b82ac:	e7ef      	b.n	b828e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b82ae:	6828      	ldr	r0, [r5, #0]
   b82b0:	f7fe fef0 	bl	b7094 <free>
        capacity_ = n;
   b82b4:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b82b8:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b82ba:	e9d7 4300 	ldrd	r4, r3, [r7]
   b82be:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b82c2:	45a0      	cmp	r8, r4
   b82c4:	d006      	beq.n	b82d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b82c6:	4621      	mov	r1, r4
   b82c8:	4630      	mov	r0, r6
   b82ca:	f7ff f809 	bl	b72e0 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b82ce:	3410      	adds	r4, #16
   b82d0:	3610      	adds	r6, #16
   b82d2:	e7f6      	b.n	b82c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b82d4:	687b      	ldr	r3, [r7, #4]
   b82d6:	606b      	str	r3, [r5, #4]
}
   b82d8:	4628      	mov	r0, r5
   b82da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b82de <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b82de:	b530      	push	{r4, r5, lr}
   b82e0:	b08d      	sub	sp, #52	; 0x34
   b82e2:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b82e4:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b82e8:	a801      	add	r0, sp, #4
   b82ea:	f7ff ff9e 	bl	b822a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b82ee:	9b02      	ldr	r3, [sp, #8]
   b82f0:	2b00      	cmp	r3, #0
   b82f2:	dd2f      	ble.n	b8354 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b82f4:	f104 0114 	add.w	r1, r4, #20
   b82f8:	a804      	add	r0, sp, #16
   b82fa:	f7ff fc05 	bl	b7b08 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b82fe:	f104 0108 	add.w	r1, r4, #8
   b8302:	a808      	add	r0, sp, #32
   b8304:	f7ff fc00 	bl	b7b08 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b8308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b830a:	9b06      	ldr	r3, [sp, #24]
   b830c:	4313      	orrs	r3, r2
   b830e:	d01f      	beq.n	b8350 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b8310:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b8314:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b8318:	42ac      	cmp	r4, r5
   b831a:	d019      	beq.n	b8350 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b831c:	a904      	add	r1, sp, #16
   b831e:	4620      	mov	r0, r4
   b8320:	f7ff f834 	bl	b738c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8324:	b160      	cbz	r0, b8340 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b8326:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b8328:	a808      	add	r0, sp, #32
   b832a:	f7fe ff43 	bl	b71b4 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b832e:	a804      	add	r0, sp, #16
   b8330:	f7fe ff40 	bl	b71b4 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b8334:	a801      	add	r0, sp, #4
   b8336:	f7ff fe6f 	bl	b8018 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b833a:	4620      	mov	r0, r4
   b833c:	b00d      	add	sp, #52	; 0x34
   b833e:	bd30      	pop	{r4, r5, pc}
   b8340:	4620      	mov	r0, r4
   b8342:	a908      	add	r1, sp, #32
   b8344:	f7ff f822 	bl	b738c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8348:	3410      	adds	r4, #16
   b834a:	2800      	cmp	r0, #0
   b834c:	d0e4      	beq.n	b8318 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b834e:	e7ea      	b.n	b8326 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b8350:	2400      	movs	r4, #0
   b8352:	e7e9      	b.n	b8328 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b8354:	2401      	movs	r4, #1
   b8356:	e7ed      	b.n	b8334 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b8358 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b835a:	2300      	movs	r3, #0
   b835c:	e9c0 3300 	strd	r3, r3, [r0]
   b8360:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8362:	684f      	ldr	r7, [r1, #4]
   b8364:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8366:	4605      	mov	r5, r0
   b8368:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b836a:	dd3e      	ble.n	b83ea <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b836c:	00f8      	lsls	r0, r7, #3
   b836e:	f7fe fe89 	bl	b7084 <malloc>
            if (!d) {
   b8372:	4604      	mov	r4, r0
   b8374:	b3c8      	cbz	r0, b83ea <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b8376:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b837a:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b837c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b8380:	d910      	bls.n	b83a4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8382:	429c      	cmp	r4, r3
   b8384:	d20f      	bcs.n	b83a6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b8386:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b8388:	1a1a      	subs	r2, r3, r0
   b838a:	f1a0 0c08 	sub.w	ip, r0, #8
   b838e:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b8390:	459c      	cmp	ip, r3
   b8392:	d018      	beq.n	b83c6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b8394:	b11a      	cbz	r2, b839e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b8396:	6819      	ldr	r1, [r3, #0]
   b8398:	6011      	str	r1, [r2, #0]
   b839a:	6859      	ldr	r1, [r3, #4]
   b839c:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b839e:	3b08      	subs	r3, #8
   b83a0:	3a08      	subs	r2, #8
   b83a2:	e7f5      	b.n	b8390 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b83a4:	d00f      	beq.n	b83c6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b83a6:	4601      	mov	r1, r0
   b83a8:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b83aa:	428b      	cmp	r3, r1
   b83ac:	d00b      	beq.n	b83c6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b83ae:	b13a      	cbz	r2, b83c0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b83b0:	f8d1 c000 	ldr.w	ip, [r1]
   b83b4:	f8c2 c000 	str.w	ip, [r2]
   b83b8:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b83bc:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b83c0:	3108      	adds	r1, #8
   b83c2:	3208      	adds	r2, #8
   b83c4:	e7f1      	b.n	b83aa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b83c6:	f7fe fe65 	bl	b7094 <free>
        data_ = d;
   b83ca:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b83cc:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b83ce:	e9d6 3100 	ldrd	r3, r1, [r6]
   b83d2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b83d6:	4298      	cmp	r0, r3
   b83d8:	d006      	beq.n	b83e8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b83da:	681a      	ldr	r2, [r3, #0]
   b83dc:	6022      	str	r2, [r4, #0]
   b83de:	685a      	ldr	r2, [r3, #4]
   b83e0:	6062      	str	r2, [r4, #4]
   b83e2:	3308      	adds	r3, #8
   b83e4:	3408      	adds	r4, #8
   b83e6:	e7f6      	b.n	b83d6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b83e8:	6069      	str	r1, [r5, #4]
}
   b83ea:	4628      	mov	r0, r5
   b83ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b83ee <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b83ee:	b570      	push	{r4, r5, r6, lr}
   b83f0:	4604      	mov	r4, r0
        capacity_(0) {
   b83f2:	2000      	movs	r0, #0
   b83f4:	e9c4 0000 	strd	r0, r0, [r4]
   b83f8:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b83fa:	684e      	ldr	r6, [r1, #4]
   b83fc:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b83fe:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8400:	dd12      	ble.n	b8428 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b8402:	0071      	lsls	r1, r6, #1
   b8404:	f7fe fe4e 	bl	b70a4 <realloc>
            if (!d) {
   b8408:	b170      	cbz	r0, b8428 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b840a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b840c:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b840e:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8412:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b8416:	429a      	cmp	r2, r3
   b8418:	d004      	beq.n	b8424 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b841a:	f833 1b02 	ldrh.w	r1, [r3], #2
   b841e:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b8422:	e7f8      	b.n	b8416 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8424:	686b      	ldr	r3, [r5, #4]
   b8426:	6063      	str	r3, [r4, #4]
}
   b8428:	4620      	mov	r0, r4
   b842a:	bd70      	pop	{r4, r5, r6, pc}

000b842c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b842c:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b842e:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8430:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8432:	b923      	cbnz	r3, b843e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b8434:	6803      	ldr	r3, [r0, #0]
   b8436:	6818      	ldr	r0, [r3, #0]
   b8438:	b108      	cbz	r0, b843e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b843a:	f7fe fe2b 	bl	b7094 <free>
            func_();
        }
    }
   b843e:	4620      	mov	r0, r4
   b8440:	bd10      	pop	{r4, pc}

000b8442 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b8442:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8444:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8446:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8448:	b923      	cbnz	r3, b8454 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b844a:	6803      	ldr	r3, [r0, #0]
   b844c:	6818      	ldr	r0, [r3, #0]
   b844e:	b108      	cbz	r0, b8454 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b8450:	f7fe fe20 	bl	b7094 <free>
    }
   b8454:	4620      	mov	r0, r4
   b8456:	bd10      	pop	{r4, pc}

000b8458 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b8458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b845c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b8460:	b08f      	sub	sp, #60	; 0x3c
   b8462:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b8464:	f1b8 0f00 	cmp.w	r8, #0
   b8468:	d072      	beq.n	b8550 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b846a:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b846c:	2d00      	cmp	r5, #0
   b846e:	d06f      	beq.n	b8550 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b8470:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8474:	231f      	movs	r3, #31
   b8476:	2200      	movs	r2, #0
   b8478:	21ff      	movs	r1, #255	; 0xff
   b847a:	4648      	mov	r0, r9
   b847c:	f7ff fb11 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b8480:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8482:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8484:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8486:	2200      	movs	r2, #0
   b8488:	4619      	mov	r1, r3
   b848a:	4638      	mov	r0, r7
   b848c:	f7ff fb09 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8490:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8492:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8494:	d006      	beq.n	b84a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b8496:	42ae      	cmp	r6, r5
   b8498:	d030      	beq.n	b84fc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b849a:	2400      	movs	r4, #0
    }
   b849c:	4620      	mov	r0, r4
   b849e:	b00f      	add	sp, #60	; 0x3c
   b84a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b84a4:	4620      	mov	r0, r4
   b84a6:	f7fe fded 	bl	b7084 <malloc>
            dismissed_(false) {
   b84aa:	ab03      	add	r3, sp, #12
   b84ac:	9304      	str	r3, [sp, #16]
   b84ae:	2300      	movs	r3, #0
   b84b0:	4604      	mov	r4, r0
   b84b2:	9003      	str	r0, [sp, #12]
   b84b4:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b84b8:	b970      	cbnz	r0, b84d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b84ba:	2320      	movs	r3, #32
   b84bc:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b84c0:	4b24      	ldr	r3, [pc, #144]	; (b8554 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b84c2:	9300      	str	r3, [sp, #0]
   b84c4:	4924      	ldr	r1, [pc, #144]	; (b8558 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b84c6:	4603      	mov	r3, r0
   b84c8:	aa06      	add	r2, sp, #24
   b84ca:	2032      	movs	r0, #50	; 0x32
   b84cc:	f7fe fd26 	bl	b6f1c <log_message>
                    return false;
   b84d0:	a804      	add	r0, sp, #16
   b84d2:	f7ff ffab 	bl	b842c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b84d6:	e7e1      	b.n	b849c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b84d8:	4602      	mov	r2, r0
   b84da:	21ff      	movs	r1, #255	; 0xff
   b84dc:	462b      	mov	r3, r5
   b84de:	4648      	mov	r0, r9
   b84e0:	f7ff fadf 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b84e4:	9803      	ldr	r0, [sp, #12]
   b84e6:	462a      	mov	r2, r5
   b84e8:	4641      	mov	r1, r8
   b84ea:	f002 fc8b 	bl	bae04 <memcmp>
   b84ee:	b118      	cbz	r0, b84f8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b84f0:	a804      	add	r0, sp, #16
   b84f2:	f7ff ff9b 	bl	b842c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b84f6:	e7ce      	b.n	b8496 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b84f8:	2401      	movs	r4, #1
   b84fa:	e7e9      	b.n	b84d0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b84fc:	4628      	mov	r0, r5
   b84fe:	f7fe fdc1 	bl	b7084 <malloc>
   b8502:	2400      	movs	r4, #0
   b8504:	ab03      	add	r3, sp, #12
   b8506:	4606      	mov	r6, r0
   b8508:	9003      	str	r0, [sp, #12]
   b850a:	9304      	str	r3, [sp, #16]
   b850c:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b8510:	b978      	cbnz	r0, b8532 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b8512:	2320      	movs	r3, #32
   b8514:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8518:	4b0e      	ldr	r3, [pc, #56]	; (b8554 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b851a:	9300      	str	r3, [sp, #0]
   b851c:	490e      	ldr	r1, [pc, #56]	; (b8558 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b851e:	4603      	mov	r3, r0
   b8520:	aa06      	add	r2, sp, #24
   b8522:	2032      	movs	r0, #50	; 0x32
   b8524:	f7fe fcfa 	bl	b6f1c <log_message>
                    return false;
   b8528:	4634      	mov	r4, r6
   b852a:	a804      	add	r0, sp, #16
   b852c:	f7ff ff89 	bl	b8442 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b8530:	e7b4      	b.n	b849c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b8532:	4602      	mov	r2, r0
   b8534:	21ff      	movs	r1, #255	; 0xff
   b8536:	462b      	mov	r3, r5
   b8538:	4638      	mov	r0, r7
   b853a:	f7ff fab2 	bl	b7aa2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b853e:	9803      	ldr	r0, [sp, #12]
   b8540:	462a      	mov	r2, r5
   b8542:	4641      	mov	r1, r8
   b8544:	f002 fc5e 	bl	bae04 <memcmp>
   b8548:	2800      	cmp	r0, #0
   b854a:	d1ee      	bne.n	b852a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b854c:	2401      	movs	r4, #1
   b854e:	e7ec      	b.n	b852a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b8550:	2401      	movs	r4, #1
   b8552:	e7a3      	b.n	b849c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b8554:	000bb508 	.word	0x000bb508
   b8558:	000bb487 	.word	0x000bb487

000b855c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b855c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b855e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8560:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8562:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8564:	dd03      	ble.n	b856e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8566:	f7fe fd9d 	bl	b70a4 <realloc>
            if (!d) {
   b856a:	b918      	cbnz	r0, b8574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b856c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b856e:	f7fe fd91 	bl	b7094 <free>
        T* d = nullptr;
   b8572:	2000      	movs	r0, #0
        data_ = d;
   b8574:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8576:	60a5      	str	r5, [r4, #8]
        return true;
   b8578:	2001      	movs	r0, #1
   b857a:	e7f7      	b.n	b856c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b857c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b857c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b857e:	6883      	ldr	r3, [r0, #8]
   b8580:	428b      	cmp	r3, r1
   b8582:	da02      	bge.n	b858a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8584:	f7ff ffea 	bl	b855c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8588:	bd08      	pop	{r3, pc}
    return true;
   b858a:	2001      	movs	r0, #1
   b858c:	e7fc      	b.n	b8588 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b858e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b858e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8590:	4604      	mov	r4, r0
   b8592:	a801      	add	r0, sp, #4
   b8594:	f7fd fc22 	bl	b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8598:	9b01      	ldr	r3, [sp, #4]
   b859a:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b859c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b859e:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b85a0:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b85a2:	6062      	str	r2, [r4, #4]
   b85a4:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b85a6:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b85a8:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b85aa:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b85ac:	9001      	str	r0, [sp, #4]
   b85ae:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b85b0:	f7fe fd70 	bl	b7094 <free>
   b85b4:	b004      	add	sp, #16
   b85b6:	bd10      	pop	{r4, pc}

000b85b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b85bc:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85be:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85c0:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85c2:	4419      	add	r1, r3
   b85c4:	6883      	ldr	r3, [r0, #8]
   b85c6:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85c8:	4604      	mov	r4, r0
   b85ca:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85cc:	dc12      	bgt.n	b85f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b85ce:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85d0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b85d2:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85d4:	1bd2      	subs	r2, r2, r7
   b85d6:	4631      	mov	r1, r6
   b85d8:	1970      	adds	r0, r6, r5
   b85da:	f002 fc31 	bl	bae40 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b85de:	462a      	mov	r2, r5
   b85e0:	4641      	mov	r1, r8
   b85e2:	4630      	mov	r0, r6
   b85e4:	f002 fc1e 	bl	bae24 <memcpy>
    size_ += n;
   b85e8:	6863      	ldr	r3, [r4, #4]
   b85ea:	442b      	add	r3, r5
   b85ec:	6063      	str	r3, [r4, #4]
    return true;
   b85ee:	2001      	movs	r0, #1
}
   b85f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85f4:	f7ff ffb2 	bl	b855c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b85f8:	2800      	cmp	r0, #0
   b85fa:	d1e8      	bne.n	b85ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b85fc:	e7f8      	b.n	b85f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b85fe <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b85fe:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b8600:	460a      	mov	r2, r1
   b8602:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8604:	b510      	push	{r4, lr}
   b8606:	4604      	mov	r4, r0
    size_ = 0;
   b8608:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b860a:	b102      	cbz	r2, b860e <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b860c:	b90b      	cbnz	r3, b8612 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b860e:	2000      	movs	r0, #0
}
   b8610:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b8612:	2bff      	cmp	r3, #255	; 0xff
   b8614:	bf28      	it	cs
   b8616:	23ff      	movcs	r3, #255	; 0xff
   b8618:	f7ff ffce 	bl	b85b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b861c:	2800      	cmp	r0, #0
   b861e:	d0f7      	beq.n	b8610 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b8620:	6860      	ldr	r0, [r4, #4]
   b8622:	e7f5      	b.n	b8610 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b8624 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8626:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8628:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b862c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b862e:	4604      	mov	r4, r0
   b8630:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8632:	da0b      	bge.n	b864c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8634:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8636:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8638:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b863a:	1b52      	subs	r2, r2, r5
   b863c:	1c48      	adds	r0, r1, #1
   b863e:	f002 fbff 	bl	bae40 <memmove>
    new(p) T(std::move(value));
   b8642:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8644:	6863      	ldr	r3, [r4, #4]
   b8646:	3301      	adds	r3, #1
   b8648:	6063      	str	r3, [r4, #4]
}
   b864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b864c:	3101      	adds	r1, #1
   b864e:	f7ff ff85 	bl	b855c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8652:	2800      	cmp	r0, #0
   b8654:	d1ee      	bne.n	b8634 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8656:	e7f8      	b.n	b864a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8658 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8658:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b865a:	6841      	ldr	r1, [r0, #4]
   b865c:	f7ff bfe2 	b.w	b8624 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8660 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8664:	4604      	mov	r4, r0
   b8666:	461d      	mov	r5, r3
   b8668:	460f      	mov	r7, r1
   b866a:	ab01      	add	r3, sp, #4
   b866c:	4690      	mov	r8, r2
   b866e:	460a      	mov	r2, r1
   b8670:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8674:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8678:	f7fe ff14 	bl	b74a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b867c:	1cae      	adds	r6, r5, #2
   b867e:	6863      	ldr	r3, [r4, #4]
   b8680:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8682:	f1b9 0f00 	cmp.w	r9, #0
   b8686:	d126      	bne.n	b86d6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8688:	b328      	cbz	r0, b86d6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b868a:	4433      	add	r3, r6
   b868c:	1a1b      	subs	r3, r3, r0
   b868e:	2bff      	cmp	r3, #255	; 0xff
   b8690:	d809      	bhi.n	b86a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8692:	9901      	ldr	r1, [sp, #4]
   b8694:	4620      	mov	r0, r4
   b8696:	f7ff fd02 	bl	b809e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b869a:	6861      	ldr	r1, [r4, #4]
   b869c:	4620      	mov	r0, r4
   b869e:	4431      	add	r1, r6
   b86a0:	f7ff ff6c 	bl	b857c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b86a4:	b918      	cbnz	r0, b86ae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b86a6:	6860      	ldr	r0, [r4, #4]
}
   b86a8:	b003      	add	sp, #12
   b86aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b86ae:	1c6a      	adds	r2, r5, #1
   b86b0:	9901      	ldr	r1, [sp, #4]
   b86b2:	b2d2      	uxtb	r2, r2
   b86b4:	4620      	mov	r0, r4
   b86b6:	f7ff ffb5 	bl	b8624 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b86ba:	9901      	ldr	r1, [sp, #4]
   b86bc:	463a      	mov	r2, r7
   b86be:	3101      	adds	r1, #1
   b86c0:	4620      	mov	r0, r4
   b86c2:	f7ff ffaf 	bl	b8624 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b86c6:	9901      	ldr	r1, [sp, #4]
   b86c8:	462b      	mov	r3, r5
   b86ca:	4642      	mov	r2, r8
   b86cc:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b86ce:	4620      	mov	r0, r4
   b86d0:	f7ff ff72 	bl	b85b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b86d4:	e7e7      	b.n	b86a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b86d6:	18f1      	adds	r1, r6, r3
   b86d8:	29ff      	cmp	r1, #255	; 0xff
   b86da:	d8e4      	bhi.n	b86a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b86dc:	4620      	mov	r0, r4
   b86de:	f7ff ff4d 	bl	b857c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b86e2:	2800      	cmp	r0, #0
   b86e4:	d0df      	beq.n	b86a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b86e6:	1c69      	adds	r1, r5, #1
   b86e8:	b2c9      	uxtb	r1, r1
   b86ea:	4620      	mov	r0, r4
   b86ec:	f7ff ffb4 	bl	b8658 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b86f0:	4639      	mov	r1, r7
   b86f2:	4620      	mov	r0, r4
   b86f4:	f7ff ffb0 	bl	b8658 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b86f8:	6861      	ldr	r1, [r4, #4]
   b86fa:	462b      	mov	r3, r5
   b86fc:	4642      	mov	r2, r8
   b86fe:	e7e6      	b.n	b86ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8700 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8700:	b430      	push	{r4, r5}
   b8702:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8706:	b11a      	cbz	r2, b8710 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8708:	9502      	str	r5, [sp, #8]
}
   b870a:	bc30      	pop	{r4, r5}
   b870c:	f7ff bfa8 	b.w	b8660 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8710:	6840      	ldr	r0, [r0, #4]
}
   b8712:	bc30      	pop	{r4, r5}
   b8714:	4770      	bx	lr

000b8716 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8716:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8718:	2300      	movs	r3, #0
   b871a:	e9c0 3300 	strd	r3, r3, [r0]
   b871e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8720:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8722:	9300      	str	r3, [sp, #0]
   b8724:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8726:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b872a:	4619      	mov	r1, r3
   b872c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8730:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8732:	f7ff ffe5 	bl	b8700 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8736:	4620      	mov	r0, r4
   b8738:	b004      	add	sp, #16
   b873a:	bd10      	pop	{r4, pc}

000b873c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b873c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b873e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8740:	4604      	mov	r4, r0
   b8742:	460d      	mov	r5, r1
   b8744:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8746:	d914      	bls.n	b8772 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8748:	4290      	cmp	r0, r2
   b874a:	d213      	bcs.n	b8774 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b874c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8750:	1a75      	subs	r5, r6, r1
   b8752:	f1a1 0708 	sub.w	r7, r1, #8
   b8756:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8758:	42b7      	cmp	r7, r6
   b875a:	d018      	beq.n	b878e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b875c:	b11c      	cbz	r4, b8766 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b875e:	4631      	mov	r1, r6
   b8760:	4620      	mov	r0, r4
   b8762:	f7ff fce1 	bl	b8128 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8766:	1d30      	adds	r0, r6, #4
   b8768:	f7fc fa42 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b876c:	3e08      	subs	r6, #8
   b876e:	3c08      	subs	r4, #8
   b8770:	e7f2      	b.n	b8758 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8772:	d00c      	beq.n	b878e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8774:	42b5      	cmp	r5, r6
   b8776:	d00a      	beq.n	b878e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8778:	b11c      	cbz	r4, b8782 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b877a:	4629      	mov	r1, r5
   b877c:	4620      	mov	r0, r4
   b877e:	f7ff fcd3 	bl	b8128 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8782:	1d28      	adds	r0, r5, #4
   b8784:	f7fc fa34 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8788:	3508      	adds	r5, #8
   b878a:	3408      	adds	r4, #8
   b878c:	e7f2      	b.n	b8774 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8792:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8794:	6846      	ldr	r6, [r0, #4]
   b8796:	4668      	mov	r0, sp
   b8798:	f7ff fcc6 	bl	b8128 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b879c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b87a0:	429f      	cmp	r7, r3
   b87a2:	db12      	blt.n	b87ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b87a4:	3701      	adds	r7, #1
        if (n > 0) {
   b87a6:	2f00      	cmp	r7, #0
   b87a8:	dd29      	ble.n	b87fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b87aa:	00f8      	lsls	r0, r7, #3
   b87ac:	f7fe fc6a 	bl	b7084 <malloc>
            if (!d) {
   b87b0:	4605      	mov	r5, r0
   b87b2:	b1f0      	cbz	r0, b87f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b87b4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b87b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b87bc:	f7ff ffbe 	bl	b873c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b87c0:	6820      	ldr	r0, [r4, #0]
   b87c2:	f7fe fc67 	bl	b7094 <free>
        data_ = d;
   b87c6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b87c8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b87ca:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b87cc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b87ce:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b87d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b87d6:	4631      	mov	r1, r6
   b87d8:	f106 0008 	add.w	r0, r6, #8
   b87dc:	f7ff ffae 	bl	b873c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b87e0:	b11e      	cbz	r6, b87ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b87e2:	4669      	mov	r1, sp
   b87e4:	4630      	mov	r0, r6
   b87e6:	f7ff fc9f 	bl	b8128 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b87ea:	6863      	ldr	r3, [r4, #4]
   b87ec:	3301      	adds	r3, #1
   b87ee:	6063      	str	r3, [r4, #4]
    return true;
   b87f0:	2501      	movs	r5, #1
   b87f2:	a801      	add	r0, sp, #4
   b87f4:	f7fc f9fc 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b87f8:	4628      	mov	r0, r5
   b87fa:	b003      	add	sp, #12
   b87fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b87fe:	2500      	movs	r5, #0
   b8800:	e7de      	b.n	b87c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8802 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8804:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8808:	4605      	mov	r5, r0
   b880a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b880c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8810:	42a6      	cmp	r6, r4
   b8812:	d005      	beq.n	b8820 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8814:	4639      	mov	r1, r7
   b8816:	4620      	mov	r0, r4
   b8818:	f7ff fb2d 	bl	b7e76 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b881c:	b108      	cbz	r0, b8822 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b881e:	b914      	cbnz	r4, b8826 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8822:	3408      	adds	r4, #8
   b8824:	e7f4      	b.n	b8810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8826:	1d20      	adds	r0, r4, #4
   b8828:	f7fc f9e2 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b882c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8830:	f104 0108 	add.w	r1, r4, #8
   b8834:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8838:	4620      	mov	r0, r4
   b883a:	f7ff ff7f 	bl	b873c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b883e:	686b      	ldr	r3, [r5, #4]
   b8840:	3b01      	subs	r3, #1
   b8842:	606b      	str	r3, [r5, #4]
    return true;
   b8844:	e7ec      	b.n	b8820 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b884c:	4605      	mov	r5, r0
   b884e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8850:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8852:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8854:	f7fe fef4 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8858:	682e      	ldr	r6, [r5, #0]
   b885a:	1ef3      	subs	r3, r6, #3
   b885c:	2b0d      	cmp	r3, #13
   b885e:	d83c      	bhi.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8860:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8864:	0053000e 	.word	0x0053000e
   b8868:	00d1003b 	.word	0x00d1003b
   b886c:	003b003b 	.word	0x003b003b
   b8870:	003b003b 	.word	0x003b003b
   b8874:	009b003b 	.word	0x009b003b
   b8878:	009b009b 	.word	0x009b009b
   b887c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8880:	a804      	add	r0, sp, #16
   b8882:	f7ff fa9f 	bl	b7dc4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8886:	9b04      	ldr	r3, [sp, #16]
   b8888:	89aa      	ldrh	r2, [r5, #12]
   b888a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b888c:	6869      	ldr	r1, [r5, #4]
   b888e:	9804      	ldr	r0, [sp, #16]
   b8890:	3108      	adds	r1, #8
   b8892:	3002      	adds	r0, #2
   b8894:	f7fe fef8 	bl	b7688 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8898:	a904      	add	r1, sp, #16
   b889a:	a806      	add	r0, sp, #24
   b889c:	f7ff fc44 	bl	b8128 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b88a0:	a906      	add	r1, sp, #24
   b88a2:	f104 0018 	add.w	r0, r4, #24
   b88a6:	f7ff ff73 	bl	b8790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b88aa:	4605      	mov	r5, r0
   b88ac:	a807      	add	r0, sp, #28
   b88ae:	f7fc f99f 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88b2:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b88b4:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b88b6:	b9b5      	cbnz	r5, b88e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b88b8:	4b5d      	ldr	r3, [pc, #372]	; (b8a30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b88ba:	495e      	ldr	r1, [pc, #376]	; (b8a34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b88bc:	9300      	str	r3, [sp, #0]
   b88be:	2032      	movs	r0, #50	; 0x32
   b88c0:	462b      	mov	r3, r5
   b88c2:	aa06      	add	r2, sp, #24
   b88c4:	9507      	str	r5, [sp, #28]
   b88c6:	f7fe fb29 	bl	b6f1c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b88ca:	9b04      	ldr	r3, [sp, #16]
   b88cc:	4629      	mov	r1, r5
   b88ce:	8818      	ldrh	r0, [r3, #0]
   b88d0:	f7fe f9e2 	bl	b6c98 <hal_ble_gap_disconnect>
   b88d4:	a805      	add	r0, sp, #20
   b88d6:	f7fc f98b 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b88da:	a803      	add	r0, sp, #12
   b88dc:	f7fe febe 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b88e0:	b00e      	add	sp, #56	; 0x38
   b88e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b88e6:	4a54      	ldr	r2, [pc, #336]	; (b8a38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b88e8:	9200      	str	r2, [sp, #0]
   b88ea:	2300      	movs	r3, #0
   b88ec:	4951      	ldr	r1, [pc, #324]	; (b8a34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b88ee:	9307      	str	r3, [sp, #28]
   b88f0:	aa06      	add	r2, sp, #24
   b88f2:	2001      	movs	r0, #1
   b88f4:	f7fe fb12 	bl	b6f1c <log_message>
                if (impl->connectedCallback_) {
   b88f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b88fa:	2b00      	cmp	r3, #0
   b88fc:	d0ea      	beq.n	b88d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b88fe:	a904      	add	r1, sp, #16
   b8900:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8904:	f7ff fc88 	bl	b8218 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8908:	e7e4      	b.n	b88d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b890a:	89a9      	ldrh	r1, [r5, #12]
   b890c:	4620      	mov	r0, r4
   b890e:	f7ff f96c 	bl	b7bea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8912:	4606      	mov	r6, r0
   b8914:	2800      	cmp	r0, #0
   b8916:	d0e0      	beq.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8918:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b891a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b891e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8922:	8029      	strh	r1, [r5, #0]
   b8924:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8928:	429a      	cmp	r2, r3
   b892a:	d003      	beq.n	b8934 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b892c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8930:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8932:	e7f9      	b.n	b8928 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8934:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8938:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b893c:	45b8      	cmp	r8, r7
   b893e:	d004      	beq.n	b894a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8940:	1d38      	adds	r0, r7, #4
   b8942:	f7fc f955 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8946:	3708      	adds	r7, #8
   b8948:	e7f8      	b.n	b893c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b894a:	2300      	movs	r3, #0
   b894c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b894e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8952:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8956:	45b8      	cmp	r8, r7
   b8958:	d004      	beq.n	b8964 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b895a:	1d38      	adds	r0, r7, #4
   b895c:	f7fc f948 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8960:	3708      	adds	r7, #8
   b8962:	e7f8      	b.n	b8956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8964:	2300      	movs	r3, #0
   b8966:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8968:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b896a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b896c:	b123      	cbz	r3, b8978 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b896e:	4631      	mov	r1, r6
   b8970:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8974:	f7ff fc50 	bl	b8218 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8978:	2300      	movs	r3, #0
   b897a:	2220      	movs	r2, #32
   b897c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8980:	4a2e      	ldr	r2, [pc, #184]	; (b8a3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8982:	9200      	str	r2, [sp, #0]
   b8984:	492b      	ldr	r1, [pc, #172]	; (b8a34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8986:	aa06      	add	r2, sp, #24
   b8988:	2001      	movs	r0, #1
   b898a:	f7fe fac7 	bl	b6f1c <log_message>
                    impl->peers_.removeOne(*peer);
   b898e:	4631      	mov	r1, r6
   b8990:	f104 0018 	add.w	r0, r4, #24
   b8994:	f7ff ff35 	bl	b8802 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8998:	e79f      	b.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b899a:	89a9      	ldrh	r1, [r5, #12]
   b899c:	4620      	mov	r0, r4
   b899e:	f7ff f924 	bl	b7bea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b89a2:	2800      	cmp	r0, #0
   b89a4:	d099      	beq.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b89a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b89a8:	2b00      	cmp	r3, #0
   b89aa:	d096      	beq.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b89ac:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b89ae:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b89b0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b89b4:	d001      	beq.n	b89ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b89b6:	2e10      	cmp	r6, #16
   b89b8:	d117      	bne.n	b89ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b89ba:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b89bc:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b89be:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b89c0:	2506      	movs	r5, #6
                        };
   b89c2:	f88d 3015 	strb.w	r3, [sp, #21]
   b89c6:	9104      	str	r1, [sp, #16]
   b89c8:	f88d 2014 	strb.w	r2, [sp, #20]
   b89cc:	9006      	str	r0, [sp, #24]
   b89ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b89d2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b89d4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b89d8:	9508      	str	r5, [sp, #32]
   b89da:	e883 0003 	stmia.w	r3, {r0, r1}
   b89de:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b89e0:	a906      	add	r1, sp, #24
   b89e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b89e6:	4798      	blx	r3
   b89e8:	e777      	b.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b89ea:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b89ec:	bf01      	itttt	eq
   b89ee:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b89f0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b89f2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b89f6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b89f8:	bf0f      	iteee	eq
   b89fa:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b89fe:	461a      	movne	r2, r3
   b8a00:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8a02:	461d      	movne	r5, r3
   b8a04:	e7dd      	b.n	b89c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8a06:	89a9      	ldrh	r1, [r5, #12]
   b8a08:	4620      	mov	r0, r4
   b8a0a:	f7ff f8ee 	bl	b7bea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8a0e:	4601      	mov	r1, r0
   b8a10:	2800      	cmp	r0, #0
   b8a12:	f43f af62 	beq.w	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8a16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8a18:	2b00      	cmp	r3, #0
   b8a1a:	f43f af5e 	beq.w	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8a1e:	686b      	ldr	r3, [r5, #4]
   b8a20:	9306      	str	r3, [sp, #24]
   b8a22:	aa06      	add	r2, sp, #24
   b8a24:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8a26:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8a2a:	4798      	blx	r3
   b8a2c:	e755      	b.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8a2e:	bf00      	nop
   b8a30:	000bb523 	.word	0x000bb523
   b8a34:	000bb487 	.word	0x000bb487
   b8a38:	000bb549 	.word	0x000bb549
   b8a3c:	000bb566 	.word	0x000bb566

000b8a40 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b8a40:	b513      	push	{r0, r1, r4, lr}
   b8a42:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b8a44:	f7ff f9e0 	bl	b7e08 <_ZNK8particle13BlePeerDevice9connectedEv>
   b8a48:	b1d0      	cbz	r0, b8a80 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b8a4a:	6823      	ldr	r3, [r4, #0]
   b8a4c:	2100      	movs	r1, #0
   b8a4e:	8818      	ldrh	r0, [r3, #0]
   b8a50:	f7fe f922 	bl	b6c98 <hal_ble_gap_disconnect>
   b8a54:	2800      	cmp	r0, #0
   b8a56:	db11      	blt.n	b8a7c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b8a58:	a801      	add	r0, sp, #4
   b8a5a:	f7fe fdf1 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b8a5e:	f7ff fa61 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b8a62:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b8a64:	4621      	mov	r1, r4
   b8a66:	3018      	adds	r0, #24
   b8a68:	f7ff fecb 	bl	b8802 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b8a6c:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b8a72:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b8a74:	a801      	add	r0, sp, #4
   b8a76:	f7fe fdf1 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b8a7a:	2000      	movs	r0, #0
}
   b8a7c:	b002      	add	sp, #8
   b8a7e:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b8a80:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8a84:	e7fa      	b.n	b8a7c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>

000b8a86 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8a86:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8a88:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8a8a:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8a8c:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8a8e:	dd05      	ble.n	b8a9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b8a90:	2114      	movs	r1, #20
   b8a92:	4369      	muls	r1, r5
   b8a94:	f7fe fb06 	bl	b70a4 <realloc>
            if (!d) {
   b8a98:	b918      	cbnz	r0, b8aa2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b8a9a:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8a9c:	f7fe fafa 	bl	b7094 <free>
        T* d = nullptr;
   b8aa0:	2000      	movs	r0, #0
        data_ = d;
   b8aa2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8aa4:	60a5      	str	r5, [r4, #8]
        return true;
   b8aa6:	2001      	movs	r0, #1
   b8aa8:	e7f7      	b.n	b8a9a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b8aaa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8aaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b8aae:	2400      	movs	r4, #0
   b8ab0:	e9c0 4400 	strd	r4, r4, [r0]
   b8ab4:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8ab6:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8ab8:	6849      	ldr	r1, [r1, #4]
   b8aba:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8abc:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8abe:	dd1a      	ble.n	b8af6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8ac0:	f7ff ffe1 	bl	b8a86 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8ac4:	b1b8      	cbz	r0, b8af6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8ac6:	e9d8 9300 	ldrd	r9, r3, [r8]
   b8aca:	f04f 0c14 	mov.w	ip, #20
   b8ace:	f8d7 e000 	ldr.w	lr, [r7]
   b8ad2:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b8ad6:	eb09 0504 	add.w	r5, r9, r4
   b8ada:	45ac      	cmp	ip, r5
   b8adc:	d008      	beq.n	b8af0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b8ade:	eb1e 0604 	adds.w	r6, lr, r4
   b8ae2:	bf1f      	itttt	ne
   b8ae4:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b8ae6:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b8ae8:	682b      	ldrne	r3, [r5, #0]
   b8aea:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b8aec:	3414      	adds	r4, #20
   b8aee:	e7f2      	b.n	b8ad6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b8af0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8af4:	607b      	str	r3, [r7, #4]
}
   b8af6:	4638      	mov	r0, r7
   b8af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8afc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b8afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b8b00:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b8b04:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8b06:	6883      	ldr	r3, [r0, #8]
   b8b08:	19e9      	adds	r1, r5, r7
   b8b0a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b8b0c:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8b0e:	dc17      	bgt.n	b8b40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b8b10:	2314      	movs	r3, #20
   b8b12:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b8b14:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8b16:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b8b18:	fb03 f907 	mul.w	r9, r3, r7
   b8b1c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b8b1e:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8b20:	1b52      	subs	r2, r2, r5
   b8b22:	4631      	mov	r1, r6
   b8b24:	eb06 0009 	add.w	r0, r6, r9
   b8b28:	f002 f98a 	bl	bae40 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8b2c:	464a      	mov	r2, r9
   b8b2e:	4641      	mov	r1, r8
   b8b30:	4630      	mov	r0, r6
   b8b32:	f002 f977 	bl	bae24 <memcpy>
    size_ += n;
   b8b36:	6863      	ldr	r3, [r4, #4]
   b8b38:	443b      	add	r3, r7
   b8b3a:	6063      	str	r3, [r4, #4]
}
   b8b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8b40:	f7ff ffa1 	bl	b8a86 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8b44:	2800      	cmp	r0, #0
   b8b46:	d1e3      	bne.n	b8b10 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b8b48:	e7f8      	b.n	b8b3c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b8b4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8b4a:	b082      	sub	sp, #8
   b8b4c:	b570      	push	{r4, r5, r6, lr}
   b8b4e:	460c      	mov	r4, r1
   b8b50:	a904      	add	r1, sp, #16
   b8b52:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b56:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8b5a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8b5c:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b5e:	da17      	bge.n	b8b90 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b8b60:	2314      	movs	r3, #20
   b8b62:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b8b66:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b8b68:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b8b6a:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b8b6c:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8b6e:	1a52      	subs	r2, r2, r1
   b8b70:	18e0      	adds	r0, r4, r3
   b8b72:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b8b74:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8b76:	f002 f963 	bl	bae40 <memmove>
    new(p) T(std::move(value));
   b8b7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8b7e:	6833      	ldr	r3, [r6, #0]
   b8b80:	6023      	str	r3, [r4, #0]
    ++size_;
   b8b82:	686b      	ldr	r3, [r5, #4]
   b8b84:	3301      	adds	r3, #1
   b8b86:	606b      	str	r3, [r5, #4]
}
   b8b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8b8c:	b002      	add	sp, #8
   b8b8e:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b90:	3101      	adds	r1, #1
   b8b92:	f7ff ff78 	bl	b8a86 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8b96:	2800      	cmp	r0, #0
   b8b98:	d1e2      	bne.n	b8b60 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b8b9a:	e7f5      	b.n	b8b88 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b8b9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b8b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b8ba0:	2400      	movs	r4, #0
   b8ba2:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8ba4:	1e93      	subs	r3, r2, #2
   b8ba6:	e9c0 4400 	strd	r4, r4, [r0]
   b8baa:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b8bac:	4605      	mov	r5, r0
   b8bae:	460f      	mov	r7, r1
   b8bb0:	4690      	mov	r8, r2
   b8bb2:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8bb4:	9305      	str	r3, [sp, #20]
    return size_;
   b8bb6:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8bb8:	428c      	cmp	r4, r1
   b8bba:	da72      	bge.n	b8ca2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b8bbc:	6838      	ldr	r0, [r7, #0]
   b8bbe:	ab07      	add	r3, sp, #28
   b8bc0:	4642      	mov	r2, r8
   b8bc2:	1b09      	subs	r1, r1, r4
   b8bc4:	4420      	add	r0, r4
   b8bc6:	f7fe fc6d 	bl	b74a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b8bca:	4606      	mov	r6, r0
   b8bcc:	2800      	cmp	r0, #0
   b8bce:	d068      	beq.n	b8ca2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8bd0:	9b05      	ldr	r3, [sp, #20]
   b8bd2:	2b01      	cmp	r3, #1
   b8bd4:	d82f      	bhi.n	b8c36 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8bd6:	f1a0 0b02 	sub.w	fp, r0, #2
   b8bda:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b8bde:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b8be2:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8be6:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8be8:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8bea:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8bec:	d055      	beq.n	b8c9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b8bee:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8bf0:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b8bf4:	4413      	add	r3, r2
   b8bf6:	a808      	add	r0, sp, #32
   b8bf8:	78d9      	ldrb	r1, [r3, #3]
   b8bfa:	789b      	ldrb	r3, [r3, #2]
   b8bfc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b8c00:	f7fe fe2b 	bl	b785a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b8c04:	f10d 0e20 	add.w	lr, sp, #32
   b8c08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b8c0c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8c10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8c14:	f8de 3000 	ldr.w	r3, [lr]
   b8c18:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b8c1c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b8c20:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b8c24:	ab0d      	add	r3, sp, #52	; 0x34
   b8c26:	cb0c      	ldmia	r3, {r2, r3}
   b8c28:	6869      	ldr	r1, [r5, #4]
   b8c2a:	4628      	mov	r0, r5
   b8c2c:	f7ff ff8d 	bl	b8b4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8c30:	f109 0901 	add.w	r9, r9, #1
   b8c34:	e7d7      	b.n	b8be6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b8c36:	f1a8 0306 	sub.w	r3, r8, #6
   b8c3a:	2b01      	cmp	r3, #1
   b8c3c:	d82d      	bhi.n	b8c9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8c3e:	f1a0 0b02 	sub.w	fp, r0, #2
   b8c42:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b8c46:	f04f 0900 	mov.w	r9, #0
   b8c4a:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b8c4e:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b8c50:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8c52:	d022      	beq.n	b8c9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b8c54:	3302      	adds	r3, #2
    return data_[i];
   b8c56:	6839      	ldr	r1, [r7, #0]
   b8c58:	4423      	add	r3, r4
   b8c5a:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b8c5e:	2201      	movs	r2, #1
   b8c60:	4419      	add	r1, r3
   b8c62:	a808      	add	r0, sp, #32
   b8c64:	f7fe fdda 	bl	b781c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b8c68:	f10d 0e20 	add.w	lr, sp, #32
   b8c6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b8c70:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8c74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8c78:	f8de 3000 	ldr.w	r3, [lr]
   b8c7c:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b8c80:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b8c84:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b8c88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b8c8c:	6869      	ldr	r1, [r5, #4]
   b8c8e:	4628      	mov	r0, r5
   b8c90:	f7ff ff5b 	bl	b8b4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8c94:	f109 0901 	add.w	r9, r9, #1
   b8c98:	e7d9      	b.n	b8c4e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8c9a:	9b07      	ldr	r3, [sp, #28]
   b8c9c:	441c      	add	r4, r3
   b8c9e:	4434      	add	r4, r6
   b8ca0:	e789      	b.n	b8bb6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b8ca2:	4628      	mov	r0, r5
   b8ca4:	b013      	add	sp, #76	; 0x4c
   b8ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8caa <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b8caa:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b8cac:	2300      	movs	r3, #0
   b8cae:	b085      	sub	sp, #20
   b8cb0:	e9c0 3300 	strd	r3, r3, [r0]
   b8cb4:	6083      	str	r3, [r0, #8]
   b8cb6:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8cb8:	2202      	movs	r2, #2
   b8cba:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b8cbc:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8cbe:	f7ff ff6d 	bl	b8b9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8cc2:	a901      	add	r1, sp, #4
   b8cc4:	4620      	mov	r0, r4
   b8cc6:	f7ff ff19 	bl	b8afc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8cca:	a801      	add	r0, sp, #4
   b8ccc:	f7ff f9b6 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8cd0:	2202      	movs	r2, #2
   b8cd2:	4629      	mov	r1, r5
   b8cd4:	a801      	add	r0, sp, #4
   b8cd6:	f7ff ff61 	bl	b8b9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8cda:	a901      	add	r1, sp, #4
   b8cdc:	4620      	mov	r0, r4
   b8cde:	f7ff ff0d 	bl	b8afc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8ce2:	a801      	add	r0, sp, #4
   b8ce4:	f7ff f9aa 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b8ce8:	2203      	movs	r2, #3
   b8cea:	4629      	mov	r1, r5
   b8cec:	a801      	add	r0, sp, #4
   b8cee:	f7ff ff55 	bl	b8b9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8cf2:	a901      	add	r1, sp, #4
   b8cf4:	4620      	mov	r0, r4
   b8cf6:	f7ff ff01 	bl	b8afc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8cfa:	a801      	add	r0, sp, #4
   b8cfc:	f7ff f99e 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b8d00:	2206      	movs	r2, #6
   b8d02:	4629      	mov	r1, r5
   b8d04:	a801      	add	r0, sp, #4
   b8d06:	f7ff ff49 	bl	b8b9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8d0a:	a901      	add	r1, sp, #4
   b8d0c:	4620      	mov	r0, r4
   b8d0e:	f7ff fef5 	bl	b8afc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8d12:	a801      	add	r0, sp, #4
   b8d14:	f7ff f992 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b8d18:	2207      	movs	r2, #7
   b8d1a:	4629      	mov	r1, r5
   b8d1c:	a801      	add	r0, sp, #4
   b8d1e:	f7ff ff3d 	bl	b8b9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8d22:	a901      	add	r1, sp, #4
   b8d24:	4620      	mov	r0, r4
   b8d26:	f7ff fee9 	bl	b8afc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8d2a:	a801      	add	r0, sp, #4
   b8d2c:	f7ff f986 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b8d30:	4620      	mov	r0, r4
   b8d32:	b005      	add	sp, #20
   b8d34:	bd30      	pop	{r4, r5, pc}

000b8d36 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b8d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d3a:	b08b      	sub	sp, #44	; 0x2c
   b8d3c:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b8d3e:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b8d42:	a801      	add	r0, sp, #4
   b8d44:	f7ff feb1 	bl	b8aaa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b8d48:	9b02      	ldr	r3, [sp, #8]
   b8d4a:	2b00      	cmp	r3, #0
   b8d4c:	dd4a      	ble.n	b8de4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8d4e:	f104 0114 	add.w	r1, r4, #20
   b8d52:	a804      	add	r0, sp, #16
   b8d54:	f7ff ffa9 	bl	b8caa <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8d58:	f104 0108 	add.w	r1, r4, #8
   b8d5c:	a807      	add	r0, sp, #28
   b8d5e:	f7ff ffa4 	bl	b8caa <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b8d62:	9d05      	ldr	r5, [sp, #20]
   b8d64:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b8d66:	2d00      	cmp	r5, #0
   b8d68:	dc01      	bgt.n	b8d6e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b8d6a:	2e00      	cmp	r6, #0
   b8d6c:	dd38      	ble.n	b8de0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b8d6e:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b8d70:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b8d72:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b8d76:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b8d7a:	2314      	movs	r3, #20
   b8d7c:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b8d80:	fb03 8505 	mla	r5, r3, r5, r8
   b8d84:	fb03 9606 	mla	r6, r3, r6, r9
   b8d88:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b8d8a:	45ba      	cmp	sl, r7
   b8d8c:	d028      	beq.n	b8de0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b8d8e:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b8d90:	45ab      	cmp	fp, r5
   b8d92:	d015      	beq.n	b8dc0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b8d94:	4659      	mov	r1, fp
   b8d96:	4650      	mov	r0, sl
   b8d98:	f7fe fd69 	bl	b786e <_ZNK8particle7BleUuideqERKS0_>
   b8d9c:	f10b 0b14 	add.w	fp, fp, #20
   b8da0:	4604      	mov	r4, r0
   b8da2:	2800      	cmp	r0, #0
   b8da4:	d0f4      	beq.n	b8d90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8da6:	a807      	add	r0, sp, #28
   b8da8:	f7ff f948 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8dac:	a804      	add	r0, sp, #16
   b8dae:	f7ff f945 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b8db2:	a801      	add	r0, sp, #4
   b8db4:	f7ff f942 	bl	b803c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b8db8:	4620      	mov	r0, r4
   b8dba:	b00b      	add	sp, #44	; 0x2c
   b8dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8dc0:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b8dc2:	45b3      	cmp	fp, r6
   b8dc4:	d009      	beq.n	b8dda <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b8dc6:	4659      	mov	r1, fp
   b8dc8:	4650      	mov	r0, sl
   b8dca:	f7fe fd50 	bl	b786e <_ZNK8particle7BleUuideqERKS0_>
   b8dce:	f10b 0b14 	add.w	fp, fp, #20
   b8dd2:	4604      	mov	r4, r0
   b8dd4:	2800      	cmp	r0, #0
   b8dd6:	d0f4      	beq.n	b8dc2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b8dd8:	e7e5      	b.n	b8da6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b8dda:	f10a 0a14 	add.w	sl, sl, #20
   b8dde:	e7d4      	b.n	b8d8a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b8de0:	2400      	movs	r4, #0
   b8de2:	e7e0      	b.n	b8da6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b8de4:	2401      	movs	r4, #1
   b8de6:	e7e4      	b.n	b8db2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b8de8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8de8:	b538      	push	{r3, r4, r5, lr}
   b8dea:	4605      	mov	r5, r0
   b8dec:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8dee:	f7fc f9d2 	bl	b5196 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8df2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8df4:	68a2      	ldr	r2, [r4, #8]
   b8df6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8df8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8dfa:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8dfc:	68e2      	ldr	r2, [r4, #12]
   b8dfe:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e00:	60e3      	str	r3, [r4, #12]
      }
   b8e02:	bd38      	pop	{r3, r4, r5, pc}

000b8e04 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b8e04:	b530      	push	{r4, r5, lr}
   b8e06:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b8e08:	2300      	movs	r3, #0
   b8e0a:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b8e0c:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b8e0e:	4605      	mov	r5, r0
   b8e10:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b8e12:	b133      	cbz	r3, b8e22 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8e14:	2202      	movs	r2, #2
   b8e16:	4668      	mov	r0, sp
   b8e18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8e1a:	68e3      	ldr	r3, [r4, #12]
   b8e1c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b8e1e:	68a3      	ldr	r3, [r4, #8]
   b8e20:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b8e22:	4629      	mov	r1, r5
   b8e24:	4668      	mov	r0, sp
   b8e26:	f7ff ffdf 	bl	b8de8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8e2a:	4668      	mov	r0, sp
   b8e2c:	f7fb fdd2 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
      }
   b8e30:	b005      	add	sp, #20
   b8e32:	bd30      	pop	{r4, r5, pc}

000b8e34 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b8e34:	b538      	push	{r3, r4, r5, lr}
   b8e36:	460d      	mov	r5, r1
   b8e38:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b8e3a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b8e3c:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b8e3e:	b123      	cbz	r3, b8e4a <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b8e40:	6828      	ldr	r0, [r5, #0]
   b8e42:	314c      	adds	r1, #76	; 0x4c
   b8e44:	304c      	adds	r0, #76	; 0x4c
   b8e46:	f7ff ffdd 	bl	b8e04 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8e4a:	4620      	mov	r0, r4
   b8e4c:	682b      	ldr	r3, [r5, #0]
   b8e4e:	f840 3b04 	str.w	r3, [r0], #4
   b8e52:	6869      	ldr	r1, [r5, #4]
   b8e54:	f7fe fbce 	bl	b75f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b8e58:	4620      	mov	r0, r4
   b8e5a:	bd38      	pop	{r3, r4, r5, pc}

000b8e5c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b8e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e60:	4604      	mov	r4, r0
   b8e62:	b087      	sub	sp, #28
    WiringBleLock lk;
   b8e64:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b8e66:	460e      	mov	r6, r1
   b8e68:	4617      	mov	r7, r2
    WiringBleLock lk;
   b8e6a:	f7fe fbe9 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8e6e:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b8e70:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b8e74:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b8e78:	4544      	cmp	r4, r8
   b8e7a:	46a1      	mov	r9, r4
   b8e7c:	d016      	beq.n	b8eac <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b8e7e:	4621      	mov	r1, r4
   b8e80:	a801      	add	r0, sp, #4
   b8e82:	f7fe fedd 	bl	b7c40 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b8e86:	4639      	mov	r1, r7
   b8e88:	a801      	add	r0, sp, #4
   b8e8a:	f7fe fcf0 	bl	b786e <_ZNK8particle7BleUuideqERKS0_>
   b8e8e:	3408      	adds	r4, #8
   b8e90:	4605      	mov	r5, r0
   b8e92:	2800      	cmp	r0, #0
   b8e94:	d0f0      	beq.n	b8e78 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b8e96:	4649      	mov	r1, r9
   b8e98:	4630      	mov	r0, r6
   b8e9a:	f7ff ffcb 	bl	b8e34 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b8e9e:	4668      	mov	r0, sp
   b8ea0:	f7fe fbdc 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8ea4:	4628      	mov	r0, r5
   b8ea6:	b007      	add	sp, #28
   b8ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b8eac:	2500      	movs	r5, #0
   b8eae:	e7f6      	b.n	b8e9e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b8eb0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b8eb0:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8eb2:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b8eb4:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8eb6:	344c      	adds	r4, #76	; 0x4c
   b8eb8:	b1b9      	cbz	r1, b8eea <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b8eba:	e9cd 1200 	strd	r1, r2, [sp]
   b8ebe:	a802      	add	r0, sp, #8
   b8ec0:	4669      	mov	r1, sp
   b8ec2:	f7ff f901 	bl	b80c8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8ec6:	2300      	movs	r3, #0
	__x.swap(*this);
   b8ec8:	a906      	add	r1, sp, #24
   b8eca:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b8ecc:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b8ece:	f7ff ff8b 	bl	b8de8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8ed2:	4621      	mov	r1, r4
   b8ed4:	a806      	add	r0, sp, #24
   b8ed6:	f7ff ff87 	bl	b8de8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8eda:	a806      	add	r0, sp, #24
   b8edc:	f7fb fd7a 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
   b8ee0:	a802      	add	r0, sp, #8
   b8ee2:	f7fb fd77 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
}
   b8ee6:	b00a      	add	sp, #40	; 0x28
   b8ee8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8eea:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b8eec:	e7eb      	b.n	b8ec6 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b8eee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8eee:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ef2:	4604      	mov	r4, r0
   b8ef4:	460d      	mov	r5, r1
   b8ef6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8ef8:	d914      	bls.n	b8f24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8efa:	4290      	cmp	r0, r2
   b8efc:	d213      	bcs.n	b8f26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8efe:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8f02:	1a75      	subs	r5, r6, r1
   b8f04:	f1a1 0708 	sub.w	r7, r1, #8
   b8f08:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8f0a:	42b7      	cmp	r7, r6
   b8f0c:	d018      	beq.n	b8f40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8f0e:	b11c      	cbz	r4, b8f18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8f10:	4631      	mov	r1, r6
   b8f12:	4620      	mov	r0, r4
   b8f14:	f7ff f8fe 	bl	b8114 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8f18:	1d30      	adds	r0, r6, #4
   b8f1a:	f7fb fe69 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8f1e:	3e08      	subs	r6, #8
   b8f20:	3c08      	subs	r4, #8
   b8f22:	e7f2      	b.n	b8f0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8f24:	d00c      	beq.n	b8f40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8f26:	42b5      	cmp	r5, r6
   b8f28:	d00a      	beq.n	b8f40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8f2a:	b11c      	cbz	r4, b8f34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8f2c:	4629      	mov	r1, r5
   b8f2e:	4620      	mov	r0, r4
   b8f30:	f7ff f8f0 	bl	b8114 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8f34:	1d28      	adds	r0, r5, #4
   b8f36:	f7fb fe5b 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8f3a:	3508      	adds	r5, #8
   b8f3c:	3408      	adds	r4, #8
   b8f3e:	e7f2      	b.n	b8f26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8f42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8f42:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8f44:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8f46:	4605      	mov	r5, r0
        if (n > 0) {
   b8f48:	dd11      	ble.n	b8f6e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8f4a:	00f0      	lsls	r0, r6, #3
   b8f4c:	f7fe f89a 	bl	b7084 <malloc>
            if (!d) {
   b8f50:	4604      	mov	r4, r0
   b8f52:	b158      	cbz	r0, b8f6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8f54:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8f58:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8f5c:	f7ff ffc7 	bl	b8eee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8f60:	6828      	ldr	r0, [r5, #0]
   b8f62:	f7fe f897 	bl	b7094 <free>
        data_ = d;
   b8f66:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8f68:	60ae      	str	r6, [r5, #8]
        return true;
   b8f6a:	2001      	movs	r0, #1
    }
   b8f6c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8f6e:	2400      	movs	r4, #0
   b8f70:	e7f6      	b.n	b8f60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b8f76:	2300      	movs	r3, #0
   b8f78:	e9c0 3300 	strd	r3, r3, [r0]
   b8f7c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8f7e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8f80:	6849      	ldr	r1, [r1, #4]
   b8f82:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8f84:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8f86:	dd13      	ble.n	b8fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b8f88:	f7ff ffdb 	bl	b8f42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8f8c:	b180      	cbz	r0, b8fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8f8e:	e9d5 6300 	ldrd	r6, r3, [r5]
   b8f92:	6827      	ldr	r7, [r4, #0]
   b8f94:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b8f98:	45b0      	cmp	r8, r6
   b8f9a:	d007      	beq.n	b8fac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b8f9c:	b11f      	cbz	r7, b8fa6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b8f9e:	4631      	mov	r1, r6
   b8fa0:	4638      	mov	r0, r7
   b8fa2:	f7ff f8b7 	bl	b8114 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b8fa6:	3608      	adds	r6, #8
   b8fa8:	3708      	adds	r7, #8
   b8faa:	e7f5      	b.n	b8f98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b8fac:	686b      	ldr	r3, [r5, #4]
   b8fae:	6063      	str	r3, [r4, #4]
}
   b8fb0:	4620      	mov	r0, r4
   b8fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8fb6 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b8fb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8fb8:	460d      	mov	r5, r1
   b8fba:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8fbc:	a801      	add	r0, sp, #4
   b8fbe:	f7fe fb3f 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b8fc2:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b8fc4:	4620      	mov	r0, r4
   b8fc6:	310c      	adds	r1, #12
   b8fc8:	f7ff ffd3 	bl	b8f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b8fcc:	a801      	add	r0, sp, #4
   b8fce:	f7fe fb45 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8fd2:	4620      	mov	r0, r4
   b8fd4:	b003      	add	sp, #12
   b8fd6:	bd30      	pop	{r4, r5, pc}

000b8fd8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b8fd8:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b8fda:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b8fdc:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b8fde:	4605      	mov	r5, r0
   b8fe0:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b8fe2:	b933      	cbnz	r3, b8ff2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b8fe4:	4608      	mov	r0, r1
   b8fe6:	f7fe fabf 	bl	b7568 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b8fea:	b910      	cbnz	r0, b8ff2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b8fec:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b8fee:	2201      	movs	r2, #1
   b8ff0:	729a      	strb	r2, [r3, #10]
    return services();
   b8ff2:	4628      	mov	r0, r5
   b8ff4:	4621      	mov	r1, r4
   b8ff6:	f7ff ffde 	bl	b8fb6 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b8ffa:	4628      	mov	r0, r5
   b8ffc:	bd38      	pop	{r3, r4, r5, pc}

000b8ffe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9000:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9002:	6845      	ldr	r5, [r0, #4]
   b9004:	4668      	mov	r0, sp
   b9006:	f7ff f885 	bl	b8114 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b900a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b900e:	4299      	cmp	r1, r3
   b9010:	da10      	bge.n	b9034 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9012:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9014:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9016:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b901a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b901e:	4629      	mov	r1, r5
   b9020:	f105 0008 	add.w	r0, r5, #8
   b9024:	f7ff ff63 	bl	b8eee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9028:	b98d      	cbnz	r5, b904e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b902a:	6863      	ldr	r3, [r4, #4]
   b902c:	3301      	adds	r3, #1
   b902e:	6063      	str	r3, [r4, #4]
    return true;
   b9030:	2601      	movs	r6, #1
   b9032:	e006      	b.n	b9042 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9034:	3101      	adds	r1, #1
   b9036:	4620      	mov	r0, r4
   b9038:	f7ff ff83 	bl	b8f42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b903c:	4606      	mov	r6, r0
   b903e:	2800      	cmp	r0, #0
   b9040:	d1e7      	bne.n	b9012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b9042:	a801      	add	r0, sp, #4
   b9044:	f7fb fdd4 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9048:	4630      	mov	r0, r6
   b904a:	b002      	add	sp, #8
   b904c:	bd70      	pop	{r4, r5, r6, pc}
   b904e:	4669      	mov	r1, sp
   b9050:	4628      	mov	r0, r5
   b9052:	f7ff f85f 	bl	b8114 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9056:	e7e8      	b.n	b902a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9058 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b9058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b905c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b9118 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b9060:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b911c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b9064:	b093      	sub	sp, #76	; 0x4c
   b9066:	4605      	mov	r5, r0
   b9068:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b906a:	2700      	movs	r7, #0
   b906c:	682b      	ldr	r3, [r5, #0]
   b906e:	42bb      	cmp	r3, r7
   b9070:	d94e      	bls.n	b9110 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b9072:	a803      	add	r0, sp, #12
   b9074:	f7fe fe8a 	bl	b7d8c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9078:	261c      	movs	r6, #28
   b907a:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b907c:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b907e:	437e      	muls	r6, r7
   b9080:	4432      	add	r2, r6
   b9082:	f10d 0c14 	add.w	ip, sp, #20
   b9086:	1d13      	adds	r3, r2, #4
   b9088:	46e3      	mov	fp, ip
   b908a:	3214      	adds	r2, #20
   b908c:	6818      	ldr	r0, [r3, #0]
   b908e:	6859      	ldr	r1, [r3, #4]
   b9090:	46e6      	mov	lr, ip
   b9092:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b9096:	3308      	adds	r3, #8
   b9098:	4293      	cmp	r3, r2
   b909a:	46f4      	mov	ip, lr
   b909c:	d1f6      	bne.n	b908c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b909e:	6818      	ldr	r0, [r3, #0]
   b90a0:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b90a4:	4659      	mov	r1, fp
   b90a6:	a80a      	add	r0, sp, #40	; 0x28
   b90a8:	f7fe fb96 	bl	b77d8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b90ac:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b90b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b90b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b90b6:	f8dc 3000 	ldr.w	r3, [ip]
   b90ba:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b90bc:	686b      	ldr	r3, [r5, #4]
   b90be:	9a03      	ldr	r2, [sp, #12]
   b90c0:	4433      	add	r3, r6
   b90c2:	a903      	add	r1, sp, #12
   b90c4:	8b1b      	ldrh	r3, [r3, #24]
   b90c6:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b90c8:	686b      	ldr	r3, [r5, #4]
   b90ca:	4433      	add	r3, r6
   b90cc:	8b5b      	ldrh	r3, [r3, #26]
   b90ce:	82d3      	strh	r3, [r2, #22]
        return services_;
   b90d0:	f8d8 0000 	ldr.w	r0, [r8]
   b90d4:	f100 040c 	add.w	r4, r0, #12
   b90d8:	a80a      	add	r0, sp, #40	; 0x28
   b90da:	f7ff f81b 	bl	b8114 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b90de:	4620      	mov	r0, r4
   b90e0:	a90a      	add	r1, sp, #40	; 0x28
   b90e2:	f7ff ff8c 	bl	b8ffe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b90e6:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b90e8:	a80b      	add	r0, sp, #44	; 0x2c
   b90ea:	f7fb fd81 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b90ee:	b954      	cbnz	r4, b9106 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b90f0:	2320      	movs	r3, #32
   b90f2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b90f6:	f8cd 9000 	str.w	r9, [sp]
   b90fa:	4623      	mov	r3, r4
   b90fc:	aa0a      	add	r2, sp, #40	; 0x28
   b90fe:	4651      	mov	r1, sl
   b9100:	2032      	movs	r0, #50	; 0x32
   b9102:	f7fd ff0b 	bl	b6f1c <log_message>
   b9106:	a804      	add	r0, sp, #16
   b9108:	f7fb fd72 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b910c:	3701      	adds	r7, #1
   b910e:	e7ad      	b.n	b906c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b9110:	b013      	add	sp, #76	; 0x4c
   b9112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9116:	bf00      	nop
   b9118:	000bb585 	.word	0x000bb585
   b911c:	000bb487 	.word	0x000bb487

000b9120 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9120:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9124:	4604      	mov	r4, r0
   b9126:	460d      	mov	r5, r1
   b9128:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b912a:	d914      	bls.n	b9156 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b912c:	4290      	cmp	r0, r2
   b912e:	d213      	bcs.n	b9158 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9130:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9134:	1a75      	subs	r5, r6, r1
   b9136:	f1a1 0708 	sub.w	r7, r1, #8
   b913a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b913c:	42b7      	cmp	r7, r6
   b913e:	d018      	beq.n	b9172 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9140:	b11c      	cbz	r4, b914a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9142:	4631      	mov	r1, r6
   b9144:	4620      	mov	r0, r4
   b9146:	f7fe ffd7 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b914a:	1d30      	adds	r0, r6, #4
   b914c:	f7fb fd50 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9150:	3e08      	subs	r6, #8
   b9152:	3c08      	subs	r4, #8
   b9154:	e7f2      	b.n	b913c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9156:	d00c      	beq.n	b9172 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9158:	42b5      	cmp	r5, r6
   b915a:	d00a      	beq.n	b9172 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b915c:	b11c      	cbz	r4, b9166 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b915e:	4629      	mov	r1, r5
   b9160:	4620      	mov	r0, r4
   b9162:	f7fe ffc9 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9166:	1d28      	adds	r0, r5, #4
   b9168:	f7fb fd42 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b916c:	3508      	adds	r5, #8
   b916e:	3408      	adds	r4, #8
   b9170:	e7f2      	b.n	b9158 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9174 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9174:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9176:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9178:	4605      	mov	r5, r0
        if (n > 0) {
   b917a:	dd11      	ble.n	b91a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b917c:	00f0      	lsls	r0, r6, #3
   b917e:	f7fd ff81 	bl	b7084 <malloc>
            if (!d) {
   b9182:	4604      	mov	r4, r0
   b9184:	b158      	cbz	r0, b919e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9186:	e9d5 1200 	ldrd	r1, r2, [r5]
   b918a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b918e:	f7ff ffc7 	bl	b9120 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9192:	6828      	ldr	r0, [r5, #0]
   b9194:	f7fd ff7e 	bl	b7094 <free>
        data_ = d;
   b9198:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b919a:	60ae      	str	r6, [r5, #8]
        return true;
   b919c:	2001      	movs	r0, #1
    }
   b919e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b91a0:	2400      	movs	r4, #0
   b91a2:	e7f6      	b.n	b9192 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b91a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b91a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b91a8:	2300      	movs	r3, #0
   b91aa:	e9c0 3300 	strd	r3, r3, [r0]
   b91ae:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b91b0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b91b2:	6849      	ldr	r1, [r1, #4]
   b91b4:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b91b6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b91b8:	dd13      	ble.n	b91e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b91ba:	f7ff ffdb 	bl	b9174 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b91be:	b180      	cbz	r0, b91e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b91c0:	e9d5 6300 	ldrd	r6, r3, [r5]
   b91c4:	6827      	ldr	r7, [r4, #0]
   b91c6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b91ca:	45b0      	cmp	r8, r6
   b91cc:	d007      	beq.n	b91de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b91ce:	b11f      	cbz	r7, b91d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b91d0:	4631      	mov	r1, r6
   b91d2:	4638      	mov	r0, r7
   b91d4:	f7fe ff90 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b91d8:	3608      	adds	r6, #8
   b91da:	3708      	adds	r7, #8
   b91dc:	e7f5      	b.n	b91ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b91de:	686b      	ldr	r3, [r5, #4]
   b91e0:	6063      	str	r3, [r4, #4]
}
   b91e2:	4620      	mov	r0, r4
   b91e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b91e8 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b91e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b91ea:	460d      	mov	r5, r1
   b91ec:	4604      	mov	r4, r0
    WiringBleLock lk;
   b91ee:	a801      	add	r0, sp, #4
   b91f0:	f7fe fa26 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b91f4:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b91f6:	4620      	mov	r0, r4
   b91f8:	3118      	adds	r1, #24
   b91fa:	f7ff ffd3 	bl	b91a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b91fe:	a801      	add	r0, sp, #4
   b9200:	f7fe fa2c 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9204:	4620      	mov	r0, r4
   b9206:	b003      	add	sp, #12
   b9208:	bd30      	pop	{r4, r5, pc}

000b920a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b920a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b920c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b920e:	6845      	ldr	r5, [r0, #4]
   b9210:	4668      	mov	r0, sp
   b9212:	f7fe ff71 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9216:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b921a:	4299      	cmp	r1, r3
   b921c:	da10      	bge.n	b9240 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b921e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9220:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9222:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9226:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b922a:	4629      	mov	r1, r5
   b922c:	f105 0008 	add.w	r0, r5, #8
   b9230:	f7ff ff76 	bl	b9120 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9234:	b98d      	cbnz	r5, b925a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9236:	6863      	ldr	r3, [r4, #4]
   b9238:	3301      	adds	r3, #1
   b923a:	6063      	str	r3, [r4, #4]
    return true;
   b923c:	2601      	movs	r6, #1
   b923e:	e006      	b.n	b924e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9240:	3101      	adds	r1, #1
   b9242:	4620      	mov	r0, r4
   b9244:	f7ff ff96 	bl	b9174 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9248:	4606      	mov	r6, r0
   b924a:	2800      	cmp	r0, #0
   b924c:	d1e7      	bne.n	b921e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b924e:	a801      	add	r0, sp, #4
   b9250:	f7fb fcce 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9254:	4630      	mov	r0, r6
   b9256:	b002      	add	sp, #8
   b9258:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b925a:	4669      	mov	r1, sp
   b925c:	4628      	mov	r0, r5
   b925e:	f7fe ff4b 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9262:	e7e8      	b.n	b9236 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9264 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9264:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9266:	b085      	sub	sp, #20
   b9268:	4605      	mov	r5, r0
    WiringBleLock lk;
   b926a:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b926c:	460c      	mov	r4, r1
   b926e:	4617      	mov	r7, r2
    WiringBleLock lk;
   b9270:	f7fe f9e6 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b9274:	2300      	movs	r3, #0
   b9276:	e9c5 3300 	strd	r3, r3, [r5]
   b927a:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b927c:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b927e:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b9282:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b9286:	42b4      	cmp	r4, r6
   b9288:	d011      	beq.n	b92ae <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b928a:	6838      	ldr	r0, [r7, #0]
   b928c:	4621      	mov	r1, r4
   b928e:	f7fe fc97 	bl	b7bc0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b9292:	b150      	cbz	r0, b92aa <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b9294:	4621      	mov	r1, r4
   b9296:	a802      	add	r0, sp, #8
   b9298:	f7fe ff2e 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b929c:	a902      	add	r1, sp, #8
   b929e:	4628      	mov	r0, r5
   b92a0:	f7ff ffb3 	bl	b920a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b92a4:	a803      	add	r0, sp, #12
   b92a6:	f7fb fca3 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b92aa:	3408      	adds	r4, #8
   b92ac:	e7eb      	b.n	b9286 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b92ae:	a801      	add	r0, sp, #4
   b92b0:	f7fe f9d4 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b92b4:	4628      	mov	r0, r5
   b92b6:	b005      	add	sp, #20
   b92b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b92bc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b92bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b92c0:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b92c2:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b92c4:	b091      	sub	sp, #68	; 0x44
   b92c6:	4606      	mov	r6, r0
   b92c8:	460f      	mov	r7, r1
   b92ca:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b92cc:	b933      	cbnz	r3, b92dc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b92ce:	e9c0 3300 	strd	r3, r3, [r0]
   b92d2:	6083      	str	r3, [r0, #8]
}
   b92d4:	4630      	mov	r0, r6
   b92d6:	b011      	add	sp, #68	; 0x44
   b92d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b92dc:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b92de:	7e0d      	ldrb	r5, [r1, #24]
   b92e0:	2d00      	cmp	r5, #0
   b92e2:	d158      	bne.n	b9396 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b92e4:	2320      	movs	r3, #32
   b92e6:	462a      	mov	r2, r5
   b92e8:	a803      	add	r0, sp, #12
   b92ea:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b92ee:	f7fe fbba 	bl	b7a66 <_ZNK8particle7BleUuid8toStringEb>
   b92f2:	9b03      	ldr	r3, [sp, #12]
   b92f4:	9301      	str	r3, [sp, #4]
   b92f6:	4b2b      	ldr	r3, [pc, #172]	; (b93a4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b92f8:	492b      	ldr	r1, [pc, #172]	; (b93a8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b92fa:	9300      	str	r3, [sp, #0]
   b92fc:	aa08      	add	r2, sp, #32
   b92fe:	462b      	mov	r3, r5
   b9300:	2001      	movs	r0, #1
   b9302:	f7fd fe0b 	bl	b6f1c <log_message>
   b9306:	a803      	add	r0, sp, #12
   b9308:	f7fd ff54 	bl	b71b4 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b930c:	231c      	movs	r3, #28
   b930e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b9312:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b9316:	8a9a      	ldrh	r2, [r3, #20]
   b9318:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b931c:	8adb      	ldrh	r3, [r3, #22]
   b931e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b9322:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b9324:	4a21      	ldr	r2, [pc, #132]	; (b93ac <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b9326:	8818      	ldrh	r0, [r3, #0]
   b9328:	9500      	str	r5, [sp, #0]
   b932a:	a908      	add	r1, sp, #32
   b932c:	f7fd fcd2 	bl	b6cd4 <hal_ble_gatt_client_discover_characteristics>
   b9330:	2800      	cmp	r0, #0
   b9332:	db30      	blt.n	b9396 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b9334:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b9336:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b933a:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b933e:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9340:	f1a4 0308 	sub.w	r3, r4, #8
   b9344:	4599      	cmp	r9, r3
   b9346:	d022      	beq.n	b938e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b9348:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b934c:	89db      	ldrh	r3, [r3, #14]
   b934e:	2b00      	cmp	r3, #0
   b9350:	d0f5      	beq.n	b933e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b9352:	2210      	movs	r2, #16
   b9354:	2100      	movs	r1, #0
   b9356:	eb0d 0002 	add.w	r0, sp, r2
   b935a:	9503      	str	r5, [sp, #12]
   b935c:	f001 fd8a 	bl	bae74 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b9360:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b9364:	89d9      	ldrh	r1, [r3, #14]
   b9366:	683b      	ldr	r3, [r7, #0]
   b9368:	aa03      	add	r2, sp, #12
   b936a:	8818      	ldrh	r0, [r3, #0]
   b936c:	9500      	str	r5, [sp, #0]
   b936e:	2313      	movs	r3, #19
   b9370:	f7fd fcce 	bl	b6d10 <hal_ble_gatt_client_read>
                if (len > 0) {
   b9374:	2800      	cmp	r0, #0
   b9376:	d0e2      	beq.n	b933e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b9378:	ab10      	add	r3, sp, #64	; 0x40
   b937a:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b937c:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b937e:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b9382:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b9386:	303c      	adds	r0, #60	; 0x3c
   b9388:	f7fd ffb5 	bl	b72f6 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b938c:	e7d7      	b.n	b933e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b938e:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b9392:	2201      	movs	r2, #1
   b9394:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b9396:	4642      	mov	r2, r8
   b9398:	4639      	mov	r1, r7
   b939a:	4630      	mov	r0, r6
   b939c:	f7ff ff62 	bl	b9264 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b93a0:	e798      	b.n	b92d4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b93a2:	bf00      	nop
   b93a4:	000bb5aa 	.word	0x000bb5aa
   b93a8:	000bb487 	.word	0x000bb487
   b93ac:	000b9555 	.word	0x000b9555

000b93b0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b93b0:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b93b2:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b93b4:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b93b6:	b085      	sub	sp, #20
   b93b8:	4606      	mov	r6, r0
   b93ba:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b93bc:	b92b      	cbnz	r3, b93ca <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b93be:	a801      	add	r0, sp, #4
   b93c0:	f7ff fe0a 	bl	b8fd8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b93c4:	a801      	add	r0, sp, #4
   b93c6:	f7fe fec7 	bl	b8158 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b93ca:	682b      	ldr	r3, [r5, #0]
   b93cc:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b93d0:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b93d4:	42bc      	cmp	r4, r7
   b93d6:	d009      	beq.n	b93ec <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b93d8:	4622      	mov	r2, r4
   b93da:	4629      	mov	r1, r5
   b93dc:	a801      	add	r0, sp, #4
   b93de:	f7ff ff6d 	bl	b92bc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b93e2:	a801      	add	r0, sp, #4
   b93e4:	f7fe feca 	bl	b817c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b93e8:	3408      	adds	r4, #8
   b93ea:	e7f3      	b.n	b93d4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b93ec:	4630      	mov	r0, r6
   b93ee:	4629      	mov	r1, r5
   b93f0:	f7ff fefa 	bl	b91e8 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b93f4:	4630      	mov	r0, r6
   b93f6:	b005      	add	sp, #20
   b93f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b93fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b93fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9400:	4605      	mov	r5, r0
   b9402:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b9404:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b9406:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9408:	460f      	mov	r7, r1
    return address_;
   b940a:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b940c:	4698      	mov	r8, r3
    return address_;
   b940e:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b9410:	4b41      	ldr	r3, [pc, #260]	; (b9518 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b9412:	9304      	str	r3, [sp, #16]
    return address_;
   b9414:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b9416:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b9418:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b941c:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b9420:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b9424:	f7fe fd7e 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9428:	4b3c      	ldr	r3, [pc, #240]	; (b951c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b942a:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b942c:	f7fe fd7a 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b9430:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9432:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b9434:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b9436:	464a      	mov	r2, r9
   b9438:	a804      	add	r0, sp, #16
   b943a:	f7fd fc73 	bl	b6d24 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b943e:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b9440:	4604      	mov	r4, r0
   b9442:	b138      	cbz	r0, b9454 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b9444:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9446:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b944a:	801a      	strh	r2, [r3, #0]
}
   b944c:	4620      	mov	r0, r4
   b944e:	b013      	add	sp, #76	; 0x4c
   b9450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b9454:	4639      	mov	r1, r7
   b9456:	4628      	mov	r0, r5
   b9458:	f7fe fce8 	bl	b7e2c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b945c:	a803      	add	r0, sp, #12
   b945e:	f7fe f8ef 	bl	b7640 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b9462:	f7fe fd5f 	bl	b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b9466:	6807      	ldr	r7, [r0, #0]
   b9468:	4629      	mov	r1, r5
   b946a:	3718      	adds	r7, #24
   b946c:	4630      	mov	r0, r6
   b946e:	f7fe fe5b 	bl	b8128 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b9472:	4631      	mov	r1, r6
   b9474:	4638      	mov	r0, r7
   b9476:	f7ff f98b 	bl	b8790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b947a:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b947c:	a80b      	add	r0, sp, #44	; 0x2c
   b947e:	f7fb fbb7 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9482:	f04f 0920 	mov.w	r9, #32
   b9486:	bb1f      	cbnz	r7, b94d0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b9488:	4632      	mov	r2, r6
   b948a:	4b25      	ldr	r3, [pc, #148]	; (b9520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b948c:	4e25      	ldr	r6, [pc, #148]	; (b9524 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b948e:	4926      	ldr	r1, [pc, #152]	; (b9528 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9490:	9300      	str	r3, [sp, #0]
   b9492:	2032      	movs	r0, #50	; 0x32
   b9494:	4623      	mov	r3, r4
   b9496:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b949a:	f7fd fd3f 	bl	b6f1c <log_message>
   b949e:	6830      	ldr	r0, [r6, #0]
   b94a0:	f7fd fca4 	bl	b6dec <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b94a4:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b94a6:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b94aa:	4621      	mov	r1, r4
   b94ac:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b94ae:	4c1f      	ldr	r4, [pc, #124]	; (b952c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b94b0:	f7fd fbf2 	bl	b6c98 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b94b4:	6830      	ldr	r0, [r6, #0]
   b94b6:	f7fd fc91 	bl	b6ddc <os_mutex_recursive_lock>
        locked_ = true;
   b94ba:	2301      	movs	r3, #1
   b94bc:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b94c0:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b94c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b94c6:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b94c8:	a803      	add	r0, sp, #12
   b94ca:	f7fe f8c7 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
   b94ce:	e7bd      	b.n	b944c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b94d0:	a803      	add	r0, sp, #12
   b94d2:	f7fe f8c3 	bl	b765c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b94d6:	4b16      	ldr	r3, [pc, #88]	; (b9530 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b94d8:	9300      	str	r3, [sp, #0]
   b94da:	4913      	ldr	r1, [pc, #76]	; (b9528 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b94dc:	4623      	mov	r3, r4
   b94de:	4632      	mov	r2, r6
   b94e0:	2001      	movs	r0, #1
   b94e2:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b94e6:	f7fd fd19 	bl	b6f1c <log_message>
    if (automatic) {
   b94ea:	f1b8 0f00 	cmp.w	r8, #0
   b94ee:	d0ad      	beq.n	b944c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b94f0:	4629      	mov	r1, r5
   b94f2:	4630      	mov	r0, r6
   b94f4:	f7ff ff5c 	bl	b93b0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b94f8:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b94fc:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b9500:	42bd      	cmp	r5, r7
   b9502:	d005      	beq.n	b9510 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b9504:	4628      	mov	r0, r5
   b9506:	2101      	movs	r1, #1
   b9508:	f7fe fc06 	bl	b7d18 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b950c:	3508      	adds	r5, #8
   b950e:	e7f7      	b.n	b9500 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9510:	4630      	mov	r0, r6
   b9512:	f7fe fe33 	bl	b817c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9516:	e799      	b.n	b944c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b9518:	00180003 	.word	0x00180003
   b951c:	000b8849 	.word	0x000b8849
   b9520:	000bb5dc 	.word	0x000bb5dc
   b9524:	2003e6f0 	.word	0x2003e6f0
   b9528:	000bb487 	.word	0x000bb487
   b952c:	fffffefc 	.word	0xfffffefc
   b9530:	000bb5f8 	.word	0x000bb5f8

000b9534 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b9534:	b513      	push	{r0, r1, r4, lr}
   b9536:	4604      	mov	r4, r0
   b9538:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b953c:	f7fe fc42 	bl	b7dc4 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b9540:	9b00      	ldr	r3, [sp, #0]
   b9542:	9901      	ldr	r1, [sp, #4]
   b9544:	2200      	movs	r2, #0
   b9546:	4620      	mov	r0, r4
   b9548:	f7ff ff58 	bl	b93fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   b954c:	4620      	mov	r0, r4
   b954e:	b002      	add	sp, #8
   b9550:	bd10      	pop	{r4, pc}
	...

000b9554 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b9558:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b955a:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b955c:	2600      	movs	r6, #0
   b955e:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b9562:	4b66      	ldr	r3, [pc, #408]	; (b96fc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b9564:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9566:	4605      	mov	r5, r0
   b9568:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b956a:	4633      	mov	r3, r6
   b956c:	4964      	ldr	r1, [pc, #400]	; (b9700 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b956e:	f8df 9194 	ldr.w	r9, [pc, #404]	; b9704 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b9572:	f8df 818c 	ldr.w	r8, [pc, #396]	; b9700 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9576:	f8df a190 	ldr.w	sl, [pc, #400]	; b9708 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b957a:	aa0c      	add	r2, sp, #48	; 0x30
   b957c:	2001      	movs	r0, #1
   b957e:	f7fd fccd 	bl	b6f1c <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b9582:	682b      	ldr	r3, [r5, #0]
   b9584:	42b3      	cmp	r3, r6
   b9586:	f240 80b5 	bls.w	b96f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b958a:	a803      	add	r0, sp, #12
   b958c:	f7fe fb3e 	bl	b7c0c <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b9590:	a805      	add	r0, sp, #20
   b9592:	f7fe fbfb 	bl	b7d8c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9596:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b959a:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b959c:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b959e:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b95a2:	445b      	add	r3, fp
        this->size = halHandles.size;
   b95a4:	8bd9      	ldrh	r1, [r3, #30]
   b95a6:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b95a8:	8c19      	ldrh	r1, [r3, #32]
   b95aa:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b95ac:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b95ae:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b95b0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b95b2:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b95b4:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b95b6:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b95b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b95ba:	8253      	strh	r3, [r2, #18]
   b95bc:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b95c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b95c4:	429a      	cmp	r2, r3
   b95c6:	d07d      	beq.n	b96c4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b95c8:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b95ca:	8ac4      	ldrh	r4, [r0, #22]
   b95cc:	428c      	cmp	r4, r1
   b95ce:	d377      	bcc.n	b96c0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b95d0:	8a84      	ldrh	r4, [r0, #20]
   b95d2:	428c      	cmp	r4, r1
   b95d4:	d874      	bhi.n	b96c0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b95d6:	6859      	ldr	r1, [r3, #4]
   b95d8:	9005      	str	r0, [sp, #20]
   b95da:	a806      	add	r0, sp, #24
   b95dc:	f7fe f80a 	bl	b75f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b95e0:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b95e4:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b95e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b95ec:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b95f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b95f2:	f8dc 3000 	ldr.w	r3, [ip]
   b95f6:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b95f8:	892b      	ldrh	r3, [r5, #8]
   b95fa:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b95fe:	686b      	ldr	r3, [r5, #4]
   b9600:	9c03      	ldr	r4, [sp, #12]
   b9602:	445b      	add	r3, fp
   b9604:	7e5b      	ldrb	r3, [r3, #25]
   b9606:	f013 0f02 	tst.w	r3, #2
   b960a:	d16e      	bne.n	b96ea <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b960c:	686b      	ldr	r3, [r5, #4]
   b960e:	445b      	add	r3, fp
   b9610:	7e5b      	ldrb	r3, [r3, #25]
   b9612:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b9614:	bf42      	ittt	mi
   b9616:	7923      	ldrbmi	r3, [r4, #4]
   b9618:	f043 0304 	orrmi.w	r3, r3, #4
   b961c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b961e:	686b      	ldr	r3, [r5, #4]
   b9620:	445b      	add	r3, fp
   b9622:	7e5b      	ldrb	r3, [r3, #25]
   b9624:	0719      	lsls	r1, r3, #28
   b9626:	bf42      	ittt	mi
   b9628:	7923      	ldrbmi	r3, [r4, #4]
   b962a:	f043 0308 	orrmi.w	r3, r3, #8
   b962e:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b9630:	686b      	ldr	r3, [r5, #4]
   b9632:	445b      	add	r3, fp
   b9634:	7e5b      	ldrb	r3, [r3, #25]
   b9636:	06da      	lsls	r2, r3, #27
   b9638:	bf42      	ittt	mi
   b963a:	7923      	ldrbmi	r3, [r4, #4]
   b963c:	f043 0310 	orrmi.w	r3, r3, #16
   b9640:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b9642:	686b      	ldr	r3, [r5, #4]
   b9644:	445b      	add	r3, fp
   b9646:	aa07      	add	r2, sp, #28
   b9648:	7e5b      	ldrb	r3, [r3, #25]
   b964a:	069b      	lsls	r3, r3, #26
   b964c:	bf42      	ittt	mi
   b964e:	7923      	ldrbmi	r3, [r4, #4]
   b9650:	f043 0320 	orrmi.w	r3, r3, #32
   b9654:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b9656:	686b      	ldr	r3, [r5, #4]
   b9658:	449b      	add	fp, r3
   b965a:	f10b 0304 	add.w	r3, fp, #4
   b965e:	4696      	mov	lr, r2
   b9660:	f10b 0b14 	add.w	fp, fp, #20
   b9664:	6818      	ldr	r0, [r3, #0]
   b9666:	6859      	ldr	r1, [r3, #4]
   b9668:	4694      	mov	ip, r2
   b966a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b966e:	3308      	adds	r3, #8
   b9670:	455b      	cmp	r3, fp
   b9672:	4662      	mov	r2, ip
   b9674:	d1f6      	bne.n	b9664 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b9676:	6818      	ldr	r0, [r3, #0]
   b9678:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b967c:	4671      	mov	r1, lr
   b967e:	a80c      	add	r0, sp, #48	; 0x30
   b9680:	f7fe f8aa 	bl	b77d8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9684:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b9688:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b968c:	3414      	adds	r4, #20
   b968e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9690:	f8dc 3000 	ldr.w	r3, [ip]
   b9694:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b9696:	a903      	add	r1, sp, #12
   b9698:	a80c      	add	r0, sp, #48	; 0x30
   b969a:	f7fe fd2d 	bl	b80f8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b969e:	a90c      	add	r1, sp, #48	; 0x30
   b96a0:	f107 0018 	add.w	r0, r7, #24
   b96a4:	f7ff fdb1 	bl	b920a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b96a8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b96aa:	a80d      	add	r0, sp, #52	; 0x34
   b96ac:	f7fb faa0 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b96b0:	b99c      	cbnz	r4, b96da <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b96b2:	2320      	movs	r3, #32
   b96b4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b96b8:	f8cd a000 	str.w	sl, [sp]
   b96bc:	4623      	mov	r3, r4
   b96be:	e007      	b.n	b96d0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b96c0:	3308      	adds	r3, #8
   b96c2:	e77f      	b.n	b95c4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b96c4:	2420      	movs	r4, #32
   b96c6:	2300      	movs	r3, #0
   b96c8:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b96cc:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b96d0:	aa0c      	add	r2, sp, #48	; 0x30
   b96d2:	4641      	mov	r1, r8
   b96d4:	2032      	movs	r0, #50	; 0x32
   b96d6:	f7fd fc21 	bl	b6f1c <log_message>
   b96da:	a806      	add	r0, sp, #24
   b96dc:	f7fb fa88 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b96e0:	a804      	add	r0, sp, #16
   b96e2:	f7fb fa85 	bl	b4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b96e6:	3601      	adds	r6, #1
   b96e8:	e74b      	b.n	b9582 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b96ea:	7923      	ldrb	r3, [r4, #4]
   b96ec:	f043 0302 	orr.w	r3, r3, #2
   b96f0:	7123      	strb	r3, [r4, #4]
   b96f2:	e78b      	b.n	b960c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b96f4:	b015      	add	sp, #84	; 0x54
   b96f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b96fa:	bf00      	nop
   b96fc:	000bb615 	.word	0x000bb615
   b9700:	000bb487 	.word	0x000bb487
   b9704:	000bb630 	.word	0x000bb630
   b9708:	000bb65f 	.word	0x000bb65f

000b970c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b970e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9710:	4605      	mov	r5, r0
        if (n > 0) {
   b9712:	dd13      	ble.n	b973c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b9714:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b9716:	fb07 f006 	mul.w	r0, r7, r6
   b971a:	f7fd fcb3 	bl	b7084 <malloc>
            if (!d) {
   b971e:	4604      	mov	r4, r0
   b9720:	b158      	cbz	r0, b973a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b9722:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9726:	fb07 1202 	mla	r2, r7, r2, r1
   b972a:	f7fc fc1f 	bl	b5f6c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b972e:	6828      	ldr	r0, [r5, #0]
   b9730:	f7fd fcb0 	bl	b7094 <free>
        data_ = d;
   b9734:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9736:	60ae      	str	r6, [r5, #8]
        return true;
   b9738:	2001      	movs	r0, #1
    }
   b973a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b973c:	2400      	movs	r4, #0
   b973e:	e7f6      	b.n	b972e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b9740 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
   b9740:	b538      	push	{r3, r4, r5, lr}
   b9742:	460c      	mov	r4, r1
   b9744:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
   b9746:	f101 0018 	add.w	r0, r1, #24
   b974a:	f7fd fef7 	bl	b753c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b974e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9752:	f7fd fefe 	bl	b7552 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
   b9756:	2200      	movs	r2, #0
   b9758:	4621      	mov	r1, r4
   b975a:	4804      	ldr	r0, [pc, #16]	; (b976c <_ZN8particle16BleScanDelegator5startEv+0x2c>)
   b975c:	f7fd fa8a 	bl	b6c74 <hal_ble_gap_start_scan>
        return resultsVector_;
   b9760:	4621      	mov	r1, r4
   b9762:	4628      	mov	r0, r5
   b9764:	f7fc fc9c 	bl	b60a0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
   b9768:	4628      	mov	r0, r5
   b976a:	bd38      	pop	{r3, r4, r5, pc}
   b976c:	000b9791 	.word	0x000b9791

000b9770 <_ZNK8particle14BleLocalDevice4scanEv>:
Vector<BleScanResult> BleLocalDevice::scan() const {
   b9770:	b510      	push	{r4, lr}
   b9772:	b09e      	sub	sp, #120	; 0x78
   b9774:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b9776:	a801      	add	r0, sp, #4
   b9778:	f7fe fc25 	bl	b7fc6 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
   b977c:	a901      	add	r1, sp, #4
   b977e:	4620      	mov	r0, r4
   b9780:	f7ff ffde 	bl	b9740 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
   b9784:	a801      	add	r0, sp, #4
   b9786:	f7fe fc60 	bl	b804a <_ZN8particle16BleScanDelegatorD1Ev>
}
   b978a:	4620      	mov	r0, r4
   b978c:	b01e      	add	sp, #120	; 0x78
   b978e:	bd10      	pop	{r4, pc}

000b9790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b9790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9794:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b9796:	ad01      	add	r5, sp, #4
   b9798:	4606      	mov	r6, r0
   b979a:	4628      	mov	r0, r5
   b979c:	460c      	mov	r4, r1
   b979e:	f7fd ff94 	bl	b76ca <_ZN8particle10BleAddressC1Ev>
   b97a2:	a803      	add	r0, sp, #12
   b97a4:	f7fe ffb7 	bl	b8716 <_ZN8particle18BleAdvertisingDataC1Ev>
   b97a8:	a806      	add	r0, sp, #24
   b97aa:	f7fe ffb4 	bl	b8716 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b97ae:	6930      	ldr	r0, [r6, #16]
   b97b0:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b97b2:	89f2      	ldrh	r2, [r6, #14]
   b97b4:	ab13      	add	r3, sp, #76	; 0x4c
   b97b6:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b97b8:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b97bc:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b97be:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b97c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b97c4:	a806      	add	r0, sp, #24
   b97c6:	f7fe ff1a 	bl	b85fe <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b97ca:	89b2      	ldrh	r2, [r6, #12]
   b97cc:	6871      	ldr	r1, [r6, #4]
   b97ce:	a803      	add	r0, sp, #12
   b97d0:	f7fe ff15 	bl	b85fe <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b97d4:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b97d8:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b97da:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b97dc:	d003      	beq.n	b97e6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b97de:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b97e2:	429a      	cmp	r2, r3
   b97e4:	db5c      	blt.n	b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b97e6:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b97ea:	2b7f      	cmp	r3, #127	; 0x7f
   b97ec:	d003      	beq.n	b97f6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b97ee:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b97f2:	429a      	cmp	r2, r3
   b97f4:	dc54      	bgt.n	b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b97f6:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b97fa:	4638      	mov	r0, r7
   b97fc:	f7fe fdac 	bl	b8358 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b9800:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b9802:	2b00      	cmp	r3, #0
   b9804:	dd52      	ble.n	b98ac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b9806:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b9808:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b980c:	45b1      	cmp	r9, r6
   b980e:	d050      	beq.n	b98b2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b9810:	4630      	mov	r0, r6
   b9812:	4629      	mov	r1, r5
   b9814:	f7fd ff45 	bl	b76a2 <_ZNK8particle10BleAddresseqERKS0_>
   b9818:	3608      	adds	r6, #8
   b981a:	4680      	mov	r8, r0
   b981c:	2800      	cmp	r0, #0
   b981e:	d0f5      	beq.n	b980c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b9820:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9822:	f7fd fc37 	bl	b7094 <free>
        if (!delegator->filterByRssi(result) ||
   b9826:	f1b8 0f00 	cmp.w	r8, #0
   b982a:	d039      	beq.n	b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b982c:	4629      	mov	r1, r5
   b982e:	4620      	mov	r0, r4
   b9830:	f7fe fd55 	bl	b82de <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b9834:	b3a0      	cbz	r0, b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b9836:	4629      	mov	r1, r5
   b9838:	4620      	mov	r0, r4
   b983a:	f7ff fa7c 	bl	b8d36 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b983e:	4606      	mov	r6, r0
   b9840:	b370      	cbz	r0, b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b9842:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b9846:	4638      	mov	r0, r7
   b9848:	f7fe fdd1 	bl	b83ee <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b984c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b984e:	2b00      	cmp	r3, #0
   b9850:	dd12      	ble.n	b9878 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b9852:	a806      	add	r0, sp, #24
   b9854:	f7fe f97b 	bl	b7b4e <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b9858:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b985a:	a803      	add	r0, sp, #12
   b985c:	f7fe f977 	bl	b7b4e <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b9860:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b9864:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b9868:	429a      	cmp	r2, r3
   b986a:	d025      	beq.n	b98b8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b986c:	f833 1b02 	ldrh.w	r1, [r3], #2
   b9870:	4588      	cmp	r8, r1
   b9872:	d001      	beq.n	b9878 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b9874:	4288      	cmp	r0, r1
   b9876:	d1f7      	bne.n	b9868 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b9878:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b987a:	f7fd fc0b 	bl	b7094 <free>
              !delegator->filterByServiceUUID(result) ||
   b987e:	b17e      	cbz	r6, b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b9880:	4629      	mov	r1, r5
   b9882:	4620      	mov	r0, r4
   b9884:	f7fe fde8 	bl	b8458 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b9888:	b150      	cbz	r0, b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b988a:	6a23      	ldr	r3, [r4, #32]
   b988c:	b1b3      	cbz	r3, b98bc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b988e:	6963      	ldr	r3, [r4, #20]
   b9890:	9513      	str	r5, [sp, #76]	; 0x4c
   b9892:	3301      	adds	r3, #1
   b9894:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9896:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9898:	4639      	mov	r1, r7
   b989a:	f104 0018 	add.w	r0, r4, #24
   b989e:	4798      	blx	r3
            return;
   b98a0:	4628      	mov	r0, r5
   b98a2:	f7fc fa72 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
    }
   b98a6:	b01d      	add	sp, #116	; 0x74
   b98a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b98ac:	f04f 0801 	mov.w	r8, #1
   b98b0:	e7b6      	b.n	b9820 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b98b2:	f04f 0800 	mov.w	r8, #0
   b98b6:	e7b3      	b.n	b9820 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b98b8:	2600      	movs	r6, #0
   b98ba:	e7dd      	b.n	b9878 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b98bc:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b98c0:	f1b8 0f00 	cmp.w	r8, #0
   b98c4:	d007      	beq.n	b98d6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b98c6:	6963      	ldr	r3, [r4, #20]
   b98c8:	3301      	adds	r3, #1
   b98ca:	6163      	str	r3, [r4, #20]
   b98cc:	4629      	mov	r1, r5
   b98ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b98d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b98d4:	e7e3      	b.n	b989e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b98d6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b98da:	f1bc 0f00 	cmp.w	ip, #0
   b98de:	d025      	beq.n	b992c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b98e0:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b98e2:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b98e4:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b98e6:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b98e8:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b98ea:	d8d9      	bhi.n	b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b98ec:	2224      	movs	r2, #36	; 0x24
   b98ee:	4353      	muls	r3, r2
    address_ = addr.address_;
   b98f0:	462a      	mov	r2, r5
   b98f2:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b98f4:	3b24      	subs	r3, #36	; 0x24
   b98f6:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b98fa:	f84c 0003 	str.w	r0, [ip, r3]
   b98fe:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b9900:	f106 0008 	add.w	r0, r6, #8
   b9904:	a903      	add	r1, sp, #12
   b9906:	f7fe fe42 	bl	b858e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b990a:	a906      	add	r1, sp, #24
   b990c:	f106 0014 	add.w	r0, r6, #20
   b9910:	f7fe fe3d 	bl	b858e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9914:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b9918:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b991c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b9920:	429a      	cmp	r2, r3
   b9922:	d3bd      	bcc.n	b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b9924:	4640      	mov	r0, r8
   b9926:	f7fd f9ad 	bl	b6c84 <hal_ble_gap_stop_scan>
   b992a:	e7b9      	b.n	b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b992c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9930:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9934:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b9938:	a903      	add	r1, sp, #12
   b993a:	a80c      	add	r0, sp, #48	; 0x30
   b993c:	f7fc fa4e 	bl	b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9940:	a906      	add	r1, sp, #24
   b9942:	a80f      	add	r0, sp, #60	; 0x3c
   b9944:	f7fc fa4a 	bl	b5ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b9948:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b994c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b9950:	4641      	mov	r1, r8
   b9952:	4638      	mov	r0, r7
   b9954:	6866      	ldr	r6, [r4, #4]
   b9956:	f7fc fa86 	bl	b5e66 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b995a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b995e:	4299      	cmp	r1, r3
   b9960:	da10      	bge.n	b9984 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b9962:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9964:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b9966:	2224      	movs	r2, #36	; 0x24
   b9968:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b996c:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b9970:	fb02 3201 	mla	r2, r2, r1, r3
   b9974:	4631      	mov	r1, r6
   b9976:	f7fc faf9 	bl	b5f6c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b997a:	b986      	cbnz	r6, b999e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b997c:	6863      	ldr	r3, [r4, #4]
   b997e:	3301      	adds	r3, #1
   b9980:	6063      	str	r3, [r4, #4]
    return true;
   b9982:	e005      	b.n	b9990 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9984:	3101      	adds	r1, #1
   b9986:	4620      	mov	r0, r4
   b9988:	f7ff fec0 	bl	b970c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b998c:	2800      	cmp	r0, #0
   b998e:	d1e8      	bne.n	b9962 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b9990:	4638      	mov	r0, r7
   b9992:	f7fc f9fa 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b9996:	4640      	mov	r0, r8
   b9998:	f7fc f9f7 	bl	b5d8a <_ZN8particle13BleScanResultD1Ev>
   b999c:	e780      	b.n	b98a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b999e:	4639      	mov	r1, r7
   b99a0:	4630      	mov	r0, r6
   b99a2:	f7fc fa60 	bl	b5e66 <_ZN8particle13BleScanResultC1EOS0_>
   b99a6:	e7e9      	b.n	b997c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b99a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b99a8:	4802      	ldr	r0, [pc, #8]	; (b99b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b99aa:	2300      	movs	r3, #0
   b99ac:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b99ae:	f7fd ba0d 	b.w	b6dcc <os_mutex_recursive_create>
   b99b2:	bf00      	nop
   b99b4:	2003e6f0 	.word	0x2003e6f0

000b99b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b99b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99ba:	4606      	mov	r6, r0
   b99bc:	460d      	mov	r5, r1
  size_t n = 0;
   b99be:	188f      	adds	r7, r1, r2
   b99c0:	2400      	movs	r4, #0
  while (size--) {
   b99c2:	42bd      	cmp	r5, r7
   b99c4:	d00c      	beq.n	b99e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b99c6:	6833      	ldr	r3, [r6, #0]
   b99c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b99cc:	689b      	ldr	r3, [r3, #8]
   b99ce:	4630      	mov	r0, r6
   b99d0:	4798      	blx	r3
     if (chunk>=0)
   b99d2:	1e03      	subs	r3, r0, #0
   b99d4:	db01      	blt.n	b99da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b99d6:	441c      	add	r4, r3
  while (size--) {
   b99d8:	e7f3      	b.n	b99c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b99da:	2c00      	cmp	r4, #0
   b99dc:	bf08      	it	eq
   b99de:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b99e0:	4620      	mov	r0, r4
   b99e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b99e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b99e4:	b513      	push	{r0, r1, r4, lr}
   b99e6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b99e8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b99ea:	b159      	cbz	r1, b9a04 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b99ec:	9101      	str	r1, [sp, #4]
   b99ee:	f001 faa6 	bl	baf3e <strlen>
   b99f2:	6823      	ldr	r3, [r4, #0]
   b99f4:	9901      	ldr	r1, [sp, #4]
   b99f6:	68db      	ldr	r3, [r3, #12]
   b99f8:	4602      	mov	r2, r0
   b99fa:	4620      	mov	r0, r4
    }
   b99fc:	b002      	add	sp, #8
   b99fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9a02:	4718      	bx	r3
    }
   b9a04:	b002      	add	sp, #8
   b9a06:	bd10      	pop	{r4, pc}

000b9a08 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b9a08:	6803      	ldr	r3, [r0, #0]
   b9a0a:	689b      	ldr	r3, [r3, #8]
   b9a0c:	4718      	bx	r3

000b9a0e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9a0e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9a10:	210d      	movs	r1, #13
{
   b9a12:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9a14:	f7ff fff8 	bl	b9a08 <_ZN5Print5printEc>
  n += print('\n');
   b9a18:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9a1a:	4604      	mov	r4, r0
  n += print('\n');
   b9a1c:	4628      	mov	r0, r5
   b9a1e:	f7ff fff3 	bl	b9a08 <_ZN5Print5printEc>
  return n;
}
   b9a22:	4420      	add	r0, r4
   b9a24:	bd38      	pop	{r3, r4, r5, pc}

000b9a26 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9a26:	b538      	push	{r3, r4, r5, lr}
   b9a28:	4605      	mov	r5, r0
  return write(str);
   b9a2a:	f7ff ffdb 	bl	b99e4 <_ZN5Print5writeEPKc>
   b9a2e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9a30:	4628      	mov	r0, r5
   b9a32:	f7ff ffec 	bl	b9a0e <_ZN5Print7printlnEv>
  return n;
}
   b9a36:	4420      	add	r0, r4
   b9a38:	bd38      	pop	{r3, r4, r5, pc}

000b9a3a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9a3a:	b530      	push	{r4, r5, lr}
   b9a3c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9a3e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9a40:	2a01      	cmp	r2, #1
  *str = '\0';
   b9a42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9a46:	bf98      	it	ls
   b9a48:	220a      	movls	r2, #10
   b9a4a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9a4c:	460d      	mov	r5, r1
   b9a4e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9a52:	fb01 5312 	mls	r3, r1, r2, r5
   b9a56:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9a5a:	2b09      	cmp	r3, #9
   b9a5c:	bf94      	ite	ls
   b9a5e:	3330      	addls	r3, #48	; 0x30
   b9a60:	3337      	addhi	r3, #55	; 0x37
   b9a62:	b2db      	uxtb	r3, r3
  } while(n);
   b9a64:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9a66:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9a6a:	d9ef      	bls.n	b9a4c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9a6c:	4621      	mov	r1, r4
   b9a6e:	f7ff ffb9 	bl	b99e4 <_ZN5Print5writeEPKc>
}
   b9a72:	b00b      	add	sp, #44	; 0x2c
   b9a74:	bd30      	pop	{r4, r5, pc}

000b9a76 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a7a:	b086      	sub	sp, #24
   b9a7c:	af00      	add	r7, sp, #0
   b9a7e:	4605      	mov	r5, r0
   b9a80:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9a82:	1d38      	adds	r0, r7, #4
   b9a84:	2114      	movs	r1, #20
{
   b9a86:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9a88:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9a8a:	f7fd fb1b 	bl	b70c4 <vsnprintf>

    if (n<bufsize)
   b9a8e:	2813      	cmp	r0, #19
   b9a90:	d80e      	bhi.n	b9ab0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9a92:	1d39      	adds	r1, r7, #4
   b9a94:	4628      	mov	r0, r5
   b9a96:	f7ff ffa5 	bl	b99e4 <_ZN5Print5writeEPKc>
   b9a9a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9a9c:	b11e      	cbz	r6, b9aa6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9a9e:	4628      	mov	r0, r5
   b9aa0:	f7ff ffb5 	bl	b9a0e <_ZN5Print7printlnEv>
   b9aa4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9aa6:	4620      	mov	r0, r4
   b9aa8:	3718      	adds	r7, #24
   b9aaa:	46bd      	mov	sp, r7
   b9aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9ab0:	f100 0308 	add.w	r3, r0, #8
   b9ab4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9ab8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9aba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9abe:	4622      	mov	r2, r4
   b9ac0:	1c41      	adds	r1, r0, #1
   b9ac2:	683b      	ldr	r3, [r7, #0]
   b9ac4:	4668      	mov	r0, sp
   b9ac6:	f7fd fafd 	bl	b70c4 <vsnprintf>
  return write(str);
   b9aca:	4669      	mov	r1, sp
   b9acc:	4628      	mov	r0, r5
   b9ace:	f7ff ff89 	bl	b99e4 <_ZN5Print5writeEPKc>
   b9ad2:	4604      	mov	r4, r0
   b9ad4:	46c5      	mov	sp, r8
   b9ad6:	e7e1      	b.n	b9a9c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9ad8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9ad8:	4b01      	ldr	r3, [pc, #4]	; (b9ae0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9ada:	4a02      	ldr	r2, [pc, #8]	; (b9ae4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9adc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9ade:	4770      	bx	lr
   b9ae0:	2003e6f8 	.word	0x2003e6f8
   b9ae4:	000bb6fe 	.word	0x000bb6fe

000b9ae8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9ae8:	4b02      	ldr	r3, [pc, #8]	; (b9af4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9aea:	681a      	ldr	r2, [r3, #0]
   b9aec:	4b02      	ldr	r3, [pc, #8]	; (b9af8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9aee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9af0:	4770      	bx	lr
   b9af2:	bf00      	nop
   b9af4:	2003e604 	.word	0x2003e604
   b9af8:	2003e6fc 	.word	0x2003e6fc

000b9afc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9afc:	4b01      	ldr	r3, [pc, #4]	; (b9b04 <_GLOBAL__sub_I_RGB+0x8>)
   b9afe:	2200      	movs	r2, #0
   b9b00:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9b02:	4770      	bx	lr
   b9b04:	2003e700 	.word	0x2003e700

000b9b08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9b08:	4b01      	ldr	r3, [pc, #4]	; (b9b10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9b0a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9b0c:	4770      	bx	lr
   b9b0e:	bf00      	nop
   b9b10:	2003e608 	.word	0x2003e608

000b9b14 <serialEventRun>:
{
   b9b14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9b16:	4b0b      	ldr	r3, [pc, #44]	; (b9b44 <serialEventRun+0x30>)
   b9b18:	b143      	cbz	r3, b9b2c <serialEventRun+0x18>
   b9b1a:	f000 f96b 	bl	b9df4 <_Z16_fetch_usbserialv>
   b9b1e:	6803      	ldr	r3, [r0, #0]
   b9b20:	691b      	ldr	r3, [r3, #16]
   b9b22:	4798      	blx	r3
   b9b24:	2800      	cmp	r0, #0
   b9b26:	dd01      	ble.n	b9b2c <serialEventRun+0x18>
        serialEvent();
   b9b28:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9b2c:	4b06      	ldr	r3, [pc, #24]	; (b9b48 <serialEventRun+0x34>)
   b9b2e:	b143      	cbz	r3, b9b42 <serialEventRun+0x2e>
   b9b30:	f000 fc2c 	bl	ba38c <_Z22__fetch_global_Serial1v>
   b9b34:	6803      	ldr	r3, [r0, #0]
   b9b36:	691b      	ldr	r3, [r3, #16]
   b9b38:	4798      	blx	r3
   b9b3a:	2800      	cmp	r0, #0
   b9b3c:	dd01      	ble.n	b9b42 <serialEventRun+0x2e>
        serialEvent1();
   b9b3e:	f3af 8000 	nop.w
}
   b9b42:	bd08      	pop	{r3, pc}
	...

000b9b4c <_post_loop>:
{
   b9b4c:	b508      	push	{r3, lr}
	serialEventRun();
   b9b4e:	f7ff ffe1 	bl	b9b14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9b52:	f7fd f867 	bl	b6c24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9b56:	4b01      	ldr	r3, [pc, #4]	; (b9b5c <_post_loop+0x10>)
   b9b58:	6018      	str	r0, [r3, #0]
}
   b9b5a:	bd08      	pop	{r3, pc}
   b9b5c:	2003e758 	.word	0x2003e758

000b9b60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9b60:	4805      	ldr	r0, [pc, #20]	; (b9b78 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9b62:	4a06      	ldr	r2, [pc, #24]	; (b9b7c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9b64:	4906      	ldr	r1, [pc, #24]	; (b9b80 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9b66:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9b68:	1a12      	subs	r2, r2, r0
   b9b6a:	f001 f95b 	bl	bae24 <memcpy>
    __backup_sram_signature = signature;
   b9b6e:	4b05      	ldr	r3, [pc, #20]	; (b9b84 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9b70:	4a05      	ldr	r2, [pc, #20]	; (b9b88 <_Z33system_initialize_user_backup_ramv+0x28>)
   b9b72:	601a      	str	r2, [r3, #0]
}
   b9b74:	bd08      	pop	{r3, pc}
   b9b76:	bf00      	nop
   b9b78:	2003f400 	.word	0x2003f400
   b9b7c:	2003f404 	.word	0x2003f404
   b9b80:	000bbb0c 	.word	0x000bbb0c
   b9b84:	2003f400 	.word	0x2003f400
   b9b88:	9a271c1e 	.word	0x9a271c1e

000b9b8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9b8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9b8e:	2300      	movs	r3, #0
   b9b90:	9300      	str	r3, [sp, #0]
   b9b92:	461a      	mov	r2, r3
   b9b94:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9b98:	f7fd f9fa 	bl	b6f90 <system_ctrl_set_result>
}
   b9b9c:	b003      	add	sp, #12
   b9b9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9ba4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9ba4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9ba6:	8843      	ldrh	r3, [r0, #2]
   b9ba8:	2b0a      	cmp	r3, #10
   b9baa:	d008      	beq.n	b9bbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9bac:	2b50      	cmp	r3, #80	; 0x50
   b9bae:	d10b      	bne.n	b9bc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9bb0:	4b09      	ldr	r3, [pc, #36]	; (b9bd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9bb2:	681b      	ldr	r3, [r3, #0]
   b9bb4:	b14b      	cbz	r3, b9bca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9bb6:	b003      	add	sp, #12
   b9bb8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9bbc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9bbe:	f7ff ffe5 	bl	b9b8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9bc2:	b003      	add	sp, #12
   b9bc4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9bc8:	2300      	movs	r3, #0
   b9bca:	9300      	str	r3, [sp, #0]
   b9bcc:	461a      	mov	r2, r3
   b9bce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9bd2:	f7fd f9dd 	bl	b6f90 <system_ctrl_set_result>
}
   b9bd6:	e7f4      	b.n	b9bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9bd8:	2003e714 	.word	0x2003e714

000b9bdc <module_user_init_hook>:
{
   b9bdc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9bde:	4812      	ldr	r0, [pc, #72]	; (b9c28 <module_user_init_hook+0x4c>)
   b9be0:	2100      	movs	r1, #0
   b9be2:	f7fd fa8f 	bl	b7104 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9be6:	4b11      	ldr	r3, [pc, #68]	; (b9c2c <module_user_init_hook+0x50>)
   b9be8:	681a      	ldr	r2, [r3, #0]
   b9bea:	4b11      	ldr	r3, [pc, #68]	; (b9c30 <module_user_init_hook+0x54>)
   b9bec:	429a      	cmp	r2, r3
   b9bee:	4b11      	ldr	r3, [pc, #68]	; (b9c34 <module_user_init_hook+0x58>)
   b9bf0:	bf0c      	ite	eq
   b9bf2:	2201      	moveq	r2, #1
   b9bf4:	2200      	movne	r2, #0
   b9bf6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9bf8:	d001      	beq.n	b9bfe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9bfa:	f7ff ffb1 	bl	b9b60 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9bfe:	f7fc fff9 	bl	b6bf4 <HAL_RNG_GetRandomNumber>
   b9c02:	4604      	mov	r4, r0
    srand(seed);
   b9c04:	f001 f93e 	bl	bae84 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9c08:	4b0b      	ldr	r3, [pc, #44]	; (b9c38 <module_user_init_hook+0x5c>)
   b9c0a:	b113      	cbz	r3, b9c12 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9c0c:	4620      	mov	r0, r4
   b9c0e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9c12:	2100      	movs	r1, #0
   b9c14:	4808      	ldr	r0, [pc, #32]	; (b9c38 <module_user_init_hook+0x5c>)
   b9c16:	f7fd fa2d 	bl	b7074 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9c1e:	4807      	ldr	r0, [pc, #28]	; (b9c3c <module_user_init_hook+0x60>)
   b9c20:	2100      	movs	r1, #0
   b9c22:	f7fd b9ab 	b.w	b6f7c <system_ctrl_set_app_request_handler>
   b9c26:	bf00      	nop
   b9c28:	000b9b09 	.word	0x000b9b09
   b9c2c:	2003f400 	.word	0x2003f400
   b9c30:	9a271c1e 	.word	0x9a271c1e
   b9c34:	2003e710 	.word	0x2003e710
   b9c38:	00000000 	.word	0x00000000
   b9c3c:	000b9ba5 	.word	0x000b9ba5

000b9c40 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9c40:	4770      	bx	lr

000b9c42 <_ZN9IPAddressD0Ev>:
   b9c42:	b510      	push	{r4, lr}
   b9c44:	2118      	movs	r1, #24
   b9c46:	4604      	mov	r4, r0
   b9c48:	f7fa fa27 	bl	b409a <_ZdlPvj>
   b9c4c:	4620      	mov	r0, r4
   b9c4e:	bd10      	pop	{r4, pc}

000b9c50 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9c50:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9c52:	7d03      	ldrb	r3, [r0, #20]
   b9c54:	2b06      	cmp	r3, #6
{
   b9c56:	b08d      	sub	sp, #52	; 0x34
   b9c58:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9c5a:	f100 0704 	add.w	r7, r0, #4
   b9c5e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9c62:	d012      	beq.n	b9c8a <_ZNK9IPAddress7printToER5Print+0x3a>
   b9c64:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9c68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9c6c:	220a      	movs	r2, #10
   b9c6e:	4630      	mov	r0, r6
   b9c70:	f7ff fee3 	bl	b9a3a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9c74:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9c76:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9c78:	d019      	beq.n	b9cae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9c7a:	2c00      	cmp	r4, #0
   b9c7c:	d0f4      	beq.n	b9c68 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9c7e:	212e      	movs	r1, #46	; 0x2e
   b9c80:	4630      	mov	r0, r6
   b9c82:	f7ff fec1 	bl	b9a08 <_ZN5Print5printEc>
   b9c86:	4404      	add	r4, r0
   b9c88:	e7ee      	b.n	b9c68 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9c8a:	232f      	movs	r3, #47	; 0x2f
   b9c8c:	466a      	mov	r2, sp
   b9c8e:	4639      	mov	r1, r7
   b9c90:	200a      	movs	r0, #10
		buf[0] = 0;
   b9c92:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9c96:	f7fd f8b9 	bl	b6e0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9c9a:	4668      	mov	r0, sp
   b9c9c:	f001 f94f 	bl	baf3e <strlen>
   b9ca0:	6833      	ldr	r3, [r6, #0]
   b9ca2:	4602      	mov	r2, r0
   b9ca4:	68db      	ldr	r3, [r3, #12]
   b9ca6:	4669      	mov	r1, sp
   b9ca8:	4630      	mov	r0, r6
   b9caa:	4798      	blx	r3
   b9cac:	4604      	mov	r4, r0
    }
    return n;
}
   b9cae:	4620      	mov	r0, r4
   b9cb0:	b00d      	add	sp, #52	; 0x34
   b9cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9cb4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9cb4:	b510      	push	{r4, lr}
   b9cb6:	4b05      	ldr	r3, [pc, #20]	; (b9ccc <_ZN9IPAddressC1Ev+0x18>)
   b9cb8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9cba:	2211      	movs	r2, #17
   b9cbc:	f840 3b04 	str.w	r3, [r0], #4
   b9cc0:	2100      	movs	r1, #0
   b9cc2:	f001 f8d7 	bl	bae74 <memset>
}
   b9cc6:	4620      	mov	r0, r4
   b9cc8:	bd10      	pop	{r4, pc}
   b9cca:	bf00      	nop
   b9ccc:	000bb728 	.word	0x000bb728

000b9cd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9cd0:	4603      	mov	r3, r0
   b9cd2:	4a07      	ldr	r2, [pc, #28]	; (b9cf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9cd4:	b510      	push	{r4, lr}
   b9cd6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9cda:	f101 0210 	add.w	r2, r1, #16
   b9cde:	f851 4b04 	ldr.w	r4, [r1], #4
   b9ce2:	f843 4b04 	str.w	r4, [r3], #4
   b9ce6:	4291      	cmp	r1, r2
   b9ce8:	d1f9      	bne.n	b9cde <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9cea:	780a      	ldrb	r2, [r1, #0]
   b9cec:	701a      	strb	r2, [r3, #0]
}
   b9cee:	bd10      	pop	{r4, pc}
   b9cf0:	000bb728 	.word	0x000bb728

000b9cf4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9cf4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9cf6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9cfa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9cfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9d02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9d06:	2304      	movs	r3, #4
   b9d08:	6041      	str	r1, [r0, #4]
   b9d0a:	7503      	strb	r3, [r0, #20]
}
   b9d0c:	bd10      	pop	{r4, pc}
	...

000b9d10 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9d10:	b507      	push	{r0, r1, r2, lr}
   b9d12:	4b06      	ldr	r3, [pc, #24]	; (b9d2c <_ZN9IPAddressC1EPKh+0x1c>)
   b9d14:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9d16:	78cb      	ldrb	r3, [r1, #3]
   b9d18:	9300      	str	r3, [sp, #0]
   b9d1a:	788b      	ldrb	r3, [r1, #2]
   b9d1c:	784a      	ldrb	r2, [r1, #1]
   b9d1e:	7809      	ldrb	r1, [r1, #0]
   b9d20:	f7ff ffe8 	bl	b9cf4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9d24:	b003      	add	sp, #12
   b9d26:	f85d fb04 	ldr.w	pc, [sp], #4
   b9d2a:	bf00      	nop
   b9d2c:	000bb728 	.word	0x000bb728

000b9d30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9d30:	7441      	strb	r1, [r0, #17]
}
   b9d32:	4770      	bx	lr

000b9d34 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9d34:	4770      	bx	lr

000b9d36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9d36:	4770      	bx	lr

000b9d38 <_ZN9USBSerial4readEv>:
{
   b9d38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9d3a:	2100      	movs	r1, #0
   b9d3c:	7c00      	ldrb	r0, [r0, #16]
   b9d3e:	f7fd f8c5 	bl	b6ecc <HAL_USB_USART_Receive_Data>
}
   b9d42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d46:	bd08      	pop	{r3, pc}

000b9d48 <_ZN9USBSerial4peekEv>:
{
   b9d48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9d4a:	2101      	movs	r1, #1
   b9d4c:	7c00      	ldrb	r0, [r0, #16]
   b9d4e:	f7fd f8bd 	bl	b6ecc <HAL_USB_USART_Receive_Data>
}
   b9d52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d56:	bd08      	pop	{r3, pc}

000b9d58 <_ZN9USBSerial17availableForWriteEv>:
{
   b9d58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9d5a:	7c00      	ldrb	r0, [r0, #16]
   b9d5c:	f7fd f8ae 	bl	b6ebc <HAL_USB_USART_Available_Data_For_Write>
}
   b9d60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9d64:	bd08      	pop	{r3, pc}

000b9d66 <_ZN9USBSerial9availableEv>:
{
   b9d66:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9d68:	7c00      	ldrb	r0, [r0, #16]
   b9d6a:	f7fd f89f 	bl	b6eac <HAL_USB_USART_Available_Data>
}
   b9d6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9d72:	bd08      	pop	{r3, pc}

000b9d74 <_ZN9USBSerial5writeEh>:
{
   b9d74:	b513      	push	{r0, r1, r4, lr}
   b9d76:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9d78:	7c00      	ldrb	r0, [r0, #16]
{
   b9d7a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9d7c:	f7fd f89e 	bl	b6ebc <HAL_USB_USART_Available_Data_For_Write>
   b9d80:	2800      	cmp	r0, #0
   b9d82:	9901      	ldr	r1, [sp, #4]
   b9d84:	dc01      	bgt.n	b9d8a <_ZN9USBSerial5writeEh+0x16>
   b9d86:	7c60      	ldrb	r0, [r4, #17]
   b9d88:	b120      	cbz	r0, b9d94 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9d8a:	7c20      	ldrb	r0, [r4, #16]
   b9d8c:	f7fd f8a6 	bl	b6edc <HAL_USB_USART_Send_Data>
   b9d90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9d94:	b002      	add	sp, #8
   b9d96:	bd10      	pop	{r4, pc}

000b9d98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9d98:	7c00      	ldrb	r0, [r0, #16]
   b9d9a:	f7fd b8a7 	b.w	b6eec <HAL_USB_USART_Flush_Data>

000b9d9e <_ZN9USBSerialD0Ev>:
   b9d9e:	b510      	push	{r4, lr}
   b9da0:	2114      	movs	r1, #20
   b9da2:	4604      	mov	r4, r0
   b9da4:	f7fa f979 	bl	b409a <_ZdlPvj>
   b9da8:	4620      	mov	r0, r4
   b9daa:	bd10      	pop	{r4, pc}

000b9dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9dac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9db2:	4604      	mov	r4, r0
   b9db4:	4608      	mov	r0, r1
   b9db6:	2100      	movs	r1, #0
   b9db8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9dbc:	4b04      	ldr	r3, [pc, #16]	; (b9dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9dbe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9dc0:	2301      	movs	r3, #1
  _serial = serial;
   b9dc2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9dc4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9dc6:	4611      	mov	r1, r2
   b9dc8:	f7fd f860 	bl	b6e8c <HAL_USB_USART_Init>
}
   b9dcc:	4620      	mov	r0, r4
   b9dce:	bd10      	pop	{r4, pc}
   b9dd0:	000bb73c 	.word	0x000bb73c

000b9dd4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9dd4:	7c00      	ldrb	r0, [r0, #16]
   b9dd6:	2200      	movs	r2, #0
   b9dd8:	f7fd b860 	b.w	b6e9c <HAL_USB_USART_Begin>

000b9ddc <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b9ddc:	7c00      	ldrb	r0, [r0, #16]
   b9dde:	f7fd b88d 	b.w	b6efc <HAL_USB_USART_Is_Connected>

000b9de2 <_Z19acquireSerialBufferv>:
{
   b9de2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9de4:	2214      	movs	r2, #20
{
   b9de6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9de8:	2100      	movs	r1, #0
   b9dea:	f001 f843 	bl	bae74 <memset>
}
   b9dee:	4620      	mov	r0, r4
   b9df0:	bd10      	pop	{r4, pc}
	...

000b9df4 <_Z16_fetch_usbserialv>:
{
   b9df4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9df6:	4c0f      	ldr	r4, [pc, #60]	; (b9e34 <_Z16_fetch_usbserialv+0x40>)
{
   b9df8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9dfa:	a803      	add	r0, sp, #12
   b9dfc:	f7ff fff1 	bl	b9de2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e00:	7821      	ldrb	r1, [r4, #0]
   b9e02:	f3bf 8f5b 	dmb	ish
   b9e06:	f011 0101 	ands.w	r1, r1, #1
   b9e0a:	d10f      	bne.n	b9e2c <_Z16_fetch_usbserialv+0x38>
   b9e0c:	4620      	mov	r0, r4
   b9e0e:	9101      	str	r1, [sp, #4]
   b9e10:	f7fa f945 	bl	b409e <__cxa_guard_acquire>
   b9e14:	9901      	ldr	r1, [sp, #4]
   b9e16:	b148      	cbz	r0, b9e2c <_Z16_fetch_usbserialv+0x38>
   b9e18:	aa03      	add	r2, sp, #12
   b9e1a:	4807      	ldr	r0, [pc, #28]	; (b9e38 <_Z16_fetch_usbserialv+0x44>)
   b9e1c:	f7ff ffc6 	bl	b9dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9e20:	4620      	mov	r0, r4
   b9e22:	f7fa f941 	bl	b40a8 <__cxa_guard_release>
   b9e26:	4805      	ldr	r0, [pc, #20]	; (b9e3c <_Z16_fetch_usbserialv+0x48>)
   b9e28:	f000 ffde 	bl	bade8 <atexit>
	return _usbserial;
}
   b9e2c:	4802      	ldr	r0, [pc, #8]	; (b9e38 <_Z16_fetch_usbserialv+0x44>)
   b9e2e:	b008      	add	sp, #32
   b9e30:	bd10      	pop	{r4, pc}
   b9e32:	bf00      	nop
   b9e34:	2003e718 	.word	0x2003e718
   b9e38:	2003e71c 	.word	0x2003e71c
   b9e3c:	000b9d35 	.word	0x000b9d35

000b9e40 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9e40:	4770      	bx	lr

000b9e42 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9e42:	7441      	strb	r1, [r0, #17]
}
   b9e44:	4770      	bx	lr

000b9e46 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9e46:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9e48:	7c00      	ldrb	r0, [r0, #16]
   b9e4a:	f7fd f80f 	bl	b6e6c <hal_usart_available_data_for_write>
}
   b9e4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9e52:	bd08      	pop	{r3, pc}

000b9e54 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9e54:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9e56:	7c00      	ldrb	r0, [r0, #16]
   b9e58:	f7fc ffe8 	bl	b6e2c <hal_usart_available>
}
   b9e5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9e60:	bd08      	pop	{r3, pc}

000b9e62 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9e62:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9e64:	7c00      	ldrb	r0, [r0, #16]
   b9e66:	f7fc fff1 	bl	b6e4c <hal_usart_peek>
}
   b9e6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9e6e:	bd08      	pop	{r3, pc}

000b9e70 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9e70:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9e72:	7c00      	ldrb	r0, [r0, #16]
   b9e74:	f7fc ffe2 	bl	b6e3c <hal_usart_read>
}
   b9e78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9e7c:	bd08      	pop	{r3, pc}

000b9e7e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9e7e:	7c00      	ldrb	r0, [r0, #16]
   b9e80:	f7fc bfec 	b.w	b6e5c <hal_usart_flush>

000b9e84 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9e86:	7c45      	ldrb	r5, [r0, #17]
{
   b9e88:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9e8a:	b12d      	cbz	r5, b9e98 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9e8c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9e8e:	b003      	add	sp, #12
   b9e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9e94:	f7fc bfc2 	b.w	b6e1c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9e98:	7c00      	ldrb	r0, [r0, #16]
   b9e9a:	9101      	str	r1, [sp, #4]
   b9e9c:	f7fc ffe6 	bl	b6e6c <hal_usart_available_data_for_write>
   b9ea0:	2800      	cmp	r0, #0
   b9ea2:	9901      	ldr	r1, [sp, #4]
   b9ea4:	dcf2      	bgt.n	b9e8c <_ZN11USARTSerial5writeEh+0x8>
}
   b9ea6:	4628      	mov	r0, r5
   b9ea8:	b003      	add	sp, #12
   b9eaa:	bd30      	pop	{r4, r5, pc}

000b9eac <_ZN11USARTSerialD0Ev>:
   b9eac:	b510      	push	{r4, lr}
   b9eae:	2114      	movs	r1, #20
   b9eb0:	4604      	mov	r4, r0
   b9eb2:	f7fa f8f2 	bl	b409a <_ZdlPvj>
   b9eb6:	4620      	mov	r0, r4
   b9eb8:	bd10      	pop	{r4, pc}
	...

000b9ebc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9ebc:	b510      	push	{r4, lr}
   b9ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9ec2:	4604      	mov	r4, r0
   b9ec4:	4608      	mov	r0, r1
   b9ec6:	4611      	mov	r1, r2
   b9ec8:	2200      	movs	r2, #0
   b9eca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9ece:	4b04      	ldr	r3, [pc, #16]	; (b9ee0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9ed0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9ed2:	2301      	movs	r3, #1
  _serial = serial;
   b9ed4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9ed6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9ed8:	f7fc ffd0 	bl	b6e7c <hal_usart_init_ex>
}
   b9edc:	4620      	mov	r0, r4
   b9ede:	bd10      	pop	{r4, pc}
   b9ee0:	000bb76c 	.word	0x000bb76c

000b9ee4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9ee4:	b510      	push	{r4, lr}
      if (_M_empty())
   b9ee6:	6883      	ldr	r3, [r0, #8]
   b9ee8:	4604      	mov	r4, r0
   b9eea:	b90b      	cbnz	r3, b9ef0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9eec:	f000 fb29 	bl	ba542 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9ef0:	68c3      	ldr	r3, [r0, #12]
   b9ef2:	4798      	blx	r3
      if (_M_manager)
   b9ef4:	68a3      	ldr	r3, [r4, #8]
   b9ef6:	b11b      	cbz	r3, b9f00 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9ef8:	2203      	movs	r2, #3
   b9efa:	4621      	mov	r1, r4
   b9efc:	4620      	mov	r0, r4
   b9efe:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b9f00:	4620      	mov	r0, r4
   b9f02:	2110      	movs	r1, #16
}
   b9f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9f08:	f7fa b8c7 	b.w	b409a <_ZdlPvj>

000b9f0c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9f0c:	2200      	movs	r2, #0
   b9f0e:	6840      	ldr	r0, [r0, #4]
   b9f10:	4611      	mov	r1, r2
   b9f12:	f7fd b85f 	b.w	b6fd4 <network_ready>

000b9f16 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9f16:	2200      	movs	r2, #0
   b9f18:	6840      	ldr	r0, [r0, #4]
   b9f1a:	4611      	mov	r1, r2
   b9f1c:	f7fd b87a 	b.w	b7014 <network_listening>

000b9f20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9f20:	2200      	movs	r2, #0
   b9f22:	6840      	ldr	r0, [r0, #4]
   b9f24:	4611      	mov	r1, r2
   b9f26:	f7fd b885 	b.w	b7034 <network_get_listen_timeout>

000b9f2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9f2a:	6840      	ldr	r0, [r0, #4]
   b9f2c:	2200      	movs	r2, #0
   b9f2e:	f7fd b879 	b.w	b7024 <network_set_listen_timeout>

000b9f32 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9f32:	6840      	ldr	r0, [r0, #4]
   b9f34:	2200      	movs	r2, #0
   b9f36:	f081 0101 	eor.w	r1, r1, #1
   b9f3a:	f7fd b863 	b.w	b7004 <network_listen>

000b9f3e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9f3e:	2300      	movs	r3, #0
   b9f40:	6840      	ldr	r0, [r0, #4]
   b9f42:	461a      	mov	r2, r3
   b9f44:	4619      	mov	r1, r3
   b9f46:	f7fd b855 	b.w	b6ff4 <network_off>

000b9f4a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9f4a:	2300      	movs	r3, #0
   b9f4c:	6840      	ldr	r0, [r0, #4]
   b9f4e:	461a      	mov	r2, r3
   b9f50:	4619      	mov	r1, r3
   b9f52:	f7fd b847 	b.w	b6fe4 <network_on>

000b9f56 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9f56:	2200      	movs	r2, #0
   b9f58:	6840      	ldr	r0, [r0, #4]
   b9f5a:	4611      	mov	r1, r2
   b9f5c:	f7fd b82a 	b.w	b6fb4 <network_connecting>

000b9f60 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9f60:	6840      	ldr	r0, [r0, #4]
   b9f62:	2200      	movs	r2, #0
   b9f64:	2102      	movs	r1, #2
   b9f66:	f7fd b82d 	b.w	b6fc4 <network_disconnect>

000b9f6a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9f6a:	2300      	movs	r3, #0
   b9f6c:	6840      	ldr	r0, [r0, #4]
   b9f6e:	461a      	mov	r2, r3
   b9f70:	f7fd b818 	b.w	b6fa4 <network_connect>

000b9f74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9f74:	4b02      	ldr	r3, [pc, #8]	; (b9f80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9f76:	2204      	movs	r2, #4
   b9f78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9f7a:	4a02      	ldr	r2, [pc, #8]	; (b9f84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9f7c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9f7e:	4770      	bx	lr
   b9f80:	2003e730 	.word	0x2003e730
   b9f84:	000bb79c 	.word	0x000bb79c

000b9f88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9f88:	2300      	movs	r3, #0
   b9f8a:	6840      	ldr	r0, [r0, #4]
   b9f8c:	461a      	mov	r2, r3
   b9f8e:	f7fd b809 	b.w	b6fa4 <network_connect>

000b9f92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9f92:	6840      	ldr	r0, [r0, #4]
   b9f94:	2200      	movs	r2, #0
   b9f96:	2102      	movs	r1, #2
   b9f98:	f7fd b814 	b.w	b6fc4 <network_disconnect>

000b9f9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9f9c:	2200      	movs	r2, #0
   b9f9e:	6840      	ldr	r0, [r0, #4]
   b9fa0:	4611      	mov	r1, r2
   b9fa2:	f7fd b807 	b.w	b6fb4 <network_connecting>

000b9fa6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9fa6:	2200      	movs	r2, #0
   b9fa8:	6840      	ldr	r0, [r0, #4]
   b9faa:	4611      	mov	r1, r2
   b9fac:	f7fd b812 	b.w	b6fd4 <network_ready>

000b9fb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9fb0:	2300      	movs	r3, #0
   b9fb2:	6840      	ldr	r0, [r0, #4]
   b9fb4:	461a      	mov	r2, r3
   b9fb6:	4619      	mov	r1, r3
   b9fb8:	f7fd b814 	b.w	b6fe4 <network_on>

000b9fbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9fbc:	2300      	movs	r3, #0
   b9fbe:	6840      	ldr	r0, [r0, #4]
   b9fc0:	461a      	mov	r2, r3
   b9fc2:	4619      	mov	r1, r3
   b9fc4:	f7fd b816 	b.w	b6ff4 <network_off>

000b9fc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9fc8:	6840      	ldr	r0, [r0, #4]
   b9fca:	2100      	movs	r1, #0
   b9fcc:	f7fd b83a 	b.w	b7044 <network_is_on>

000b9fd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9fd0:	6840      	ldr	r0, [r0, #4]
   b9fd2:	2100      	movs	r1, #0
   b9fd4:	f7fd b83e 	b.w	b7054 <network_is_off>

000b9fd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9fd8:	6840      	ldr	r0, [r0, #4]
   b9fda:	2200      	movs	r2, #0
   b9fdc:	f081 0101 	eor.w	r1, r1, #1
   b9fe0:	f7fd b810 	b.w	b7004 <network_listen>

000b9fe4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9fe4:	6840      	ldr	r0, [r0, #4]
   b9fe6:	2200      	movs	r2, #0
   b9fe8:	f7fd b81c 	b.w	b7024 <network_set_listen_timeout>

000b9fec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9fec:	2200      	movs	r2, #0
   b9fee:	6840      	ldr	r0, [r0, #4]
   b9ff0:	4611      	mov	r1, r2
   b9ff2:	f7fd b81f 	b.w	b7034 <network_get_listen_timeout>

000b9ff6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9ff6:	2200      	movs	r2, #0
   b9ff8:	6840      	ldr	r0, [r0, #4]
   b9ffa:	4611      	mov	r1, r2
   b9ffc:	f7fd b80a 	b.w	b7014 <network_listening>

000ba000 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba004:	b095      	sub	sp, #84	; 0x54
   ba006:	4614      	mov	r4, r2
   ba008:	460d      	mov	r5, r1
   ba00a:	4607      	mov	r7, r0
    IPAddress addr;
   ba00c:	f7ff fe52 	bl	b9cb4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba010:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba012:	221c      	movs	r2, #28
   ba014:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba016:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba018:	f000 ff2c 	bl	bae74 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba01c:	2340      	movs	r3, #64	; 0x40
   ba01e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba020:	4620      	mov	r0, r4
   ba022:	466b      	mov	r3, sp
   ba024:	aa0c      	add	r2, sp, #48	; 0x30
   ba026:	2100      	movs	r1, #0
   ba028:	f7fc fddc 	bl	b6be4 <netdb_getaddrinfo>
    if (!r) {
   ba02c:	4604      	mov	r4, r0
   ba02e:	2800      	cmp	r0, #0
   ba030:	d14b      	bne.n	ba0ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba032:	4602      	mov	r2, r0
   ba034:	2101      	movs	r1, #1
   ba036:	6868      	ldr	r0, [r5, #4]
   ba038:	f7fc ffcc 	bl	b6fd4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba03c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba03e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba040:	4622      	mov	r2, r4
   ba042:	6868      	ldr	r0, [r5, #4]
   ba044:	f7fc ffc6 	bl	b6fd4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba048:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba04a:	4681      	mov	r9, r0
        bool ok = false;
   ba04c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba04e:	2e00      	cmp	r6, #0
   ba050:	d03b      	beq.n	ba0ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba052:	2900      	cmp	r1, #0
   ba054:	d139      	bne.n	ba0ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba056:	6873      	ldr	r3, [r6, #4]
   ba058:	2b02      	cmp	r3, #2
   ba05a:	d003      	beq.n	ba064 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba05c:	2b0a      	cmp	r3, #10
   ba05e:	d011      	beq.n	ba084 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba060:	69f6      	ldr	r6, [r6, #28]
   ba062:	e7f4      	b.n	ba04e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba064:	f1b8 0f00 	cmp.w	r8, #0
   ba068:	d0fa      	beq.n	ba060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba06a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba06c:	a806      	add	r0, sp, #24
   ba06e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba070:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba072:	f7ff fe4d 	bl	b9d10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba078:	1d3c      	adds	r4, r7, #4
   ba07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba07c:	682b      	ldr	r3, [r5, #0]
   ba07e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba080:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba082:	e7ed      	b.n	ba060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba084:	f1b9 0f00 	cmp.w	r9, #0
   ba088:	d0ea      	beq.n	ba060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba08a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba08c:	2210      	movs	r2, #16
   ba08e:	a801      	add	r0, sp, #4
   ba090:	f000 fef0 	bl	bae74 <memset>
                    a.v = 6;
   ba094:	2306      	movs	r3, #6
   ba096:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba09a:	ad01      	add	r5, sp, #4
   ba09c:	f104 0308 	add.w	r3, r4, #8
   ba0a0:	3418      	adds	r4, #24
   ba0a2:	6818      	ldr	r0, [r3, #0]
   ba0a4:	6859      	ldr	r1, [r3, #4]
   ba0a6:	462a      	mov	r2, r5
   ba0a8:	c203      	stmia	r2!, {r0, r1}
   ba0aa:	3308      	adds	r3, #8
   ba0ac:	42a3      	cmp	r3, r4
   ba0ae:	4615      	mov	r5, r2
   ba0b0:	d1f7      	bne.n	ba0a2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba0b2:	a901      	add	r1, sp, #4
   ba0b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba0b6:	ad07      	add	r5, sp, #28
   ba0b8:	f7ff fe0a 	bl	b9cd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba0bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba0be:	1d3c      	adds	r4, r7, #4
   ba0c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba0c2:	682b      	ldr	r3, [r5, #0]
   ba0c4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba0c6:	4649      	mov	r1, r9
   ba0c8:	e7ca      	b.n	ba060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba0ca:	9800      	ldr	r0, [sp, #0]
   ba0cc:	f7fc fd82 	bl	b6bd4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba0d0:	4638      	mov	r0, r7
   ba0d2:	b015      	add	sp, #84	; 0x54
   ba0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba0d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba0d8:	4b02      	ldr	r3, [pc, #8]	; (ba0e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba0da:	4a03      	ldr	r2, [pc, #12]	; (ba0e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba0dc:	601a      	str	r2, [r3, #0]
   ba0de:	2200      	movs	r2, #0
   ba0e0:	605a      	str	r2, [r3, #4]

} // spark
   ba0e2:	4770      	bx	lr
   ba0e4:	2003e738 	.word	0x2003e738
   ba0e8:	000bb7d8 	.word	0x000bb7d8

000ba0ec <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   ba0ec:	b40e      	push	{r1, r2, r3}
   ba0ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba0f0:	b088      	sub	sp, #32
   ba0f2:	af00      	add	r7, sp, #0
   ba0f4:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ba0f8:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   ba0fa:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ba0fe:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   ba100:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ba102:	462b      	mov	r3, r5
   ba104:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   ba106:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ba108:	f7fc ffdc 	bl	b70c4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   ba10c:	280f      	cmp	r0, #15
   ba10e:	687a      	ldr	r2, [r7, #4]
   ba110:	d91a      	bls.n	ba148 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   ba112:	f100 0308 	add.w	r3, r0, #8
   ba116:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   ba11a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   ba11c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   ba120:	1c41      	adds	r1, r0, #1
   ba122:	462b      	mov	r3, r5
   ba124:	4668      	mov	r0, sp
        va_start(args, fmt);
   ba126:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   ba128:	f7fc ffcc 	bl	b70c4 <vsnprintf>
        if (n > 0) {
   ba12c:	1e02      	subs	r2, r0, #0
   ba12e:	dd04      	ble.n	ba13a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   ba130:	6823      	ldr	r3, [r4, #0]
   ba132:	4669      	mov	r1, sp
   ba134:	689b      	ldr	r3, [r3, #8]
   ba136:	4620      	mov	r0, r4
   ba138:	4798      	blx	r3
   ba13a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   ba13c:	3720      	adds	r7, #32
   ba13e:	46bd      	mov	sp, r7
   ba140:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba144:	b003      	add	sp, #12
   ba146:	4770      	bx	lr
    } else if (n > 0) {
   ba148:	2800      	cmp	r0, #0
   ba14a:	d0f7      	beq.n	ba13c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   ba14c:	6823      	ldr	r3, [r4, #0]
   ba14e:	4602      	mov	r2, r0
   ba150:	689b      	ldr	r3, [r3, #8]
   ba152:	f107 0110 	add.w	r1, r7, #16
   ba156:	4620      	mov	r0, r4
   ba158:	4798      	blx	r3
}
   ba15a:	e7ef      	b.n	ba13c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000ba15c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   ba15c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   ba15e:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   ba160:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   ba164:	689b      	ldr	r3, [r3, #8]
   ba166:	2201      	movs	r2, #1
   ba168:	f10d 0107 	add.w	r1, sp, #7
   ba16c:	4798      	blx	r3
}
   ba16e:	b003      	add	sp, #12
   ba170:	f85d fb04 	ldr.w	pc, [sp], #4

000ba174 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   ba174:	b510      	push	{r4, lr}
    write('}');
   ba176:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   ba178:	4604      	mov	r4, r0
    write('}');
   ba17a:	f7ff ffef 	bl	ba15c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   ba17e:	2301      	movs	r3, #1
   ba180:	7123      	strb	r3, [r4, #4]
}
   ba182:	4620      	mov	r0, r4
   ba184:	bd10      	pop	{r4, pc}

000ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   ba186:	b508      	push	{r3, lr}
    switch (state_) {
   ba188:	7903      	ldrb	r3, [r0, #4]
   ba18a:	2b01      	cmp	r3, #1
   ba18c:	d002      	beq.n	ba194 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   ba18e:	2b02      	cmp	r3, #2
   ba190:	d004      	beq.n	ba19c <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   ba192:	bd08      	pop	{r3, pc}
        write(',');
   ba194:	212c      	movs	r1, #44	; 0x2c
        write(':');
   ba196:	f7ff ffe1 	bl	ba15c <_ZN5spark10JSONWriter5writeEc>
}
   ba19a:	e7fa      	b.n	ba192 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   ba19c:	213a      	movs	r1, #58	; 0x3a
   ba19e:	e7fa      	b.n	ba196 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000ba1a0 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   ba1a0:	b510      	push	{r4, lr}
   ba1a2:	4604      	mov	r4, r0
    writeSeparator();
   ba1a4:	f7ff ffef 	bl	ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   ba1a8:	4620      	mov	r0, r4
   ba1aa:	217b      	movs	r1, #123	; 0x7b
   ba1ac:	f7ff ffd6 	bl	ba15c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   ba1b0:	2300      	movs	r3, #0
   ba1b2:	7123      	strb	r3, [r4, #4]
}
   ba1b4:	4620      	mov	r0, r4
   ba1b6:	bd10      	pop	{r4, pc}

000ba1b8 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   ba1b8:	b538      	push	{r3, r4, r5, lr}
   ba1ba:	4604      	mov	r4, r0
   ba1bc:	460d      	mov	r5, r1
    writeSeparator();
   ba1be:	f7ff ffe2 	bl	ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   ba1c2:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   ba1c4:	689b      	ldr	r3, [r3, #8]
    if (val) {
   ba1c6:	b13d      	cbz	r5, ba1d8 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   ba1c8:	4905      	ldr	r1, [pc, #20]	; (ba1e0 <_ZN5spark10JSONWriter5valueEb+0x28>)
   ba1ca:	2204      	movs	r2, #4
        write("false", 5);
   ba1cc:	4620      	mov	r0, r4
   ba1ce:	4798      	blx	r3
    state_ = NEXT;
   ba1d0:	2301      	movs	r3, #1
   ba1d2:	7123      	strb	r3, [r4, #4]
}
   ba1d4:	4620      	mov	r0, r4
   ba1d6:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   ba1d8:	4902      	ldr	r1, [pc, #8]	; (ba1e4 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   ba1da:	2205      	movs	r2, #5
   ba1dc:	e7f6      	b.n	ba1cc <_ZN5spark10JSONWriter5valueEb+0x14>
   ba1de:	bf00      	nop
   ba1e0:	000bb810 	.word	0x000bb810
   ba1e4:	000bb481 	.word	0x000bb481

000ba1e8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   ba1e8:	b513      	push	{r0, r1, r4, lr}
   ba1ea:	4604      	mov	r4, r0
   ba1ec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   ba1ee:	f7ff ffca 	bl	ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   ba1f2:	6823      	ldr	r3, [r4, #0]
   ba1f4:	9a01      	ldr	r2, [sp, #4]
   ba1f6:	68db      	ldr	r3, [r3, #12]
   ba1f8:	4903      	ldr	r1, [pc, #12]	; (ba208 <_ZN5spark10JSONWriter5valueEi+0x20>)
   ba1fa:	4620      	mov	r0, r4
   ba1fc:	4798      	blx	r3
    state_ = NEXT;
   ba1fe:	2301      	movs	r3, #1
}
   ba200:	4620      	mov	r0, r4
    state_ = NEXT;
   ba202:	7123      	strb	r3, [r4, #4]
}
   ba204:	b002      	add	sp, #8
   ba206:	bd10      	pop	{r4, pc}
   ba208:	000bb274 	.word	0x000bb274

000ba20c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   ba20c:	b513      	push	{r0, r1, r4, lr}
   ba20e:	4604      	mov	r4, r0
   ba210:	9101      	str	r1, [sp, #4]
    writeSeparator();
   ba212:	f7ff ffb8 	bl	ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   ba216:	6823      	ldr	r3, [r4, #0]
   ba218:	9a01      	ldr	r2, [sp, #4]
   ba21a:	68db      	ldr	r3, [r3, #12]
   ba21c:	4903      	ldr	r1, [pc, #12]	; (ba22c <_ZN5spark10JSONWriter5valueEj+0x20>)
   ba21e:	4620      	mov	r0, r4
   ba220:	4798      	blx	r3
    state_ = NEXT;
   ba222:	2301      	movs	r3, #1
}
   ba224:	4620      	mov	r0, r4
    state_ = NEXT;
   ba226:	7123      	strb	r3, [r4, #4]
}
   ba228:	b002      	add	sp, #8
   ba22a:	bd10      	pop	{r4, pc}
   ba22c:	000bb815 	.word	0x000bb815

000ba230 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   ba230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba232:	4604      	mov	r4, r0
   ba234:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   ba238:	f7ff ffa5 	bl	ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   ba23c:	6823      	ldr	r3, [r4, #0]
   ba23e:	4905      	ldr	r1, [pc, #20]	; (ba254 <_ZN5spark10JSONWriter5valueEd+0x24>)
   ba240:	68dd      	ldr	r5, [r3, #12]
   ba242:	4620      	mov	r0, r4
   ba244:	463b      	mov	r3, r7
   ba246:	4632      	mov	r2, r6
   ba248:	47a8      	blx	r5
    state_ = NEXT;
   ba24a:	2301      	movs	r3, #1
   ba24c:	7123      	strb	r3, [r4, #4]
}
   ba24e:	4620      	mov	r0, r4
   ba250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba252:	bf00      	nop
   ba254:	000bb818 	.word	0x000bb818

000ba258 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   ba258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba25c:	460d      	mov	r5, r1
    write('"');
   ba25e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   ba260:	4690      	mov	r8, r2
   ba262:	4604      	mov	r4, r0
    write('"');
   ba264:	f7ff ff7a 	bl	ba15c <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   ba268:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba310 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   ba26c:	44a8      	add	r8, r5
    const char *s = str;
   ba26e:	462f      	mov	r7, r5
    while (s != end) {
   ba270:	4547      	cmp	r7, r8
   ba272:	46ba      	mov	sl, r7
   ba274:	d03d      	beq.n	ba2f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   ba276:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   ba27a:	2e22      	cmp	r6, #34	; 0x22
   ba27c:	d006      	beq.n	ba28c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   ba27e:	2e5c      	cmp	r6, #92	; 0x5c
   ba280:	d004      	beq.n	ba28c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   ba282:	4630      	mov	r0, r6
   ba284:	f000 fdb6 	bl	badf4 <isprint>
   ba288:	2800      	cmp	r0, #0
   ba28a:	d1f1      	bne.n	ba270 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   ba28c:	6823      	ldr	r3, [r4, #0]
   ba28e:	ebaa 0205 	sub.w	r2, sl, r5
   ba292:	689b      	ldr	r3, [r3, #8]
   ba294:	4629      	mov	r1, r5
   ba296:	4620      	mov	r0, r4
   ba298:	4798      	blx	r3
            write('\\');
   ba29a:	215c      	movs	r1, #92	; 0x5c
   ba29c:	4620      	mov	r0, r4
   ba29e:	f7ff ff5d 	bl	ba15c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   ba2a2:	2e0d      	cmp	r6, #13
   ba2a4:	d80a      	bhi.n	ba2bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   ba2a6:	2e07      	cmp	r6, #7
   ba2a8:	d91c      	bls.n	ba2e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   ba2aa:	f1a6 0308 	sub.w	r3, r6, #8
   ba2ae:	2b05      	cmp	r3, #5
   ba2b0:	d818      	bhi.n	ba2e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   ba2b2:	e8df f003 	tbb	[pc, r3]
   ba2b6:	0f0d      	.short	0x0f0d
   ba2b8:	15131711 	.word	0x15131711
   ba2bc:	2e22      	cmp	r6, #34	; 0x22
   ba2be:	d001      	beq.n	ba2c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   ba2c0:	2e5c      	cmp	r6, #92	; 0x5c
   ba2c2:	d10f      	bne.n	ba2e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   ba2c4:	4631      	mov	r1, r6
                write('b');
   ba2c6:	4620      	mov	r0, r4
   ba2c8:	f7ff ff48 	bl	ba15c <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   ba2cc:	463d      	mov	r5, r7
    while (s != end) {
   ba2ce:	e7cf      	b.n	ba270 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   ba2d0:	2162      	movs	r1, #98	; 0x62
   ba2d2:	e7f8      	b.n	ba2c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   ba2d4:	2174      	movs	r1, #116	; 0x74
   ba2d6:	e7f6      	b.n	ba2c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   ba2d8:	216e      	movs	r1, #110	; 0x6e
   ba2da:	e7f4      	b.n	ba2c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   ba2dc:	2166      	movs	r1, #102	; 0x66
   ba2de:	e7f2      	b.n	ba2c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   ba2e0:	2172      	movs	r1, #114	; 0x72
   ba2e2:	e7f0      	b.n	ba2c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   ba2e4:	6823      	ldr	r3, [r4, #0]
   ba2e6:	4632      	mov	r2, r6
   ba2e8:	68db      	ldr	r3, [r3, #12]
   ba2ea:	4649      	mov	r1, r9
   ba2ec:	4620      	mov	r0, r4
   ba2ee:	4798      	blx	r3
                break;
   ba2f0:	e7ec      	b.n	ba2cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   ba2f2:	42bd      	cmp	r5, r7
   ba2f4:	d005      	beq.n	ba302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   ba2f6:	6823      	ldr	r3, [r4, #0]
   ba2f8:	1b7a      	subs	r2, r7, r5
   ba2fa:	689b      	ldr	r3, [r3, #8]
   ba2fc:	4629      	mov	r1, r5
   ba2fe:	4620      	mov	r0, r4
   ba300:	4798      	blx	r3
    }
    write('"');
   ba302:	2122      	movs	r1, #34	; 0x22
   ba304:	4620      	mov	r0, r4
   ba306:	f7ff ff29 	bl	ba15c <_ZN5spark10JSONWriter5writeEc>
}
   ba30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba30e:	bf00      	nop
   ba310:	000bb81b 	.word	0x000bb81b

000ba314 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   ba314:	b513      	push	{r0, r1, r4, lr}
   ba316:	4604      	mov	r4, r0
   ba318:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   ba31c:	f7ff ff33 	bl	ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   ba320:	4620      	mov	r0, r4
   ba322:	e9dd 2100 	ldrd	r2, r1, [sp]
   ba326:	f7ff ff97 	bl	ba258 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   ba32a:	2302      	movs	r3, #2
}
   ba32c:	4620      	mov	r0, r4
    state_ = VALUE;
   ba32e:	7123      	strb	r3, [r4, #4]
}
   ba330:	b002      	add	sp, #8
   ba332:	bd10      	pop	{r4, pc}

000ba334 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   ba334:	b513      	push	{r0, r1, r4, lr}
   ba336:	4604      	mov	r4, r0
   ba338:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   ba33c:	f7ff ff23 	bl	ba186 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   ba340:	4620      	mov	r0, r4
   ba342:	e9dd 2100 	ldrd	r2, r1, [sp]
   ba346:	f7ff ff87 	bl	ba258 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   ba34a:	2301      	movs	r3, #1
}
   ba34c:	4620      	mov	r0, r4
    state_ = NEXT;
   ba34e:	7123      	strb	r3, [r4, #4]
}
   ba350:	b002      	add	sp, #8
   ba352:	bd10      	pop	{r4, pc}

000ba354 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba354:	4770      	bx	lr
	...

000ba358 <_Z20acquireSerial1Bufferv>:
{
   ba358:	b538      	push	{r3, r4, r5, lr}
   ba35a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba35c:	2514      	movs	r5, #20
   ba35e:	462a      	mov	r2, r5
   ba360:	2100      	movs	r1, #0
   ba362:	f000 fd87 	bl	bae74 <memset>
   ba366:	8025      	strh	r5, [r4, #0]
   ba368:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba36a:	4907      	ldr	r1, [pc, #28]	; (ba388 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba36c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba36e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba370:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba372:	f000 f831 	bl	ba3d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba376:	4904      	ldr	r1, [pc, #16]	; (ba388 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba378:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba37a:	4628      	mov	r0, r5
   ba37c:	f000 f82c 	bl	ba3d8 <_ZnajRKSt9nothrow_t>
    };
   ba380:	60e0      	str	r0, [r4, #12]
}
   ba382:	4620      	mov	r0, r4
   ba384:	bd38      	pop	{r3, r4, r5, pc}
   ba386:	bf00      	nop
   ba388:	000bb821 	.word	0x000bb821

000ba38c <_Z22__fetch_global_Serial1v>:
{
   ba38c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba38e:	4d0e      	ldr	r5, [pc, #56]	; (ba3c8 <_Z22__fetch_global_Serial1v+0x3c>)
   ba390:	7829      	ldrb	r1, [r5, #0]
   ba392:	f3bf 8f5b 	dmb	ish
   ba396:	f011 0401 	ands.w	r4, r1, #1
{
   ba39a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba39c:	d111      	bne.n	ba3c2 <_Z22__fetch_global_Serial1v+0x36>
   ba39e:	4628      	mov	r0, r5
   ba3a0:	f7f9 fe7d 	bl	b409e <__cxa_guard_acquire>
   ba3a4:	b168      	cbz	r0, ba3c2 <_Z22__fetch_global_Serial1v+0x36>
   ba3a6:	a801      	add	r0, sp, #4
   ba3a8:	f7ff ffd6 	bl	ba358 <_Z20acquireSerial1Bufferv>
   ba3ac:	aa01      	add	r2, sp, #4
   ba3ae:	4621      	mov	r1, r4
   ba3b0:	4806      	ldr	r0, [pc, #24]	; (ba3cc <_Z22__fetch_global_Serial1v+0x40>)
   ba3b2:	f7ff fd83 	bl	b9ebc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba3b6:	4628      	mov	r0, r5
   ba3b8:	f7f9 fe76 	bl	b40a8 <__cxa_guard_release>
   ba3bc:	4804      	ldr	r0, [pc, #16]	; (ba3d0 <_Z22__fetch_global_Serial1v+0x44>)
   ba3be:	f000 fd13 	bl	bade8 <atexit>
    return serial1;
}
   ba3c2:	4802      	ldr	r0, [pc, #8]	; (ba3cc <_Z22__fetch_global_Serial1v+0x40>)
   ba3c4:	b007      	add	sp, #28
   ba3c6:	bd30      	pop	{r4, r5, pc}
   ba3c8:	2003e740 	.word	0x2003e740
   ba3cc:	2003e744 	.word	0x2003e744
   ba3d0:	000ba355 	.word	0x000ba355

000ba3d4 <_ZnwjRKSt9nothrow_t>:
   ba3d4:	f7f9 be5d 	b.w	b4092 <_Znwj>

000ba3d8 <_ZnajRKSt9nothrow_t>:
   ba3d8:	f7f9 be5d 	b.w	b4096 <_Znaj>

000ba3dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   ba3dc:	68c3      	ldr	r3, [r0, #12]
   ba3de:	689a      	ldr	r2, [r3, #8]
   ba3e0:	60c2      	str	r2, [r0, #12]
   ba3e2:	b510      	push	{r4, lr}
   ba3e4:	b102      	cbz	r2, ba3e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   ba3e6:	6050      	str	r0, [r2, #4]
   ba3e8:	6842      	ldr	r2, [r0, #4]
   ba3ea:	605a      	str	r2, [r3, #4]
   ba3ec:	680c      	ldr	r4, [r1, #0]
   ba3ee:	4284      	cmp	r4, r0
   ba3f0:	d103      	bne.n	ba3fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   ba3f2:	600b      	str	r3, [r1, #0]
   ba3f4:	6098      	str	r0, [r3, #8]
   ba3f6:	6043      	str	r3, [r0, #4]
   ba3f8:	bd10      	pop	{r4, pc}
   ba3fa:	6891      	ldr	r1, [r2, #8]
   ba3fc:	4281      	cmp	r1, r0
   ba3fe:	bf0c      	ite	eq
   ba400:	6093      	streq	r3, [r2, #8]
   ba402:	60d3      	strne	r3, [r2, #12]
   ba404:	e7f6      	b.n	ba3f4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000ba406 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   ba406:	6883      	ldr	r3, [r0, #8]
   ba408:	68da      	ldr	r2, [r3, #12]
   ba40a:	6082      	str	r2, [r0, #8]
   ba40c:	b510      	push	{r4, lr}
   ba40e:	b102      	cbz	r2, ba412 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   ba410:	6050      	str	r0, [r2, #4]
   ba412:	6842      	ldr	r2, [r0, #4]
   ba414:	605a      	str	r2, [r3, #4]
   ba416:	680c      	ldr	r4, [r1, #0]
   ba418:	4284      	cmp	r4, r0
   ba41a:	d103      	bne.n	ba424 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   ba41c:	600b      	str	r3, [r1, #0]
   ba41e:	60d8      	str	r0, [r3, #12]
   ba420:	6043      	str	r3, [r0, #4]
   ba422:	bd10      	pop	{r4, pc}
   ba424:	68d1      	ldr	r1, [r2, #12]
   ba426:	4281      	cmp	r1, r0
   ba428:	bf0c      	ite	eq
   ba42a:	60d3      	streq	r3, [r2, #12]
   ba42c:	6093      	strne	r3, [r2, #8]
   ba42e:	e7f6      	b.n	ba41e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000ba430 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   ba430:	68c3      	ldr	r3, [r0, #12]
   ba432:	b123      	cbz	r3, ba43e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   ba434:	4618      	mov	r0, r3
   ba436:	689b      	ldr	r3, [r3, #8]
   ba438:	2b00      	cmp	r3, #0
   ba43a:	d1fb      	bne.n	ba434 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   ba43c:	4770      	bx	lr
   ba43e:	6843      	ldr	r3, [r0, #4]
   ba440:	68da      	ldr	r2, [r3, #12]
   ba442:	4282      	cmp	r2, r0
   ba444:	d102      	bne.n	ba44c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   ba446:	4618      	mov	r0, r3
   ba448:	685b      	ldr	r3, [r3, #4]
   ba44a:	e7f9      	b.n	ba440 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   ba44c:	68c2      	ldr	r2, [r0, #12]
   ba44e:	4293      	cmp	r3, r2
   ba450:	bf18      	it	ne
   ba452:	4618      	movne	r0, r3
   ba454:	4770      	bx	lr

000ba456 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   ba456:	7803      	ldrb	r3, [r0, #0]
   ba458:	b933      	cbnz	r3, ba468 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   ba45a:	6843      	ldr	r3, [r0, #4]
   ba45c:	685b      	ldr	r3, [r3, #4]
   ba45e:	4283      	cmp	r3, r0
   ba460:	d102      	bne.n	ba468 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   ba462:	68db      	ldr	r3, [r3, #12]
   ba464:	4618      	mov	r0, r3
   ba466:	4770      	bx	lr
   ba468:	6882      	ldr	r2, [r0, #8]
   ba46a:	b122      	cbz	r2, ba476 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   ba46c:	4613      	mov	r3, r2
   ba46e:	68d2      	ldr	r2, [r2, #12]
   ba470:	2a00      	cmp	r2, #0
   ba472:	d1fb      	bne.n	ba46c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   ba474:	e7f6      	b.n	ba464 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   ba476:	6843      	ldr	r3, [r0, #4]
   ba478:	689a      	ldr	r2, [r3, #8]
   ba47a:	4282      	cmp	r2, r0
   ba47c:	d1f2      	bne.n	ba464 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   ba47e:	4618      	mov	r0, r3
   ba480:	685b      	ldr	r3, [r3, #4]
   ba482:	e7f9      	b.n	ba478 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000ba484 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   ba484:	f7ff bfd4 	b.w	ba430 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000ba488 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   ba488:	f7ff bfe5 	b.w	ba456 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000ba48c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   ba48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba490:	461e      	mov	r6, r3
   ba492:	f103 0804 	add.w	r8, r3, #4
   ba496:	2300      	movs	r3, #0
   ba498:	e9c1 3302 	strd	r3, r3, [r1, #8]
   ba49c:	460c      	mov	r4, r1
   ba49e:	604a      	str	r2, [r1, #4]
   ba4a0:	700b      	strb	r3, [r1, #0]
   ba4a2:	b300      	cbz	r0, ba4e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   ba4a4:	4296      	cmp	r6, r2
   ba4a6:	6091      	str	r1, [r2, #8]
   ba4a8:	d118      	bne.n	ba4dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   ba4aa:	6071      	str	r1, [r6, #4]
   ba4ac:	60f4      	str	r4, [r6, #12]
   ba4ae:	2701      	movs	r7, #1
   ba4b0:	f04f 0900 	mov.w	r9, #0
   ba4b4:	6873      	ldr	r3, [r6, #4]
   ba4b6:	42a3      	cmp	r3, r4
   ba4b8:	d03f      	beq.n	ba53a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   ba4ba:	6860      	ldr	r0, [r4, #4]
   ba4bc:	7802      	ldrb	r2, [r0, #0]
   ba4be:	2a00      	cmp	r2, #0
   ba4c0:	d13b      	bne.n	ba53a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   ba4c2:	6845      	ldr	r5, [r0, #4]
   ba4c4:	68ab      	ldr	r3, [r5, #8]
   ba4c6:	4298      	cmp	r0, r3
   ba4c8:	d123      	bne.n	ba512 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   ba4ca:	68eb      	ldr	r3, [r5, #12]
   ba4cc:	b183      	cbz	r3, ba4f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   ba4ce:	781a      	ldrb	r2, [r3, #0]
   ba4d0:	b972      	cbnz	r2, ba4f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   ba4d2:	7007      	strb	r7, [r0, #0]
   ba4d4:	701f      	strb	r7, [r3, #0]
   ba4d6:	702a      	strb	r2, [r5, #0]
   ba4d8:	462c      	mov	r4, r5
   ba4da:	e7eb      	b.n	ba4b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   ba4dc:	68b3      	ldr	r3, [r6, #8]
   ba4de:	4293      	cmp	r3, r2
   ba4e0:	d1e5      	bne.n	ba4ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   ba4e2:	60b1      	str	r1, [r6, #8]
   ba4e4:	e7e3      	b.n	ba4ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   ba4e6:	60d1      	str	r1, [r2, #12]
   ba4e8:	68f3      	ldr	r3, [r6, #12]
   ba4ea:	4293      	cmp	r3, r2
   ba4ec:	d1df      	bne.n	ba4ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   ba4ee:	e7dd      	b.n	ba4ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   ba4f0:	68c3      	ldr	r3, [r0, #12]
   ba4f2:	42a3      	cmp	r3, r4
   ba4f4:	d103      	bne.n	ba4fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   ba4f6:	4641      	mov	r1, r8
   ba4f8:	f7ff ff70 	bl	ba3dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   ba4fc:	4604      	mov	r4, r0
   ba4fe:	6863      	ldr	r3, [r4, #4]
   ba500:	4641      	mov	r1, r8
   ba502:	701f      	strb	r7, [r3, #0]
   ba504:	4628      	mov	r0, r5
   ba506:	f885 9000 	strb.w	r9, [r5]
   ba50a:	f7ff ff7c 	bl	ba406 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   ba50e:	4625      	mov	r5, r4
   ba510:	e7e2      	b.n	ba4d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   ba512:	b113      	cbz	r3, ba51a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   ba514:	781a      	ldrb	r2, [r3, #0]
   ba516:	2a00      	cmp	r2, #0
   ba518:	d0db      	beq.n	ba4d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   ba51a:	6883      	ldr	r3, [r0, #8]
   ba51c:	42a3      	cmp	r3, r4
   ba51e:	d103      	bne.n	ba528 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   ba520:	4641      	mov	r1, r8
   ba522:	f7ff ff70 	bl	ba406 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   ba526:	4604      	mov	r4, r0
   ba528:	6863      	ldr	r3, [r4, #4]
   ba52a:	4641      	mov	r1, r8
   ba52c:	701f      	strb	r7, [r3, #0]
   ba52e:	4628      	mov	r0, r5
   ba530:	f885 9000 	strb.w	r9, [r5]
   ba534:	f7ff ff52 	bl	ba3dc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   ba538:	e7e9      	b.n	ba50e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   ba53a:	2201      	movs	r2, #1
   ba53c:	701a      	strb	r2, [r3, #0]
   ba53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000ba542 <_ZSt25__throw_bad_function_callv>:
   ba542:	b508      	push	{r3, lr}
   ba544:	f7fc fdc6 	bl	b70d4 <abort>

000ba548 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba548:	4901      	ldr	r1, [pc, #4]	; (ba550 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba54a:	f000 b8f9 	b.w	ba740 <_ZNKSt9type_infoeqERKS_>
   ba54e:	bf00      	nop
   ba550:	000bb83c 	.word	0x000bb83c

000ba554 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba554:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba556:	2400      	movs	r4, #0
   ba558:	2310      	movs	r3, #16
   ba55a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba55e:	6803      	ldr	r3, [r0, #0]
   ba560:	4615      	mov	r5, r2
   ba562:	699e      	ldr	r6, [r3, #24]
   ba564:	6812      	ldr	r2, [r2, #0]
   ba566:	466b      	mov	r3, sp
   ba568:	e9cd 4400 	strd	r4, r4, [sp]
   ba56c:	47b0      	blx	r6
   ba56e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba572:	f003 0306 	and.w	r3, r3, #6
   ba576:	2b06      	cmp	r3, #6
   ba578:	bf03      	ittte	eq
   ba57a:	9b00      	ldreq	r3, [sp, #0]
   ba57c:	602b      	streq	r3, [r5, #0]
   ba57e:	2001      	moveq	r0, #1
   ba580:	4620      	movne	r0, r4
   ba582:	b004      	add	sp, #16
   ba584:	bd70      	pop	{r4, r5, r6, pc}

000ba586 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba586:	9800      	ldr	r0, [sp, #0]
   ba588:	4290      	cmp	r0, r2
   ba58a:	bf14      	ite	ne
   ba58c:	2001      	movne	r0, #1
   ba58e:	2006      	moveq	r0, #6
   ba590:	4770      	bx	lr
	...

000ba594 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba594:	b510      	push	{r4, lr}
   ba596:	4b03      	ldr	r3, [pc, #12]	; (ba5a4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba598:	6003      	str	r3, [r0, #0]
   ba59a:	4604      	mov	r4, r0
   ba59c:	f000 f8cd 	bl	ba73a <_ZNSt9type_infoD1Ev>
   ba5a0:	4620      	mov	r0, r4
   ba5a2:	bd10      	pop	{r4, pc}
   ba5a4:	000bb87c 	.word	0x000bb87c

000ba5a8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba5a8:	b510      	push	{r4, lr}
   ba5aa:	4604      	mov	r4, r0
   ba5ac:	f7ff fff2 	bl	ba594 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba5b0:	4620      	mov	r0, r4
   ba5b2:	2108      	movs	r1, #8
   ba5b4:	f7f9 fd71 	bl	b409a <_ZdlPvj>
   ba5b8:	4620      	mov	r0, r4
   ba5ba:	bd10      	pop	{r4, pc}

000ba5bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba5c0:	461f      	mov	r7, r3
   ba5c2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba5c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba5ca:	4598      	cmp	r8, r3
   ba5cc:	4606      	mov	r6, r0
   ba5ce:	4615      	mov	r5, r2
   ba5d0:	d107      	bne.n	ba5e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba5d2:	9907      	ldr	r1, [sp, #28]
   ba5d4:	f000 f8b4 	bl	ba740 <_ZNKSt9type_infoeqERKS_>
   ba5d8:	b118      	cbz	r0, ba5e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba5da:	7165      	strb	r5, [r4, #5]
   ba5dc:	2000      	movs	r0, #0
   ba5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba5e2:	4639      	mov	r1, r7
   ba5e4:	4630      	mov	r0, r6
   ba5e6:	f000 f8ab 	bl	ba740 <_ZNKSt9type_infoeqERKS_>
   ba5ea:	2800      	cmp	r0, #0
   ba5ec:	d0f6      	beq.n	ba5dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba5ee:	2301      	movs	r3, #1
   ba5f0:	f8c4 8000 	str.w	r8, [r4]
   ba5f4:	7125      	strb	r5, [r4, #4]
   ba5f6:	71a3      	strb	r3, [r4, #6]
   ba5f8:	e7f0      	b.n	ba5dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba5fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba5fa:	b538      	push	{r3, r4, r5, lr}
   ba5fc:	4615      	mov	r5, r2
   ba5fe:	461c      	mov	r4, r3
   ba600:	f000 f89e 	bl	ba740 <_ZNKSt9type_infoeqERKS_>
   ba604:	b120      	cbz	r0, ba610 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba606:	2308      	movs	r3, #8
   ba608:	60e3      	str	r3, [r4, #12]
   ba60a:	2306      	movs	r3, #6
   ba60c:	6025      	str	r5, [r4, #0]
   ba60e:	7123      	strb	r3, [r4, #4]
   ba610:	bd38      	pop	{r3, r4, r5, pc}

000ba612 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba612:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba614:	4605      	mov	r5, r0
   ba616:	460c      	mov	r4, r1
   ba618:	9201      	str	r2, [sp, #4]
   ba61a:	461e      	mov	r6, r3
   ba61c:	f000 f890 	bl	ba740 <_ZNKSt9type_infoeqERKS_>
   ba620:	b950      	cbnz	r0, ba638 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba622:	2e03      	cmp	r6, #3
   ba624:	d808      	bhi.n	ba638 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba626:	6823      	ldr	r3, [r4, #0]
   ba628:	9a01      	ldr	r2, [sp, #4]
   ba62a:	695b      	ldr	r3, [r3, #20]
   ba62c:	4629      	mov	r1, r5
   ba62e:	4620      	mov	r0, r4
   ba630:	b002      	add	sp, #8
   ba632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba636:	4718      	bx	r3
   ba638:	b002      	add	sp, #8
   ba63a:	bd70      	pop	{r4, r5, r6, pc}

000ba63c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba63c:	b510      	push	{r4, lr}
   ba63e:	4b03      	ldr	r3, [pc, #12]	; (ba64c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba640:	6003      	str	r3, [r0, #0]
   ba642:	4604      	mov	r4, r0
   ba644:	f7ff ffa6 	bl	ba594 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba648:	4620      	mov	r0, r4
   ba64a:	bd10      	pop	{r4, pc}
   ba64c:	000bb8dc 	.word	0x000bb8dc

000ba650 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba650:	b510      	push	{r4, lr}
   ba652:	4604      	mov	r4, r0
   ba654:	f7ff fff2 	bl	ba63c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba658:	4620      	mov	r0, r4
   ba65a:	210c      	movs	r1, #12
   ba65c:	f7f9 fd1d 	bl	b409a <_ZdlPvj>
   ba660:	4620      	mov	r0, r4
   ba662:	bd10      	pop	{r4, pc}

000ba664 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba666:	9f08      	ldr	r7, [sp, #32]
   ba668:	4297      	cmp	r7, r2
   ba66a:	4605      	mov	r5, r0
   ba66c:	460e      	mov	r6, r1
   ba66e:	4614      	mov	r4, r2
   ba670:	d00a      	beq.n	ba688 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba672:	68a8      	ldr	r0, [r5, #8]
   ba674:	6802      	ldr	r2, [r0, #0]
   ba676:	9708      	str	r7, [sp, #32]
   ba678:	6a15      	ldr	r5, [r2, #32]
   ba67a:	4631      	mov	r1, r6
   ba67c:	4622      	mov	r2, r4
   ba67e:	46ac      	mov	ip, r5
   ba680:	b003      	add	sp, #12
   ba682:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba686:	4760      	bx	ip
   ba688:	4619      	mov	r1, r3
   ba68a:	9301      	str	r3, [sp, #4]
   ba68c:	f000 f858 	bl	ba740 <_ZNKSt9type_infoeqERKS_>
   ba690:	9b01      	ldr	r3, [sp, #4]
   ba692:	2800      	cmp	r0, #0
   ba694:	d0ed      	beq.n	ba672 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba696:	2006      	movs	r0, #6
   ba698:	b003      	add	sp, #12
   ba69a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba69c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba69c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba6a0:	460d      	mov	r5, r1
   ba6a2:	4619      	mov	r1, r3
   ba6a4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba6a8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba6ac:	4681      	mov	r9, r0
   ba6ae:	4617      	mov	r7, r2
   ba6b0:	4698      	mov	r8, r3
   ba6b2:	f000 f845 	bl	ba740 <_ZNKSt9type_infoeqERKS_>
   ba6b6:	b190      	cbz	r0, ba6de <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba6b8:	2d00      	cmp	r5, #0
   ba6ba:	6034      	str	r4, [r6, #0]
   ba6bc:	7137      	strb	r7, [r6, #4]
   ba6be:	db09      	blt.n	ba6d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba6c0:	1961      	adds	r1, r4, r5
   ba6c2:	458a      	cmp	sl, r1
   ba6c4:	bf0c      	ite	eq
   ba6c6:	2106      	moveq	r1, #6
   ba6c8:	2101      	movne	r1, #1
   ba6ca:	71b1      	strb	r1, [r6, #6]
   ba6cc:	2000      	movs	r0, #0
   ba6ce:	b001      	add	sp, #4
   ba6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba6d4:	3502      	adds	r5, #2
   ba6d6:	d1f9      	bne.n	ba6cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba6d8:	2301      	movs	r3, #1
   ba6da:	71b3      	strb	r3, [r6, #6]
   ba6dc:	e7f6      	b.n	ba6cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba6de:	4554      	cmp	r4, sl
   ba6e0:	d106      	bne.n	ba6f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba6e2:	4659      	mov	r1, fp
   ba6e4:	4648      	mov	r0, r9
   ba6e6:	f000 f82b 	bl	ba740 <_ZNKSt9type_infoeqERKS_>
   ba6ea:	b108      	cbz	r0, ba6f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba6ec:	7177      	strb	r7, [r6, #5]
   ba6ee:	e7ed      	b.n	ba6cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba6f0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba6f4:	6803      	ldr	r3, [r0, #0]
   ba6f6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba6fa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba6fe:	69dc      	ldr	r4, [r3, #28]
   ba700:	463a      	mov	r2, r7
   ba702:	4643      	mov	r3, r8
   ba704:	4629      	mov	r1, r5
   ba706:	46a4      	mov	ip, r4
   ba708:	b001      	add	sp, #4
   ba70a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba70e:	4760      	bx	ip

000ba710 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba714:	4607      	mov	r7, r0
   ba716:	460c      	mov	r4, r1
   ba718:	4615      	mov	r5, r2
   ba71a:	461e      	mov	r6, r3
   ba71c:	f7ff ff6d 	bl	ba5fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba720:	b948      	cbnz	r0, ba736 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba722:	68b8      	ldr	r0, [r7, #8]
   ba724:	6803      	ldr	r3, [r0, #0]
   ba726:	699f      	ldr	r7, [r3, #24]
   ba728:	462a      	mov	r2, r5
   ba72a:	4633      	mov	r3, r6
   ba72c:	4621      	mov	r1, r4
   ba72e:	46bc      	mov	ip, r7
   ba730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba734:	4760      	bx	ip
   ba736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba73a <_ZNSt9type_infoD1Ev>:
   ba73a:	4770      	bx	lr

000ba73c <_ZNKSt9type_info14__is_pointer_pEv>:
   ba73c:	2000      	movs	r0, #0
   ba73e:	4770      	bx	lr

000ba740 <_ZNKSt9type_infoeqERKS_>:
   ba740:	4281      	cmp	r1, r0
   ba742:	b508      	push	{r3, lr}
   ba744:	d00e      	beq.n	ba764 <_ZNKSt9type_infoeqERKS_+0x24>
   ba746:	6840      	ldr	r0, [r0, #4]
   ba748:	7803      	ldrb	r3, [r0, #0]
   ba74a:	2b2a      	cmp	r3, #42	; 0x2a
   ba74c:	d00c      	beq.n	ba768 <_ZNKSt9type_infoeqERKS_+0x28>
   ba74e:	6849      	ldr	r1, [r1, #4]
   ba750:	780b      	ldrb	r3, [r1, #0]
   ba752:	2b2a      	cmp	r3, #42	; 0x2a
   ba754:	bf08      	it	eq
   ba756:	3101      	addeq	r1, #1
   ba758:	f000 fbc2 	bl	baee0 <strcmp>
   ba75c:	fab0 f080 	clz	r0, r0
   ba760:	0940      	lsrs	r0, r0, #5
   ba762:	bd08      	pop	{r3, pc}
   ba764:	2001      	movs	r0, #1
   ba766:	e7fc      	b.n	ba762 <_ZNKSt9type_infoeqERKS_+0x22>
   ba768:	2000      	movs	r0, #0
   ba76a:	e7fa      	b.n	ba762 <_ZNKSt9type_infoeqERKS_+0x22>

000ba76c <__aeabi_drsub>:
   ba76c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba770:	e002      	b.n	ba778 <__adddf3>
   ba772:	bf00      	nop

000ba774 <__aeabi_dsub>:
   ba774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba778 <__adddf3>:
   ba778:	b530      	push	{r4, r5, lr}
   ba77a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba77e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba782:	ea94 0f05 	teq	r4, r5
   ba786:	bf08      	it	eq
   ba788:	ea90 0f02 	teqeq	r0, r2
   ba78c:	bf1f      	itttt	ne
   ba78e:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba792:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba796:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba79a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba79e:	f000 80e2 	beq.w	ba966 <__adddf3+0x1ee>
   ba7a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba7a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba7aa:	bfb8      	it	lt
   ba7ac:	426d      	neglt	r5, r5
   ba7ae:	dd0c      	ble.n	ba7ca <__adddf3+0x52>
   ba7b0:	442c      	add	r4, r5
   ba7b2:	ea80 0202 	eor.w	r2, r0, r2
   ba7b6:	ea81 0303 	eor.w	r3, r1, r3
   ba7ba:	ea82 0000 	eor.w	r0, r2, r0
   ba7be:	ea83 0101 	eor.w	r1, r3, r1
   ba7c2:	ea80 0202 	eor.w	r2, r0, r2
   ba7c6:	ea81 0303 	eor.w	r3, r1, r3
   ba7ca:	2d36      	cmp	r5, #54	; 0x36
   ba7cc:	bf88      	it	hi
   ba7ce:	bd30      	pophi	{r4, r5, pc}
   ba7d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba7d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba7d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba7dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba7e0:	d002      	beq.n	ba7e8 <__adddf3+0x70>
   ba7e2:	4240      	negs	r0, r0
   ba7e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba7e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba7ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba7f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba7f4:	d002      	beq.n	ba7fc <__adddf3+0x84>
   ba7f6:	4252      	negs	r2, r2
   ba7f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba7fc:	ea94 0f05 	teq	r4, r5
   ba800:	f000 80a7 	beq.w	ba952 <__adddf3+0x1da>
   ba804:	f1a4 0401 	sub.w	r4, r4, #1
   ba808:	f1d5 0e20 	rsbs	lr, r5, #32
   ba80c:	db0d      	blt.n	ba82a <__adddf3+0xb2>
   ba80e:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba812:	fa22 f205 	lsr.w	r2, r2, r5
   ba816:	1880      	adds	r0, r0, r2
   ba818:	f141 0100 	adc.w	r1, r1, #0
   ba81c:	fa03 f20e 	lsl.w	r2, r3, lr
   ba820:	1880      	adds	r0, r0, r2
   ba822:	fa43 f305 	asr.w	r3, r3, r5
   ba826:	4159      	adcs	r1, r3
   ba828:	e00e      	b.n	ba848 <__adddf3+0xd0>
   ba82a:	f1a5 0520 	sub.w	r5, r5, #32
   ba82e:	f10e 0e20 	add.w	lr, lr, #32
   ba832:	2a01      	cmp	r2, #1
   ba834:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba838:	bf28      	it	cs
   ba83a:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba83e:	fa43 f305 	asr.w	r3, r3, r5
   ba842:	18c0      	adds	r0, r0, r3
   ba844:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba84c:	d507      	bpl.n	ba85e <__adddf3+0xe6>
   ba84e:	f04f 0e00 	mov.w	lr, #0
   ba852:	f1dc 0c00 	rsbs	ip, ip, #0
   ba856:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba85a:	eb6e 0101 	sbc.w	r1, lr, r1
   ba85e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba862:	d31b      	bcc.n	ba89c <__adddf3+0x124>
   ba864:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba868:	d30c      	bcc.n	ba884 <__adddf3+0x10c>
   ba86a:	0849      	lsrs	r1, r1, #1
   ba86c:	ea5f 0030 	movs.w	r0, r0, rrx
   ba870:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba874:	f104 0401 	add.w	r4, r4, #1
   ba878:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba87c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba880:	f080 809a 	bcs.w	ba9b8 <__adddf3+0x240>
   ba884:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba888:	bf08      	it	eq
   ba88a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba88e:	f150 0000 	adcs.w	r0, r0, #0
   ba892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba896:	ea41 0105 	orr.w	r1, r1, r5
   ba89a:	bd30      	pop	{r4, r5, pc}
   ba89c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba8a0:	4140      	adcs	r0, r0
   ba8a2:	eb41 0101 	adc.w	r1, r1, r1
   ba8a6:	3c01      	subs	r4, #1
   ba8a8:	bf28      	it	cs
   ba8aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba8ae:	d2e9      	bcs.n	ba884 <__adddf3+0x10c>
   ba8b0:	f091 0f00 	teq	r1, #0
   ba8b4:	bf04      	itt	eq
   ba8b6:	4601      	moveq	r1, r0
   ba8b8:	2000      	moveq	r0, #0
   ba8ba:	fab1 f381 	clz	r3, r1
   ba8be:	bf08      	it	eq
   ba8c0:	3320      	addeq	r3, #32
   ba8c2:	f1a3 030b 	sub.w	r3, r3, #11
   ba8c6:	f1b3 0220 	subs.w	r2, r3, #32
   ba8ca:	da0c      	bge.n	ba8e6 <__adddf3+0x16e>
   ba8cc:	320c      	adds	r2, #12
   ba8ce:	dd08      	ble.n	ba8e2 <__adddf3+0x16a>
   ba8d0:	f102 0c14 	add.w	ip, r2, #20
   ba8d4:	f1c2 020c 	rsb	r2, r2, #12
   ba8d8:	fa01 f00c 	lsl.w	r0, r1, ip
   ba8dc:	fa21 f102 	lsr.w	r1, r1, r2
   ba8e0:	e00c      	b.n	ba8fc <__adddf3+0x184>
   ba8e2:	f102 0214 	add.w	r2, r2, #20
   ba8e6:	bfd8      	it	le
   ba8e8:	f1c2 0c20 	rsble	ip, r2, #32
   ba8ec:	fa01 f102 	lsl.w	r1, r1, r2
   ba8f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba8f4:	bfdc      	itt	le
   ba8f6:	ea41 010c 	orrle.w	r1, r1, ip
   ba8fa:	4090      	lslle	r0, r2
   ba8fc:	1ae4      	subs	r4, r4, r3
   ba8fe:	bfa2      	ittt	ge
   ba900:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba904:	4329      	orrge	r1, r5
   ba906:	bd30      	popge	{r4, r5, pc}
   ba908:	ea6f 0404 	mvn.w	r4, r4
   ba90c:	3c1f      	subs	r4, #31
   ba90e:	da1c      	bge.n	ba94a <__adddf3+0x1d2>
   ba910:	340c      	adds	r4, #12
   ba912:	dc0e      	bgt.n	ba932 <__adddf3+0x1ba>
   ba914:	f104 0414 	add.w	r4, r4, #20
   ba918:	f1c4 0220 	rsb	r2, r4, #32
   ba91c:	fa20 f004 	lsr.w	r0, r0, r4
   ba920:	fa01 f302 	lsl.w	r3, r1, r2
   ba924:	ea40 0003 	orr.w	r0, r0, r3
   ba928:	fa21 f304 	lsr.w	r3, r1, r4
   ba92c:	ea45 0103 	orr.w	r1, r5, r3
   ba930:	bd30      	pop	{r4, r5, pc}
   ba932:	f1c4 040c 	rsb	r4, r4, #12
   ba936:	f1c4 0220 	rsb	r2, r4, #32
   ba93a:	fa20 f002 	lsr.w	r0, r0, r2
   ba93e:	fa01 f304 	lsl.w	r3, r1, r4
   ba942:	ea40 0003 	orr.w	r0, r0, r3
   ba946:	4629      	mov	r1, r5
   ba948:	bd30      	pop	{r4, r5, pc}
   ba94a:	fa21 f004 	lsr.w	r0, r1, r4
   ba94e:	4629      	mov	r1, r5
   ba950:	bd30      	pop	{r4, r5, pc}
   ba952:	f094 0f00 	teq	r4, #0
   ba956:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba95a:	bf06      	itte	eq
   ba95c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba960:	3401      	addeq	r4, #1
   ba962:	3d01      	subne	r5, #1
   ba964:	e74e      	b.n	ba804 <__adddf3+0x8c>
   ba966:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba96a:	bf18      	it	ne
   ba96c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba970:	d029      	beq.n	ba9c6 <__adddf3+0x24e>
   ba972:	ea94 0f05 	teq	r4, r5
   ba976:	bf08      	it	eq
   ba978:	ea90 0f02 	teqeq	r0, r2
   ba97c:	d005      	beq.n	ba98a <__adddf3+0x212>
   ba97e:	ea54 0c00 	orrs.w	ip, r4, r0
   ba982:	bf04      	itt	eq
   ba984:	4619      	moveq	r1, r3
   ba986:	4610      	moveq	r0, r2
   ba988:	bd30      	pop	{r4, r5, pc}
   ba98a:	ea91 0f03 	teq	r1, r3
   ba98e:	bf1e      	ittt	ne
   ba990:	2100      	movne	r1, #0
   ba992:	2000      	movne	r0, #0
   ba994:	bd30      	popne	{r4, r5, pc}
   ba996:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba99a:	d105      	bne.n	ba9a8 <__adddf3+0x230>
   ba99c:	0040      	lsls	r0, r0, #1
   ba99e:	4149      	adcs	r1, r1
   ba9a0:	bf28      	it	cs
   ba9a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba9a6:	bd30      	pop	{r4, r5, pc}
   ba9a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba9ac:	bf3c      	itt	cc
   ba9ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba9b2:	bd30      	popcc	{r4, r5, pc}
   ba9b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba9b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba9bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba9c0:	f04f 0000 	mov.w	r0, #0
   ba9c4:	bd30      	pop	{r4, r5, pc}
   ba9c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba9ca:	bf1a      	itte	ne
   ba9cc:	4619      	movne	r1, r3
   ba9ce:	4610      	movne	r0, r2
   ba9d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba9d4:	bf1c      	itt	ne
   ba9d6:	460b      	movne	r3, r1
   ba9d8:	4602      	movne	r2, r0
   ba9da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba9de:	bf06      	itte	eq
   ba9e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba9e4:	ea91 0f03 	teqeq	r1, r3
   ba9e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba9ec:	bd30      	pop	{r4, r5, pc}
   ba9ee:	bf00      	nop

000ba9f0 <__aeabi_ui2d>:
   ba9f0:	f090 0f00 	teq	r0, #0
   ba9f4:	bf04      	itt	eq
   ba9f6:	2100      	moveq	r1, #0
   ba9f8:	4770      	bxeq	lr
   ba9fa:	b530      	push	{r4, r5, lr}
   ba9fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa04:	f04f 0500 	mov.w	r5, #0
   baa08:	f04f 0100 	mov.w	r1, #0
   baa0c:	e750      	b.n	ba8b0 <__adddf3+0x138>
   baa0e:	bf00      	nop

000baa10 <__aeabi_i2d>:
   baa10:	f090 0f00 	teq	r0, #0
   baa14:	bf04      	itt	eq
   baa16:	2100      	moveq	r1, #0
   baa18:	4770      	bxeq	lr
   baa1a:	b530      	push	{r4, r5, lr}
   baa1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baa28:	bf48      	it	mi
   baa2a:	4240      	negmi	r0, r0
   baa2c:	f04f 0100 	mov.w	r1, #0
   baa30:	e73e      	b.n	ba8b0 <__adddf3+0x138>
   baa32:	bf00      	nop

000baa34 <__aeabi_f2d>:
   baa34:	0042      	lsls	r2, r0, #1
   baa36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baa3a:	ea4f 0131 	mov.w	r1, r1, rrx
   baa3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baa42:	bf1f      	itttt	ne
   baa44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baa48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baa4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baa50:	4770      	bxne	lr
   baa52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baa56:	bf08      	it	eq
   baa58:	4770      	bxeq	lr
   baa5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baa5e:	bf04      	itt	eq
   baa60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baa64:	4770      	bxeq	lr
   baa66:	b530      	push	{r4, r5, lr}
   baa68:	f44f 7460 	mov.w	r4, #896	; 0x380
   baa6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baa74:	e71c      	b.n	ba8b0 <__adddf3+0x138>
   baa76:	bf00      	nop

000baa78 <__aeabi_ul2d>:
   baa78:	ea50 0201 	orrs.w	r2, r0, r1
   baa7c:	bf08      	it	eq
   baa7e:	4770      	bxeq	lr
   baa80:	b530      	push	{r4, r5, lr}
   baa82:	f04f 0500 	mov.w	r5, #0
   baa86:	e00a      	b.n	baa9e <__aeabi_l2d+0x16>

000baa88 <__aeabi_l2d>:
   baa88:	ea50 0201 	orrs.w	r2, r0, r1
   baa8c:	bf08      	it	eq
   baa8e:	4770      	bxeq	lr
   baa90:	b530      	push	{r4, r5, lr}
   baa92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baa96:	d502      	bpl.n	baa9e <__aeabi_l2d+0x16>
   baa98:	4240      	negs	r0, r0
   baa9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baa9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baaa2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baaa6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baaaa:	f43f aed8 	beq.w	ba85e <__adddf3+0xe6>
   baaae:	f04f 0203 	mov.w	r2, #3
   baab2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baab6:	bf18      	it	ne
   baab8:	3203      	addne	r2, #3
   baaba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baabe:	bf18      	it	ne
   baac0:	3203      	addne	r2, #3
   baac2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baac6:	f1c2 0320 	rsb	r3, r2, #32
   baaca:	fa00 fc03 	lsl.w	ip, r0, r3
   baace:	fa20 f002 	lsr.w	r0, r0, r2
   baad2:	fa01 fe03 	lsl.w	lr, r1, r3
   baad6:	ea40 000e 	orr.w	r0, r0, lr
   baada:	fa21 f102 	lsr.w	r1, r1, r2
   baade:	4414      	add	r4, r2
   baae0:	e6bd      	b.n	ba85e <__adddf3+0xe6>
   baae2:	bf00      	nop

000baae4 <__aeabi_uldivmod>:
   baae4:	b953      	cbnz	r3, baafc <__aeabi_uldivmod+0x18>
   baae6:	b94a      	cbnz	r2, baafc <__aeabi_uldivmod+0x18>
   baae8:	2900      	cmp	r1, #0
   baaea:	bf08      	it	eq
   baaec:	2800      	cmpeq	r0, #0
   baaee:	bf1c      	itt	ne
   baaf0:	f04f 31ff 	movne.w	r1, #4294967295
   baaf4:	f04f 30ff 	movne.w	r0, #4294967295
   baaf8:	f000 b974 	b.w	bade4 <__aeabi_idiv0>
   baafc:	f1ad 0c08 	sub.w	ip, sp, #8
   bab00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   bab04:	f000 f806 	bl	bab14 <__udivmoddi4>
   bab08:	f8dd e004 	ldr.w	lr, [sp, #4]
   bab0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bab10:	b004      	add	sp, #16
   bab12:	4770      	bx	lr

000bab14 <__udivmoddi4>:
   bab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bab18:	9d08      	ldr	r5, [sp, #32]
   bab1a:	4604      	mov	r4, r0
   bab1c:	468e      	mov	lr, r1
   bab1e:	2b00      	cmp	r3, #0
   bab20:	d14d      	bne.n	babbe <__udivmoddi4+0xaa>
   bab22:	428a      	cmp	r2, r1
   bab24:	4694      	mov	ip, r2
   bab26:	d969      	bls.n	babfc <__udivmoddi4+0xe8>
   bab28:	fab2 f282 	clz	r2, r2
   bab2c:	b152      	cbz	r2, bab44 <__udivmoddi4+0x30>
   bab2e:	fa01 f302 	lsl.w	r3, r1, r2
   bab32:	f1c2 0120 	rsb	r1, r2, #32
   bab36:	fa20 f101 	lsr.w	r1, r0, r1
   bab3a:	fa0c fc02 	lsl.w	ip, ip, r2
   bab3e:	ea41 0e03 	orr.w	lr, r1, r3
   bab42:	4094      	lsls	r4, r2
   bab44:	ea4f 481c 	mov.w	r8, ip, lsr #16
   bab48:	0c21      	lsrs	r1, r4, #16
   bab4a:	fbbe f6f8 	udiv	r6, lr, r8
   bab4e:	fa1f f78c 	uxth.w	r7, ip
   bab52:	fb08 e316 	mls	r3, r8, r6, lr
   bab56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   bab5a:	fb06 f107 	mul.w	r1, r6, r7
   bab5e:	4299      	cmp	r1, r3
   bab60:	d90a      	bls.n	bab78 <__udivmoddi4+0x64>
   bab62:	eb1c 0303 	adds.w	r3, ip, r3
   bab66:	f106 30ff 	add.w	r0, r6, #4294967295
   bab6a:	f080 811f 	bcs.w	badac <__udivmoddi4+0x298>
   bab6e:	4299      	cmp	r1, r3
   bab70:	f240 811c 	bls.w	badac <__udivmoddi4+0x298>
   bab74:	3e02      	subs	r6, #2
   bab76:	4463      	add	r3, ip
   bab78:	1a5b      	subs	r3, r3, r1
   bab7a:	b2a4      	uxth	r4, r4
   bab7c:	fbb3 f0f8 	udiv	r0, r3, r8
   bab80:	fb08 3310 	mls	r3, r8, r0, r3
   bab84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   bab88:	fb00 f707 	mul.w	r7, r0, r7
   bab8c:	42a7      	cmp	r7, r4
   bab8e:	d90a      	bls.n	baba6 <__udivmoddi4+0x92>
   bab90:	eb1c 0404 	adds.w	r4, ip, r4
   bab94:	f100 33ff 	add.w	r3, r0, #4294967295
   bab98:	f080 810a 	bcs.w	badb0 <__udivmoddi4+0x29c>
   bab9c:	42a7      	cmp	r7, r4
   bab9e:	f240 8107 	bls.w	badb0 <__udivmoddi4+0x29c>
   baba2:	4464      	add	r4, ip
   baba4:	3802      	subs	r0, #2
   baba6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   babaa:	1be4      	subs	r4, r4, r7
   babac:	2600      	movs	r6, #0
   babae:	b11d      	cbz	r5, babb8 <__udivmoddi4+0xa4>
   babb0:	40d4      	lsrs	r4, r2
   babb2:	2300      	movs	r3, #0
   babb4:	e9c5 4300 	strd	r4, r3, [r5]
   babb8:	4631      	mov	r1, r6
   babba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   babbe:	428b      	cmp	r3, r1
   babc0:	d909      	bls.n	babd6 <__udivmoddi4+0xc2>
   babc2:	2d00      	cmp	r5, #0
   babc4:	f000 80ef 	beq.w	bada6 <__udivmoddi4+0x292>
   babc8:	2600      	movs	r6, #0
   babca:	e9c5 0100 	strd	r0, r1, [r5]
   babce:	4630      	mov	r0, r6
   babd0:	4631      	mov	r1, r6
   babd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   babd6:	fab3 f683 	clz	r6, r3
   babda:	2e00      	cmp	r6, #0
   babdc:	d14a      	bne.n	bac74 <__udivmoddi4+0x160>
   babde:	428b      	cmp	r3, r1
   babe0:	d302      	bcc.n	babe8 <__udivmoddi4+0xd4>
   babe2:	4282      	cmp	r2, r0
   babe4:	f200 80f9 	bhi.w	badda <__udivmoddi4+0x2c6>
   babe8:	1a84      	subs	r4, r0, r2
   babea:	eb61 0303 	sbc.w	r3, r1, r3
   babee:	2001      	movs	r0, #1
   babf0:	469e      	mov	lr, r3
   babf2:	2d00      	cmp	r5, #0
   babf4:	d0e0      	beq.n	babb8 <__udivmoddi4+0xa4>
   babf6:	e9c5 4e00 	strd	r4, lr, [r5]
   babfa:	e7dd      	b.n	babb8 <__udivmoddi4+0xa4>
   babfc:	b902      	cbnz	r2, bac00 <__udivmoddi4+0xec>
   babfe:	deff      	udf	#255	; 0xff
   bac00:	fab2 f282 	clz	r2, r2
   bac04:	2a00      	cmp	r2, #0
   bac06:	f040 8092 	bne.w	bad2e <__udivmoddi4+0x21a>
   bac0a:	eba1 010c 	sub.w	r1, r1, ip
   bac0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bac12:	fa1f fe8c 	uxth.w	lr, ip
   bac16:	2601      	movs	r6, #1
   bac18:	0c20      	lsrs	r0, r4, #16
   bac1a:	fbb1 f3f7 	udiv	r3, r1, r7
   bac1e:	fb07 1113 	mls	r1, r7, r3, r1
   bac22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bac26:	fb0e f003 	mul.w	r0, lr, r3
   bac2a:	4288      	cmp	r0, r1
   bac2c:	d908      	bls.n	bac40 <__udivmoddi4+0x12c>
   bac2e:	eb1c 0101 	adds.w	r1, ip, r1
   bac32:	f103 38ff 	add.w	r8, r3, #4294967295
   bac36:	d202      	bcs.n	bac3e <__udivmoddi4+0x12a>
   bac38:	4288      	cmp	r0, r1
   bac3a:	f200 80cb 	bhi.w	badd4 <__udivmoddi4+0x2c0>
   bac3e:	4643      	mov	r3, r8
   bac40:	1a09      	subs	r1, r1, r0
   bac42:	b2a4      	uxth	r4, r4
   bac44:	fbb1 f0f7 	udiv	r0, r1, r7
   bac48:	fb07 1110 	mls	r1, r7, r0, r1
   bac4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   bac50:	fb0e fe00 	mul.w	lr, lr, r0
   bac54:	45a6      	cmp	lr, r4
   bac56:	d908      	bls.n	bac6a <__udivmoddi4+0x156>
   bac58:	eb1c 0404 	adds.w	r4, ip, r4
   bac5c:	f100 31ff 	add.w	r1, r0, #4294967295
   bac60:	d202      	bcs.n	bac68 <__udivmoddi4+0x154>
   bac62:	45a6      	cmp	lr, r4
   bac64:	f200 80bb 	bhi.w	badde <__udivmoddi4+0x2ca>
   bac68:	4608      	mov	r0, r1
   bac6a:	eba4 040e 	sub.w	r4, r4, lr
   bac6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   bac72:	e79c      	b.n	babae <__udivmoddi4+0x9a>
   bac74:	f1c6 0720 	rsb	r7, r6, #32
   bac78:	40b3      	lsls	r3, r6
   bac7a:	fa22 fc07 	lsr.w	ip, r2, r7
   bac7e:	ea4c 0c03 	orr.w	ip, ip, r3
   bac82:	fa20 f407 	lsr.w	r4, r0, r7
   bac86:	fa01 f306 	lsl.w	r3, r1, r6
   bac8a:	431c      	orrs	r4, r3
   bac8c:	40f9      	lsrs	r1, r7
   bac8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   bac92:	fa00 f306 	lsl.w	r3, r0, r6
   bac96:	fbb1 f8f9 	udiv	r8, r1, r9
   bac9a:	0c20      	lsrs	r0, r4, #16
   bac9c:	fa1f fe8c 	uxth.w	lr, ip
   baca0:	fb09 1118 	mls	r1, r9, r8, r1
   baca4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   baca8:	fb08 f00e 	mul.w	r0, r8, lr
   bacac:	4288      	cmp	r0, r1
   bacae:	fa02 f206 	lsl.w	r2, r2, r6
   bacb2:	d90b      	bls.n	baccc <__udivmoddi4+0x1b8>
   bacb4:	eb1c 0101 	adds.w	r1, ip, r1
   bacb8:	f108 3aff 	add.w	sl, r8, #4294967295
   bacbc:	f080 8088 	bcs.w	badd0 <__udivmoddi4+0x2bc>
   bacc0:	4288      	cmp	r0, r1
   bacc2:	f240 8085 	bls.w	badd0 <__udivmoddi4+0x2bc>
   bacc6:	f1a8 0802 	sub.w	r8, r8, #2
   bacca:	4461      	add	r1, ip
   baccc:	1a09      	subs	r1, r1, r0
   bacce:	b2a4      	uxth	r4, r4
   bacd0:	fbb1 f0f9 	udiv	r0, r1, r9
   bacd4:	fb09 1110 	mls	r1, r9, r0, r1
   bacd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   bacdc:	fb00 fe0e 	mul.w	lr, r0, lr
   bace0:	458e      	cmp	lr, r1
   bace2:	d908      	bls.n	bacf6 <__udivmoddi4+0x1e2>
   bace4:	eb1c 0101 	adds.w	r1, ip, r1
   bace8:	f100 34ff 	add.w	r4, r0, #4294967295
   bacec:	d26c      	bcs.n	badc8 <__udivmoddi4+0x2b4>
   bacee:	458e      	cmp	lr, r1
   bacf0:	d96a      	bls.n	badc8 <__udivmoddi4+0x2b4>
   bacf2:	3802      	subs	r0, #2
   bacf4:	4461      	add	r1, ip
   bacf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   bacfa:	fba0 9402 	umull	r9, r4, r0, r2
   bacfe:	eba1 010e 	sub.w	r1, r1, lr
   bad02:	42a1      	cmp	r1, r4
   bad04:	46c8      	mov	r8, r9
   bad06:	46a6      	mov	lr, r4
   bad08:	d356      	bcc.n	badb8 <__udivmoddi4+0x2a4>
   bad0a:	d053      	beq.n	badb4 <__udivmoddi4+0x2a0>
   bad0c:	b15d      	cbz	r5, bad26 <__udivmoddi4+0x212>
   bad0e:	ebb3 0208 	subs.w	r2, r3, r8
   bad12:	eb61 010e 	sbc.w	r1, r1, lr
   bad16:	fa01 f707 	lsl.w	r7, r1, r7
   bad1a:	fa22 f306 	lsr.w	r3, r2, r6
   bad1e:	40f1      	lsrs	r1, r6
   bad20:	431f      	orrs	r7, r3
   bad22:	e9c5 7100 	strd	r7, r1, [r5]
   bad26:	2600      	movs	r6, #0
   bad28:	4631      	mov	r1, r6
   bad2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bad2e:	f1c2 0320 	rsb	r3, r2, #32
   bad32:	40d8      	lsrs	r0, r3
   bad34:	fa0c fc02 	lsl.w	ip, ip, r2
   bad38:	fa21 f303 	lsr.w	r3, r1, r3
   bad3c:	4091      	lsls	r1, r2
   bad3e:	4301      	orrs	r1, r0
   bad40:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bad44:	fa1f fe8c 	uxth.w	lr, ip
   bad48:	fbb3 f0f7 	udiv	r0, r3, r7
   bad4c:	fb07 3610 	mls	r6, r7, r0, r3
   bad50:	0c0b      	lsrs	r3, r1, #16
   bad52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   bad56:	fb00 f60e 	mul.w	r6, r0, lr
   bad5a:	429e      	cmp	r6, r3
   bad5c:	fa04 f402 	lsl.w	r4, r4, r2
   bad60:	d908      	bls.n	bad74 <__udivmoddi4+0x260>
   bad62:	eb1c 0303 	adds.w	r3, ip, r3
   bad66:	f100 38ff 	add.w	r8, r0, #4294967295
   bad6a:	d22f      	bcs.n	badcc <__udivmoddi4+0x2b8>
   bad6c:	429e      	cmp	r6, r3
   bad6e:	d92d      	bls.n	badcc <__udivmoddi4+0x2b8>
   bad70:	3802      	subs	r0, #2
   bad72:	4463      	add	r3, ip
   bad74:	1b9b      	subs	r3, r3, r6
   bad76:	b289      	uxth	r1, r1
   bad78:	fbb3 f6f7 	udiv	r6, r3, r7
   bad7c:	fb07 3316 	mls	r3, r7, r6, r3
   bad80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   bad84:	fb06 f30e 	mul.w	r3, r6, lr
   bad88:	428b      	cmp	r3, r1
   bad8a:	d908      	bls.n	bad9e <__udivmoddi4+0x28a>
   bad8c:	eb1c 0101 	adds.w	r1, ip, r1
   bad90:	f106 38ff 	add.w	r8, r6, #4294967295
   bad94:	d216      	bcs.n	badc4 <__udivmoddi4+0x2b0>
   bad96:	428b      	cmp	r3, r1
   bad98:	d914      	bls.n	badc4 <__udivmoddi4+0x2b0>
   bad9a:	3e02      	subs	r6, #2
   bad9c:	4461      	add	r1, ip
   bad9e:	1ac9      	subs	r1, r1, r3
   bada0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   bada4:	e738      	b.n	bac18 <__udivmoddi4+0x104>
   bada6:	462e      	mov	r6, r5
   bada8:	4628      	mov	r0, r5
   badaa:	e705      	b.n	babb8 <__udivmoddi4+0xa4>
   badac:	4606      	mov	r6, r0
   badae:	e6e3      	b.n	bab78 <__udivmoddi4+0x64>
   badb0:	4618      	mov	r0, r3
   badb2:	e6f8      	b.n	baba6 <__udivmoddi4+0x92>
   badb4:	454b      	cmp	r3, r9
   badb6:	d2a9      	bcs.n	bad0c <__udivmoddi4+0x1f8>
   badb8:	ebb9 0802 	subs.w	r8, r9, r2
   badbc:	eb64 0e0c 	sbc.w	lr, r4, ip
   badc0:	3801      	subs	r0, #1
   badc2:	e7a3      	b.n	bad0c <__udivmoddi4+0x1f8>
   badc4:	4646      	mov	r6, r8
   badc6:	e7ea      	b.n	bad9e <__udivmoddi4+0x28a>
   badc8:	4620      	mov	r0, r4
   badca:	e794      	b.n	bacf6 <__udivmoddi4+0x1e2>
   badcc:	4640      	mov	r0, r8
   badce:	e7d1      	b.n	bad74 <__udivmoddi4+0x260>
   badd0:	46d0      	mov	r8, sl
   badd2:	e77b      	b.n	baccc <__udivmoddi4+0x1b8>
   badd4:	3b02      	subs	r3, #2
   badd6:	4461      	add	r1, ip
   badd8:	e732      	b.n	bac40 <__udivmoddi4+0x12c>
   badda:	4630      	mov	r0, r6
   baddc:	e709      	b.n	babf2 <__udivmoddi4+0xde>
   badde:	4464      	add	r4, ip
   bade0:	3802      	subs	r0, #2
   bade2:	e742      	b.n	bac6a <__udivmoddi4+0x156>

000bade4 <__aeabi_idiv0>:
   bade4:	4770      	bx	lr
   bade6:	bf00      	nop

000bade8 <atexit>:
   bade8:	2300      	movs	r3, #0
   badea:	4601      	mov	r1, r0
   badec:	461a      	mov	r2, r3
   badee:	4618      	mov	r0, r3
   badf0:	f000 b8ba 	b.w	baf68 <__register_exitproc>

000badf4 <isprint>:
   badf4:	4b02      	ldr	r3, [pc, #8]	; (bae00 <isprint+0xc>)
   badf6:	4418      	add	r0, r3
   badf8:	7840      	ldrb	r0, [r0, #1]
   badfa:	f000 0097 	and.w	r0, r0, #151	; 0x97
   badfe:	4770      	bx	lr
   bae00:	000bb9a9 	.word	0x000bb9a9

000bae04 <memcmp>:
   bae04:	b510      	push	{r4, lr}
   bae06:	3901      	subs	r1, #1
   bae08:	4402      	add	r2, r0
   bae0a:	4290      	cmp	r0, r2
   bae0c:	d101      	bne.n	bae12 <memcmp+0xe>
   bae0e:	2000      	movs	r0, #0
   bae10:	e005      	b.n	bae1e <memcmp+0x1a>
   bae12:	7803      	ldrb	r3, [r0, #0]
   bae14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bae18:	42a3      	cmp	r3, r4
   bae1a:	d001      	beq.n	bae20 <memcmp+0x1c>
   bae1c:	1b18      	subs	r0, r3, r4
   bae1e:	bd10      	pop	{r4, pc}
   bae20:	3001      	adds	r0, #1
   bae22:	e7f2      	b.n	bae0a <memcmp+0x6>

000bae24 <memcpy>:
   bae24:	440a      	add	r2, r1
   bae26:	4291      	cmp	r1, r2
   bae28:	f100 33ff 	add.w	r3, r0, #4294967295
   bae2c:	d100      	bne.n	bae30 <memcpy+0xc>
   bae2e:	4770      	bx	lr
   bae30:	b510      	push	{r4, lr}
   bae32:	f811 4b01 	ldrb.w	r4, [r1], #1
   bae36:	f803 4f01 	strb.w	r4, [r3, #1]!
   bae3a:	4291      	cmp	r1, r2
   bae3c:	d1f9      	bne.n	bae32 <memcpy+0xe>
   bae3e:	bd10      	pop	{r4, pc}

000bae40 <memmove>:
   bae40:	4288      	cmp	r0, r1
   bae42:	b510      	push	{r4, lr}
   bae44:	eb01 0402 	add.w	r4, r1, r2
   bae48:	d902      	bls.n	bae50 <memmove+0x10>
   bae4a:	4284      	cmp	r4, r0
   bae4c:	4623      	mov	r3, r4
   bae4e:	d807      	bhi.n	bae60 <memmove+0x20>
   bae50:	1e43      	subs	r3, r0, #1
   bae52:	42a1      	cmp	r1, r4
   bae54:	d008      	beq.n	bae68 <memmove+0x28>
   bae56:	f811 2b01 	ldrb.w	r2, [r1], #1
   bae5a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bae5e:	e7f8      	b.n	bae52 <memmove+0x12>
   bae60:	4402      	add	r2, r0
   bae62:	4601      	mov	r1, r0
   bae64:	428a      	cmp	r2, r1
   bae66:	d100      	bne.n	bae6a <memmove+0x2a>
   bae68:	bd10      	pop	{r4, pc}
   bae6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bae6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bae72:	e7f7      	b.n	bae64 <memmove+0x24>

000bae74 <memset>:
   bae74:	4402      	add	r2, r0
   bae76:	4603      	mov	r3, r0
   bae78:	4293      	cmp	r3, r2
   bae7a:	d100      	bne.n	bae7e <memset+0xa>
   bae7c:	4770      	bx	lr
   bae7e:	f803 1b01 	strb.w	r1, [r3], #1
   bae82:	e7f9      	b.n	bae78 <memset+0x4>

000bae84 <srand>:
   bae84:	b538      	push	{r3, r4, r5, lr}
   bae86:	4b10      	ldr	r3, [pc, #64]	; (baec8 <srand+0x44>)
   bae88:	681d      	ldr	r5, [r3, #0]
   bae8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bae8c:	4604      	mov	r4, r0
   bae8e:	b9b3      	cbnz	r3, baebe <srand+0x3a>
   bae90:	2018      	movs	r0, #24
   bae92:	f7fc f8f7 	bl	b7084 <malloc>
   bae96:	4602      	mov	r2, r0
   bae98:	63a8      	str	r0, [r5, #56]	; 0x38
   bae9a:	b920      	cbnz	r0, baea6 <srand+0x22>
   bae9c:	4b0b      	ldr	r3, [pc, #44]	; (baecc <srand+0x48>)
   bae9e:	480c      	ldr	r0, [pc, #48]	; (baed0 <srand+0x4c>)
   baea0:	2142      	movs	r1, #66	; 0x42
   baea2:	f7fc f927 	bl	b70f4 <__assert_func>
   baea6:	490b      	ldr	r1, [pc, #44]	; (baed4 <srand+0x50>)
   baea8:	4b0b      	ldr	r3, [pc, #44]	; (baed8 <srand+0x54>)
   baeaa:	e9c0 1300 	strd	r1, r3, [r0]
   baeae:	4b0b      	ldr	r3, [pc, #44]	; (baedc <srand+0x58>)
   baeb0:	6083      	str	r3, [r0, #8]
   baeb2:	230b      	movs	r3, #11
   baeb4:	8183      	strh	r3, [r0, #12]
   baeb6:	2100      	movs	r1, #0
   baeb8:	2001      	movs	r0, #1
   baeba:	e9c2 0104 	strd	r0, r1, [r2, #16]
   baebe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   baec0:	2200      	movs	r2, #0
   baec2:	611c      	str	r4, [r3, #16]
   baec4:	615a      	str	r2, [r3, #20]
   baec6:	bd38      	pop	{r3, r4, r5, pc}
   baec8:	2003e608 	.word	0x2003e608
   baecc:	000bb915 	.word	0x000bb915
   baed0:	000bb92c 	.word	0x000bb92c
   baed4:	abcd330e 	.word	0xabcd330e
   baed8:	e66d1234 	.word	0xe66d1234
   baedc:	0005deec 	.word	0x0005deec

000baee0 <strcmp>:
   baee0:	f810 2b01 	ldrb.w	r2, [r0], #1
   baee4:	f811 3b01 	ldrb.w	r3, [r1], #1
   baee8:	2a01      	cmp	r2, #1
   baeea:	bf28      	it	cs
   baeec:	429a      	cmpcs	r2, r3
   baeee:	d0f7      	beq.n	baee0 <strcmp>
   baef0:	1ad0      	subs	r0, r2, r3
   baef2:	4770      	bx	lr

000baef4 <strcpy>:
   baef4:	4603      	mov	r3, r0
   baef6:	f811 2b01 	ldrb.w	r2, [r1], #1
   baefa:	f803 2b01 	strb.w	r2, [r3], #1
   baefe:	2a00      	cmp	r2, #0
   baf00:	d1f9      	bne.n	baef6 <strcpy+0x2>
   baf02:	4770      	bx	lr

000baf04 <strdup>:
   baf04:	4b02      	ldr	r3, [pc, #8]	; (baf10 <strdup+0xc>)
   baf06:	4601      	mov	r1, r0
   baf08:	6818      	ldr	r0, [r3, #0]
   baf0a:	f000 b803 	b.w	baf14 <_strdup_r>
   baf0e:	bf00      	nop
   baf10:	2003e608 	.word	0x2003e608

000baf14 <_strdup_r>:
   baf14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baf16:	4604      	mov	r4, r0
   baf18:	4608      	mov	r0, r1
   baf1a:	460d      	mov	r5, r1
   baf1c:	f000 f80f 	bl	baf3e <strlen>
   baf20:	1c42      	adds	r2, r0, #1
   baf22:	4611      	mov	r1, r2
   baf24:	4620      	mov	r0, r4
   baf26:	9201      	str	r2, [sp, #4]
   baf28:	f7fc f8dc 	bl	b70e4 <_malloc_r>
   baf2c:	4604      	mov	r4, r0
   baf2e:	b118      	cbz	r0, baf38 <_strdup_r+0x24>
   baf30:	9a01      	ldr	r2, [sp, #4]
   baf32:	4629      	mov	r1, r5
   baf34:	f7ff ff76 	bl	bae24 <memcpy>
   baf38:	4620      	mov	r0, r4
   baf3a:	b003      	add	sp, #12
   baf3c:	bd30      	pop	{r4, r5, pc}

000baf3e <strlen>:
   baf3e:	4603      	mov	r3, r0
   baf40:	f813 2b01 	ldrb.w	r2, [r3], #1
   baf44:	2a00      	cmp	r2, #0
   baf46:	d1fb      	bne.n	baf40 <strlen+0x2>
   baf48:	1a18      	subs	r0, r3, r0
   baf4a:	3801      	subs	r0, #1
   baf4c:	4770      	bx	lr

000baf4e <strnlen>:
   baf4e:	b510      	push	{r4, lr}
   baf50:	4602      	mov	r2, r0
   baf52:	4401      	add	r1, r0
   baf54:	428a      	cmp	r2, r1
   baf56:	4613      	mov	r3, r2
   baf58:	d003      	beq.n	baf62 <strnlen+0x14>
   baf5a:	781c      	ldrb	r4, [r3, #0]
   baf5c:	3201      	adds	r2, #1
   baf5e:	2c00      	cmp	r4, #0
   baf60:	d1f8      	bne.n	baf54 <strnlen+0x6>
   baf62:	1a18      	subs	r0, r3, r0
   baf64:	bd10      	pop	{r4, pc}
	...

000baf68 <__register_exitproc>:
   baf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baf6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb028 <__register_exitproc+0xc0>
   baf70:	4606      	mov	r6, r0
   baf72:	f8d8 0000 	ldr.w	r0, [r8]
   baf76:	461f      	mov	r7, r3
   baf78:	460d      	mov	r5, r1
   baf7a:	4691      	mov	r9, r2
   baf7c:	f000 f856 	bl	bb02c <__retarget_lock_acquire_recursive>
   baf80:	4b25      	ldr	r3, [pc, #148]	; (bb018 <__register_exitproc+0xb0>)
   baf82:	681c      	ldr	r4, [r3, #0]
   baf84:	b934      	cbnz	r4, baf94 <__register_exitproc+0x2c>
   baf86:	4c25      	ldr	r4, [pc, #148]	; (bb01c <__register_exitproc+0xb4>)
   baf88:	601c      	str	r4, [r3, #0]
   baf8a:	4b25      	ldr	r3, [pc, #148]	; (bb020 <__register_exitproc+0xb8>)
   baf8c:	b113      	cbz	r3, baf94 <__register_exitproc+0x2c>
   baf8e:	681b      	ldr	r3, [r3, #0]
   baf90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   baf94:	6863      	ldr	r3, [r4, #4]
   baf96:	2b1f      	cmp	r3, #31
   baf98:	dd07      	ble.n	bafaa <__register_exitproc+0x42>
   baf9a:	f8d8 0000 	ldr.w	r0, [r8]
   baf9e:	f000 f847 	bl	bb030 <__retarget_lock_release_recursive>
   bafa2:	f04f 30ff 	mov.w	r0, #4294967295
   bafa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bafaa:	b34e      	cbz	r6, bb000 <__register_exitproc+0x98>
   bafac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bafb0:	b988      	cbnz	r0, bafd6 <__register_exitproc+0x6e>
   bafb2:	4b1c      	ldr	r3, [pc, #112]	; (bb024 <__register_exitproc+0xbc>)
   bafb4:	b923      	cbnz	r3, bafc0 <__register_exitproc+0x58>
   bafb6:	f8d8 0000 	ldr.w	r0, [r8]
   bafba:	f000 f838 	bl	bb02e <__retarget_lock_release>
   bafbe:	e7f0      	b.n	bafa2 <__register_exitproc+0x3a>
   bafc0:	f44f 7084 	mov.w	r0, #264	; 0x108
   bafc4:	f7fc f85e 	bl	b7084 <malloc>
   bafc8:	2800      	cmp	r0, #0
   bafca:	d0f4      	beq.n	bafb6 <__register_exitproc+0x4e>
   bafcc:	2300      	movs	r3, #0
   bafce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bafd2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bafd6:	6863      	ldr	r3, [r4, #4]
   bafd8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bafdc:	2201      	movs	r2, #1
   bafde:	409a      	lsls	r2, r3
   bafe0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bafe4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bafe8:	4313      	orrs	r3, r2
   bafea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bafee:	2e02      	cmp	r6, #2
   baff0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   baff4:	bf02      	ittt	eq
   baff6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   baffa:	4313      	orreq	r3, r2
   baffc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb000:	6863      	ldr	r3, [r4, #4]
   bb002:	f8d8 0000 	ldr.w	r0, [r8]
   bb006:	1c5a      	adds	r2, r3, #1
   bb008:	3302      	adds	r3, #2
   bb00a:	6062      	str	r2, [r4, #4]
   bb00c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb010:	f000 f80e 	bl	bb030 <__retarget_lock_release_recursive>
   bb014:	2000      	movs	r0, #0
   bb016:	e7c6      	b.n	bafa6 <__register_exitproc+0x3e>
   bb018:	2003e7e8 	.word	0x2003e7e8
   bb01c:	2003e75c 	.word	0x2003e75c
   bb020:	00000000 	.word	0x00000000
   bb024:	000b7085 	.word	0x000b7085
   bb028:	2003e66c 	.word	0x2003e66c

000bb02c <__retarget_lock_acquire_recursive>:
   bb02c:	4770      	bx	lr

000bb02e <__retarget_lock_release>:
   bb02e:	4770      	bx	lr

000bb030 <__retarget_lock_release_recursive>:
   bb030:	4770      	bx	lr

000bb032 <link_code_end>:
	...

000bb034 <dynalib_user>:
   bb034:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   bb044:	0000 0000 6f4c 706f 5300 6174 7472 7320     ....Loop.Start s
   bb054:	6163 6e6e 6e69 0067 6e45 6574 6972 676e     canning.Entering
   bb064:	4320 6c61 626c 6361 006b 4144 4154 203a      Callback.DATA: 
   bb074:	7325 0a20 0000 0000                         %s .....

000bb07c <_ZTV6Beacon>:
	...
   bb084:	40d5 000b 40af 000b 6574 706d 6200 7475     .@...@..temp.but
   bb094:	6f74 006e 5f78 7861 7369 7900 615f 6978     ton.x_axis.y_axi
   bb0a4:	0073 5f7a 7861 7369 7200 7373 0069 0000     s.z_axis.rssi...

000bb0b4 <_ZTV10KontaktTag>:
	...
   bb0bc:	453d 000b 4645 000b 616d 6e67 7465 6e5f     =E..EF..magnet_n
   bb0cc:	6165 0072 6572 6f63 6472 5200 6365 6965     ear.record.Recei
   bb0dc:	6576 2064 6425 6220 7479 7365 6a00 6f73     ved %d bytes.jso
   bb0ec:	726e 6370 3200 302e 6d00 7465 6f68 0064     nrpc.2.0.method.
   bb0fc:	6573 0074 6170 6172 736d 7300 6e65 6f73     set.params.senso
   bb10c:	4e72 6d61 0065 6574 706d 7265 7461 7275     rName.temperatur
   bb11c:	5365 6e65 6573 6e49 6574 7672 6c61 6200     eSenseInterval.b
   bb12c:	7461 6574 7972 6553 736e 4965 746e 7265     atterySenseInter
   bb13c:	6176 006c 6968 6867 6554 706d 7265 7461     val.highTemperat
   bb14c:	7275 4165 616c 6d72 6854 6572 6873 6c6f     ureAlarmThreshol
   bb15c:	3164 6800 6769 5468 6d65 6570 6172 7574     d1.highTemperatu
   bb16c:	6572 6c41 7261 546d 7268 7365 6f68 646c     reAlarmThreshold
   bb17c:	0032 6f6c 5477 6d65 6570 6172 7574 6572     2.lowTemperature
   bb18c:	6c41 7261 546d 7268 7365 6f68 646c 0031     AlarmThreshold1.
   bb19c:	6f6c 5477 6d65 6570 6172 7574 6572 6c41     lowTemperatureAl
   bb1ac:	7261 546d 7268 7365 6f68 646c 0032 6564     armThreshold2.de
   bb1bc:	746c 5461 6d65 6570 6172 7574 6572 6c41     ltaTemperatureAl
   bb1cc:	7261 546d 7268 7365 6f68 646c 7000 7361     armThreshold.pas
   bb1dc:	6b73 7965 7500 6573 6f43 6564 5064 7968     skey.useCodedPhy
   bb1ec:	4e00 7765 6420 7665 6369 2065 616e 656d     .New device name
   bb1fc:	203a 7325 5000 6961 6972 676e 3500 3936     : %s.Pairing.569
   bb20c:	3261 3030 2d31 3862 6637 342d 3039 2d63     a2001-b87f-490c-
   bb21c:	3239 6263 312d 6231 3561 6165 3135 3736     92cb-11ba5ea5167
   bb22c:	0063 3635 6139 3032 3030 622d 3738 2d66     c.569a2000-b87f-
   bb23c:	3934 6330 392d 6332 2d62 3131 6162 6535     490c-92cb-11ba5e
   bb24c:	3561 3631 6337 5300 6e65 2064 6176 756c     a5167c.Send valu
   bb25c:	3a65 2520 0073 6573 2074 6176 756c 2065     e: %s.set value 
   bb26c:	6572 7574 6e72 203a 6425 0000               return: %d..

000bb278 <_ZTV16JSONVectorWriter>:
	...
   bb280:	4c5d 000b 4c75 000b 518d 000b a0ed 000b     ]L..uL...Q......
   bb290:	3231 3433 3635 0000                         123456..

000bb298 <_ZTV10LairdBt510>:
	...
   bb2a0:	4a31 000b 5005 000b 3025 5832 3025 5832     1J...P..%02X%02X
   bb2b0:	3025 5832 3025 5832 252d 3230 2558 3230     %02X%02X-%02X%02
   bb2c0:	2d58 3025 5832 3025 5832 252d 3230 2558     X-%02X%02X-%02X%
   bb2d0:	3230 2d58 3025 5832 3025 5832 3025 5832     02X-%02X%02X%02X
   bb2e0:	3025 5832 3025 5832 3025 5832 7500 6975     %02X%02X%02X.uui
   bb2f0:	0064 616d 6f6a 0072 696d 6f6e 0072 6f70     d.major.minor.po
   bb300:	6577 0072                                   wer.

000bb304 <_ZTV11iBeaconScan>:
	...
   bb30c:	59d1 000b 5919 000b 6373 6e61 745f 7268     .Y...Y..scan_thr
   bb31c:	6165 0064 6445 7964 7473 6e6f 2065 6f66     ead.Eddystone fo
   bb32c:	6d72 7461 6e20 746f 7320 7075 6f70 7472     rmat not support
   bb33c:	6465 203a 3025 5832 6800 7474 3a70 2f2f     ed: %02X.http://
   bb34c:	7777 2e77 6800 7474 7370 2f3a 772f 7777     www..https://www
   bb35c:	002e 7468 7074 2f3a 002f 7468 7074 3a73     ..http://.https:
   bb36c:	2f2f 2e00 6f63 2f6d 2e00 726f 2f67 2e00     //..com/..org/..
   bb37c:	6465 2f75 2e00 656e 2f74 2e00 6e69 6f66     edu/..net/..info
   bb38c:	002f 622e 7a69 002f 672e 766f 002f 632e     /..biz/..gov/..c
   bb39c:	6d6f 2e00 726f 0067 652e 7564 2e00 656e     om..org..edu..ne
   bb3ac:	0074 692e 666e 006f 622e 7a69 2e00 6f67     t..info..biz..go
   bb3bc:	0076 2e25 732a 6e00 6d61 7365 6170 6563     v.%.*s.namespace
   bb3cc:	2500 3230 2558 3230 2558 3230 2558 3230     .%02X%02X%02X%02
   bb3dc:	2558 3230 2558 3230 2558 3230 2558 3230     X%02X%02X%02X%02
   bb3ec:	2558 3230 2558 3230 0058 6e69 7473 6e61     X%02X%02X.instan
   bb3fc:	6563 7500 6c72 7400 6d6c 7600 6162 7474     ce.url.tlm.vbatt
   bb40c:	6100 7664 635f 746e 7300 6365 635f 746e     .adv_cnt.sec_cnt
   bb41c:	6b00 6d6b 0000 0000                         .kkm....

000bb424 <_ZTV9Eddystone>:
	...
   bb42c:	67b1 000b 65bd 000b                         .g...e..

000bb434 <_ZTVN5spark13EthernetClassE>:
	...
   bb43c:	7173 000b 7169 000b 715f 000b 7155 000b     sq..iq.._q..Uq..
   bb44c:	7149 000b 713d 000b 9fc9 000b 9fd1 000b     Iq..=q..........
   bb45c:	7131 000b 7129 000b 711f 000b 7115 000b     1q..)q...q...q..
   bb46c:	a001 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bb47c:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   bb48c:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   bb49c:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   bb4ac:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   bb4bc:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   bb4cc:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   bb4dc:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   bb4ec:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   bb4fc:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   bb50c:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   bb51c:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   bb52c:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   bb53c:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   bb54c:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   bb55c:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   bb56c:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   bb57c:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   bb58c:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   bb59c:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   bb5ac:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   bb5bc:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   bb5cc:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   bb5dc:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   bb5ec:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   bb5fc:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   bb60c:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   bb61c:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   bb62c:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   bb63c:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   bb64c:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   bb65c:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   bb66c:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   bb67c:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000bb68c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb694:	7407 000b 7469 000b 75df 000b 7493 000b     .t..it...u...t..
   bb6a4:	7409 000b                                   .t..

000bb6a8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb6b0:	7403 000b 7477 000b 7405 000b 7499 000b     .t..wt...t...t..
   bb6c0:	7429 000b                                   )t..

000bb6c4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb6cc:	7401 000b 7485 000b 81a1 000b 749f 000b     .t...t.......t..
   bb6dc:	7449 000b                                   It..

000bb6e0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bb6ec:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   bb6fc:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   bb70c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   bb71c:	0065 0000                                   e...

000bb720 <_ZTV9IPAddress>:
	...
   bb728:	9c51 000b 9c41 000b 9c43 000b               Q...A...C...

000bb734 <_ZTV9USBSerial>:
	...
   bb73c:	9d37 000b 9d9f 000b 9d75 000b 99b9 000b     7.......u.......
   bb74c:	9d67 000b 9d39 000b 9d49 000b 9d99 000b     g...9...I.......
   bb75c:	9d59 000b 9d31 000b                         Y...1...

000bb764 <_ZTV11USARTSerial>:
	...
   bb76c:	9e41 000b 9ead 000b 9e85 000b 99b9 000b     A...............
   bb77c:	9e55 000b 9e71 000b 9e63 000b 9e7f 000b     U...q...c.......
   bb78c:	9e43 000b 9e47 000b                         C...G...

000bb794 <_ZTVN5spark9WiFiClassE>:
	...
   bb79c:	9f6b 000b 9f61 000b 9f57 000b 9f0d 000b     k...a...W.......
   bb7ac:	9f4b 000b 9f3f 000b 9fc9 000b 9fd1 000b     K...?...........
   bb7bc:	9f33 000b 9f2b 000b 9f21 000b 9f17 000b     3...+...!.......
   bb7cc:	a001 000b                                   ....

000bb7d0 <_ZTVN5spark12NetworkClassE>:
	...
   bb7d8:	9f89 000b 9f93 000b 9f9d 000b 9fa7 000b     ................
   bb7e8:	9fb1 000b 9fbd 000b 9fc9 000b 9fd1 000b     ................
   bb7f8:	9fd9 000b 9fe5 000b 9fed 000b 9ff7 000b     ................
   bb808:	a001 000b 2e30 0030 7274 6575 2500 0075     ....0.0.true.%u.
   bb818:	6725 7500 3025 7834                          %g.u%04x.

000bb821 <_ZSt7nothrow>:
	...

000bb822 <_ZTSSt19_Sp_make_shared_tag>:
   bb822:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb832:	6572 5f64 6174 0067 0000                    red_tag...

000bb83c <_ZTISt19_Sp_make_shared_tag>:
   bb83c:	b87c 000b b822 000b                         |..."...

000bb844 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb844:	b8dc 000b b850 000b b900 000b               ....P.......

000bb850 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb850:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb860:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb870:	0045 0000                                   E...

000bb874 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb874:	0000 0000 b844 000b a595 000b a5a9 000b     ....D...........
   bb884:	a73d 000b a73d 000b a613 000b a555 000b     =...=.......U...
   bb894:	a5fb 000b a5bd 000b a587 000b               ............

000bb8a0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb8a0:	b8dc 000b b8ac 000b b844 000b               ........D...

000bb8ac <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb8ac:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb8bc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb8cc:	666e 456f 0000 0000                         nfoE....

000bb8d4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb8d4:	0000 0000 b8a0 000b a63d 000b a651 000b     ........=...Q...
   bb8e4:	a73d 000b a73d 000b a613 000b a555 000b     =...=.......U...
   bb8f4:	a711 000b a69d 000b a665 000b               ........e...

000bb900 <_ZTISt9type_info>:
   bb900:	b87c 000b b908 000b                         |.......

000bb908 <_ZTSSt9type_info>:
   bb908:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb918:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb928:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bb938:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bb948:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bb958:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bb968:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bb978:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bb988:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bb998:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000bb9a9 <_ctype_>:
   bb9a9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb9b9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb9c9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb9d9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb9e9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb9f9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bba09:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bba19:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bba29:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bbaaa <link_const_variable_data_end>:
	...

000bbaac <link_constructors_location>:
   bbaac:	000b44f9 	.word	0x000b44f9
   bbab0:	000b49a9 	.word	0x000b49a9
   bbab4:	000b5909 	.word	0x000b5909
   bbab8:	000b5c55 	.word	0x000b5c55
   bbabc:	000b6bc5 	.word	0x000b6bc5
   bbac0:	000b717d 	.word	0x000b717d
   bbac4:	000b7191 	.word	0x000b7191
   bbac8:	000b99a9 	.word	0x000b99a9
   bbacc:	000b9ad9 	.word	0x000b9ad9
   bbad0:	000b9ae9 	.word	0x000b9ae9
   bbad4:	000b9afd 	.word	0x000b9afd
   bbad8:	000b9f75 	.word	0x000b9f75
   bbadc:	000ba0d9 	.word	0x000ba0d9
