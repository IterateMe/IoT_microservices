
c:/Users/viann/Desktop/UdeS/S6/APP_5/IoT_microservices/Argon_project/target/3.3.0/argon/Argon_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008b24  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bcb40  000bcb40  0000cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000bcb64  000bcb64  0000cb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000bcb6c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5a4  000bcb70  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  2003e618  2003e618  0002e618  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000bcbe0  000bcbe0  0002cbe0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bcc08  000bcc08  0002cc08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001a5f48  00000000  00000000  0002cc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000189dd  00000000  00000000  001d2b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004b4de  00000000  00000000  001eb531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000034f0  00000000  00000000  00236a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000d8a0  00000000  00000000  00239eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e3e0  00000000  00000000  0024779f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004fab2  00000000  00000000  00285b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014ea5e  00000000  00000000  002d5631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009b4c  00000000  00000000  00424090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f007 feaf 	bl	bbd90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f007 fed1 	bl	bbde0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5a4 	.word	0x2003e5a4
   b4048:	000bcb70 	.word	0x000bcb70
   b404c:	2003e614 	.word	0x2003e614
   b4050:	2003e618 	.word	0x2003e618
   b4054:	2003e7f1 	.word	0x2003e7f1

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f006 fa29 	bl	ba4b4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bcb08 	.word	0x000bcb08
   b407c:	000bcb3c 	.word	0x000bcb3c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8c2 	b.w	b4208 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f90f 	bl	b42a8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f006 b9c9 	b.w	ba424 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f003 bb49 	b.w	b7728 <malloc>

000b4096 <_Znaj>:
   b4096:	f003 bb47 	b.w	b7728 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f003 bb4d 	b.w	b7738 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>:
protected:
    BleAddress address;
    int16_t rssi;
    uint8_t rssi_count;
    virtual void populateData(const BleScanResult *scanResult) {
        rssi += RSSI(scanResult);
   b40ae:	f991 3020 	ldrsb.w	r3, [r1, #32]
   b40b2:	8a02      	ldrh	r2, [r0, #16]
   b40b4:	4413      	add	r3, r2
        rssi_count++;
   b40b6:	7c82      	ldrb	r2, [r0, #18]
   b40b8:	3201      	adds	r2, #1
   b40ba:	b2d2      	uxtb	r2, r2
        rssi += RSSI(scanResult);
   b40bc:	b21b      	sxth	r3, r3
        if (rssi_count > 5) {
   b40be:	2a05      	cmp	r2, #5
        rssi += RSSI(scanResult);
   b40c0:	8203      	strh	r3, [r0, #16]
            rssi = rssi/rssi_count;
   b40c2:	bf82      	ittt	hi
   b40c4:	fb93 f3f2 	sdivhi	r3, r3, r2
   b40c8:	8203      	strhhi	r3, [r0, #16]
            rssi_count = 1;
   b40ca:	2301      	movhi	r3, #1
        rssi_count++;
   b40cc:	7482      	strb	r2, [r0, #18]
            rssi_count = 1;
   b40ce:	bf88      	it	hi
   b40d0:	7483      	strbhi	r3, [r0, #18]
        }
    };
   b40d2:	4770      	bx	lr

000b40d4 <_ZNK6Beacon6toJsonEPN5spark10JSONWriterE>:
    virtual void toJson(JSONWriter *writer) const {
   b40d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b40d6:	460c      	mov	r4, r1
        writer->name(address.toString()).beginObject();
   b40d8:	2200      	movs	r2, #0
   b40da:	1dc1      	adds	r1, r0, #7
   b40dc:	4668      	mov	r0, sp
   b40de:	f003 ff4f 	bl	b7f80 <_ZNK8particle10BleAddress8toStringEb>
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
}

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
   b40e2:	9a02      	ldr	r2, [sp, #8]
   b40e4:	9900      	ldr	r1, [sp, #0]
   b40e6:	4620      	mov	r0, r4
   b40e8:	f006 ff1a 	bl	baf20 <_ZN5spark10JSONWriter4nameEPKcj>
   b40ec:	f006 fe5e 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
   b40f0:	4668      	mov	r0, sp
   b40f2:	f003 fc17 	bl	b7924 <_ZN6StringD1Ev>
        writer->endObject();
   b40f6:	4620      	mov	r0, r4
    };
   b40f8:	b004      	add	sp, #16
   b40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        writer->endObject();
   b40fe:	f006 be3f 	b.w	bad80 <_ZN5spark10JSONWriter9endObjectEv>
	...

000b4104 <_Z9switchLED6String>:
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
    Serial.printf("%s is %s :: %s\n", uuid.c_str(), pres.c_str(), Time.timeStr().c_str());
  }
}

int switchLED(String arg){
   b4104:	b508      	push	{r3, lr}
  ledIsON = !ledIsON;
   b4106:	4b05      	ldr	r3, [pc, #20]	; (b411c <_Z9switchLED6String+0x18>)
   b4108:	7819      	ldrb	r1, [r3, #0]
   b410a:	f081 0101 	eor.w	r1, r1, #1
   b410e:	7019      	strb	r1, [r3, #0]
  digitalWrite(led, ledIsON);
   b4110:	4b03      	ldr	r3, [pc, #12]	; (b4120 <_Z9switchLED6String+0x1c>)
   b4112:	8818      	ldrh	r0, [r3, #0]
   b4114:	f006 ff73 	bl	baffe <digitalWrite>
  return 0;
}
   b4118:	2000      	movs	r0, #0
   b411a:	bd08      	pop	{r3, pc}
   b411c:	2003e624 	.word	0x2003e624
   b4120:	2003e5a4 	.word	0x2003e5a4

000b4124 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>:
	__p->~_Rb_tree_node<_Val>();
#endif
      }

      void
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   b4124:	b538      	push	{r3, r4, r5, lr}
   b4126:	4604      	mov	r4, r0
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
   b4128:	f100 0510 	add.w	r5, r0, #16
   b412c:	3020      	adds	r0, #32
   b412e:	f003 fbf9 	bl	b7924 <_ZN6StringD1Ev>
   b4132:	4628      	mov	r0, r5
   b4134:	f003 fbf6 	bl	b7924 <_ZN6StringD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4138:	4620      	mov	r0, r4
   b413a:	2130      	movs	r1, #48	; 0x30
      {
	_M_destroy_node(__p);
	_M_put_node(__p);
      }
   b413c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4140:	f7ff bfab 	b.w	b409a <_ZdlPvj>

000b4144 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4144:	b538      	push	{r3, r4, r5, lr}
   b4146:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b4148:	b144      	cbz	r4, b415c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0+0x18>
	{
	  _M_erase(_S_right(__x));
   b414a:	68e0      	ldr	r0, [r4, #12]
   b414c:	f7ff fffa 	bl	b4144 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b4150:	68a5      	ldr	r5, [r4, #8]
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
   b4152:	4620      	mov	r0, r4
   b4154:	f7ff ffe6 	bl	b4124 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>
	  __x = __y;
   b4158:	462c      	mov	r4, r5
      while (__x != 0)
   b415a:	e7f5      	b.n	b4148 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0+0x4>
	}
    }
   b415c:	bd38      	pop	{r3, r4, r5, pc}

000b415e <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b415e:	b40e      	push	{r1, r2, r3}
   b4160:	b503      	push	{r0, r1, lr}
   b4162:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4164:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4166:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b416a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b416c:	f006 f877 	bl	ba25e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4170:	b002      	add	sp, #8
   b4172:	f85d eb04 	ldr.w	lr, [sp], #4
   b4176:	b003      	add	sp, #12
   b4178:	4770      	bx	lr
	...

000b417c <_ZN13Beaconscanner8instanceEv>:
  /**
   * @brief Singleton class instance access for Beaconscanner.
   *
   * @return Beaconscanner&
   */
  static Beaconscanner& instance() {
   b417c:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b417e:	4d10      	ldr	r5, [pc, #64]	; (b41c0 <_ZN13Beaconscanner8instanceEv+0x44>)
   b4180:	682c      	ldr	r4, [r5, #0]
   b4182:	b9d4      	cbnz	r4, b41ba <_ZN13Beaconscanner8instanceEv+0x3e>
      _instance = new Beaconscanner();
   b4184:	2058      	movs	r0, #88	; 0x58
   b4186:	f7ff ff84 	bl	b4092 <_Znwj>
   b418a:	b1a8      	cbz	r0, b41b8 <_ZN13Beaconscanner8instanceEv+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b418c:	e9c0 4407 	strd	r4, r4, [r0, #28]
   b4190:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
   b4194:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
   b4198:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
   b419c:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
   b41a0:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
      _clear_missed(1),
      _scan_period(10),
      _last_publish(0),
      _thread(nullptr),
      _callback(nullptr),
      _customCallback(nullptr) {};
   b41a4:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
   b41a8:	f640 2301 	movw	r3, #2561	; 0xa01
   b41ac:	7144      	strb	r4, [r0, #5]
   b41ae:	80c4      	strh	r4, [r0, #6]
   b41b0:	8183      	strh	r3, [r0, #12]
   b41b2:	6104      	str	r4, [r0, #16]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b41b4:	7504      	strb	r4, [r0, #20]
   b41b6:	6544      	str	r4, [r0, #84]	; 0x54
      _instance = new Beaconscanner();
   b41b8:	6028      	str	r0, [r5, #0]
  }
   b41ba:	6828      	ldr	r0, [r5, #0]
   b41bc:	bd38      	pop	{r3, r4, r5, pc}
   b41be:	bf00      	nop
   b41c0:	2003e690 	.word	0x2003e690

000b41c4 <_Z10setupBadgev>:

void setupBadge(){
   b41c4:	b510      	push	{r4, lr}
  BLE.on();
   b41c6:	f004 faa1 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ca:	f004 fae9 	bl	b87a0 <_ZNK8particle14BleLocalDevice2onEv>
  Scanner.setScanPeriod(5);
   b41ce:	f7ff ffd5 	bl	b417c <_ZN13Beaconscanner8instanceEv>
    if (seconds > 0) _scan_period = seconds;
   b41d2:	2305      	movs	r3, #5
   b41d4:	7343      	strb	r3, [r0, #13]
  Scanner.setMissedCount(1);
   b41d6:	f7ff ffd1 	bl	b417c <_ZN13Beaconscanner8instanceEv>
    if (count > 0) _clear_missed = count;
   b41da:	2401      	movs	r4, #1
   b41dc:	7304      	strb	r4, [r0, #12]
  Scanner.setCallback(onCallBack);
   b41de:	f7ff ffcd 	bl	b417c <_ZN13Beaconscanner8instanceEv>
  Beaconscanner& setCallback(BeaconScanCallback callback) { _callback = callback; return *this; };
   b41e2:	4b04      	ldr	r3, [pc, #16]	; (b41f4 <_Z10setupBadgev+0x30>)
   b41e4:	6503      	str	r3, [r0, #80]	; 0x50
  Scanner.startContinuous(SCAN_IBEACON);
   b41e6:	f7ff ffc9 	bl	b417c <_ZN13Beaconscanner8instanceEv>
   b41ea:	4621      	mov	r1, r4
}
   b41ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Scanner.startContinuous(SCAN_IBEACON);
   b41f0:	f002 b868 	b.w	b62c4 <_ZN13Beaconscanner15startContinuousEi>
   b41f4:	000b4405 	.word	0x000b4405

000b41f8 <_Z12executeBadgev>:

void executeBadge(){
   b41f8:	b508      	push	{r3, lr}
  Scanner.loop();
   b41fa:	f7ff ffbf 	bl	b417c <_ZN13Beaconscanner8instanceEv>
}
   b41fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Scanner.loop();
   b4202:	f002 ba57 	b.w	b66b4 <_ZN13Beaconscanner4loopEv>
	...

000b4208 <setup>:

void setup() {
   b4208:	b538      	push	{r3, r4, r5, lr}
  pinMode(led, OUTPUT);
   b420a:	4c20      	ldr	r4, [pc, #128]	; (b428c <setup+0x84>)
   b420c:	2101      	movs	r1, #1
   b420e:	8820      	ldrh	r0, [r4, #0]
   b4210:	f006 fee4 	bl	bafdc <pinMode>
  digitalWrite(led, 0);
   b4214:	8820      	ldrh	r0, [r4, #0]
   b4216:	2100      	movs	r1, #0
   b4218:	f006 fef1 	bl	baffe <digitalWrite>
  Serial.begin(9600);
   b421c:	f006 fbb2 	bl	ba984 <_Z16_fetch_usbserialv>
   b4220:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4224:	f006 fb9e 	bl	ba964 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4228:	2000      	movs	r0, #0
   b422a:	f002 ffb5 	bl	b7198 <hal_timer_millis>
        while (_while() && !_condition()) {
   b422e:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b4232:	4604      	mov	r4, r0
   b4234:	2000      	movs	r0, #0
   b4236:	f002 ffaf 	bl	b7198 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b423a:	1b00      	subs	r0, r0, r4
   b423c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4240:	42a8      	cmp	r0, r5
   b4242:	f171 0300 	sbcs.w	r3, r1, #0
   b4246:	d207      	bcs.n	b4258 <setup+0x50>
	waitFor(Serial.isConnected, 30000);
   b4248:	f006 fb9c 	bl	ba984 <_Z16_fetch_usbserialv>
   b424c:	f006 fb8e 	bl	ba96c <_ZN9USBSerial11isConnectedEv>
   b4250:	b910      	cbnz	r0, b4258 <setup+0x50>
            spark_process();
   b4252:	f003 fa31 	bl	b76b8 <spark_process>
        while (_while() && !_condition()) {
   b4256:	e7ed      	b.n	b4234 <setup+0x2c>
   b4258:	f006 fb94 	bl	ba984 <_Z16_fetch_usbserialv>
   b425c:	f006 fb86 	bl	ba96c <_ZN9USBSerial11isConnectedEv>
  setupBadge();
   b4260:	f7ff ffb0 	bl	b41c4 <_Z10setupBadgev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4264:	f003 fa30 	bl	b76c8 <spark_cloud_flag_connect>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4268:	4a09      	ldr	r2, [pc, #36]	; (b4290 <setup+0x88>)
   b426a:	490a      	ldr	r1, [pc, #40]	; (b4294 <setup+0x8c>)
   b426c:	480a      	ldr	r0, [pc, #40]	; (b4298 <setup+0x90>)
   b426e:	f006 f976 	bl	ba55e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4272:	490a      	ldr	r1, [pc, #40]	; (b429c <setup+0x94>)
   b4274:	480a      	ldr	r0, [pc, #40]	; (b42a0 <setup+0x98>)
   b4276:	2300      	movs	r3, #0
   b4278:	2201      	movs	r2, #1
   b427a:	f003 fa0d 	bl	b7698 <spark_variable>
  Particle.connect();
  Particle.function("switchLed", switchLED);
  Particle.variable("LedStatus", ledIsON);
  Serial.println("Start scanning");
   b427e:	f006 fb81 	bl	ba984 <_Z16_fetch_usbserialv>
}
   b4282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial.println("Start scanning");
   b4286:	4907      	ldr	r1, [pc, #28]	; (b42a4 <setup+0x9c>)
   b4288:	f005 bfc1 	b.w	ba20e <_ZN5Print7printlnEPKc>
   b428c:	2003e5a4 	.word	0x2003e5a4
   b4290:	000bbfb4 	.word	0x000bbfb4
   b4294:	000b4105 	.word	0x000b4105
   b4298:	000ba533 	.word	0x000ba533
   b429c:	2003e624 	.word	0x2003e624
   b42a0:	000bbfbe 	.word	0x000bbfbe
   b42a4:	000bbfc8 	.word	0x000bbfc8

000b42a8 <loop>:

void loop() {
  executeBadge();
   b42a8:	f7ff bfa6 	b.w	b41f8 <_Z12executeBadgev>

000b42ac <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b42ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b42b0:	f8d1 8008 	ldr.w	r8, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b42b4:	4607      	mov	r7, r0
   b42b6:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b42b8:	1d0c      	adds	r4, r1, #4
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
   b42ba:	f1b8 0f00 	cmp.w	r8, #0
   b42be:	d038      	beq.n	b4332 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x86>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b42c0:	f108 0510 	add.w	r5, r8, #16
      { return __x < __y; }
   b42c4:	4649      	mov	r1, r9
   b42c6:	4628      	mov	r0, r5
   b42c8:	f003 fc61 	bl	b7b8e <_ZNK6StringltERKS_>
	{
	  if (_M_impl._M_key_compare(_S_key(__x), __k))
   b42cc:	b128      	cbz	r0, b42da <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x2e>
      { return static_cast<_Link_type>(__x->_M_right); }
   b42ce:	f8d8 500c 	ldr.w	r5, [r8, #12]
   b42d2:	46a0      	mov	r8, r4
   b42d4:	4644      	mov	r4, r8
   b42d6:	46a8      	mov	r8, r5
   b42d8:	e7ef      	b.n	b42ba <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0xe>
   b42da:	4629      	mov	r1, r5
   b42dc:	4648      	mov	r0, r9
   b42de:	f003 fc56 	bl	b7b8e <_ZNK6StringltERKS_>
   b42e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
	    __x = _S_right(__x);
	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
   b42e6:	2800      	cmp	r0, #0
   b42e8:	d1f4      	bne.n	b42d4 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x28>
      { return static_cast<_Link_type>(__x->_M_right); }
   b42ea:	f8d8 600c 	ldr.w	r6, [r8, #12]
      while (__x != 0)
   b42ee:	b165      	cbz	r5, b430a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x5e>
   b42f0:	f105 0010 	add.w	r0, r5, #16
   b42f4:	4649      	mov	r1, r9
   b42f6:	f003 fc4a 	bl	b7b8e <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b42fa:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b42fe:	2800      	cmp	r0, #0
   b4300:	bf0a      	itet	eq
   b4302:	46a8      	moveq	r8, r5
   b4304:	4615      	movne	r5, r2
   b4306:	461d      	moveq	r5, r3
   b4308:	e7f1      	b.n	b42ee <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x42>
      while (__x != 0)
   b430a:	b166      	cbz	r6, b4326 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x7a>
   b430c:	f106 0110 	add.w	r1, r6, #16
   b4310:	4648      	mov	r0, r9
   b4312:	f003 fc3c 	bl	b7b8e <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4316:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	if (_M_impl._M_key_compare(__k, _S_key(__x)))
   b431a:	2800      	cmp	r0, #0
   b431c:	bf16      	itet	ne
   b431e:	4634      	movne	r4, r6
   b4320:	4616      	moveq	r6, r2
   b4322:	461e      	movne	r6, r3
   b4324:	e7f1      	b.n	b430a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x5e>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4326:	f8c7 8000 	str.w	r8, [r7]
   b432a:	607c      	str	r4, [r7, #4]
				    _M_upper_bound(__xu, __yu, __k));
	    }
	}
      return pair<iterator, iterator>(iterator(__y),
				      iterator(__y));
    }
   b432c:	4638      	mov	r0, r7
   b432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4332:	603c      	str	r4, [r7, #0]
   b4334:	e7f9      	b.n	b432a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x7e>

000b4336 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b433a:	688d      	ldr	r5, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b433c:	4604      	mov	r4, r0
   b433e:	460f      	mov	r7, r1
   b4340:	4690      	mov	r8, r2
      { return &this->_M_impl._M_header; }
   b4342:	1d0e      	adds	r6, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b4344:	2301      	movs	r3, #1
      while (__x != 0)
   b4346:	b175      	cbz	r5, b4366 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x30>
   b4348:	f105 0110 	add.w	r1, r5, #16
   b434c:	4640      	mov	r0, r8
   b434e:	f003 fc1e 	bl	b7b8e <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4352:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   b4356:	2800      	cmp	r0, #0
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b4358:	462e      	mov	r6, r5
   b435a:	bf15      	itete	ne
   b435c:	2301      	movne	r3, #1
   b435e:	2300      	moveq	r3, #0
   b4360:	460d      	movne	r5, r1
   b4362:	4615      	moveq	r5, r2
   b4364:	e7ef      	b.n	b4346 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x10>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b4366:	b1a3      	cbz	r3, b4392 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x5c>
	{
	  if (__j == begin())
   b4368:	68fb      	ldr	r3, [r7, #12]
   b436a:	42b3      	cmp	r3, r6
   b436c:	d104      	bne.n	b4378 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x42>
   b436e:	6025      	str	r5, [r4, #0]
   b4370:	6066      	str	r6, [r4, #4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b4372:	4620      	mov	r0, r4
   b4374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b4378:	4630      	mov	r0, r6
   b437a:	f006 ff31 	bl	bb1e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b437e:	4605      	mov	r5, r0
   b4380:	4641      	mov	r1, r8
   b4382:	f105 0010 	add.w	r0, r5, #16
   b4386:	f003 fc02 	bl	b7b8e <_ZNK6StringltERKS_>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b438a:	b120      	cbz	r0, b4396 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
   b438c:	2300      	movs	r3, #0
   b438e:	6023      	str	r3, [r4, #0]
   b4390:	e7ee      	b.n	b4370 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3a>
   b4392:	4635      	mov	r5, r6
   b4394:	e7f4      	b.n	b4380 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x4a>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b4396:	e9c4 5000 	strd	r5, r0, [r4]
   b439a:	e7ea      	b.n	b4372 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3c>

000b439c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b43a0:	688d      	ldr	r5, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b43a2:	4604      	mov	r4, r0
   b43a4:	460f      	mov	r7, r1
   b43a6:	4690      	mov	r8, r2
      { return &this->_M_impl._M_header; }
   b43a8:	1d0e      	adds	r6, r1, #4
      bool __comp = true;
   b43aa:	2301      	movs	r3, #1
      while (__x != 0)
   b43ac:	b175      	cbz	r5, b43cc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x30>
   b43ae:	f105 0110 	add.w	r1, r5, #16
   b43b2:	4640      	mov	r0, r8
   b43b4:	f003 fbeb 	bl	b7b8e <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b43b8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   b43bc:	2800      	cmp	r0, #0
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b43be:	462e      	mov	r6, r5
   b43c0:	bf15      	itete	ne
   b43c2:	2301      	movne	r3, #1
   b43c4:	2300      	moveq	r3, #0
   b43c6:	460d      	movne	r5, r1
   b43c8:	4615      	moveq	r5, r2
   b43ca:	e7ef      	b.n	b43ac <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x10>
      if (__comp)
   b43cc:	b1a3      	cbz	r3, b43f8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x5c>
	  if (__j == begin())
   b43ce:	68fb      	ldr	r3, [r7, #12]
   b43d0:	42b3      	cmp	r3, r6
   b43d2:	d104      	bne.n	b43de <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x42>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b43d4:	6025      	str	r5, [r4, #0]
   b43d6:	6066      	str	r6, [r4, #4]
    }
   b43d8:	4620      	mov	r0, r4
   b43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b43de:	4630      	mov	r0, r6
   b43e0:	f006 fefe 	bl	bb1e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b43e4:	4605      	mov	r5, r0
   b43e6:	4641      	mov	r1, r8
   b43e8:	f105 0010 	add.w	r0, r5, #16
   b43ec:	f003 fbcf 	bl	b7b8e <_ZNK6StringltERKS_>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b43f0:	b120      	cbz	r0, b43fc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
   b43f2:	2300      	movs	r3, #0
   b43f4:	6023      	str	r3, [r4, #0]
   b43f6:	e7ee      	b.n	b43d6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3a>
   b43f8:	4635      	mov	r5, r6
   b43fa:	e7f4      	b.n	b43e6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x4a>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b43fc:	e9c4 5000 	strd	r5, r0, [r4]
   b4400:	e7ea      	b.n	b43d8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3c>
	...

000b4404 <_Z10onCallBackR6Beacon13callback_type>:
void onCallBack(Beacon& beacon, callback_type type){
   b4404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4408:	b0ab      	sub	sp, #172	; 0xac
   b440a:	4604      	mov	r4, r0
   b440c:	460f      	mov	r7, r1
  Serial.println("\n\nEntering Callback");
   b440e:	f006 fab9 	bl	ba984 <_Z16_fetch_usbserialv>
   b4412:	49ab      	ldr	r1, [pc, #684]	; (b46c0 <_Z10onCallBackR6Beacon13callback_type+0x2bc>)
class Beacon {
   b4414:	f8df 82bc 	ldr.w	r8, [pc, #700]	; b46d4 <_Z10onCallBackR6Beacon13callback_type+0x2d0>
#ifndef IBEACON_SCAN_H
#define IBEACON_SCAN_H

#include "beacon.h"

class iBeaconScan : public Beacon
   b4418:	f8df 92bc 	ldr.w	r9, [pc, #700]	; b46d8 <_Z10onCallBackR6Beacon13callback_type+0x2d4>
   b441c:	f005 fef7 	bl	ba20e <_ZN5Print7printlnEPKc>
    BleAddress getAddress() const { return address;}
   b4420:	1de1      	adds	r1, r4, #7
   b4422:	a81a      	add	r0, sp, #104	; 0x68
   b4424:	f003 fd1a 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
  String addr = beacon.getAddress().toString();
   b4428:	2200      	movs	r2, #0
   b442a:	a91a      	add	r1, sp, #104	; 0x68
   b442c:	a806      	add	r0, sp, #24
   b442e:	f003 fda7 	bl	b7f80 <_ZNK8particle10BleAddress8toStringEb>
  String jsonString;
   b4432:	49a4      	ldr	r1, [pc, #656]	; (b46c4 <_Z10onCallBackR6Beacon13callback_type+0x2c0>)
   b4434:	a80a      	add	r0, sp, #40	; 0x28
   b4436:	f003 fac0 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
  for(iBeaconScan beacon: Scanner.getiBeacons()){
   b443a:	f7ff fe9f 	bl	b417c <_ZN13Beaconscanner8instanceEv>
    return data_;
}

template<typename T, typename AllocatorT>
inline T* spark::Vector<T, AllocatorT>::begin() {
    return data_;
   b443e:	4ba2      	ldr	r3, [pc, #648]	; (b46c8 <_Z10onCallBackR6Beacon13callback_type+0x2c4>)
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b4440:	e9d3 4600 	ldrd	r4, r6, [r3]
   b4444:	eb04 1686 	add.w	r6, r4, r6, lsl #6
   b4448:	42a6      	cmp	r6, r4
   b444a:	f000 81b2 	beq.w	b47b2 <_Z10onCallBackR6Beacon13callback_type+0x3ae>
class Beacon {
   b444e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   b4452:	f994 3004 	ldrsb.w	r3, [r4, #4]
   b4456:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   b445a:	7963      	ldrb	r3, [r4, #5]
   b445c:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
   b4460:	79a3      	ldrb	r3, [r4, #6]
   b4462:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
   b4466:	1de1      	adds	r1, r4, #7
   b4468:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
   b446c:	f003 fcf6 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
   b4470:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   b4474:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
   b4478:	7ca3      	ldrb	r3, [r4, #18]
   b447a:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
   b447e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
   b4482:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   b4486:	f104 0213 	add.w	r2, r4, #19
   b448a:	f104 0137 	add.w	r1, r4, #55	; 0x37
   b448e:	469a      	mov	sl, r3
   b4490:	f852 0b04 	ldr.w	r0, [r2], #4
   b4494:	f843 0b04 	str.w	r0, [r3], #4
   b4498:	428a      	cmp	r2, r1
   b449a:	d1f9      	bne.n	b4490 <_Z10onCallBackR6Beacon13callback_type+0x8c>
   b449c:	7812      	ldrb	r2, [r2, #0]
   b449e:	701a      	strb	r2, [r3, #0]
   b44a0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   b44a2:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
   b44a6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   b44a8:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
   b44ac:	f994 303c 	ldrsb.w	r3, [r4, #60]	; 0x3c
   b44b0:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    BleAddress getAddress() const { return address;}
   b44b4:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   b44b8:	a812      	add	r0, sp, #72	; 0x48
   b44ba:	f003 fccf 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
    if(beacon.getAddress().toString() == addr){
   b44be:	2200      	movs	r2, #0
   b44c0:	a912      	add	r1, sp, #72	; 0x48
   b44c2:	a816      	add	r0, sp, #88	; 0x58
   b44c4:	f003 fd5c 	bl	b7f80 <_ZNK8particle10BleAddress8toStringEb>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b44c8:	a906      	add	r1, sp, #24
   b44ca:	a816      	add	r0, sp, #88	; 0x58
   b44cc:	f003 fb52 	bl	b7b74 <_ZNK6String6equalsERKS_>
   b44d0:	4605      	mov	r5, r0
   b44d2:	a816      	add	r0, sp, #88	; 0x58
   b44d4:	f003 fa26 	bl	b7924 <_ZN6StringD1Ev>
   b44d8:	3440      	adds	r4, #64	; 0x40
   b44da:	2d00      	cmp	r5, #0
   b44dc:	d0b4      	beq.n	b4448 <_Z10onCallBackR6Beacon13callback_type+0x44>
      String uuid = beacon.getUuid();
   b44de:	4651      	mov	r1, sl
   b44e0:	a80e      	add	r0, sp, #56	; 0x38
   b44e2:	f003 fa6a 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
      if(inside){
   b44e6:	2f01      	cmp	r7, #1
   b44e8:	4e78      	ldr	r6, [pc, #480]	; (b46cc <_Z10onCallBackR6Beacon13callback_type+0x2c8>)
   b44ea:	f040 80bf 	bne.w	b466c <_Z10onCallBackR6Beacon13callback_type+0x268>
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b44ee:	1d34      	adds	r4, r6, #4
   b44f0:	68b5      	ldr	r5, [r6, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b44f2:	46a0      	mov	r8, r4
      while (__x != 0)
   b44f4:	b165      	cbz	r5, b4510 <_Z10onCallBackR6Beacon13callback_type+0x10c>
   b44f6:	f105 0010 	add.w	r0, r5, #16
   b44fa:	a906      	add	r1, sp, #24
   b44fc:	f003 fb47 	bl	b7b8e <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4500:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b4504:	2800      	cmp	r0, #0
   b4506:	bf0a      	itet	eq
   b4508:	462c      	moveq	r4, r5
   b450a:	4615      	movne	r5, r2
   b450c:	461d      	moveq	r5, r3
   b450e:	e7f1      	b.n	b44f4 <_Z10onCallBackR6Beacon13callback_type+0xf0>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b4510:	4544      	cmp	r4, r8
   b4512:	d122      	bne.n	b455a <_Z10onCallBackR6Beacon13callback_type+0x156>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4514:	2030      	movs	r0, #48	; 0x30
   b4516:	f7ff fdbc 	bl	b4092 <_Znwj>
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   b451a:	f100 0810 	add.w	r8, r0, #16
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b451e:	a906      	add	r1, sp, #24
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b4520:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b46d0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>
   b4524:	4681      	mov	r9, r0
   b4526:	4640      	mov	r0, r8
   b4528:	f003 fa92 	bl	b7a50 <_ZN6StringC1ERKS_>
   b452c:	4965      	ldr	r1, [pc, #404]	; (b46c4 <_Z10onCallBackR6Beacon13callback_type+0x2c0>)
   b452e:	f108 0010 	add.w	r0, r8, #16
   b4532:	f003 fa42 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
   b4536:	4554      	cmp	r4, sl
   b4538:	d13a      	bne.n	b45b0 <_Z10onCallBackR6Beacon13callback_type+0x1ac>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b453a:	6973      	ldr	r3, [r6, #20]
   b453c:	b383      	cbz	r3, b45a0 <_Z10onCallBackR6Beacon13callback_type+0x19c>
      { return __x.first; }
   b453e:	6930      	ldr	r0, [r6, #16]
      { return __x < __y; }
   b4540:	4641      	mov	r1, r8
   b4542:	3010      	adds	r0, #16
   b4544:	f003 fb23 	bl	b7b8e <_ZNK6StringltERKS_>
   b4548:	b350      	cbz	r0, b45a0 <_Z10onCallBackR6Beacon13callback_type+0x19c>
       : first(__x), second(std::forward<_U2>(__y)) { }
   b454a:	6934      	ldr	r4, [r6, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b454c:	2c00      	cmp	r4, #0
   b454e:	d14a      	bne.n	b45e6 <_Z10onCallBackR6Beacon13callback_type+0x1e2>
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
   b4550:	4648      	mov	r0, r9
   b4552:	f7ff fde7 	bl	b4124 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>
   b4556:	46a1      	mov	r9, r4
   b4558:	e058      	b.n	b460c <_Z10onCallBackR6Beacon13callback_type+0x208>
   b455a:	f104 0110 	add.w	r1, r4, #16
   b455e:	a806      	add	r0, sp, #24
   b4560:	f003 fb15 	bl	b7b8e <_ZNK6StringltERKS_>
   b4564:	2800      	cmp	r0, #0
   b4566:	d1d5      	bne.n	b4514 <_Z10onCallBackR6Beacon13callback_type+0x110>
        players[addr] = uuid;
   b4568:	a90e      	add	r1, sp, #56	; 0x38
   b456a:	f104 0020 	add.w	r0, r4, #32
   b456e:	f003 fa60 	bl	b7a32 <_ZN6StringaSERKS_>
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b4572:	f8df 8168 	ldr.w	r8, [pc, #360]	; b46dc <_Z10onCallBackR6Beacon13callback_type+0x2d8>
   b4576:	f108 0404 	add.w	r4, r8, #4
   b457a:	f8d8 5008 	ldr.w	r5, [r8, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b457e:	4626      	mov	r6, r4
      while (__x != 0)
   b4580:	2d00      	cmp	r5, #0
   b4582:	f000 80ad 	beq.w	b46e0 <_Z10onCallBackR6Beacon13callback_type+0x2dc>
   b4586:	f105 0010 	add.w	r0, r5, #16
   b458a:	a90e      	add	r1, sp, #56	; 0x38
   b458c:	f003 faff 	bl	b7b8e <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4590:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b4594:	2800      	cmp	r0, #0
   b4596:	bf0a      	itet	eq
   b4598:	462c      	moveq	r4, r5
   b459a:	4615      	movne	r5, r2
   b459c:	461d      	moveq	r5, r3
   b459e:	e7ef      	b.n	b4580 <_Z10onCallBackR6Beacon13callback_type+0x17c>
	    return _M_get_insert_unique_pos(__k);
   b45a0:	494a      	ldr	r1, [pc, #296]	; (b46cc <_Z10onCallBackR6Beacon13callback_type+0x2c8>)
   b45a2:	4642      	mov	r2, r8
	    return _M_get_insert_unique_pos(__k);
   b45a4:	a802      	add	r0, sp, #8
   b45a6:	f7ff fec6 	bl	b4336 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b45aa:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
   b45ae:	e016      	b.n	b45de <_Z10onCallBackR6Beacon13callback_type+0x1da>
      { return __x.first; }
   b45b0:	f104 0b10 	add.w	fp, r4, #16
      { return __x < __y; }
   b45b4:	4659      	mov	r1, fp
   b45b6:	4640      	mov	r0, r8
   b45b8:	f003 fae9 	bl	b7b8e <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b45bc:	b370      	cbz	r0, b461c <_Z10onCallBackR6Beacon13callback_type+0x218>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b45be:	68f5      	ldr	r5, [r6, #12]
   b45c0:	42ac      	cmp	r4, r5
   b45c2:	d00c      	beq.n	b45de <_Z10onCallBackR6Beacon13callback_type+0x1da>
	_M_node = _Rb_tree_decrement(_M_node);
   b45c4:	4620      	mov	r0, r4
   b45c6:	f006 fe0b 	bl	bb1e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b45ca:	4641      	mov	r1, r8
   b45cc:	4683      	mov	fp, r0
   b45ce:	3010      	adds	r0, #16
   b45d0:	f003 fadd 	bl	b7b8e <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b45d4:	b1e0      	cbz	r0, b4610 <_Z10onCallBackR6Beacon13callback_type+0x20c>
      { return static_cast<_Link_type>(__x->_M_right); }
   b45d6:	f8db 500c 	ldr.w	r5, [fp, #12]
	      if (_S_right(__before._M_node) == 0)
   b45da:	b9ed      	cbnz	r5, b4618 <_Z10onCallBackR6Beacon13callback_type+0x214>
   b45dc:	465c      	mov	r4, fp
	    if (__res.second)
   b45de:	2c00      	cmp	r4, #0
   b45e0:	d042      	beq.n	b4668 <_Z10onCallBackR6Beacon13callback_type+0x264>
			    || _M_impl._M_key_compare(_S_key(__z),
   b45e2:	2d00      	cmp	r5, #0
   b45e4:	d13e      	bne.n	b4664 <_Z10onCallBackR6Beacon13callback_type+0x260>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b45e6:	4b3a      	ldr	r3, [pc, #232]	; (b46d0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>)
   b45e8:	429c      	cmp	r4, r3
   b45ea:	d03b      	beq.n	b4664 <_Z10onCallBackR6Beacon13callback_type+0x260>
   b45ec:	f104 0110 	add.w	r1, r4, #16
   b45f0:	4640      	mov	r0, r8
   b45f2:	f003 facc 	bl	b7b8e <_ZNK6StringltERKS_>
			    || _M_impl._M_key_compare(_S_key(__z),
   b45f6:	3800      	subs	r0, #0
   b45f8:	bf18      	it	ne
   b45fa:	2001      	movne	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b45fc:	4b34      	ldr	r3, [pc, #208]	; (b46d0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>)
   b45fe:	4622      	mov	r2, r4
   b4600:	4649      	mov	r1, r9
   b4602:	f006 fdef 	bl	bb1e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b4606:	6973      	ldr	r3, [r6, #20]
   b4608:	3301      	adds	r3, #1
   b460a:	6173      	str	r3, [r6, #20]
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b460c:	464c      	mov	r4, r9
   b460e:	e7ab      	b.n	b4568 <_Z10onCallBackR6Beacon13callback_type+0x164>
	    return _M_get_insert_unique_pos(__k);
   b4610:	4642      	mov	r2, r8
   b4612:	f1aa 0104 	sub.w	r1, sl, #4
   b4616:	e7c5      	b.n	b45a4 <_Z10onCallBackR6Beacon13callback_type+0x1a0>
   b4618:	4625      	mov	r5, r4
   b461a:	e7e0      	b.n	b45de <_Z10onCallBackR6Beacon13callback_type+0x1da>
   b461c:	4641      	mov	r1, r8
   b461e:	4658      	mov	r0, fp
   b4620:	f003 fab5 	bl	b7b8e <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b4624:	2800      	cmp	r0, #0
   b4626:	d093      	beq.n	b4550 <_Z10onCallBackR6Beacon13callback_type+0x14c>
	  if (__pos._M_node == _M_rightmost())
   b4628:	6933      	ldr	r3, [r6, #16]
   b462a:	429c      	cmp	r4, r3
   b462c:	d00d      	beq.n	b464a <_Z10onCallBackR6Beacon13callback_type+0x246>
	_M_node = _Rb_tree_increment(_M_node);
   b462e:	4620      	mov	r0, r4
   b4630:	f006 fdd2 	bl	bb1d8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b4634:	4605      	mov	r5, r0
   b4636:	f100 0110 	add.w	r1, r0, #16
   b463a:	4640      	mov	r0, r8
   b463c:	f003 faa7 	bl	b7b8e <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b4640:	b128      	cbz	r0, b464e <_Z10onCallBackR6Beacon13callback_type+0x24a>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4642:	68e2      	ldr	r2, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b4644:	b962      	cbnz	r2, b4660 <_Z10onCallBackR6Beacon13callback_type+0x25c>
   b4646:	4623      	mov	r3, r4
   b4648:	4615      	mov	r5, r2
   b464a:	461c      	mov	r4, r3
   b464c:	e7c7      	b.n	b45de <_Z10onCallBackR6Beacon13callback_type+0x1da>
	    return _M_get_insert_unique_pos(__k);
   b464e:	4642      	mov	r2, r8
   b4650:	f1aa 0104 	sub.w	r1, sl, #4
   b4654:	a802      	add	r0, sp, #8
   b4656:	f7ff fe6e 	bl	b4336 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b465a:	e9dd 5302 	ldrd	r5, r3, [sp, #8]
   b465e:	e7f4      	b.n	b464a <_Z10onCallBackR6Beacon13callback_type+0x246>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4660:	462b      	mov	r3, r5
   b4662:	e7f2      	b.n	b464a <_Z10onCallBackR6Beacon13callback_type+0x246>
			    || _M_impl._M_key_compare(_S_key(__z),
   b4664:	2001      	movs	r0, #1
   b4666:	e7c9      	b.n	b45fc <_Z10onCallBackR6Beacon13callback_type+0x1f8>
   b4668:	462c      	mov	r4, r5
   b466a:	e771      	b.n	b4550 <_Z10onCallBackR6Beacon13callback_type+0x14c>
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
   b466c:	aa06      	add	r2, sp, #24
   b466e:	4631      	mov	r1, r6
   b4670:	a816      	add	r0, sp, #88	; 0x58
   b4672:	f7ff fe1b 	bl	b42ac <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_>
      : _M_node(__it._M_node) { }
   b4676:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
      if (__first == begin() && __last == end())
   b467a:	68f3      	ldr	r3, [r6, #12]
   b467c:	429c      	cmp	r4, r3
   b467e:	d10b      	bne.n	b4698 <_Z10onCallBackR6Beacon13callback_type+0x294>
   b4680:	1d33      	adds	r3, r6, #4
   b4682:	429d      	cmp	r5, r3
   b4684:	d108      	bne.n	b4698 <_Z10onCallBackR6Beacon13callback_type+0x294>
	_M_erase(_M_begin());
   b4686:	68b0      	ldr	r0, [r6, #8]
   b4688:	f7ff fd5c 	bl	b4144 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0>
      _M_header._M_parent = 0;
   b468c:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b468e:	e9c6 3502 	strd	r3, r5, [r6, #8]
      _M_node_count = 0;
   b4692:	e9c6 5304 	strd	r5, r3, [r6, #16]
      }
   b4696:	e76c      	b.n	b4572 <_Z10onCallBackR6Beacon13callback_type+0x16e>
				(const_cast<_Base_ptr>(__position._M_node),
   b4698:	f8df 9034 	ldr.w	r9, [pc, #52]	; b46d0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>
	while (__first != __last)
   b469c:	42a5      	cmp	r5, r4
   b469e:	f43f af68 	beq.w	b4572 <_Z10onCallBackR6Beacon13callback_type+0x16e>
	_M_node = _Rb_tree_increment(_M_node);
   b46a2:	4620      	mov	r0, r4
   b46a4:	f006 fd9a 	bl	bb1dc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
				(const_cast<_Base_ptr>(__position._M_node),
   b46a8:	4649      	mov	r1, r9
	_M_node = _Rb_tree_increment(_M_node);
   b46aa:	4680      	mov	r8, r0
				(const_cast<_Base_ptr>(__position._M_node),
   b46ac:	4620      	mov	r0, r4
   b46ae:	f006 fdf4 	bl	bb29a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
      _M_drop_node(__y);
   b46b2:	f7ff fd37 	bl	b4124 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>
      --_M_impl._M_node_count;
   b46b6:	6973      	ldr	r3, [r6, #20]
   b46b8:	3b01      	subs	r3, #1
   b46ba:	6173      	str	r3, [r6, #20]
	_M_node = _Rb_tree_increment(_M_node);
   b46bc:	4644      	mov	r4, r8
	while (__first != __last)
   b46be:	e7ed      	b.n	b469c <_Z10onCallBackR6Beacon13callback_type+0x298>
   b46c0:	000bbfe6 	.word	0x000bbfe6
   b46c4:	000bc938 	.word	0x000bc938
   b46c8:	2003e684 	.word	0x2003e684
   b46cc:	2003e628 	.word	0x2003e628
   b46d0:	2003e62c 	.word	0x2003e62c
   b46d4:	000bc044 	.word	0x000bc044
   b46d8:	000bc2e8 	.word	0x000bc2e8
   b46dc:	2003e640 	.word	0x2003e640
	if (__i == end() || key_comp()(__k, (*__i).first))
   b46e0:	42b4      	cmp	r4, r6
   b46e2:	d12d      	bne.n	b4740 <_Z10onCallBackR6Beacon13callback_type+0x33c>
   b46e4:	2024      	movs	r0, #36	; 0x24
   b46e6:	f7ff fcd4 	bl	b4092 <_Znwj>
      if (__pos._M_node == _M_end())
   b46ea:	f8df a2a0 	ldr.w	sl, [pc, #672]	; b498c <_Z10onCallBackR6Beacon13callback_type+0x588>
   b46ee:	f100 0610 	add.w	r6, r0, #16
   b46f2:	4681      	mov	r9, r0
   b46f4:	a90e      	add	r1, sp, #56	; 0x38
   b46f6:	4630      	mov	r0, r6
   b46f8:	f003 f9aa 	bl	b7a50 <_ZN6StringC1ERKS_>
   b46fc:	2300      	movs	r3, #0
   b46fe:	4554      	cmp	r4, sl
   b4700:	f889 3020 	strb.w	r3, [r9, #32]
   b4704:	f040 80c2 	bne.w	b488c <_Z10onCallBackR6Beacon13callback_type+0x488>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b4708:	f8d8 3014 	ldr.w	r3, [r8, #20]
   b470c:	2b00      	cmp	r3, #0
   b470e:	f000 80b5 	beq.w	b487c <_Z10onCallBackR6Beacon13callback_type+0x478>
      { return __x.first; }
   b4712:	f8d8 0010 	ldr.w	r0, [r8, #16]
      { return __x < __y; }
   b4716:	4631      	mov	r1, r6
   b4718:	3010      	adds	r0, #16
   b471a:	f003 fa38 	bl	b7b8e <_ZNK6StringltERKS_>
   b471e:	2800      	cmp	r0, #0
   b4720:	f000 80ac 	beq.w	b487c <_Z10onCallBackR6Beacon13callback_type+0x478>
       : first(__x), second(std::forward<_U2>(__y)) { }
   b4724:	f8d8 4010 	ldr.w	r4, [r8, #16]
	    if (__res.second)
   b4728:	2c00      	cmp	r4, #0
   b472a:	f040 80cb 	bne.w	b48c4 <_Z10onCallBackR6Beacon13callback_type+0x4c0>
    struct pair
   b472e:	4630      	mov	r0, r6
   b4730:	f003 f8f8 	bl	b7924 <_ZN6StringD1Ev>
	::operator delete(__p
   b4734:	4648      	mov	r0, r9
   b4736:	2124      	movs	r1, #36	; 0x24
   b4738:	f7ff fcaf 	bl	b409a <_ZdlPvj>
   b473c:	46a1      	mov	r9, r4
   b473e:	e0d6      	b.n	b48ee <_Z10onCallBackR6Beacon13callback_type+0x4ea>
   b4740:	f104 0110 	add.w	r1, r4, #16
   b4744:	a80e      	add	r0, sp, #56	; 0x38
   b4746:	f003 fa22 	bl	b7b8e <_ZNK6StringltERKS_>
   b474a:	2800      	cmp	r0, #0
   b474c:	d1ca      	bne.n	b46e4 <_Z10onCallBackR6Beacon13callback_type+0x2e0>
  bool inside = (type==NEW) ? true : false;
   b474e:	1e7b      	subs	r3, r7, #1
   b4750:	425f      	negs	r7, r3
   b4752:	415f      	adcs	r7, r3

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4754:	4983      	ldr	r1, [pc, #524]	; (b4964 <_Z10onCallBackR6Beacon13callback_type+0x560>)
      presence[uuid] = inside;
   b4756:	f884 7020 	strb.w	r7, [r4, #32]
   b475a:	a812      	add	r0, sp, #72	; 0x48
   b475c:	f003 f92d 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
      jsonString = "{\"uuid\":\"" + uuid + 
   b4760:	a90e      	add	r1, sp, #56	; 0x38
   b4762:	a812      	add	r0, sp, #72	; 0x48
   b4764:	f003 f9c6 	bl	b7af4 <_ZplRK15StringSumHelperRK6String>
        "\",\"inside\":\"" + inside + 
   b4768:	497f      	ldr	r1, [pc, #508]	; (b4968 <_Z10onCallBackR6Beacon13callback_type+0x564>)
   b476a:	f003 f9cf 	bl	b7b0c <_ZplRK15StringSumHelperPKc>
   b476e:	4639      	mov	r1, r7
   b4770:	f003 f9e1 	bl	b7b36 <_ZplRK15StringSumHelperi>
        "\",\"time\":\"" + Time.timeStr().c_str() +
   b4774:	497d      	ldr	r1, [pc, #500]	; (b496c <_Z10onCallBackR6Beacon13callback_type+0x568>)
   b4776:	f003 f9c9 	bl	b7b0c <_ZplRK15StringSumHelperPKc>
   b477a:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b477c:	f005 fe0f 	bl	ba39e <_ZN9TimeClass3nowEv>
   b4780:	4602      	mov	r2, r0
   b4782:	17c3      	asrs	r3, r0, #31
   b4784:	a816      	add	r0, sp, #88	; 0x58
   b4786:	f005 fdb1 	bl	ba2ec <_ZN9TimeClass7timeStrEx>
   b478a:	9916      	ldr	r1, [sp, #88]	; 0x58
   b478c:	4620      	mov	r0, r4
   b478e:	f003 f9bd 	bl	b7b0c <_ZplRK15StringSumHelperPKc>
        "\"}";
   b4792:	4977      	ldr	r1, [pc, #476]	; (b4970 <_Z10onCallBackR6Beacon13callback_type+0x56c>)
   b4794:	f003 f9ba 	bl	b7b0c <_ZplRK15StringSumHelperPKc>
   b4798:	4601      	mov	r1, r0
   b479a:	a80a      	add	r0, sp, #40	; 0x28
   b479c:	f003 f949 	bl	b7a32 <_ZN6StringaSERKS_>
        "\",\"time\":\"" + Time.timeStr().c_str() +
   b47a0:	a816      	add	r0, sp, #88	; 0x58
   b47a2:	f003 f8bf 	bl	b7924 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b47a6:	a812      	add	r0, sp, #72	; 0x48
   b47a8:	f003 f8bc 	bl	b7924 <_ZN6StringD1Ev>
      String uuid = beacon.getUuid();
   b47ac:	a80e      	add	r0, sp, #56	; 0x38
   b47ae:	f003 f8b9 	bl	b7924 <_ZN6StringD1Ev>
        return spark_deviceID();
   b47b2:	a81a      	add	r0, sp, #104	; 0x68
   b47b4:	f002 ff98 	bl	b76e8 <spark_deviceID>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b47b8:	4b6e      	ldr	r3, [pc, #440]	; (b4974 <_Z10onCallBackR6Beacon13callback_type+0x570>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b47ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b47bc:	781b      	ldrb	r3, [r3, #0]
   b47be:	f88d 3000 	strb.w	r3, [sp]
   b47c2:	991a      	ldr	r1, [sp, #104]	; 0x68
   b47c4:	233c      	movs	r3, #60	; 0x3c
   b47c6:	a816      	add	r0, sp, #88	; 0x58
   b47c8:	f005 fef8 	bl	ba5bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b47cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   b47ce:	b17c      	cbz	r4, b47f0 <_Z10onCallBackR6Beacon13callback_type+0x3ec>
      if (--_M_use_count == 0)
   b47d0:	6863      	ldr	r3, [r4, #4]
   b47d2:	3b01      	subs	r3, #1
   b47d4:	6063      	str	r3, [r4, #4]
   b47d6:	b95b      	cbnz	r3, b47f0 <_Z10onCallBackR6Beacon13callback_type+0x3ec>
          _M_dispose();
   b47d8:	6823      	ldr	r3, [r4, #0]
   b47da:	4620      	mov	r0, r4
   b47dc:	689b      	ldr	r3, [r3, #8]
   b47de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47e0:	68a3      	ldr	r3, [r4, #8]
   b47e2:	3b01      	subs	r3, #1
   b47e4:	60a3      	str	r3, [r4, #8]
   b47e6:	b91b      	cbnz	r3, b47f0 <_Z10onCallBackR6Beacon13callback_type+0x3ec>
            _M_destroy();
   b47e8:	6823      	ldr	r3, [r4, #0]
   b47ea:	4620      	mov	r0, r4
   b47ec:	68db      	ldr	r3, [r3, #12]
   b47ee:	4798      	blx	r3
      { return iterator(this->_M_impl._M_header._M_left); }
   b47f0:	4e61      	ldr	r6, [pc, #388]	; (b4978 <_Z10onCallBackR6Beacon13callback_type+0x574>)
  for(itPresence = presence.begin(); itPresence != presence.end(); itPresence++){
   b47f2:	4c62      	ldr	r4, [pc, #392]	; (b497c <_Z10onCallBackR6Beacon13callback_type+0x578>)
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
   b47f4:	f8df 8198 	ldr.w	r8, [pc, #408]	; b4990 <_Z10onCallBackR6Beacon13callback_type+0x58c>
   b47f8:	4f61      	ldr	r7, [pc, #388]	; (b4980 <_Z10onCallBackR6Beacon13callback_type+0x57c>)
  Particle.publish(Particle.deviceID().c_str(), jsonString.c_str());
   b47fa:	a81a      	add	r0, sp, #104	; 0x68
   b47fc:	f003 f892 	bl	b7924 <_ZN6StringD1Ev>
  Serial.println("PUBLISHED");
   b4800:	f006 f8c0 	bl	ba984 <_Z16_fetch_usbserialv>
   b4804:	495f      	ldr	r1, [pc, #380]	; (b4984 <_Z10onCallBackR6Beacon13callback_type+0x580>)
   b4806:	f005 fd02 	bl	ba20e <_ZN5Print7printlnEPKc>
  for(itPresence = presence.begin(); itPresence != presence.end(); itPresence++){
   b480a:	68f2      	ldr	r2, [r6, #12]
   b480c:	6022      	str	r2, [r4, #0]
   b480e:	3604      	adds	r6, #4
      { return __x._M_node != __y._M_node; }
   b4810:	6821      	ldr	r1, [r4, #0]
   b4812:	42b1      	cmp	r1, r6
   b4814:	f000 809d 	beq.w	b4952 <_Z10onCallBackR6Beacon13callback_type+0x54e>
    String uuid = itPresence->first;
   b4818:	3110      	adds	r1, #16
   b481a:	a812      	add	r0, sp, #72	; 0x48
   b481c:	f003 f918 	bl	b7a50 <_ZN6StringC1ERKS_>
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
   b4820:	6823      	ldr	r3, [r4, #0]
   b4822:	f893 1020 	ldrb.w	r1, [r3, #32]
   b4826:	a816      	add	r0, sp, #88	; 0x58
   b4828:	2900      	cmp	r1, #0
   b482a:	bf14      	ite	ne
   b482c:	4641      	movne	r1, r8
   b482e:	4639      	moveq	r1, r7
   b4830:	f003 f8c3 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.printf("%s is %s :: %s\n", uuid.c_str(), pres.c_str(), Time.timeStr().c_str());
   b4834:	f006 f8a6 	bl	ba984 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4838:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   b483c:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   b4840:	4605      	mov	r5, r0
   b4842:	f005 fdac 	bl	ba39e <_ZN9TimeClass3nowEv>
   b4846:	4602      	mov	r2, r0
   b4848:	17c3      	asrs	r3, r0, #31
   b484a:	a81a      	add	r0, sp, #104	; 0x68
   b484c:	f005 fd4e 	bl	ba2ec <_ZN9TimeClass7timeStrEx>
   b4850:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b4852:	494d      	ldr	r1, [pc, #308]	; (b4988 <_Z10onCallBackR6Beacon13callback_type+0x584>)
   b4854:	9300      	str	r3, [sp, #0]
   b4856:	464a      	mov	r2, r9
   b4858:	4653      	mov	r3, sl
   b485a:	4628      	mov	r0, r5
   b485c:	f7ff fc7f 	bl	b415e <_ZN5Print6printfEPKcz>
   b4860:	a81a      	add	r0, sp, #104	; 0x68
   b4862:	f003 f85f 	bl	b7924 <_ZN6StringD1Ev>
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
   b4866:	a816      	add	r0, sp, #88	; 0x58
   b4868:	f003 f85c 	bl	b7924 <_ZN6StringD1Ev>
    String uuid = itPresence->first;
   b486c:	a812      	add	r0, sp, #72	; 0x48
   b486e:	f003 f859 	bl	b7924 <_ZN6StringD1Ev>
	_M_node = _Rb_tree_increment(_M_node);
   b4872:	6820      	ldr	r0, [r4, #0]
   b4874:	f006 fcb0 	bl	bb1d8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b4878:	6020      	str	r0, [r4, #0]
	return __tmp;
   b487a:	e7c9      	b.n	b4810 <_Z10onCallBackR6Beacon13callback_type+0x40c>
	    return _M_get_insert_unique_pos(__k);
   b487c:	493e      	ldr	r1, [pc, #248]	; (b4978 <_Z10onCallBackR6Beacon13callback_type+0x574>)
   b487e:	4632      	mov	r2, r6
	    return _M_get_insert_unique_pos(__k);
   b4880:	a804      	add	r0, sp, #16
   b4882:	f7ff fd8b 	bl	b439c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b4886:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
   b488a:	e017      	b.n	b48bc <_Z10onCallBackR6Beacon13callback_type+0x4b8>
      { return __x.first; }
   b488c:	f104 0b10 	add.w	fp, r4, #16
      { return __x < __y; }
   b4890:	4659      	mov	r1, fp
   b4892:	4630      	mov	r0, r6
   b4894:	f003 f97b 	bl	b7b8e <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b4898:	b388      	cbz	r0, b48fe <_Z10onCallBackR6Beacon13callback_type+0x4fa>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b489a:	f8d8 500c 	ldr.w	r5, [r8, #12]
   b489e:	42ac      	cmp	r4, r5
   b48a0:	d00c      	beq.n	b48bc <_Z10onCallBackR6Beacon13callback_type+0x4b8>
	_M_node = _Rb_tree_decrement(_M_node);
   b48a2:	4620      	mov	r0, r4
   b48a4:	f006 fc9c 	bl	bb1e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b48a8:	4631      	mov	r1, r6
   b48aa:	4683      	mov	fp, r0
   b48ac:	3010      	adds	r0, #16
   b48ae:	f003 f96e 	bl	b7b8e <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b48b2:	b1f0      	cbz	r0, b48f2 <_Z10onCallBackR6Beacon13callback_type+0x4ee>
      { return static_cast<_Link_type>(__x->_M_right); }
   b48b4:	f8db 500c 	ldr.w	r5, [fp, #12]
	      if (_S_right(__before._M_node) == 0)
   b48b8:	b9fd      	cbnz	r5, b48fa <_Z10onCallBackR6Beacon13callback_type+0x4f6>
   b48ba:	465c      	mov	r4, fp
	    if (__res.second)
   b48bc:	2c00      	cmp	r4, #0
   b48be:	d046      	beq.n	b494e <_Z10onCallBackR6Beacon13callback_type+0x54a>
			    || _M_impl._M_key_compare(_S_key(__z),
   b48c0:	2d00      	cmp	r5, #0
   b48c2:	d142      	bne.n	b494a <_Z10onCallBackR6Beacon13callback_type+0x546>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b48c4:	4b31      	ldr	r3, [pc, #196]	; (b498c <_Z10onCallBackR6Beacon13callback_type+0x588>)
   b48c6:	429c      	cmp	r4, r3
   b48c8:	d03f      	beq.n	b494a <_Z10onCallBackR6Beacon13callback_type+0x546>
   b48ca:	f104 0110 	add.w	r1, r4, #16
   b48ce:	4630      	mov	r0, r6
   b48d0:	f003 f95d 	bl	b7b8e <_ZNK6StringltERKS_>
			    || _M_impl._M_key_compare(_S_key(__z),
   b48d4:	3800      	subs	r0, #0
   b48d6:	bf18      	it	ne
   b48d8:	2001      	movne	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b48da:	4b2c      	ldr	r3, [pc, #176]	; (b498c <_Z10onCallBackR6Beacon13callback_type+0x588>)
   b48dc:	4622      	mov	r2, r4
   b48de:	4649      	mov	r1, r9
   b48e0:	f006 fc80 	bl	bb1e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b48e4:	f8d8 3014 	ldr.w	r3, [r8, #20]
   b48e8:	3301      	adds	r3, #1
   b48ea:	f8c8 3014 	str.w	r3, [r8, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b48ee:	464c      	mov	r4, r9
   b48f0:	e72d      	b.n	b474e <_Z10onCallBackR6Beacon13callback_type+0x34a>
	    return _M_get_insert_unique_pos(__k);
   b48f2:	4632      	mov	r2, r6
   b48f4:	f1aa 0104 	sub.w	r1, sl, #4
   b48f8:	e7c2      	b.n	b4880 <_Z10onCallBackR6Beacon13callback_type+0x47c>
   b48fa:	4625      	mov	r5, r4
   b48fc:	e7de      	b.n	b48bc <_Z10onCallBackR6Beacon13callback_type+0x4b8>
   b48fe:	4631      	mov	r1, r6
   b4900:	4658      	mov	r0, fp
   b4902:	f003 f944 	bl	b7b8e <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b4906:	2800      	cmp	r0, #0
   b4908:	f43f af11 	beq.w	b472e <_Z10onCallBackR6Beacon13callback_type+0x32a>
	  if (__pos._M_node == _M_rightmost())
   b490c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b4910:	429c      	cmp	r4, r3
   b4912:	d00d      	beq.n	b4930 <_Z10onCallBackR6Beacon13callback_type+0x52c>
	_M_node = _Rb_tree_increment(_M_node);
   b4914:	4620      	mov	r0, r4
   b4916:	f006 fc5f 	bl	bb1d8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b491a:	4605      	mov	r5, r0
   b491c:	f100 0110 	add.w	r1, r0, #16
   b4920:	4630      	mov	r0, r6
   b4922:	f003 f934 	bl	b7b8e <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b4926:	b128      	cbz	r0, b4934 <_Z10onCallBackR6Beacon13callback_type+0x530>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4928:	68e2      	ldr	r2, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b492a:	b962      	cbnz	r2, b4946 <_Z10onCallBackR6Beacon13callback_type+0x542>
   b492c:	4623      	mov	r3, r4
       : first(__x), second(std::forward<_U2>(__y)) { }
   b492e:	4615      	mov	r5, r2
   b4930:	461c      	mov	r4, r3
   b4932:	e7c3      	b.n	b48bc <_Z10onCallBackR6Beacon13callback_type+0x4b8>
	    return _M_get_insert_unique_pos(__k);
   b4934:	4632      	mov	r2, r6
   b4936:	f1aa 0104 	sub.w	r1, sl, #4
   b493a:	a804      	add	r0, sp, #16
   b493c:	f7ff fd2e 	bl	b439c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b4940:	e9dd 5304 	ldrd	r5, r3, [sp, #16]
   b4944:	e7f4      	b.n	b4930 <_Z10onCallBackR6Beacon13callback_type+0x52c>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4946:	462b      	mov	r3, r5
   b4948:	e7f2      	b.n	b4930 <_Z10onCallBackR6Beacon13callback_type+0x52c>
			    || _M_impl._M_key_compare(_S_key(__z),
   b494a:	2001      	movs	r0, #1
   b494c:	e7c5      	b.n	b48da <_Z10onCallBackR6Beacon13callback_type+0x4d6>
   b494e:	462c      	mov	r4, r5
   b4950:	e6ed      	b.n	b472e <_Z10onCallBackR6Beacon13callback_type+0x32a>
  String jsonString;
   b4952:	a80a      	add	r0, sp, #40	; 0x28
   b4954:	f002 ffe6 	bl	b7924 <_ZN6StringD1Ev>
  String addr = beacon.getAddress().toString();
   b4958:	a806      	add	r0, sp, #24
   b495a:	f002 ffe3 	bl	b7924 <_ZN6StringD1Ev>
}
   b495e:	b02b      	add	sp, #172	; 0xac
   b4960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4964:	000bbffa 	.word	0x000bbffa
   b4968:	000bc004 	.word	0x000bc004
   b496c:	000bc011 	.word	0x000bc011
   b4970:	000bc01c 	.word	0x000bc01c
   b4974:	2003e618 	.word	0x2003e618
   b4978:	2003e640 	.word	0x2003e640
   b497c:	2003e620 	.word	0x2003e620
   b4980:	000bbfdf 	.word	0x000bbfdf
   b4984:	000bc01f 	.word	0x000bc01f
   b4988:	000bc029 	.word	0x000bc029
   b498c:	2003e644 	.word	0x2003e644
   b4990:	000bbfd7 	.word	0x000bbfd7

000b4994 <_GLOBAL__sub_I_led>:
        val_(val) {
   b4994:	4b0d      	ldr	r3, [pc, #52]	; (b49cc <_GLOBAL__sub_I_led+0x38>)
   b4996:	b510      	push	{r4, lr}
   b4998:	2400      	movs	r4, #0
   b499a:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b499c:	4621      	mov	r1, r4
   b499e:	2001      	movs	r0, #1
   b49a0:	f002 fde6 	bl	b7570 <system_thread_set_state>
      _M_header._M_color = _S_red;
   b49a4:	4b0a      	ldr	r3, [pc, #40]	; (b49d0 <_GLOBAL__sub_I_led+0x3c>)
      _M_header._M_left = &_M_header;
   b49a6:	1d1a      	adds	r2, r3, #4
      _M_header._M_right = &_M_header;
   b49a8:	e9c3 2203 	strd	r2, r2, [r3, #12]
      _M_header._M_color = _S_red;
   b49ac:	711c      	strb	r4, [r3, #4]
      _M_header._M_parent = 0;
   b49ae:	609c      	str	r4, [r3, #8]
      _M_node_count = 0;
   b49b0:	615c      	str	r4, [r3, #20]
      _M_header._M_color = _S_red;
   b49b2:	4b08      	ldr	r3, [pc, #32]	; (b49d4 <_GLOBAL__sub_I_led+0x40>)
      _M_header._M_left = &_M_header;
   b49b4:	1d1a      	adds	r2, r3, #4
      _M_header._M_right = &_M_header;
   b49b6:	e9c3 2203 	strd	r2, r2, [r3, #12]
      _M_header._M_color = _S_red;
   b49ba:	711c      	strb	r4, [r3, #4]
      _M_header._M_parent = 0;
   b49bc:	609c      	str	r4, [r3, #8]
      _M_node_count = 0;
   b49be:	615c      	str	r4, [r3, #20]
      : _M_node() { }
   b49c0:	4b05      	ldr	r3, [pc, #20]	; (b49d8 <_GLOBAL__sub_I_led+0x44>)
   b49c2:	601c      	str	r4, [r3, #0]
   b49c4:	4b05      	ldr	r3, [pc, #20]	; (b49dc <_GLOBAL__sub_I_led+0x48>)
   b49c6:	601c      	str	r4, [r3, #0]
   b49c8:	bd10      	pop	{r4, pc}
   b49ca:	bf00      	nop
   b49cc:	2003e618 	.word	0x2003e618
   b49d0:	2003e628 	.word	0x2003e628
   b49d4:	2003e640 	.word	0x2003e640
   b49d8:	2003e61c 	.word	0x2003e61c
   b49dc:	2003e620 	.word	0x2003e620

000b49e0 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b49e0:	b513      	push	{r0, r1, r4, lr}
   b49e2:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b49e4:	4608      	mov	r0, r1
   b49e6:	9101      	str	r1, [sp, #4]
   b49e8:	f007 fa5f 	bl	bbeaa <strlen>
   b49ec:	9901      	ldr	r1, [sp, #4]
   b49ee:	4602      	mov	r2, r0
   b49f0:	4620      	mov	r0, r4
}
   b49f2:	b002      	add	sp, #8
   b49f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b49f8:	f006 ba92 	b.w	baf20 <_ZN5spark10JSONWriter4nameEPKcj>

000b49fc <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE>:
    }
    return false;
}

void KontaktTag::toJson(JSONWriter *writer) const
{
   b49fc:	b530      	push	{r4, r5, lr}
   b49fe:	b085      	sub	sp, #20
   b4a00:	4604      	mov	r4, r0
   b4a02:	460d      	mov	r5, r1
        writer->name(address.toString()).beginObject();
   b4a04:	2200      	movs	r2, #0
   b4a06:	1dc1      	adds	r1, r0, #7
   b4a08:	4668      	mov	r0, sp
   b4a0a:	f003 fab9 	bl	b7f80 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b4a0e:	9a02      	ldr	r2, [sp, #8]
   b4a10:	9900      	ldr	r1, [sp, #0]
   b4a12:	4628      	mov	r0, r5
   b4a14:	f006 fa84 	bl	baf20 <_ZN5spark10JSONWriter4nameEPKcj>
   b4a18:	f006 f9c8 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
   b4a1c:	4668      	mov	r0, sp
   b4a1e:	f002 ff81 	bl	b7924 <_ZN6StringD1Ev>
        if (battery != 0xFF)
   b4a22:	7ce3      	ldrb	r3, [r4, #19]
   b4a24:	2bff      	cmp	r3, #255	; 0xff
   b4a26:	d006      	beq.n	b4a36 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x3a>
            writer->name("batt").value(battery);
   b4a28:	4923      	ldr	r1, [pc, #140]	; (b4ab8 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xbc>)
   b4a2a:	4628      	mov	r0, r5
   b4a2c:	f7ff ffd8 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a30:	7ce1      	ldrb	r1, [r4, #19]
   b4a32:	f006 f9df 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        if (temperature != 0xFF)
            writer->name("temp").value(temperature);
   b4a36:	4921      	ldr	r1, [pc, #132]	; (b4abc <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc0>)
   b4a38:	4628      	mov	r0, r5
   b4a3a:	f7ff ffd1 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a3e:	f994 101f 	ldrsb.w	r1, [r4, #31]
   b4a42:	f006 f9d7 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        if (button_time != 0xFFFF)
   b4a46:	8ae2      	ldrh	r2, [r4, #22]
   b4a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4a4c:	429a      	cmp	r2, r3
   b4a4e:	d006      	beq.n	b4a5e <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x62>
            writer->name("button").value(button_time);
   b4a50:	491b      	ldr	r1, [pc, #108]	; (b4ac0 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc4>)
   b4a52:	4628      	mov	r0, r5
   b4a54:	f7ff ffc4 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a58:	8ae1      	ldrh	r1, [r4, #22]
   b4a5a:	f006 f9cb 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        if (accel_data)
   b4a5e:	f894 3020 	ldrb.w	r3, [r4, #32]
   b4a62:	b1bb      	cbz	r3, b4a94 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x98>
        {
            writer->name("x_axis").value(x_axis);
   b4a64:	4917      	ldr	r1, [pc, #92]	; (b4ac4 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc8>)
   b4a66:	4628      	mov	r0, r5
   b4a68:	f7ff ffba 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a6c:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b4a70:	f006 f9c0 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->name("y_axis").value(y_axis);
   b4a74:	4914      	ldr	r1, [pc, #80]	; (b4ac8 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xcc>)
   b4a76:	4628      	mov	r0, r5
   b4a78:	f7ff ffb2 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a7c:	f994 101d 	ldrsb.w	r1, [r4, #29]
   b4a80:	f006 f9b8 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->name("z_axis").value(z_axis);
   b4a84:	4911      	ldr	r1, [pc, #68]	; (b4acc <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xd0>)
   b4a86:	4628      	mov	r0, r5
   b4a88:	f7ff ffaa 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a8c:	f994 101e 	ldrsb.w	r1, [r4, #30]
   b4a90:	f006 f9b0 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        }
        writer->name("rssi").value(getRssi());
   b4a94:	490e      	ldr	r1, [pc, #56]	; (b4ad0 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xd4>)
   b4a96:	4628      	mov	r0, r5
   b4a98:	f7ff ffa2 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b4a9c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4aa0:	7ca3      	ldrb	r3, [r4, #18]
   b4aa2:	fb91 f1f3 	sdiv	r1, r1, r3
   b4aa6:	b249      	sxtb	r1, r1
   b4aa8:	f006 f9a4 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b4aac:	4628      	mov	r0, r5
}
   b4aae:	b005      	add	sp, #20
   b4ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        writer->endObject();
   b4ab4:	f006 b964 	b.w	bad80 <_ZN5spark10JSONWriter9endObjectEv>
   b4ab8:	000bc3e4 	.word	0x000bc3e4
   b4abc:	000bc04c 	.word	0x000bc04c
   b4ac0:	000bc051 	.word	0x000bc051
   b4ac4:	000bc058 	.word	0x000bc058
   b4ac8:	000bc05f 	.word	0x000bc05f
   b4acc:	000bc066 	.word	0x000bc066
   b4ad0:	000bc06d 	.word	0x000bc06d

000b4ad4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4ad4:	b40e      	push	{r1, r2, r3}
   b4ad6:	b500      	push	{lr}
   b4ad8:	b08c      	sub	sp, #48	; 0x30
   b4ada:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4adc:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4ae0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4ae4:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ae6:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4aea:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4aec:	6801      	ldr	r1, [r0, #0]
   b4aee:	aa04      	add	r2, sp, #16
   b4af0:	201e      	movs	r0, #30
    attr.flags = 0;
   b4af2:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4af6:	f002 fd23 	bl	b7540 <log_message_v>
}
   b4afa:	b00c      	add	sp, #48	; 0x30
   b4afc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b00:	b003      	add	sp, #12
   b4b02:	4770      	bx	lr

000b4b04 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE>:
{
   b4b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b08:	460c      	mov	r4, r1
   b4b0a:	b0a3      	sub	sp, #140	; 0x8c
   b4b0c:	4605      	mov	r5, r0
    Beacon::populateData(scanResult);
   b4b0e:	f7ff face 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b4b12:	4621      	mov	r1, r4
   b4b14:	1de8      	adds	r0, r5, #7
   b4b16:	f003 f9a6 	bl	b7e66 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, sizeof(buf));
   b4b1a:	231f      	movs	r3, #31
   b4b1c:	aa01      	add	r2, sp, #4
   b4b1e:	2116      	movs	r1, #22
   b4b20:	f104 0008 	add.w	r0, r4, #8
   b4b24:	f003 fbb1 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b4b28:	b2c6      	uxtb	r6, r0
    if (count > 3 && buf[0] == 0x6A && buf[1] == 0xFE) // Kontakt UUID
   b4b2a:	2e03      	cmp	r6, #3
   b4b2c:	d94f      	bls.n	b4bce <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
   b4b2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4b32:	2b6a      	cmp	r3, #106	; 0x6a
   b4b34:	d14b      	bne.n	b4bce <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
   b4b36:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4b3a:	2bfe      	cmp	r3, #254	; 0xfe
   b4b3c:	d147      	bne.n	b4bce <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
        if (buf[cursor] == 0x03) // Telemetry v1 packet
   b4b3e:	f89d 4006 	ldrb.w	r4, [sp, #6]
   b4b42:	2c03      	cmp	r4, #3
   b4b44:	d143      	bne.n	b4bce <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
                cursor++;
   b4b46:	1c62      	adds	r2, r4, #1
                switch (buf[cursor++])
   b4b48:	a922      	add	r1, sp, #136	; 0x88
                cursor++;
   b4b4a:	fa5f f982 	uxtb.w	r9, r2
                switch (buf[cursor++])
   b4b4e:	fa51 f282 	uxtab	r2, r1, r2
   b4b52:	1ca3      	adds	r3, r4, #2
   b4b54:	f812 2c84 	ldrb.w	r2, [r2, #-132]
   b4b58:	2a05      	cmp	r2, #5
   b4b5a:	b2db      	uxtb	r3, r3
   b4b5c:	d06d      	beq.n	b4c3a <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x136>
   b4b5e:	d81d      	bhi.n	b4b9c <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x98>
   b4b60:	2a01      	cmp	r2, #1
   b4b62:	d029      	beq.n	b4bb8 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xb4>
   b4b64:	2a02      	cmp	r2, #2
   b4b66:	d035      	beq.n	b4bd4 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xd0>
                uint8_t size = buf[cursor];
   b4b68:	ab22      	add	r3, sp, #136	; 0x88
   b4b6a:	441c      	add	r4, r3
   b4b6c:	af09      	add	r7, sp, #36	; 0x24
   b4b6e:	ab01      	add	r3, sp, #4
   b4b70:	f814 4c84 	ldrb.w	r4, [r4, #-132]
   b4b74:	eb03 0a09 	add.w	sl, r3, r9
   b4b78:	f04f 0800 	mov.w	r8, #0
   b4b7c:	46bb      	mov	fp, r7
                    for (uint8_t i = 0; i < size; i++)
   b4b7e:	fa5f f388 	uxtb.w	r3, r8
   b4b82:	429c      	cmp	r4, r3
   b4b84:	d963      	bls.n	b4c4e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x14a>
                        snprintf(nbuf + i * 2, sizeof(nbuf), "%02X", buf[cursor + i]);
   b4b86:	4638      	mov	r0, r7
   b4b88:	f81a 3b01 	ldrb.w	r3, [sl], #1
   b4b8c:	4a36      	ldr	r2, [pc, #216]	; (b4c68 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x164>)
   b4b8e:	2164      	movs	r1, #100	; 0x64
   b4b90:	f002 fdea 	bl	b7768 <snprintf>
                    for (uint8_t i = 0; i < size; i++)
   b4b94:	f108 0801 	add.w	r8, r8, #1
   b4b98:	3702      	adds	r7, #2
   b4b9a:	e7f0      	b.n	b4b7e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x7a>
                switch (buf[cursor++])
   b4b9c:	2a0d      	cmp	r2, #13
   b4b9e:	d1e3      	bne.n	b4b68 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x64>
                    button_time = buf[cursor] + buf[cursor + 1] * 256;
   b4ba0:	aa22      	add	r2, sp, #136	; 0x88
   b4ba2:	4413      	add	r3, r2
                    cursor += 2;
   b4ba4:	3404      	adds	r4, #4
                    button_time = buf[cursor] + buf[cursor + 1] * 256;
   b4ba6:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b4baa:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4bb2:	82eb      	strh	r3, [r5, #22]
                    cursor += size;
   b4bb4:	b2e4      	uxtb	r4, r4
   b4bb6:	e008      	b.n	b4bca <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    cursor += 4; // Advance to battery level
   b4bb8:	1da3      	adds	r3, r4, #6
                    battery = buf[cursor++];
   b4bba:	aa22      	add	r2, sp, #136	; 0x88
   b4bbc:	fa52 f383 	uxtab	r3, r2, r3
   b4bc0:	3407      	adds	r4, #7
   b4bc2:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bc6:	74eb      	strb	r3, [r5, #19]
   b4bc8:	b2e4      	uxtb	r4, r4
            while (cursor < count)
   b4bca:	42b4      	cmp	r4, r6
   b4bcc:	d3bb      	bcc.n	b4b46 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x42>
}
   b4bce:	b023      	add	sp, #140	; 0x8c
   b4bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    accel_sensitivity = buf[cursor++];
   b4bd4:	aa22      	add	r2, sp, #136	; 0x88
   b4bd6:	4413      	add	r3, r2
   b4bd8:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bdc:	752b      	strb	r3, [r5, #20]
   b4bde:	1ce3      	adds	r3, r4, #3
                    x_axis = buf[cursor++];
   b4be0:	fa52 f383 	uxtab	r3, r2, r3
   b4be4:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4be8:	772b      	strb	r3, [r5, #28]
   b4bea:	1d23      	adds	r3, r4, #4
                    y_axis = buf[cursor++];
   b4bec:	fa52 f383 	uxtab	r3, r2, r3
   b4bf0:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bf4:	776b      	strb	r3, [r5, #29]
   b4bf6:	1d63      	adds	r3, r4, #5
                    z_axis = buf[cursor++];
   b4bf8:	fa52 f383 	uxtab	r3, r2, r3
   b4bfc:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4c00:	77ab      	strb	r3, [r5, #30]
   b4c02:	1da3      	adds	r3, r4, #6
                    accel_last_double_tap = buf[cursor] + buf[cursor + 1] * 256;
   b4c04:	fa52 f383 	uxtab	r3, r2, r3
   b4c08:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b4c0c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4c10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4c14:	832b      	strh	r3, [r5, #24]
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4c16:	aa22      	add	r2, sp, #136	; 0x88
                    cursor += 2;
   b4c18:	f104 0308 	add.w	r3, r4, #8
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4c1c:	fa52 f383 	uxtab	r3, r2, r3
                    cursor += 2;
   b4c20:	340a      	adds	r4, #10
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4c22:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b4c26:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4c2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4c2e:	836b      	strh	r3, [r5, #26]
                    accel_data = true;
   b4c30:	2301      	movs	r3, #1
                    cursor += 2;
   b4c32:	b2e4      	uxtb	r4, r4
                    accel_data = true;
   b4c34:	f885 3020 	strb.w	r3, [r5, #32]
                    break;
   b4c38:	e7c7      	b.n	b4bca <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    cursor++;
   b4c3a:	1ce3      	adds	r3, r4, #3
                    temperature = buf[cursor++];
   b4c3c:	aa22      	add	r2, sp, #136	; 0x88
   b4c3e:	fa52 f383 	uxtab	r3, r2, r3
   b4c42:	3404      	adds	r4, #4
   b4c44:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4c48:	77eb      	strb	r3, [r5, #31]
   b4c4a:	b2e4      	uxtb	r4, r4
                    break;
   b4c4c:	e7bd      	b.n	b4bca <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    nbuf[size * 2] = '\0';
   b4c4e:	ab22      	add	r3, sp, #136	; 0x88
   b4c50:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   b4c54:	2200      	movs	r2, #0
   b4c56:	f803 2c64 	strb.w	r2, [r3, #-100]
                    Log.info("%s", nbuf);
   b4c5a:	4904      	ldr	r1, [pc, #16]	; (b4c6c <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x168>)
   b4c5c:	4804      	ldr	r0, [pc, #16]	; (b4c70 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x16c>)
   b4c5e:	465a      	mov	r2, fp
   b4c60:	f7ff ff38 	bl	b4ad4 <_ZNK5spark6Logger4infoEPKcz>
                    cursor += size;
   b4c64:	444c      	add	r4, r9
   b4c66:	e7a5      	b.n	b4bb4 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xb0>
   b4c68:	000bc31c 	.word	0x000bc31c
   b4c6c:	000bc1be 	.word	0x000bc1be
   b4c70:	2003e6c4 	.word	0x2003e6c4

000b4c74 <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE>:
{
   b4c74:	b530      	push	{r4, r5, lr}
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b4c76:	f100 0508 	add.w	r5, r0, #8
   b4c7a:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).contains(BleAdvertisingDataType::SERVICE_DATA))
   b4c7c:	2116      	movs	r1, #22
   b4c7e:	4628      	mov	r0, r5
   b4c80:	f003 fb65 	bl	b834e <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>
   b4c84:	4604      	mov	r4, r0
   b4c86:	b188      	cbz	r0, b4cac <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x38>
        uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b4c88:	231f      	movs	r3, #31
   b4c8a:	466a      	mov	r2, sp
   b4c8c:	2116      	movs	r1, #22
   b4c8e:	4628      	mov	r0, r5
   b4c90:	f003 fafb 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        if (count > 3 && buf[0] == 0x6A && buf[1] == 0xFE) // Kontakt UUID
   b4c94:	b2c0      	uxtb	r0, r0
   b4c96:	2803      	cmp	r0, #3
   b4c98:	d907      	bls.n	b4caa <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x36>
   b4c9a:	f89d 3000 	ldrb.w	r3, [sp]
   b4c9e:	2b6a      	cmp	r3, #106	; 0x6a
   b4ca0:	d103      	bne.n	b4caa <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x36>
   b4ca2:	f89d 3001 	ldrb.w	r3, [sp, #1]
   b4ca6:	2bfe      	cmp	r3, #254	; 0xfe
   b4ca8:	d000      	beq.n	b4cac <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x38>
    return false;
   b4caa:	2400      	movs	r4, #0
}
   b4cac:	4620      	mov	r0, r4
   b4cae:	b009      	add	sp, #36	; 0x24
   b4cb0:	bd30      	pop	{r4, r5, pc}
	...

000b4cb4 <_ZN10KontaktTagC1ERKS_>:
#ifndef KONTAKT_TAG_H
#define KONTAKT_TAG_H

#include "beacon.h"

class KontaktTag : public Beacon
   b4cb4:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b4cb6:	4b11      	ldr	r3, [pc, #68]	; (b4cfc <_ZN10KontaktTagC1ERKS_+0x48>)
   b4cb8:	888a      	ldrh	r2, [r1, #4]
   b4cba:	6003      	str	r3, [r0, #0]
   b4cbc:	460d      	mov	r5, r1
   b4cbe:	798b      	ldrb	r3, [r1, #6]
   b4cc0:	8082      	strh	r2, [r0, #4]
   b4cc2:	4604      	mov	r4, r0
   b4cc4:	7183      	strb	r3, [r0, #6]
   b4cc6:	3107      	adds	r1, #7
   b4cc8:	3007      	adds	r0, #7
   b4cca:	f003 f8c7 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
   b4cce:	8a2b      	ldrh	r3, [r5, #16]
   b4cd0:	8223      	strh	r3, [r4, #16]
   b4cd2:	7cab      	ldrb	r3, [r5, #18]
   b4cd4:	74a3      	strb	r3, [r4, #18]
   b4cd6:	4b0a      	ldr	r3, [pc, #40]	; (b4d00 <_ZN10KontaktTagC1ERKS_+0x4c>)
   b4cd8:	8aea      	ldrh	r2, [r5, #22]
   b4cda:	6023      	str	r3, [r4, #0]
   b4cdc:	7ceb      	ldrb	r3, [r5, #19]
   b4cde:	74e3      	strb	r3, [r4, #19]
   b4ce0:	82e2      	strh	r2, [r4, #22]
   b4ce2:	7d2b      	ldrb	r3, [r5, #20]
   b4ce4:	69aa      	ldr	r2, [r5, #24]
   b4ce6:	7523      	strb	r3, [r4, #20]
   b4ce8:	61a2      	str	r2, [r4, #24]
   b4cea:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4cee:	69ea      	ldr	r2, [r5, #28]
   b4cf0:	61e2      	str	r2, [r4, #28]
   b4cf2:	f884 3020 	strb.w	r3, [r4, #32]
   b4cf6:	4620      	mov	r0, r4
   b4cf8:	bd38      	pop	{r3, r4, r5, pc}
   b4cfa:	bf00      	nop
   b4cfc:	000bc044 	.word	0x000bc044
   b4d00:	000bc07c 	.word	0x000bc07c

000b4d04 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4d04:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d08:	4604      	mov	r4, r0
   b4d0a:	460d      	mov	r5, r1
   b4d0c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4d0e:	d911      	bls.n	b4d34 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b4d10:	4290      	cmp	r0, r2
   b4d12:	d210      	bcs.n	b4d36 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b4d14:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b4d18:	1a75      	subs	r5, r6, r1
   b4d1a:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b4d1e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4d20:	42b7      	cmp	r7, r6
   b4d22:	d012      	beq.n	b4d4a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b4d24:	b11c      	cbz	r4, b4d2e <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b4d26:	4631      	mov	r1, r6
   b4d28:	4620      	mov	r0, r4
   b4d2a:	f7ff ffc3 	bl	b4cb4 <_ZN10KontaktTagC1ERKS_>
            for (; end != p; --end, --dest) {
   b4d2e:	3e24      	subs	r6, #36	; 0x24
   b4d30:	3c24      	subs	r4, #36	; 0x24
   b4d32:	e7f5      	b.n	b4d20 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4d34:	d009      	beq.n	b4d4a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b4d36:	42b5      	cmp	r5, r6
   b4d38:	d007      	beq.n	b4d4a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b4d3a:	b11c      	cbz	r4, b4d44 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b4d3c:	4629      	mov	r1, r5
   b4d3e:	4620      	mov	r0, r4
   b4d40:	f7ff ffb8 	bl	b4cb4 <_ZN10KontaktTagC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b4d44:	3524      	adds	r5, #36	; 0x24
   b4d46:	3424      	adds	r4, #36	; 0x24
   b4d48:	e7f5      	b.n	b4d36 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b4d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d4c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE>:

void KontaktTag::addOrUpdate(const BleScanResult *scanResult) {
   b4d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b4d50:	4c42      	ldr	r4, [pc, #264]	; (b4e5c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x110>)
   b4d52:	b09c      	sub	sp, #112	; 0x70
   b4d54:	4606      	mov	r6, r0
   b4d56:	2700      	movs	r7, #0
    return data_[i];
   b4d58:	f04f 0824 	mov.w	r8, #36	; 0x24
    uint8_t i;
    for (i = 0; i < beacons.size(); i++)
   b4d5c:	6863      	ldr	r3, [r4, #4]
   b4d5e:	b2fd      	uxtb	r5, r7
   b4d60:	429d      	cmp	r5, r3
   b4d62:	da0d      	bge.n	b4d80 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b4d64:	6821      	ldr	r1, [r4, #0]
   b4d66:	fb08 1105 	mla	r1, r8, r5, r1
    BleAddress getAddress() const { return address;}
   b4d6a:	3107      	adds	r1, #7
   b4d6c:	a813      	add	r0, sp, #76	; 0x4c
   b4d6e:	f003 f875 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
    {
        if (beacons.at(i).getAddress() == ADDRESS(scanResult))
   b4d72:	4631      	mov	r1, r6
   b4d74:	a813      	add	r0, sp, #76	; 0x4c
   b4d76:	f003 f888 	bl	b7e8a <_ZNK8particle10BleAddresseqERKS0_>
   b4d7a:	3701      	adds	r7, #1
   b4d7c:	2800      	cmp	r0, #0
   b4d7e:	d0ed      	beq.n	b4d5c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x10>
        {
            break;
        }
    }
    if (i == beacons.size()) {
   b4d80:	6863      	ldr	r3, [r4, #4]
   b4d82:	429d      	cmp	r5, r3
   b4d84:	d15d      	bne.n	b4e42 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf6>
        rssi_count(0) {};
   b4d86:	4b36      	ldr	r3, [pc, #216]	; (b4e60 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x114>)
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	2301      	movs	r3, #1
   b4d8c:	f88d 3009 	strb.w	r3, [sp, #9]
   b4d90:	f10d 000b 	add.w	r0, sp, #11
   b4d94:	2302      	movs	r3, #2
   b4d96:	f88d 300a 	strb.w	r3, [sp, #10]
   b4d9a:	f003 f88a 	bl	b7eb2 <_ZN8particle10BleAddressC1Ev>
{
public:
    KontaktTag() : Beacon(SCAN_KONTAKT)
   b4d9e:	4b31      	ldr	r3, [pc, #196]	; (b4e64 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x118>)
   b4da0:	9301      	str	r3, [sp, #4]
    {
        battery = temperature = 0xFF;
   b4da2:	23ff      	movs	r3, #255	; 0xff
   b4da4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   b4da8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   b4dac:	9305      	str	r3, [sp, #20]
        button_time = accel_last_double_tap = accel_last_movement = 0xFFFF;
   b4dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
        KontaktTag new_beacon;
        new_beacon.populateData(scanResult);
   b4db2:	4631      	mov	r1, r6
   b4db4:	f8ad 301a 	strh.w	r3, [sp, #26]
        accel_data = false;
   b4db8:	2500      	movs	r5, #0
        button_time = accel_last_double_tap = accel_last_movement = 0xFFFF;
   b4dba:	f04f 33ff 	mov.w	r3, #4294967295
   b4dbe:	a801      	add	r0, sp, #4
   b4dc0:	9307      	str	r3, [sp, #28]
        accel_data = false;
   b4dc2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   b4dc6:	f7ff fe9d 	bl	b4b04 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b4dca:	a901      	add	r1, sp, #4
   b4dcc:	a80a      	add	r0, sp, #40	; 0x28
        new_beacon.missed_scan = 0;
   b4dce:	f88d 5008 	strb.w	r5, [sp, #8]
        beacons.append(new_beacon);
   b4dd2:	f7ff ff6f 	bl	b4cb4 <_ZN10KontaktTagC1ERKS_>
    return insert(size_, std::move(value));
   b4dd6:	a90a      	add	r1, sp, #40	; 0x28
   b4dd8:	a813      	add	r0, sp, #76	; 0x4c
   b4dda:	6866      	ldr	r6, [r4, #4]
   b4ddc:	f7ff ff6a 	bl	b4cb4 <_ZN10KontaktTagC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4de0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b4de4:	429f      	cmp	r7, r3
   b4de6:	db15      	blt.n	b4e14 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xc8>
   b4de8:	3701      	adds	r7, #1
        if (n > 0) {
   b4dea:	42af      	cmp	r7, r5
   b4dec:	dd0d      	ble.n	b4e0a <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xbe>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4dee:	f04f 0824 	mov.w	r8, #36	; 0x24
    return ::malloc(size);
   b4df2:	fb08 f007 	mul.w	r0, r8, r7
   b4df6:	f002 fc97 	bl	b7728 <malloc>
            if (!d) {
   b4dfa:	4605      	mov	r5, r0
   b4dfc:	b1f0      	cbz	r0, b4e3c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf0>
            move(d, data_, data_ + size_);
   b4dfe:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e02:	fb08 1202 	mla	r2, r8, r2, r1
   b4e06:	f7ff ff7d 	bl	b4d04 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e0a:	6820      	ldr	r0, [r4, #0]
   b4e0c:	f002 fc94 	bl	b7738 <free>
        data_ = d;
   b4e10:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4e12:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b4e14:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b4e16:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b4e18:	2224      	movs	r2, #36	; 0x24
   b4e1a:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b4e1e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b4e22:	fb02 3201 	mla	r2, r2, r1, r3
   b4e26:	4631      	mov	r1, r6
   b4e28:	f7ff ff6c 	bl	b4d04 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b4e2c:	b11e      	cbz	r6, b4e36 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xea>
   b4e2e:	a913      	add	r1, sp, #76	; 0x4c
   b4e30:	4630      	mov	r0, r6
   b4e32:	f7ff ff3f 	bl	b4cb4 <_ZN10KontaktTagC1ERKS_>
    ++size_;
   b4e36:	6863      	ldr	r3, [r4, #4]
   b4e38:	3301      	adds	r3, #1
   b4e3a:	6063      	str	r3, [r4, #4]
        KontaktTag& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b4e3c:	b01c      	add	sp, #112	; 0x70
   b4e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b4e42:	2324      	movs	r3, #36	; 0x24
   b4e44:	435d      	muls	r5, r3
   b4e46:	6823      	ldr	r3, [r4, #0]
   b4e48:	195c      	adds	r4, r3, r5
        beacon.newly_scanned = false;
   b4e4a:	2700      	movs	r7, #0
   b4e4c:	7167      	strb	r7, [r4, #5]
        beacon.populateData(scanResult);
   b4e4e:	595b      	ldr	r3, [r3, r5]
   b4e50:	4631      	mov	r1, r6
   b4e52:	685b      	ldr	r3, [r3, #4]
   b4e54:	4620      	mov	r0, r4
   b4e56:	4798      	blx	r3
        beacon.missed_scan = 0;
   b4e58:	7127      	strb	r7, [r4, #4]
   b4e5a:	e7ef      	b.n	b4e3c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf0>
   b4e5c:	2003e658 	.word	0x2003e658
   b4e60:	000bc044 	.word	0x000bc044
   b4e64:	000bc07c 	.word	0x000bc07c

000b4e68 <_GLOBAL__sub_I__ZN10KontaktTag7beaconsE>:
        capacity_(0) {
   b4e68:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <_GLOBAL__sub_I__ZN10KontaktTag7beaconsE+0xc>)
   b4e6a:	2200      	movs	r2, #0
   b4e6c:	e9c3 2200 	strd	r2, r2, [r3]
   b4e70:	609a      	str	r2, [r3, #8]
   b4e72:	4770      	bx	lr
   b4e74:	2003e658 	.word	0x2003e658

000b4e78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4e78:	4770      	bx	lr

000b4e7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4e7a:	2000      	movs	r0, #0
   b4e7c:	4770      	bx	lr

000b4e7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4e7e:	b510      	push	{r4, lr}
   b4e80:	2110      	movs	r1, #16
   b4e82:	4604      	mov	r4, r0
   b4e84:	f7ff f909 	bl	b409a <_ZdlPvj>
   b4e88:	4620      	mov	r0, r4
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4e8c:	b508      	push	{r3, lr}
      { delete this; }
   b4e8e:	f7ff fff6 	bl	b4e7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4e92:	bd08      	pop	{r3, pc}

000b4e94 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b4e94:	b513      	push	{r0, r1, r4, lr}
   b4e96:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b4e98:	4608      	mov	r0, r1
   b4e9a:	9101      	str	r1, [sp, #4]
   b4e9c:	f007 f805 	bl	bbeaa <strlen>
   b4ea0:	9901      	ldr	r1, [sp, #4]
   b4ea2:	4602      	mov	r2, r0
   b4ea4:	4620      	mov	r0, r4
}
   b4ea6:	b002      	add	sp, #8
   b4ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b4eac:	f006 b848 	b.w	baf40 <_ZN5spark10JSONWriter5valueEPKcj>

000b4eb0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4eb0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4eb2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4eb4:	4604      	mov	r4, r0
      if (_M_manager)
   b4eb6:	b113      	cbz	r3, b4ebe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4eb8:	2203      	movs	r2, #3
   b4eba:	4601      	mov	r1, r0
   b4ebc:	4798      	blx	r3
    }
   b4ebe:	4620      	mov	r0, r4
   b4ec0:	bd10      	pop	{r4, pc}

000b4ec2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4ec2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4ec4:	6843      	ldr	r3, [r0, #4]
   b4ec6:	3b01      	subs	r3, #1
    {
   b4ec8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4eca:	6043      	str	r3, [r0, #4]
   b4ecc:	b963      	cbnz	r3, b4ee8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4ece:	6803      	ldr	r3, [r0, #0]
   b4ed0:	689b      	ldr	r3, [r3, #8]
   b4ed2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ed4:	68a3      	ldr	r3, [r4, #8]
   b4ed6:	3b01      	subs	r3, #1
   b4ed8:	60a3      	str	r3, [r4, #8]
   b4eda:	b92b      	cbnz	r3, b4ee8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4edc:	6823      	ldr	r3, [r4, #0]
   b4ede:	4620      	mov	r0, r4
   b4ee0:	68db      	ldr	r3, [r3, #12]
    }
   b4ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4ee6:	4718      	bx	r3
    }
   b4ee8:	bd10      	pop	{r4, pc}

000b4eea <_ZN11SystemClass6uptimeEv>:
    }

    static unsigned uptime() {
   b4eea:	b508      	push	{r3, lr}
        return (hal_timer_millis(nullptr) / 1000);
   b4eec:	2000      	movs	r0, #0
   b4eee:	f002 f953 	bl	b7198 <hal_timer_millis>
   b4ef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4ef6:	2300      	movs	r3, #0
   b4ef8:	f006 fd84 	bl	bba04 <__aeabi_uldivmod>
    }
   b4efc:	bd08      	pop	{r3, pc}

000b4efe <_ZN8particle5ErrorD1Ev>:
inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
   b4efe:	b510      	push	{r4, lr}
   b4f00:	4604      	mov	r4, r0
    free((void*)msg_);
   b4f02:	6800      	ldr	r0, [r0, #0]
   b4f04:	f002 fc18 	bl	b7738 <free>
}
   b4f08:	4620      	mov	r0, r4
   b4f0a:	bd10      	pop	{r4, pc}

000b4f0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4f0c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4f0e:	68c4      	ldr	r4, [r0, #12]
   b4f10:	b1f4      	cbz	r4, b4f50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4f12:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4f14:	2b02      	cmp	r3, #2
   b4f16:	d103      	bne.n	b4f20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4f18:	f104 000c 	add.w	r0, r4, #12
   b4f1c:	f7ff ffef 	bl	b4efe <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4f20:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4f22:	b135      	cbz	r5, b4f32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4f24:	4628      	mov	r0, r5
   b4f26:	f7ff ffc3 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
   b4f2a:	2110      	movs	r1, #16
   b4f2c:	4628      	mov	r0, r5
   b4f2e:	f7ff f8b4 	bl	b409a <_ZdlPvj>
   b4f32:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4f34:	b135      	cbz	r5, b4f44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4f36:	4628      	mov	r0, r5
   b4f38:	f7ff ffba 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
   b4f3c:	2110      	movs	r1, #16
   b4f3e:	4628      	mov	r0, r5
   b4f40:	f7ff f8ab 	bl	b409a <_ZdlPvj>
   b4f44:	4620      	mov	r0, r4
   b4f46:	2114      	movs	r1, #20
   b4f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4f4c:	f7ff b8a5 	b.w	b409a <_ZdlPvj>
   b4f50:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4f54 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE>:
            }
    return false;
}

void LairdBt510::toJson(JSONWriter *writer) const
{
   b4f54:	b530      	push	{r4, r5, lr}
   b4f56:	b085      	sub	sp, #20
   b4f58:	460c      	mov	r4, r1
   b4f5a:	4605      	mov	r5, r0
        writer->name(address.toString()).beginObject();
   b4f5c:	1dc1      	adds	r1, r0, #7
   b4f5e:	2200      	movs	r2, #0
   b4f60:	4668      	mov	r0, sp
   b4f62:	f003 f80d 	bl	b7f80 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b4f66:	9a02      	ldr	r2, [sp, #8]
   b4f68:	9900      	ldr	r1, [sp, #0]
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	f005 ffd8 	bl	baf20 <_ZN5spark10JSONWriter4nameEPKcj>
   b4f70:	f005 ff1c 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
   b4f74:	4668      	mov	r0, sp
   b4f76:	f002 fcd5 	bl	b7924 <_ZN6StringD1Ev>
        writer->name("magnet_near").value(magnetNear());
   b4f7a:	4918      	ldr	r1, [pc, #96]	; (b4fdc <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x88>)
   b4f7c:	4620      	mov	r0, r4
   b4f7e:	f7ff fd2f 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
    static void setEventCallback(LairdBt510EventCallback callback) { LairdBt510::_eventCallback = callback; };
    static void setAlarmCallback(LairdBt510EventCallback callback) { LairdBt510::_alarmCallback = callback; };

    // Get the sensor data
    int16_t getTemperature() const { return _temp; };
    bool magnetNear() const {return !_magnet_state;};
   b4f82:	7fe9      	ldrb	r1, [r5, #31]
   b4f84:	f081 0101 	eor.w	r1, r1, #1
   b4f88:	f005 ff1c 	bl	badc4 <_ZN5spark10JSONWriter5valueEb>
        writer->name("temp").value(getTemperature());
   b4f8c:	4914      	ldr	r1, [pc, #80]	; (b4fe0 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x8c>)
   b4f8e:	4620      	mov	r0, r4
   b4f90:	f7ff fd26 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4f94:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
   b4f98:	f005 ff2c 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->name("record").value(getRecordNumber());
   b4f9c:	4911      	ldr	r1, [pc, #68]	; (b4fe4 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x90>)
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	f7ff fd1e 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4fa4:	8b69      	ldrh	r1, [r5, #26]
   b4fa6:	f005 ff25 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->name("batt").value(getBattVoltage());
   b4faa:	490f      	ldr	r1, [pc, #60]	; (b4fe8 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x94>)
   b4fac:	4620      	mov	r0, r4
   b4fae:	f7ff fd17 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b4fb2:	8ba9      	ldrh	r1, [r5, #28]
   b4fb4:	f005 ff1e 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->name("rssi").value(getRssi());
   b4fb8:	490c      	ldr	r1, [pc, #48]	; (b4fec <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x98>)
   b4fba:	4620      	mov	r0, r4
   b4fbc:	f7ff fd10 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b4fc0:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   b4fc4:	7cab      	ldrb	r3, [r5, #18]
   b4fc6:	fb91 f1f3 	sdiv	r1, r1, r3
   b4fca:	b249      	sxtb	r1, r1
   b4fcc:	f005 ff12 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b4fd0:	4620      	mov	r0, r4
}
   b4fd2:	b005      	add	sp, #20
   b4fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        writer->endObject();
   b4fd8:	f005 bed2 	b.w	bad80 <_ZN5spark10JSONWriter9endObjectEv>
   b4fdc:	000bc084 	.word	0x000bc084
   b4fe0:	000bc04c 	.word	0x000bc04c
   b4fe4:	000bc090 	.word	0x000bc090
   b4fe8:	000bc3e4 	.word	0x000bc3e4
   b4fec:	000bc06d 	.word	0x000bc06d

000b4ff0 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4ff0:	b40e      	push	{r1, r2, r3}
   b4ff2:	b500      	push	{lr}
   b4ff4:	b08c      	sub	sp, #48	; 0x30
   b4ff6:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b4ff8:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4ffc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b5000:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5002:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b5006:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5008:	6801      	ldr	r1, [r0, #0]
   b500a:	aa04      	add	r2, sp, #16
   b500c:	2001      	movs	r0, #1
    attr.flags = 0;
   b500e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5012:	f002 fa95 	bl	b7540 <log_message_v>
}
   b5016:	b00c      	add	sp, #48	; 0x30
   b5018:	f85d eb04 	ldr.w	lr, [sp], #4
   b501c:	b003      	add	sp, #12
   b501e:	4770      	bx	lr

000b5020 <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv>:

private:
    Vector<char> v_;
};

void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b5020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LairdBt510* ctx = (LairdBt510*)context;
    // TODO: Check the returned JSON to make sure it is ok
    Log.trace("Received %d bytes", size);
   b5024:	f8df 8048 	ldr.w	r8, [pc, #72]	; b5070 <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x50>
void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b5028:	af00      	add	r7, sp, #0
   b502a:	460c      	mov	r4, r1
   b502c:	4606      	mov	r6, r0
    Log.trace("Received %d bytes", size);
   b502e:	460a      	mov	r2, r1
   b5030:	4640      	mov	r0, r8
   b5032:	490e      	ldr	r1, [pc, #56]	; (b506c <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b5034:	461d      	mov	r5, r3
    Log.trace("Received %d bytes", size);
   b5036:	f7ff ffdb 	bl	b4ff0 <_ZNK5spark6Logger5traceEPKcz>
    uint8_t buf[size+1];
   b503a:	f104 0308 	add.w	r3, r4, #8
   b503e:	f023 0307 	bic.w	r3, r3, #7
   b5042:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(buf, data, size);
   b5046:	4622      	mov	r2, r4
   b5048:	4631      	mov	r1, r6
   b504a:	4668      	mov	r0, sp
   b504c:	f006 fea0 	bl	bbd90 <memcpy>
    buf[size] = 0;
   b5050:	2300      	movs	r3, #0
    Log.trace((char*)buf);
   b5052:	4669      	mov	r1, sp
   b5054:	4640      	mov	r0, r8
    buf[size] = 0;
   b5056:	f80d 3004 	strb.w	r3, [sp, r4]
    Log.trace((char*)buf);
   b505a:	f7ff ffc9 	bl	b4ff0 <_ZNK5spark6Logger5traceEPKcz>
    ctx->state_ = DISCONNECT;
   b505e:	2304      	movs	r3, #4
   b5060:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   b5064:	46bd      	mov	sp, r7
   b5066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b506a:	bf00      	nop
   b506c:	000bc097 	.word	0x000bc097
   b5070:	2003e6c4 	.word	0x2003e6c4

000b5074 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE>:
{
   b5074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    size_t size = ADVERTISING_DATA(scanResult).get(buf, 9);
   b5076:	2209      	movs	r2, #9
   b5078:	a901      	add	r1, sp, #4
   b507a:	3008      	adds	r0, #8
   b507c:	f003 f8f7 	bl	b826e <_ZNK8particle18BleAdvertisingData3getEPhj>
    if (size >= 9 && buf[0] == 0x02 && buf[1] == 0x01 && buf[2] == 0x06 && (buf[3] == 0x1b || buf[3] == 0x26) && buf[4] == 0xFF &&
   b5080:	2808      	cmp	r0, #8
   b5082:	d929      	bls.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b5084:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5088:	2b02      	cmp	r3, #2
   b508a:	d125      	bne.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b508c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5090:	2b01      	cmp	r3, #1
   b5092:	d121      	bne.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b5094:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b5098:	2b06      	cmp	r3, #6
   b509a:	d11d      	bne.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b509c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b50a0:	2b1b      	cmp	r3, #27
   b50a2:	d001      	beq.n	b50a8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x34>
   b50a4:	2b26      	cmp	r3, #38	; 0x26
   b50a6:	d117      	bne.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b50a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b50ac:	2bff      	cmp	r3, #255	; 0xff
   b50ae:	d113      	bne.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b50b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b50b4:	2b77      	cmp	r3, #119	; 0x77
   b50b6:	d10f      	bne.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
            buf[5] == 0x77 && buf[6] == 0x00 && (buf[7] == 0x01 || buf[7] == 0x02) && buf[8] == 0x00) { 
   b50b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b50bc:	3b01      	subs	r3, #1
   b50be:	2b01      	cmp	r3, #1
   b50c0:	d80a      	bhi.n	b50d8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b50c2:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b50c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b50ca:	4313      	orrs	r3, r2
   b50cc:	bf0c      	ite	eq
   b50ce:	2001      	moveq	r0, #1
   b50d0:	2000      	movne	r0, #0
}
   b50d2:	b005      	add	sp, #20
   b50d4:	f85d fb04 	ldr.w	pc, [sp], #4
    return false;
   b50d8:	2000      	movs	r0, #0
   b50da:	e7fa      	b.n	b50d2 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x5e>

000b50dc <_ZN16LairdBt510ConfigC1Ev>:
   b50dc:	2200      	movs	r2, #0
   b50de:	e9c0 2200 	strd	r2, r2, [r0]
   b50e2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b50e6:	e9c0 2204 	strd	r2, r2, [r0, #16]
        advInterval_(0xFFFF),
        connTimeout_(0xFFFF),
        tempAggregationCount_(0xFF),
        configFlags_(Bt510ConfigFields::NONE),
        coded_(2),
        passkey_{0x31, 0x32, 0x33, 0x34, 0x35, 0x36}
   b50ea:	f04f 32ff 	mov.w	r2, #4294967295
   b50ee:	e9c0 2206 	strd	r2, r2, [r0, #24]
   b50f2:	6202      	str	r2, [r0, #32]
   b50f4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   b50f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b50fc:	84c2      	strh	r2, [r0, #38]	; 0x26
   b50fe:	4a04      	ldr	r2, [pc, #16]	; (b5110 <_ZN16LairdBt510ConfigC1Ev+0x34>)
LairdBt510Config::LairdBt510Config():
   b5100:	4603      	mov	r3, r0
        passkey_{0x31, 0x32, 0x33, 0x34, 0x35, 0x36}
   b5102:	6810      	ldr	r0, [r2, #0]
   b5104:	8892      	ldrh	r2, [r2, #4]
   b5106:	62d8      	str	r0, [r3, #44]	; 0x2c
   b5108:	861a      	strh	r2, [r3, #48]	; 0x30
        {};
   b510a:	4618      	mov	r0, r3
   b510c:	4770      	bx	lr
   b510e:	bf00      	nop
   b5110:	000bc26c 	.word	0x000bc26c

000b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5114:	b510      	push	{r4, lr}
   b5116:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5118:	6800      	ldr	r0, [r0, #0]
   b511a:	b108      	cbz	r0, b5120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b511c:	f7ff fed1 	bl	b4ec2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5120:	4620      	mov	r0, r4
   b5122:	bd10      	pop	{r4, pc}

000b5124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   b5124:	680b      	ldr	r3, [r1, #0]
   b5126:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   b5128:	b113      	cbz	r3, b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b512a:	685a      	ldr	r2, [r3, #4]
   b512c:	3201      	adds	r2, #1
   b512e:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   b5130:	4770      	bx	lr

000b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5132:	b510      	push	{r4, lr}
   b5134:	4604      	mov	r4, r0
    ::free(ptr);
   b5136:	6800      	ldr	r0, [r0, #0]
   b5138:	f002 fafe 	bl	b7738 <free>
}
   b513c:	4620      	mov	r0, r4
   b513e:	bd10      	pop	{r4, pc}

000b5140 <_ZN10LairdBt510D1Ev>:
    ~LairdBt510() = default;
   b5140:	b538      	push	{r3, r4, r5, lr}
   b5142:	4605      	mov	r5, r0
   b5144:	4b0d      	ldr	r3, [pc, #52]	; (b517c <_ZN10LairdBt510D1Ev+0x3c>)
   b5146:	f845 3b4c 	str.w	r3, [r5], #76
   b514a:	4604      	mov	r4, r0
    ~LairdBt510Config() = default;
   b514c:	3058      	adds	r0, #88	; 0x58
   b514e:	f7ff fff0 	bl	b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b5152:	4628      	mov	r0, r5
   b5154:	f7ff ffed 	bl	b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
    ~LairdBt510() = default;
   b5158:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b515c:	f003 fbe2 	bl	b8924 <_ZN8particle17BleCharacteristicD1Ev>
   b5160:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5164:	f003 fbde 	bl	b8924 <_ZN8particle17BleCharacteristicD1Ev>
   b5168:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b516c:	f003 fbe1 	bl	b8932 <_ZN8particle13BlePeerDeviceD1Ev>
   b5170:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5174:	f7ff ffdd 	bl	b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b5178:	4620      	mov	r0, r4
   b517a:	bd38      	pop	{r3, r4, r5, pc}
   b517c:	000bc27c 	.word	0x000bc27c

000b5180 <_ZN16JSONVectorWriterD1Ev>:
    ~JSONVectorWriter() = default;
   b5180:	b510      	push	{r4, lr}
   b5182:	4b04      	ldr	r3, [pc, #16]	; (b5194 <_ZN16JSONVectorWriterD1Ev+0x14>)
   b5184:	4604      	mov	r4, r0
   b5186:	f840 3b08 	str.w	r3, [r0], #8
   b518a:	f7ff ffd2 	bl	b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b518e:	4620      	mov	r0, r4
   b5190:	bd10      	pop	{r4, pc}
   b5192:	bf00      	nop
   b5194:	000bc240 	.word	0x000bc240

000b5198 <_ZN16JSONVectorWriterD0Ev>:
   b5198:	b510      	push	{r4, lr}
   b519a:	4604      	mov	r4, r0
   b519c:	f7ff fff0 	bl	b5180 <_ZN16JSONVectorWriterD1Ev>
   b51a0:	4620      	mov	r0, r4
   b51a2:	2114      	movs	r1, #20
   b51a4:	f7fe ff79 	bl	b409a <_ZdlPvj>
   b51a8:	4620      	mov	r0, r4
   b51aa:	bd10      	pop	{r4, pc}

000b51ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b51ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b51ae:	460e      	mov	r6, r1
   b51b0:	4604      	mov	r4, r0
   b51b2:	f856 3b04 	ldr.w	r3, [r6], #4
   b51b6:	9300      	str	r3, [sp, #0]
   b51b8:	460d      	mov	r5, r1
   b51ba:	a801      	add	r0, sp, #4
   b51bc:	4631      	mov	r1, r6
   b51be:	f7ff ffb1 	bl	b5124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b51c2:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51c4:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   b51c6:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51c8:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   b51ca:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b51cc:	2300      	movs	r3, #0
   b51ce:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b51d0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b51d2:	f7ff ff9f 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b51d6:	4630      	mov	r0, r6
   b51d8:	f7ff ff9c 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b51dc:	4628      	mov	r0, r5
   b51de:	2108      	movs	r1, #8
   b51e0:	f7fe ff5b 	bl	b409a <_ZdlPvj>
        return p;
    }
   b51e4:	4620      	mov	r0, r4
   b51e6:	b002      	add	sp, #8
   b51e8:	bd70      	pop	{r4, r5, r6, pc}

000b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>:
    bool realloc(int n) {
   b51ea:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b51ec:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b51ee:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b51f0:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b51f2:	dd03      	ble.n	b51fc <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b51f4:	f002 faa8 	bl	b7748 <realloc>
            if (!d) {
   b51f8:	b918      	cbnz	r0, b5202 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x18>
    }
   b51fa:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b51fc:	f002 fa9c 	bl	b7738 <free>
        T* d = nullptr;
   b5200:	2000      	movs	r0, #0
        data_ = d;
   b5202:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5204:	60a5      	str	r5, [r4, #8]
        return true;
   b5206:	2001      	movs	r0, #1
   b5208:	e7f7      	b.n	b51fa <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x10>

000b520a <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b520a:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b520c:	2300      	movs	r3, #0
   b520e:	e9c0 3300 	strd	r3, r3, [r0]
   b5212:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5214:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5216:	6849      	ldr	r1, [r1, #4]
   b5218:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b521a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b521c:	dd10      	ble.n	b5240 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b521e:	f7ff ffe4 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b5222:	b168      	cbz	r0, b5240 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5224:	e9d5 3100 	ldrd	r3, r1, [r5]
   b5228:	6822      	ldr	r2, [r4, #0]
   b522a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b522c:	4299      	cmp	r1, r3
   b522e:	d005      	beq.n	b523c <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b5230:	b10a      	cbz	r2, b5236 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b5232:	7818      	ldrb	r0, [r3, #0]
   b5234:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b5236:	3301      	adds	r3, #1
   b5238:	3201      	adds	r2, #1
   b523a:	e7f7      	b.n	b522c <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b523c:	686b      	ldr	r3, [r5, #4]
   b523e:	6063      	str	r3, [r4, #4]
}
   b5240:	4620      	mov	r0, r4
   b5242:	bd38      	pop	{r3, r4, r5, pc}

000b5244 <_ZN10LairdBt510C1ERKS_>:
class LairdBt510 : public Beacon
   b5244:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b5246:	4b30      	ldr	r3, [pc, #192]	; (b5308 <_ZN10LairdBt510C1ERKS_+0xc4>)
   b5248:	888a      	ldrh	r2, [r1, #4]
   b524a:	6003      	str	r3, [r0, #0]
   b524c:	460d      	mov	r5, r1
   b524e:	798b      	ldrb	r3, [r1, #6]
   b5250:	8082      	strh	r2, [r0, #4]
   b5252:	4604      	mov	r4, r0
   b5254:	7183      	strb	r3, [r0, #6]
   b5256:	3107      	adds	r1, #7
   b5258:	3007      	adds	r0, #7
   b525a:	f002 fdff 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
   b525e:	8a2b      	ldrh	r3, [r5, #16]
   b5260:	8223      	strh	r3, [r4, #16]
   b5262:	7cab      	ldrb	r3, [r5, #18]
   b5264:	74a3      	strb	r3, [r4, #18]
   b5266:	696a      	ldr	r2, [r5, #20]
   b5268:	6162      	str	r2, [r4, #20]
   b526a:	4b28      	ldr	r3, [pc, #160]	; (b530c <_ZN10LairdBt510C1ERKS_+0xc8>)
   b526c:	69aa      	ldr	r2, [r5, #24]
   b526e:	6023      	str	r3, [r4, #0]
   b5270:	61a2      	str	r2, [r4, #24]
   b5272:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5276:	69ea      	ldr	r2, [r5, #28]
   b5278:	61e2      	str	r2, [r4, #28]
   b527a:	f884 3020 	strb.w	r3, [r4, #32]
   b527e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b5282:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5286:	f7ff ffc0 	bl	b520a <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b528a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   b528c:	8623      	strh	r3, [r4, #48]	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b528e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   b5290:	6363      	str	r3, [r4, #52]	; 0x34
   b5292:	f105 0138 	add.w	r1, r5, #56	; 0x38
   b5296:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b529a:	f7ff ff43 	bl	b5124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b529e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b52a2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b52a6:	f003 fb1b 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b52aa:	f105 0144 	add.w	r1, r5, #68	; 0x44
   b52ae:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b52b2:	f003 fb15 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
class LairdBt510Config {
   b52b6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b52ba:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b52be:	f7ff ffa4 	bl	b520a <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b52c2:	f105 0158 	add.w	r1, r5, #88	; 0x58
   b52c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b52ca:	f7ff ff9e 	bl	b520a <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b52ce:	e9d5 2319 	ldrd	r2, r3, [r5, #100]	; 0x64
   b52d2:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
   b52d6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   b52d8:	66e3      	str	r3, [r4, #108]	; 0x6c
   b52da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   b52dc:	6723      	str	r3, [r4, #112]	; 0x70
   b52de:	e9d5 011e 	ldrd	r0, r1, [r5, #120]	; 0x78
   b52e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   b52e4:	6763      	str	r3, [r4, #116]	; 0x74
   b52e6:	f8d5 307e 	ldr.w	r3, [r5, #126]	; 0x7e
   b52ea:	f8c4 307e 	str.w	r3, [r4, #126]	; 0x7e
   b52ee:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
   b52f2:	67a0      	str	r0, [r4, #120]	; 0x78
   b52f4:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
   b52f8:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
class LairdBt510 : public Beacon
   b52fc:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
   b5300:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
   b5304:	4620      	mov	r0, r4
   b5306:	bd38      	pop	{r3, r4, r5, pc}
   b5308:	000bc044 	.word	0x000bc044
   b530c:	000bc27c 	.word	0x000bc27c

000b5310 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5312:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5316:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5318:	4604      	mov	r4, r0
   b531a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b531c:	da0c      	bge.n	b5338 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0x28>
    T* const p = data_ + i;
   b531e:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5320:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5322:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5324:	1b52      	subs	r2, r2, r5
   b5326:	1c48      	adds	r0, r1, #1
   b5328:	f006 fd40 	bl	bbdac <memmove>
    new(p) T(std::move(value));
   b532c:	557e      	strb	r6, [r7, r5]
    ++size_;
   b532e:	6863      	ldr	r3, [r4, #4]
   b5330:	3301      	adds	r3, #1
   b5332:	6063      	str	r3, [r4, #4]
    return true;
   b5334:	2001      	movs	r0, #1
}
   b5336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5338:	1c69      	adds	r1, r5, #1
   b533a:	f7ff ff56 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b533e:	2800      	cmp	r0, #0
   b5340:	d1ed      	bne.n	b531e <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0xe>
   b5342:	e7f8      	b.n	b5336 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0x26>

000b5344 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt>:
void LairdBt510Config::createJson(JSONVectorWriter& writer, uint16_t& configId) const {
   b5344:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5346:	460d      	mov	r5, r1
   b5348:	b085      	sub	sp, #20
   b534a:	4604      	mov	r4, r0
    writer.beginObject();
   b534c:	4608      	mov	r0, r1
void LairdBt510Config::createJson(JSONVectorWriter& writer, uint16_t& configId) const {
   b534e:	4616      	mov	r6, r2
    writer.beginObject();
   b5350:	f005 fd2c 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("jsonrpc").value("2.0");
   b5354:	4952      	ldr	r1, [pc, #328]	; (b54a0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x15c>)
   b5356:	4628      	mov	r0, r5
   b5358:	f7ff fb42 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b535c:	4951      	ldr	r1, [pc, #324]	; (b54a4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x160>)
   b535e:	f7ff fd99 	bl	b4e94 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("method").value("set");
   b5362:	4951      	ldr	r1, [pc, #324]	; (b54a8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x164>)
   b5364:	4628      	mov	r0, r5
   b5366:	f7ff fb3b 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b536a:	4950      	ldr	r1, [pc, #320]	; (b54ac <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x168>)
   b536c:	f7ff fd92 	bl	b4e94 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("params").beginObject();
   b5370:	494f      	ldr	r1, [pc, #316]	; (b54b0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x16c>)
   b5372:	4628      	mov	r0, r5
   b5374:	f7ff fb34 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5378:	f005 fd18 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
    if (!name_.isEmpty()) writer.name("sensorName").value(name_.data());
   b537c:	6863      	ldr	r3, [r4, #4]
   b537e:	b133      	cbz	r3, b538e <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x4a>
   b5380:	494c      	ldr	r1, [pc, #304]	; (b54b4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x170>)
   b5382:	4628      	mov	r0, r5
   b5384:	f7ff fb2c 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5388:	6821      	ldr	r1, [r4, #0]
   b538a:	f7ff fd83 	bl	b4e94 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    if (tempSenseInterval_ <= 86400) writer.name("temperatureSenseInterval").value((unsigned int)tempSenseInterval_);
   b538e:	4f4a      	ldr	r7, [pc, #296]	; (b54b8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x174>)
   b5390:	69a3      	ldr	r3, [r4, #24]
   b5392:	42bb      	cmp	r3, r7
   b5394:	d806      	bhi.n	b53a4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x60>
   b5396:	4949      	ldr	r1, [pc, #292]	; (b54bc <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x178>)
   b5398:	4628      	mov	r0, r5
   b539a:	f7ff fb21 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b539e:	69a1      	ldr	r1, [r4, #24]
   b53a0:	f005 fd3a 	bl	bae18 <_ZN5spark10JSONWriter5valueEj>
    if (battSenseInterval_ <= 86400) writer.name("batterySenseInterval").value((unsigned int)battSenseInterval_);
   b53a4:	69e3      	ldr	r3, [r4, #28]
   b53a6:	42bb      	cmp	r3, r7
   b53a8:	d806      	bhi.n	b53b8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x74>
   b53aa:	4945      	ldr	r1, [pc, #276]	; (b54c0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x17c>)
   b53ac:	4628      	mov	r0, r5
   b53ae:	f7ff fb17 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b53b2:	69e1      	ldr	r1, [r4, #28]
   b53b4:	f005 fd30 	bl	bae18 <_ZN5spark10JSONWriter5valueEj>
    if (configFlags_ & ConfigHighTempAlarm1) writer.name("highTemperatureAlarmThreshold1").value((int)highTempAlarm1_);
   b53b8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b53bc:	07db      	lsls	r3, r3, #31
   b53be:	d507      	bpl.n	b53d0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x8c>
   b53c0:	4940      	ldr	r1, [pc, #256]	; (b54c4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x180>)
   b53c2:	4628      	mov	r0, r5
   b53c4:	f7ff fb0c 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b53c8:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   b53cc:	f005 fd12 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigHighTempAlarm2) writer.name("highTemperatureAlarmThreshold2").value((int)highTempAlarm2_);
   b53d0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b53d4:	079f      	lsls	r7, r3, #30
   b53d6:	d507      	bpl.n	b53e8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xa4>
   b53d8:	493b      	ldr	r1, [pc, #236]	; (b54c8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x184>)
   b53da:	4628      	mov	r0, r5
   b53dc:	f7ff fb00 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b53e0:	f994 1029 	ldrsb.w	r1, [r4, #41]	; 0x29
   b53e4:	f005 fd06 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigLowTempAlarm1) writer.name("lowTemperatureAlarmThreshold1").value((int)lowTempAlarm1_);
   b53e8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b53ec:	0758      	lsls	r0, r3, #29
   b53ee:	d507      	bpl.n	b5400 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xbc>
   b53f0:	4936      	ldr	r1, [pc, #216]	; (b54cc <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x188>)
   b53f2:	4628      	mov	r0, r5
   b53f4:	f7ff faf4 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b53f8:	f994 102a 	ldrsb.w	r1, [r4, #42]	; 0x2a
   b53fc:	f005 fcfa 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigLowTempAlarm2) writer.name("lowTemperatureAlarmThreshold2").value((int)lowTempAlarm2_);
   b5400:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b5404:	0719      	lsls	r1, r3, #28
   b5406:	d507      	bpl.n	b5418 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xd4>
   b5408:	4931      	ldr	r1, [pc, #196]	; (b54d0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x18c>)
   b540a:	4628      	mov	r0, r5
   b540c:	f7ff fae8 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5410:	f994 102b 	ldrsb.w	r1, [r4, #43]	; 0x2b
   b5414:	f005 fcee 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigDeltaTempAlarm) writer.name("deltaTemperatureAlarmThreshold").value((unsigned)deltaTempAlarm_);
   b5418:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b541c:	06da      	lsls	r2, r3, #27
   b541e:	d507      	bpl.n	b5430 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xec>
   b5420:	492c      	ldr	r1, [pc, #176]	; (b54d4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x190>)
   b5422:	4628      	mov	r0, r5
   b5424:	f7ff fadc 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5428:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   b542c:	f005 fcf4 	bl	bae18 <_ZN5spark10JSONWriter5valueEj>
    if (configFlags_ & ConfigNewPasskey) writer.name("passkey").value((const char *)newPasskey_, 6);
   b5430:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b5434:	065b      	lsls	r3, r3, #25
   b5436:	d508      	bpl.n	b544a <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x106>
   b5438:	4927      	ldr	r1, [pc, #156]	; (b54d8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x194>)
   b543a:	4628      	mov	r0, r5
   b543c:	f7ff fad0 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5440:	2206      	movs	r2, #6
   b5442:	f104 0132 	add.w	r1, r4, #50	; 0x32
   b5446:	f005 fd7b 	bl	baf40 <_ZN5spark10JSONWriter5valueEPKcj>
    if (coded_ < 2) writer.name("useCodedPhy").value((int)coded_);
   b544a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b544e:	2b01      	cmp	r3, #1
   b5450:	d807      	bhi.n	b5462 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x11e>
   b5452:	4922      	ldr	r1, [pc, #136]	; (b54dc <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x198>)
   b5454:	4628      	mov	r0, r5
   b5456:	f7ff fac3 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b545a:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   b545e:	f005 fcc9 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
    writer.endObject();
   b5462:	4628      	mov	r0, r5
   b5464:	f005 fc8c 	bl	bad80 <_ZN5spark10JSONWriter9endObjectEv>
    writer.name("id").value(++configId);
   b5468:	491d      	ldr	r1, [pc, #116]	; (b54e0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x19c>)
   b546a:	4628      	mov	r0, r5
   b546c:	f7ff fab8 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5470:	8831      	ldrh	r1, [r6, #0]
   b5472:	3101      	adds	r1, #1
   b5474:	b289      	uxth	r1, r1
   b5476:	8031      	strh	r1, [r6, #0]
   b5478:	f005 fcbc 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
    writer.endObject();
   b547c:	4628      	mov	r0, r5
   b547e:	f005 fc7f 	bl	bad80 <_ZN5spark10JSONWriter9endObjectEv>
    Vector<char> vector() const {return v_;}
   b5482:	f105 0108 	add.w	r1, r5, #8
   b5486:	a801      	add	r0, sp, #4
   b5488:	f7ff febf 	bl	b520a <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
    writer.vector().append((char)0);
   b548c:	2100      	movs	r1, #0
   b548e:	a801      	add	r0, sp, #4
   b5490:	f7ff ff3e 	bl	b5310 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>
   b5494:	a801      	add	r0, sp, #4
   b5496:	f7ff fe4c 	bl	b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
}
   b549a:	b005      	add	sp, #20
   b549c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b549e:	bf00      	nop
   b54a0:	000bc0a9 	.word	0x000bc0a9
   b54a4:	000bc0b1 	.word	0x000bc0b1
   b54a8:	000bc0b5 	.word	0x000bc0b5
   b54ac:	000bc0bc 	.word	0x000bc0bc
   b54b0:	000bc0c0 	.word	0x000bc0c0
   b54b4:	000bc0c7 	.word	0x000bc0c7
   b54b8:	00015180 	.word	0x00015180
   b54bc:	000bc0d2 	.word	0x000bc0d2
   b54c0:	000bc0eb 	.word	0x000bc0eb
   b54c4:	000bc100 	.word	0x000bc100
   b54c8:	000bc11f 	.word	0x000bc11f
   b54cc:	000bc13e 	.word	0x000bc13e
   b54d0:	000bc15c 	.word	0x000bc15c
   b54d4:	000bc17a 	.word	0x000bc17a
   b54d8:	000bc199 	.word	0x000bc199
   b54dc:	000bc1a1 	.word	0x000bc1a1
   b54e0:	000bc2cb 	.word	0x000bc2cb

000b54e4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>:
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b54e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return insert(size_, values, n);
   b54e8:	6847      	ldr	r7, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54ea:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b54ec:	4688      	mov	r8, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54ee:	18b9      	adds	r1, r7, r2
   b54f0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b54f2:	4604      	mov	r4, r0
   b54f4:	4615      	mov	r5, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54f6:	dc12      	bgt.n	b551e <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x3a>
    T* const p = data_ + i;
   b54f8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b54fa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b54fc:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b54fe:	1bd2      	subs	r2, r2, r7
   b5500:	4631      	mov	r1, r6
   b5502:	1970      	adds	r0, r6, r5
   b5504:	f006 fc52 	bl	bbdac <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5508:	462a      	mov	r2, r5
   b550a:	4641      	mov	r1, r8
   b550c:	4630      	mov	r0, r6
   b550e:	f006 fc3f 	bl	bbd90 <memcpy>
    size_ += n;
   b5512:	6862      	ldr	r2, [r4, #4]
   b5514:	442a      	add	r2, r5
   b5516:	6062      	str	r2, [r4, #4]
    return true;
   b5518:	2001      	movs	r0, #1
}
   b551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b551e:	f7ff fe64 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b5522:	2800      	cmp	r0, #0
   b5524:	d1e8      	bne.n	b54f8 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x14>
   b5526:	e7f8      	b.n	b551a <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x36>

000b5528 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE>:
{
   b5528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b552c:	4689      	mov	r9, r1
   b552e:	b08c      	sub	sp, #48	; 0x30
   b5530:	4604      	mov	r4, r0
   b5532:	f109 0a08 	add.w	sl, r9, #8
    Beacon::populateData(scanResult);
   b5536:	f7fe fdba 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b553a:	4649      	mov	r1, r9
   b553c:	1de0      	adds	r0, r4, #7
   b553e:	f002 fc92 	bl	b7e66 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, MAX_MANUFACTURER_DATA_LEN);
   b5542:	2325      	movs	r3, #37	; 0x25
   b5544:	aa02      	add	r2, sp, #8
   b5546:	21ff      	movs	r1, #255	; 0xff
   b5548:	4650      	mov	r0, sl
   b554a:	f002 fe9e 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b554e:	b2c3      	uxtb	r3, r0
    if (count > 25) {   // Advertising data is correct, either table 1 or table 3
   b5550:	2b19      	cmp	r3, #25
   b5552:	f240 8081 	bls.w	b5658 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
   b5556:	f8bd 600e 	ldrh.w	r6, [sp, #14]
        lairdbt510_event_type event = (lairdbt510_event_type)buf[14];
   b555a:	f89d 5016 	ldrb.w	r5, [sp, #22]
        bool prev_magnet = _magnet_state;
   b555e:	7fe7      	ldrb	r7, [r4, #31]
    uint16_t prev_record = _record_number;
   b5560:	f8b4 801a 	ldrh.w	r8, [r4, #26]
        _magnet_state = (flags & (uint16_t)lairdbt510_flags::MAGNET_STATE);
   b5564:	0bf2      	lsrs	r2, r6, #15
   b5566:	77e2      	strb	r2, [r4, #31]
        _record_number = buf[16] << 8 | buf[15];
   b5568:	f8bd 2017 	ldrh.w	r2, [sp, #23]
   b556c:	8362      	strh	r2, [r4, #26]
        switch (event)
   b556e:	1e6a      	subs	r2, r5, #1
   b5570:	2a0f      	cmp	r2, #15
   b5572:	d80c      	bhi.n	b558e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
   b5574:	e8df f002 	tbb	[pc, r2]
   b5578:	080b7308 	.word	0x080b7308
   b557c:	08080808 	.word	0x08080808
   b5580:	7a0b0808 	.word	0x7a0b0808
   b5584:	7a0b0b7a 	.word	0x7a0b0b7a
            _temp = buf[22] << 8 | buf[21];
   b5588:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   b558c:	8322      	strh	r2, [r4, #24]
        if (count == 37 && buf[2] == 0x02) { 
   b558e:	2b25      	cmp	r3, #37	; 0x25
   b5590:	d170      	bne.n	b5674 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x14c>
   b5592:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b5596:	2a02      	cmp	r2, #2
   b5598:	d121      	bne.n	b55de <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
            count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b559a:	aa02      	add	r2, sp, #8
   b559c:	2109      	movs	r1, #9
   b559e:	4650      	mov	r0, sl
                count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::SHORT_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b55a0:	f002 fe73 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (count > 0 && memcmp(buf, _name.data(), count)) {
   b55a4:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
   b55a8:	d019      	beq.n	b55de <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
   b55aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b55ac:	9201      	str	r2, [sp, #4]
   b55ae:	a802      	add	r0, sp, #8
   b55b0:	f006 fbde 	bl	bbd70 <memcmp>
   b55b4:	9a01      	ldr	r2, [sp, #4]
   b55b6:	b190      	cbz	r0, b55de <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
    size_ = 0;
   b55b8:	f04f 0a00 	mov.w	sl, #0
                _name.append((const char*)buf, count);
   b55bc:	f104 0924 	add.w	r9, r4, #36	; 0x24
   b55c0:	a902      	add	r1, sp, #8
   b55c2:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
   b55c6:	4648      	mov	r0, r9
   b55c8:	f7ff ff8c 	bl	b54e4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>
                _name.append('\0');
   b55cc:	4651      	mov	r1, sl
   b55ce:	4648      	mov	r0, r9
   b55d0:	f7ff fe9e 	bl	b5310 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>
                Log.trace("New device name: %s", _name.data());
   b55d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b55d6:	4932      	ldr	r1, [pc, #200]	; (b56a0 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x178>)
   b55d8:	4832      	ldr	r0, [pc, #200]	; (b56a4 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x17c>)
   b55da:	f7ff fd09 	bl	b4ff0 <_ZNK5spark6Logger5traceEPKcz>
        if (_eventCallback && _record_number != prev_record)
   b55de:	4b32      	ldr	r3, [pc, #200]	; (b56a8 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x180>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	b12b      	cbz	r3, b55f0 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xc8>
   b55e4:	8b62      	ldrh	r2, [r4, #26]
   b55e6:	4542      	cmp	r2, r8
   b55e8:	d002      	beq.n	b55f0 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xc8>
            _eventCallback(*this, event);
   b55ea:	4629      	mov	r1, r5
   b55ec:	4620      	mov	r0, r4
   b55ee:	4798      	blx	r3
        if (_alarmCallback != nullptr) {
   b55f0:	4d2e      	ldr	r5, [pc, #184]	; (b56ac <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x184>)
   b55f2:	682b      	ldr	r3, [r5, #0]
   b55f4:	2b00      	cmp	r3, #0
   b55f6:	d02f      	beq.n	b5658 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
            if (flags & (uint16_t)lairdbt510_flags::LOW_BATTERY_ALARM)
   b55f8:	0631      	lsls	r1, r6, #24
   b55fa:	d502      	bpl.n	b5602 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xda>
                _alarmCallback(*this, lairdbt510_event_type::BATTERY_BAD);
   b55fc:	2110      	movs	r1, #16
   b55fe:	4620      	mov	r0, r4
   b5600:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::HIGH_TEMP_ALARM_0)
   b5602:	05f2      	lsls	r2, r6, #23
   b5604:	d503      	bpl.n	b560e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xe6>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_HIGH_TEMP_1);
   b5606:	682b      	ldr	r3, [r5, #0]
   b5608:	2104      	movs	r1, #4
   b560a:	4620      	mov	r0, r4
   b560c:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::HIGH_TEMP_ALARM_1)
   b560e:	05b3      	lsls	r3, r6, #22
   b5610:	d503      	bpl.n	b561a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xf2>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_HIGH_TEMP_2);
   b5612:	682b      	ldr	r3, [r5, #0]
   b5614:	2105      	movs	r1, #5
   b5616:	4620      	mov	r0, r4
   b5618:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::LOW_TEMP_ALARM_0)
   b561a:	0570      	lsls	r0, r6, #21
   b561c:	d503      	bpl.n	b5626 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xfe>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_LOW_TEMP_1);
   b561e:	682b      	ldr	r3, [r5, #0]
   b5620:	2107      	movs	r1, #7
   b5622:	4620      	mov	r0, r4
   b5624:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::LOW_TEMP_ALARM_1)
   b5626:	0531      	lsls	r1, r6, #20
   b5628:	d503      	bpl.n	b5632 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x10a>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_LOW_TEMP_2);
   b562a:	682b      	ldr	r3, [r5, #0]
   b562c:	2108      	movs	r1, #8
   b562e:	4620      	mov	r0, r4
   b5630:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::DELTA_TEMP_ALARM)
   b5632:	04f2      	lsls	r2, r6, #19
   b5634:	d503      	bpl.n	b563e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x116>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_DELTA_TEMP);
   b5636:	682b      	ldr	r3, [r5, #0]
   b5638:	210a      	movs	r1, #10
   b563a:	4620      	mov	r0, r4
   b563c:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::MOVEMENT_ALARM)
   b563e:	0473      	lsls	r3, r6, #17
   b5640:	d503      	bpl.n	b564a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x122>
                _alarmCallback(*this, lairdbt510_event_type::MOVEMENT);
   b5642:	682b      	ldr	r3, [r5, #0]
   b5644:	2103      	movs	r1, #3
   b5646:	4620      	mov	r0, r4
   b5648:	4798      	blx	r3
            if (prev_magnet != _magnet_state)
   b564a:	7fe3      	ldrb	r3, [r4, #31]
   b564c:	42bb      	cmp	r3, r7
   b564e:	d003      	beq.n	b5658 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
                _alarmCallback(*this, lairdbt510_event_type::MAGNET_PROXIMITY);
   b5650:	682b      	ldr	r3, [r5, #0]
   b5652:	2102      	movs	r1, #2
   b5654:	4620      	mov	r0, r4
   b5656:	4798      	blx	r3
}
   b5658:	b00c      	add	sp, #48	; 0x30
   b565a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            _magnet_event = buf[21] == 0x01;
   b565e:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b5662:	1e50      	subs	r0, r2, #1
   b5664:	4242      	negs	r2, r0
   b5666:	4142      	adcs	r2, r0
   b5668:	77a2      	strb	r2, [r4, #30]
            break;
   b566a:	e790      	b.n	b558e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
            _batt_voltage = buf[22] << 8 | buf[21];
   b566c:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   b5670:	83a2      	strh	r2, [r4, #28]
            break;
   b5672:	e78c      	b.n	b558e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
        else if (count == 26 && buf[2] == 0x01) { // This is a 1MB PHY advertisement
   b5674:	2b1a      	cmp	r3, #26
   b5676:	d1b2      	bne.n	b55de <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
   b5678:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b567c:	2b01      	cmp	r3, #1
   b567e:	d1ae      	bne.n	b55de <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
    }

    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
   b5680:	f109 0914 	add.w	r9, r9, #20
            count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5684:	aa02      	add	r2, sp, #8
   b5686:	2325      	movs	r3, #37	; 0x25
   b5688:	2109      	movs	r1, #9
   b568a:	4648      	mov	r0, r9
   b568c:	f002 fdfd 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (count == 0)
   b5690:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
   b5694:	d189      	bne.n	b55aa <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x82>
                count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::SHORT_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5696:	2325      	movs	r3, #37	; 0x25
   b5698:	aa02      	add	r2, sp, #8
   b569a:	2108      	movs	r1, #8
   b569c:	4648      	mov	r0, r9
   b569e:	e77f      	b.n	b55a0 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x78>
   b56a0:	000bc1ad 	.word	0x000bc1ad
   b56a4:	2003e6c4 	.word	0x2003e6c4
   b56a8:	2003e66c 	.word	0x2003e66c
   b56ac:	2003e668 	.word	0x2003e668

000b56b0 <_ZN16JSONVectorWriter5writeEPKcj>:
    virtual void write(const char *data, size_t size) override {
   b56b0:	b508      	push	{r3, lr}
        v_.append(data, (int)size);
   b56b2:	3008      	adds	r0, #8
   b56b4:	f7ff ff16 	bl	b54e4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>
    }
   b56b8:	bd08      	pop	{r3, pc}

000b56ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b56ba:	b513      	push	{r0, r1, r4, lr}
   b56bc:	460b      	mov	r3, r1
   b56be:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b56c0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b56c4:	466c      	mov	r4, sp
   b56c6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b56ca:	e893 0003 	ldmia.w	r3, {r0, r1}
   b56ce:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b56d2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b56d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b56da:	b002      	add	sp, #8
   b56dc:	bd10      	pop	{r4, pc}

000b56de <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b56de:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b56e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56e2:	4604      	mov	r4, r0
   b56e4:	460d      	mov	r5, r1
   b56e6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b56e8:	d914      	bls.n	b5714 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b56ea:	4290      	cmp	r0, r2
   b56ec:	d213      	bcs.n	b5716 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b56ee:	f1a2 0688 	sub.w	r6, r2, #136	; 0x88
            dest += end - p - 1;
   b56f2:	1a75      	subs	r5, r6, r1
   b56f4:	f1a1 0788 	sub.w	r7, r1, #136	; 0x88
   b56f8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b56fa:	42b7      	cmp	r7, r6
   b56fc:	d018      	beq.n	b5730 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b56fe:	b11c      	cbz	r4, b5708 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5700:	4631      	mov	r1, r6
   b5702:	4620      	mov	r0, r4
   b5704:	f7ff fd9e 	bl	b5244 <_ZN10LairdBt510C1ERKS_>
                end->~T();
   b5708:	4630      	mov	r0, r6
   b570a:	f7ff fd19 	bl	b5140 <_ZN10LairdBt510D1Ev>
            for (; end != p; --end, --dest) {
   b570e:	3e88      	subs	r6, #136	; 0x88
   b5710:	3c88      	subs	r4, #136	; 0x88
   b5712:	e7f2      	b.n	b56fa <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5714:	d00c      	beq.n	b5730 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5716:	42b5      	cmp	r5, r6
   b5718:	d00a      	beq.n	b5730 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b571a:	b11c      	cbz	r4, b5724 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b571c:	4629      	mov	r1, r5
   b571e:	4620      	mov	r0, r4
   b5720:	f7ff fd90 	bl	b5244 <_ZN10LairdBt510C1ERKS_>
                p->~T();
   b5724:	4628      	mov	r0, r5
   b5726:	f7ff fd0b 	bl	b5140 <_ZN10LairdBt510D1Ev>
            for (; p != end; ++p, ++dest) {
   b572a:	3588      	adds	r5, #136	; 0x88
   b572c:	3488      	adds	r4, #136	; 0x88
   b572e:	e7f2      	b.n	b5716 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5734 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE>:
void LairdBt510::addOrUpdate(const BleScanResult *scanResult) {
   b5734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b5738:	4c4b      	ldr	r4, [pc, #300]	; (b5868 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x134>)
   b573a:	b0e6      	sub	sp, #408	; 0x198
   b573c:	4606      	mov	r6, r0
   b573e:	2700      	movs	r7, #0
    return data_[i];
   b5740:	f04f 0888 	mov.w	r8, #136	; 0x88
    for (i = 0; i < beacons.size(); ++i)
   b5744:	6863      	ldr	r3, [r4, #4]
   b5746:	b2fd      	uxtb	r5, r7
   b5748:	429d      	cmp	r5, r3
   b574a:	da0d      	bge.n	b5768 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b574c:	6821      	ldr	r1, [r4, #0]
   b574e:	fb08 1105 	mla	r1, r8, r5, r1
    BleAddress getAddress() const { return address;}
   b5752:	3107      	adds	r1, #7
   b5754:	a844      	add	r0, sp, #272	; 0x110
   b5756:	f002 fb81 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult))
   b575a:	4631      	mov	r1, r6
   b575c:	a844      	add	r0, sp, #272	; 0x110
   b575e:	f002 fb94 	bl	b7e8a <_ZNK8particle10BleAddresseqERKS0_>
   b5762:	3701      	adds	r7, #1
   b5764:	2800      	cmp	r0, #0
   b5766:	d0ed      	beq.n	b5744 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x10>
    if(i == beacons.size()) {
   b5768:	6863      	ldr	r3, [r4, #4]
   b576a:	429d      	cmp	r5, r3
   b576c:	d16e      	bne.n	b584c <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x118>
        rssi_count(0) {};
   b576e:	4b3f      	ldr	r3, [pc, #252]	; (b586c <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x138>)
   b5770:	9300      	str	r3, [sp, #0]
   b5772:	2301      	movs	r3, #1
   b5774:	f88d 3005 	strb.w	r3, [sp, #5]
   b5778:	f10d 0007 	add.w	r0, sp, #7
   b577c:	2308      	movs	r3, #8
   b577e:	2500      	movs	r5, #0
   b5780:	f88d 3006 	strb.w	r3, [sp, #6]
   b5784:	f002 fb95 	bl	b7eb2 <_ZN8particle10BleAddressC1Ev>
        configId_(0)
   b5788:	4b39      	ldr	r3, [pc, #228]	; (b5870 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x13c>)
   b578a:	9300      	str	r3, [sp, #0]
   b578c:	a80d      	add	r0, sp, #52	; 0x34
        capacity_(0) {
   b578e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5792:	f8ad 5010 	strh.w	r5, [sp, #16]
   b5796:	f88d 5012 	strb.w	r5, [sp, #18]
   b579a:	950b      	str	r5, [sp, #44]	; 0x2c
   b579c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
   b57a0:	f002 ff04 	bl	b85ac <_ZN8particle13BlePeerDeviceC1Ev>
   b57a4:	a80f      	add	r0, sp, #60	; 0x3c
   b57a6:	f002 fe25 	bl	b83f4 <_ZN8particle17BleCharacteristicC1Ev>
   b57aa:	a811      	add	r0, sp, #68	; 0x44
   b57ac:	f002 fe22 	bl	b83f4 <_ZN8particle17BleCharacteristicC1Ev>
   b57b0:	a813      	add	r0, sp, #76	; 0x4c
   b57b2:	f7ff fc93 	bl	b50dc <_ZN16LairdBt510ConfigC1Ev>
        new_beacon.populateData(scanResult);
   b57b6:	4631      	mov	r1, r6
   b57b8:	4668      	mov	r0, sp
   b57ba:	f8ad 5084 	strh.w	r5, [sp, #132]	; 0x84
   b57be:	f7ff feb3 	bl	b5528 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE>
        beacons.append(new_beacon);
   b57c2:	4669      	mov	r1, sp
   b57c4:	a822      	add	r0, sp, #136	; 0x88
        new_beacon.missed_scan = 0;
   b57c6:	f88d 5004 	strb.w	r5, [sp, #4]
        beacons.append(new_beacon);
   b57ca:	f7ff fd3b 	bl	b5244 <_ZN10LairdBt510C1ERKS_>
    return insert(size_, std::move(value));
   b57ce:	a922      	add	r1, sp, #136	; 0x88
   b57d0:	a844      	add	r0, sp, #272	; 0x110
   b57d2:	6866      	ldr	r6, [r4, #4]
   b57d4:	f7ff fd36 	bl	b5244 <_ZN10LairdBt510C1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b57d8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b57dc:	429f      	cmp	r7, r3
   b57de:	db15      	blt.n	b580c <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xd8>
   b57e0:	3701      	adds	r7, #1
        if (n > 0) {
   b57e2:	42af      	cmp	r7, r5
   b57e4:	dd0d      	ble.n	b5802 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xce>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b57e6:	f04f 0888 	mov.w	r8, #136	; 0x88
    return ::malloc(size);
   b57ea:	fb08 f007 	mul.w	r0, r8, r7
   b57ee:	f001 ff9b 	bl	b7728 <malloc>
            if (!d) {
   b57f2:	4605      	mov	r5, r0
   b57f4:	b1f0      	cbz	r0, b5834 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x100>
            move(d, data_, data_ + size_);
   b57f6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b57fa:	fb08 1202 	mla	r2, r8, r2, r1
   b57fe:	f7ff ff6e 	bl	b56de <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5802:	6820      	ldr	r0, [r4, #0]
   b5804:	f001 ff98 	bl	b7738 <free>
        data_ = d;
   b5808:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b580a:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b580c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b580e:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b5810:	2288      	movs	r2, #136	; 0x88
   b5812:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b5816:	f106 0088 	add.w	r0, r6, #136	; 0x88
   b581a:	fb02 3201 	mla	r2, r2, r1, r3
   b581e:	4631      	mov	r1, r6
   b5820:	f7ff ff5d 	bl	b56de <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5824:	b11e      	cbz	r6, b582e <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xfa>
   b5826:	a944      	add	r1, sp, #272	; 0x110
   b5828:	4630      	mov	r0, r6
   b582a:	f7ff fd0b 	bl	b5244 <_ZN10LairdBt510C1ERKS_>
    ++size_;
   b582e:	6863      	ldr	r3, [r4, #4]
   b5830:	3301      	adds	r3, #1
   b5832:	6063      	str	r3, [r4, #4]
    return insert(size_, std::move(value));
   b5834:	a844      	add	r0, sp, #272	; 0x110
   b5836:	f7ff fc83 	bl	b5140 <_ZN10LairdBt510D1Ev>
   b583a:	a822      	add	r0, sp, #136	; 0x88
   b583c:	f7ff fc80 	bl	b5140 <_ZN10LairdBt510D1Ev>
        LairdBt510 new_beacon;
   b5840:	4668      	mov	r0, sp
   b5842:	f7ff fc7d 	bl	b5140 <_ZN10LairdBt510D1Ev>
}
   b5846:	b066      	add	sp, #408	; 0x198
   b5848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b584c:	2388      	movs	r3, #136	; 0x88
   b584e:	435d      	muls	r5, r3
   b5850:	6823      	ldr	r3, [r4, #0]
   b5852:	195c      	adds	r4, r3, r5
        beacon.newly_scanned = false;
   b5854:	2700      	movs	r7, #0
   b5856:	7167      	strb	r7, [r4, #5]
        beacon.populateData(scanResult);
   b5858:	595b      	ldr	r3, [r3, r5]
   b585a:	4631      	mov	r1, r6
   b585c:	685b      	ldr	r3, [r3, #4]
   b585e:	4620      	mov	r0, r4
   b5860:	4798      	blx	r3
        beacon.missed_scan = 0;
   b5862:	7127      	strb	r7, [r4, #4]
}
   b5864:	e7ef      	b.n	b5846 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x112>
   b5866:	bf00      	nop
   b5868:	2003e670 	.word	0x2003e670
   b586c:	000bc044 	.word	0x000bc044
   b5870:	000bc27c 	.word	0x000bc27c

000b5874 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5874:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5876:	b510      	push	{r4, lr}
      if (_M_empty())
   b5878:	b90a      	cbnz	r2, b587e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b587a:	f005 fdf2 	bl	bb462 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5882:	68c3      	ldr	r3, [r0, #12]
   b5884:	4718      	bx	r3

000b5886 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5886:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5888:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b588a:	f100 0110 	add.w	r1, r0, #16
   b588e:	f7ff fff1 	bl	b5874 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5892:	bd08      	pop	{r3, pc}

000b5894 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5894:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5896:	b510      	push	{r4, lr}
      if (_M_empty())
   b5898:	b90a      	cbnz	r2, b589e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b589a:	f005 fde2 	bl	bb462 <_ZSt25__throw_bad_function_callv>
    }
   b589e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b58a2:	68c3      	ldr	r3, [r0, #12]
   b58a4:	4718      	bx	r3

000b58a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b58a6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b58a8:	6800      	ldr	r0, [r0, #0]
   b58aa:	f100 0110 	add.w	r1, r0, #16
   b58ae:	f7ff fff1 	bl	b5894 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b58b2:	bd08      	pop	{r3, pc}

000b58b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b58b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b58b6:	2300      	movs	r3, #0
   b58b8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b58ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b58bc:	4604      	mov	r4, r0
   b58be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b58c0:	b12b      	cbz	r3, b58ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b58c2:	2202      	movs	r2, #2
   b58c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b58c6:	68eb      	ldr	r3, [r5, #12]
   b58c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b58ca:	68ab      	ldr	r3, [r5, #8]
   b58cc:	60a3      	str	r3, [r4, #8]
    }
   b58ce:	4620      	mov	r0, r4
   b58d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b58d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b58d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58d6:	b089      	sub	sp, #36	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b58d8:	888b      	ldrh	r3, [r1, #4]
   b58da:	680a      	ldr	r2, [r1, #0]
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b58dc:	6804      	ldr	r4, [r0, #0]
   b58de:	f8ad 3004 	strh.w	r3, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b58e2:	2000      	movs	r0, #0
   b58e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
      __a = _GLIBCXX_MOVE(__b);
   b58e8:	9200      	str	r2, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b58ea:	808b      	strh	r3, [r1, #4]
   b58ec:	6008      	str	r0, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b58ee:	f04f 0202 	mov.w	r2, #2
   b58f2:	e8d4 1f4f 	ldrexb	r1, [r4]
   b58f6:	4281      	cmp	r1, r0
   b58f8:	d103      	bne.n	b5902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   b58fa:	e8c4 2f45 	strexb	r5, r2, [r4]
   b58fe:	2d00      	cmp	r5, #0
   b5900:	d1f7      	bne.n	b58f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x1e>
        if (this->changeState(State::FAILED)) {
   b5902:	d127      	bne.n	b5954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x80>
      __a = _GLIBCXX_MOVE(__b);
   b5904:	f8bd 2004 	ldrh.w	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5908:	f8ad 3004 	strh.w	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   b590c:	9b00      	ldr	r3, [sp, #0]
   b590e:	60e3      	str	r3, [r4, #12]
   b5910:	8222      	strh	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5912:	9000      	str	r0, [sp, #0]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5914:	2301      	movs	r3, #1
   b5916:	f3bf 8f5b 	dmb	ish
   b591a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b591c:	f104 0308 	add.w	r3, r4, #8
   b5920:	f3bf 8f5b 	dmb	ish
   b5924:	e853 6f00 	ldrex	r6, [r3]
   b5928:	e843 0200 	strex	r2, r0, [r3]
   b592c:	2a00      	cmp	r2, #0
   b592e:	d1f9      	bne.n	b5924 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x50>
   b5930:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5934:	b176      	cbz	r6, b5954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x80>
        return (application_thread_current(nullptr) != 0);
   b5936:	f001 fe23 	bl	b7580 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b593a:	b180      	cbz	r0, b595e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b593c:	f104 010c 	add.w	r1, r4, #12
   b5940:	4630      	mov	r0, r6
   b5942:	f7ff ff97 	bl	b5874 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5946:	4630      	mov	r0, r6
   b5948:	f7ff fab2 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b594c:	2110      	movs	r1, #16
   b594e:	4630      	mov	r0, r6
   b5950:	f7fe fba3 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b5954:	4668      	mov	r0, sp
   b5956:	f7ff fad2 	bl	b4efe <_ZN8particle5ErrorD1Ev>
    }
   b595a:	b009      	add	sp, #36	; 0x24
   b595c:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b595e:	4631      	mov	r1, r6
   b5960:	a802      	add	r0, sp, #8
   b5962:	f7ff ffa7 	bl	b58b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5966:	68e0      	ldr	r0, [r4, #12]
   b5968:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b596c:	b108      	cbz	r0, b5972 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x9e>
   b596e:	f006 fa7f 	bl	bbe70 <strdup>
        type_(type) {
   b5972:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5974:	2010      	movs	r0, #16
   b5976:	f8ad 501c 	strh.w	r5, [sp, #28]
   b597a:	f7fe fb8a 	bl	b4092 <_Znwj>
   b597e:	4605      	mov	r5, r0
   b5980:	b310      	cbz	r0, b59c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>
    _Function_base() : _M_manager(nullptr) { }
   b5982:	2700      	movs	r7, #0
   b5984:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5986:	2018      	movs	r0, #24
   b5988:	f7fe fb83 	bl	b4092 <_Znwj>
   b598c:	4604      	mov	r4, r0
   b598e:	b1b0      	cbz	r0, b59be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xea>
    _Function_base() : _M_manager(nullptr) { }
   b5990:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5992:	4601      	mov	r1, r0
   b5994:	a802      	add	r0, sp, #8
   b5996:	f7ff fe90 	bl	b56ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b599a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b599c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b599e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b59a0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b59a2:	9204      	str	r2, [sp, #16]
   b59a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b59a6:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b59a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   b59ac:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b59ae:	f64f 739c 	movw	r3, #65436	; 0xff9c
   b59b2:	f8ad 301c 	strh.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b59b6:	9b06      	ldr	r3, [sp, #24]
   b59b8:	9205      	str	r2, [sp, #20]
   b59ba:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b59bc:	9706      	str	r7, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b59be:	4b08      	ldr	r3, [pc, #32]	; (b59e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10c>)
   b59c0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b59c2:	4b08      	ldr	r3, [pc, #32]	; (b59e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b59c4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b59c6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b59c8:	a806      	add	r0, sp, #24
   b59ca:	f7ff fa98 	bl	b4efe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b59ce:	a802      	add	r0, sp, #8
   b59d0:	f7ff fa6e 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b59d4:	2200      	movs	r2, #0
   b59d6:	4629      	mov	r1, r5
   b59d8:	4803      	ldr	r0, [pc, #12]	; (b59e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x114>)
   b59da:	f001 fdd9 	bl	b7590 <application_thread_invoke>
   b59de:	e7b2      	b.n	b5946 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
   b59e0:	000b5887 	.word	0x000b5887
   b59e4:	000b59ed 	.word	0x000b59ed
   b59e8:	000baa75 	.word	0x000baa75

000b59ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b59ec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b59ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59f0:	4605      	mov	r5, r0
	switch (__op)
   b59f2:	d103      	bne.n	b59fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b59f4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b59f6:	6003      	str	r3, [r0, #0]
      }
   b59f8:	2000      	movs	r0, #0
   b59fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b59fc:	2a02      	cmp	r2, #2
   b59fe:	d010      	beq.n	b5a22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5a00:	2a03      	cmp	r2, #3
   b5a02:	d1f9      	bne.n	b59f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5a04:	6804      	ldr	r4, [r0, #0]
   b5a06:	2c00      	cmp	r4, #0
   b5a08:	d0f6      	beq.n	b59f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5a0a:	f104 0010 	add.w	r0, r4, #16
   b5a0e:	f7ff fa76 	bl	b4efe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5a12:	4620      	mov	r0, r4
   b5a14:	f7ff fa4c 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5a18:	2118      	movs	r1, #24
   b5a1a:	4620      	mov	r0, r4
   b5a1c:	f7fe fb3d 	bl	b409a <_ZdlPvj>
   b5a20:	e7ea      	b.n	b59f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a22:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5a24:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a26:	f7fe fb34 	bl	b4092 <_Znwj>
   b5a2a:	4604      	mov	r4, r0
   b5a2c:	b150      	cbz	r0, b5a44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5a2e:	4631      	mov	r1, r6
   b5a30:	f7ff ff40 	bl	b58b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5a34:	6930      	ldr	r0, [r6, #16]
   b5a36:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5a3a:	b108      	cbz	r0, b5a40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5a3c:	f006 fa18 	bl	bbe70 <strdup>
        type_(type) {
   b5a40:	6120      	str	r0, [r4, #16]
   b5a42:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5a44:	602c      	str	r4, [r5, #0]
	}
   b5a46:	e7d7      	b.n	b59f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5a48 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5a48:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5a4a:	2300      	movs	r3, #0
   b5a4c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5a4e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5a50:	4604      	mov	r4, r0
   b5a52:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5a54:	b12b      	cbz	r3, b5a62 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5a56:	2202      	movs	r2, #2
   b5a58:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5a5a:	68eb      	ldr	r3, [r5, #12]
   b5a5c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5a5e:	68ab      	ldr	r3, [r5, #8]
   b5a60:	60a3      	str	r3, [r4, #8]
    }
   b5a62:	4620      	mov	r0, r4
   b5a64:	bd38      	pop	{r3, r4, r5, pc}

000b5a66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5a66:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5a68:	b570      	push	{r4, r5, r6, lr}
   b5a6a:	4604      	mov	r4, r0
	switch (__op)
   b5a6c:	d103      	bne.n	b5a76 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5a6e:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5a70:	6003      	str	r3, [r0, #0]
      }
   b5a72:	2000      	movs	r0, #0
   b5a74:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5a76:	2a02      	cmp	r2, #2
   b5a78:	d00c      	beq.n	b5a94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5a7a:	2a03      	cmp	r2, #3
   b5a7c:	d1f9      	bne.n	b5a72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5a7e:	6804      	ldr	r4, [r0, #0]
   b5a80:	2c00      	cmp	r4, #0
   b5a82:	d0f6      	beq.n	b5a72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5a84:	4620      	mov	r0, r4
   b5a86:	f7ff fa13 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5a8a:	2114      	movs	r1, #20
   b5a8c:	4620      	mov	r0, r4
   b5a8e:	f7fe fb04 	bl	b409a <_ZdlPvj>
   b5a92:	e7ee      	b.n	b5a72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a94:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5a96:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a98:	f7fe fafb 	bl	b4092 <_Znwj>
   b5a9c:	4605      	mov	r5, r0
   b5a9e:	b120      	cbz	r0, b5aaa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b5aa0:	4631      	mov	r1, r6
   b5aa2:	f7ff ffd1 	bl	b5a48 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5aa6:	7c33      	ldrb	r3, [r6, #16]
   b5aa8:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5aaa:	6025      	str	r5, [r4, #0]
	}
   b5aac:	e7e1      	b.n	b5a72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b5ab0 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb>:
template<typename ResultT, typename ContextT = detail::FutureContext>
class Promise: public PromiseBase<ResultT, ContextT> {
public:
    using PromiseBase<ResultT, ContextT>::PromiseBase;

    void setResult(ResultT result) {
   b5ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ab2:	6804      	ldr	r4, [r0, #0]
   b5ab4:	b087      	sub	sp, #28
   b5ab6:	2301      	movs	r3, #1
   b5ab8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5abc:	2a00      	cmp	r2, #0
   b5abe:	d103      	bne.n	b5ac8 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x18>
   b5ac0:	e8c4 3f40 	strexb	r0, r3, [r4]
   b5ac4:	2800      	cmp	r0, #0
   b5ac6:	d1f7      	bne.n	b5ab8 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x8>
        if (this->changeState(State::SUCCEEDED)) {
   b5ac8:	d154      	bne.n	b5b74 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc4>
            new(&result_) ResultT(std::move(result));
   b5aca:	7321      	strb	r1, [r4, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5acc:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5ad0:	2000      	movs	r0, #0
	__atomic_store_n(&_M_i, __i, int(__m));
   b5ad2:	7063      	strb	r3, [r4, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5ad4:	1d23      	adds	r3, r4, #4
   b5ad6:	f3bf 8f5b 	dmb	ish
   b5ada:	e853 6f00 	ldrex	r6, [r3]
   b5ade:	e843 0200 	strex	r2, r0, [r3]
   b5ae2:	2a00      	cmp	r2, #0
   b5ae4:	d1f9      	bne.n	b5ada <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x2a>
   b5ae6:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5aea:	2e00      	cmp	r6, #0
   b5aec:	d042      	beq.n	b5b74 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc4>
        return (application_thread_current(nullptr) != 0);
   b5aee:	f001 fd47 	bl	b7580 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5af2:	4607      	mov	r7, r0
   b5af4:	b170      	cbz	r0, b5b14 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x64>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5af6:	f104 010c 	add.w	r1, r4, #12
   b5afa:	4630      	mov	r0, r6
   b5afc:	f7ff feca 	bl	b5894 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5b00:	4630      	mov	r0, r6
   b5b02:	f7ff f9d5 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5b06:	2110      	movs	r1, #16
   b5b08:	4630      	mov	r0, r6
        this->p_->setResult(std::move(result));
    }
   b5b0a:	b007      	add	sp, #28
   b5b0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            delete callbackPtr;
   b5b10:	f7fe bac3 	b.w	b409a <_ZdlPvj>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5b14:	4631      	mov	r1, r6
   b5b16:	a801      	add	r0, sp, #4
   b5b18:	f7ff ff96 	bl	b5a48 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5b1c:	7b23      	ldrb	r3, [r4, #12]
   b5b1e:	f88d 3014 	strb.w	r3, [sp, #20]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5b22:	2010      	movs	r0, #16
   b5b24:	f7fe fab5 	bl	b4092 <_Znwj>
   b5b28:	4605      	mov	r5, r0
   b5b2a:	b1d0      	cbz	r0, b5b62 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xb2>
    _Function_base() : _M_manager(nullptr) { }
   b5b2c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5b2e:	2014      	movs	r0, #20
   b5b30:	f7fe faaf 	bl	b4092 <_Znwj>
   b5b34:	4604      	mov	r4, r0
   b5b36:	b178      	cbz	r0, b5b58 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xa8>
    _Function_base() : _M_manager(nullptr) { }
   b5b38:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5b3a:	4601      	mov	r1, r0
   b5b3c:	a801      	add	r0, sp, #4
   b5b3e:	f7ff fdbc 	bl	b56ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b42:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5b44:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b46:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b48:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5b4a:	9203      	str	r2, [sp, #12]
   b5b4c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b4e:	60e3      	str	r3, [r4, #12]
   b5b50:	f89d 3014 	ldrb.w	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5b54:	9204      	str	r2, [sp, #16]
   b5b56:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5b58:	4b07      	ldr	r3, [pc, #28]	; (b5b78 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc8>)
   b5b5a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5b5c:	4b07      	ldr	r3, [pc, #28]	; (b5b7c <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xcc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5b5e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5b60:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5b62:	a801      	add	r0, sp, #4
   b5b64:	f7ff f9a4 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5b68:	2200      	movs	r2, #0
   b5b6a:	4629      	mov	r1, r5
   b5b6c:	4804      	ldr	r0, [pc, #16]	; (b5b80 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xd0>)
   b5b6e:	f001 fd0f 	bl	b7590 <application_thread_invoke>
   b5b72:	e7c5      	b.n	b5b00 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x50>
    }
   b5b74:	b007      	add	sp, #28
   b5b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5b78:	000b58a7 	.word	0x000b58a7
   b5b7c:	000b5a67 	.word	0x000b5a67
   b5b80:	000baa75 	.word	0x000baa75

000b5b84 <_ZN10LairdBt5104loopEv>:
void LairdBt510::loop() {
   b5b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static unsigned int timer = System.uptime();
   b5b88:	4d9d      	ldr	r5, [pc, #628]	; (b5e00 <_ZN10LairdBt5104loopEv+0x27c>)
void LairdBt510::loop() {
   b5b8a:	b089      	sub	sp, #36	; 0x24
    static unsigned int timer = System.uptime();
   b5b8c:	782b      	ldrb	r3, [r5, #0]
   b5b8e:	f3bf 8f5b 	dmb	ish
   b5b92:	07db      	lsls	r3, r3, #31
void LairdBt510::loop() {
   b5b94:	af00      	add	r7, sp, #0
   b5b96:	4604      	mov	r4, r0
    static unsigned int timer = System.uptime();
   b5b98:	d40a      	bmi.n	b5bb0 <_ZN10LairdBt5104loopEv+0x2c>
   b5b9a:	4628      	mov	r0, r5
   b5b9c:	f7fe fa7f 	bl	b409e <__cxa_guard_acquire>
   b5ba0:	b130      	cbz	r0, b5bb0 <_ZN10LairdBt5104loopEv+0x2c>
   b5ba2:	f7ff f9a2 	bl	b4eea <_ZN11SystemClass6uptimeEv>
   b5ba6:	4b97      	ldr	r3, [pc, #604]	; (b5e04 <_ZN10LairdBt5104loopEv+0x280>)
   b5ba8:	6018      	str	r0, [r3, #0]
   b5baa:	4628      	mov	r0, r5
   b5bac:	f7fe fa7c 	bl	b40a8 <__cxa_guard_release>
    if (state_ != prev_state_ || timer != System.uptime()) {
   b5bb0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   b5bb4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   b5bb8:	429a      	cmp	r2, r3
   b5bba:	d00e      	beq.n	b5bda <_ZN10LairdBt5104loopEv+0x56>
        prev_state_ = state_;
   b5bbc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b5bc0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        switch (state_)
   b5bc4:	3b01      	subs	r3, #1
   b5bc6:	2b05      	cmp	r3, #5
   b5bc8:	d846      	bhi.n	b5c58 <_ZN10LairdBt5104loopEv+0xd4>
   b5bca:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5bce:	0010      	.short	0x0010
   b5bd0:	004a003b 	.word	0x004a003b
   b5bd4:	00e500ef 	.word	0x00e500ef
   b5bd8:	0111      	.short	0x0111
    if (state_ != prev_state_ || timer != System.uptime()) {
   b5bda:	f7ff f986 	bl	b4eea <_ZN11SystemClass6uptimeEv>
   b5bde:	4b89      	ldr	r3, [pc, #548]	; (b5e04 <_ZN10LairdBt5104loopEv+0x280>)
   b5be0:	681b      	ldr	r3, [r3, #0]
   b5be2:	4298      	cmp	r0, r3
   b5be4:	d1ea      	bne.n	b5bbc <_ZN10LairdBt5104loopEv+0x38>
}
   b5be6:	3724      	adds	r7, #36	; 0x24
   b5be8:	46bd      	mov	sp, r7
   b5bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            peer_ = BLE.connect(getAddress(), false);
   b5bee:	f002 fd8d 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
    BleAddress getAddress() const { return address;}
   b5bf2:	1de1      	adds	r1, r4, #7
   b5bf4:	4605      	mov	r5, r0
   b5bf6:	4638      	mov	r0, r7
   b5bf8:	f002 f930 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
   b5bfc:	2300      	movs	r3, #0
   b5bfe:	4629      	mov	r1, r5
   b5c00:	463a      	mov	r2, r7
   b5c02:	f107 000c 	add.w	r0, r7, #12
   b5c06:	f004 f889 	bl	b9d1c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5c0a:	68fb      	ldr	r3, [r7, #12]
   b5c0c:	693d      	ldr	r5, [r7, #16]
   b5c0e:	6363      	str	r3, [r4, #52]	; 0x34
	if (__tmp != _M_pi)
   b5c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b5c12:	429d      	cmp	r5, r3
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5c14:	f104 0634 	add.w	r6, r4, #52	; 0x34
   b5c18:	d008      	beq.n	b5c2c <_ZN10LairdBt5104loopEv+0xa8>
	    if (__tmp != 0)
   b5c1a:	b115      	cbz	r5, b5c22 <_ZN10LairdBt5104loopEv+0x9e>
    { ++_M_use_count; }
   b5c1c:	686b      	ldr	r3, [r5, #4]
   b5c1e:	3301      	adds	r3, #1
   b5c20:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5c22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   b5c24:	b108      	cbz	r0, b5c2a <_ZN10LairdBt5104loopEv+0xa6>
	      _M_pi->_M_release();
   b5c26:	f7ff f94c 	bl	b4ec2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5c2a:	63a5      	str	r5, [r4, #56]	; 0x38
   b5c2c:	f107 000c 	add.w	r0, r7, #12
   b5c30:	f002 fe7f 	bl	b8932 <_ZN8particle13BlePeerDeviceD1Ev>
            if (peer_.connected()) {
   b5c34:	4630      	mov	r0, r6
   b5c36:	f002 fcdb 	bl	b85f0 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5c3a:	b168      	cbz	r0, b5c58 <_ZN10LairdBt5104loopEv+0xd4>
                state_ = PAIRING;
   b5c3c:	2302      	movs	r3, #2
                state_ = DISCONNECT;
   b5c3e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b5c42:	e009      	b.n	b5c58 <_ZN10LairdBt5104loopEv+0xd4>
            BLE.startPairing(peer_);
   b5c44:	f002 fd62 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c48:	f104 0134 	add.w	r1, r4, #52	; 0x34
   b5c4c:	f002 fdd3 	bl	b87f6 <_ZNK8particle14BleLocalDevice12startPairingERKNS_13BlePeerDeviceE>
            Log.trace("Pairing");
   b5c50:	496d      	ldr	r1, [pc, #436]	; (b5e08 <_ZN10LairdBt5104loopEv+0x284>)
   b5c52:	486e      	ldr	r0, [pc, #440]	; (b5e0c <_ZN10LairdBt5104loopEv+0x288>)
   b5c54:	f7ff f9cc 	bl	b4ff0 <_ZNK5spark6Logger5traceEPKcz>
        timer = System.uptime();
   b5c58:	f7ff f947 	bl	b4eea <_ZN11SystemClass6uptimeEv>
   b5c5c:	4b69      	ldr	r3, [pc, #420]	; (b5e04 <_ZN10LairdBt5104loopEv+0x280>)
   b5c5e:	6018      	str	r0, [r3, #0]
}
   b5c60:	e7c1      	b.n	b5be6 <_ZN10LairdBt5104loopEv+0x62>
            peer_.discoverAllServices();
   b5c62:	f104 0934 	add.w	r9, r4, #52	; 0x34
   b5c66:	4649      	mov	r1, r9
   b5c68:	f107 000c 	add.w	r0, r7, #12
   b5c6c:	f003 fda8 	bl	b97c0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
    destruct(data_, data_ + size_);
   b5c70:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
            break;
   b5c74:	46e8      	mov	r8, sp
   b5c76:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5c7a:	42ae      	cmp	r6, r5
   b5c7c:	d004      	beq.n	b5c88 <_ZN10LairdBt5104loopEv+0x104>
      ~__shared_ptr() = default;
   b5c7e:	1d28      	adds	r0, r5, #4
   b5c80:	f7ff fa48 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5c84:	3508      	adds	r5, #8
   b5c86:	e7f8      	b.n	b5c7a <_ZN10LairdBt5104loopEv+0xf6>
    ::free(ptr);
   b5c88:	68f8      	ldr	r0, [r7, #12]
   b5c8a:	f001 fd55 	bl	b7738 <free>
            peer_.discoverAllCharacteristics();
   b5c8e:	4649      	mov	r1, r9
   b5c90:	f107 000c 	add.w	r0, r7, #12
   b5c94:	f003 ff80 	bl	b9b98 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
    destruct(data_, data_ + size_);
   b5c98:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
   b5c9c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5ca0:	42ae      	cmp	r6, r5
   b5ca2:	d004      	beq.n	b5cae <_ZN10LairdBt5104loopEv+0x12a>
            p->~T();
   b5ca4:	4628      	mov	r0, r5
   b5ca6:	f002 fe3d 	bl	b8924 <_ZN8particle17BleCharacteristicD1Ev>
        for (; p != end; ++p) {
   b5caa:	3508      	adds	r5, #8
   b5cac:	e7f8      	b.n	b5ca0 <_ZN10LairdBt5104loopEv+0x11c>
    ::free(ptr);
   b5cae:	68f8      	ldr	r0, [r7, #12]
   b5cb0:	f001 fd42 	bl	b7738 <free>
            peer_.getCharacteristicByUUID(rx, BleUuid("569a2001-b87f-490c-92cb-11ba5ea5167c"));
   b5cb4:	f104 0644 	add.w	r6, r4, #68	; 0x44
   b5cb8:	4955      	ldr	r1, [pc, #340]	; (b5e10 <_ZN10LairdBt5104loopEv+0x28c>)
   b5cba:	f107 000c 	add.w	r0, r7, #12
   b5cbe:	f002 fa49 	bl	b8154 <_ZN8particle7BleUuidC1EPKc>
   b5cc2:	f107 020c 	add.w	r2, r7, #12
   b5cc6:	4631      	mov	r1, r6
   b5cc8:	4648      	mov	r0, r9
   b5cca:	f003 fcbb 	bl	b9644 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
            peer_.getCharacteristicByUUID(tx, BleUuid("569a2000-b87f-490c-92cb-11ba5ea5167c"));
   b5cce:	f104 053c 	add.w	r5, r4, #60	; 0x3c
   b5cd2:	4950      	ldr	r1, [pc, #320]	; (b5e14 <_ZN10LairdBt5104loopEv+0x290>)
   b5cd4:	f107 000c 	add.w	r0, r7, #12
   b5cd8:	f002 fa3c 	bl	b8154 <_ZN8particle7BleUuidC1EPKc>
   b5cdc:	4629      	mov	r1, r5
   b5cde:	f107 020c 	add.w	r2, r7, #12
   b5ce2:	4648      	mov	r0, r9
   b5ce4:	f003 fcae 	bl	b9644 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
            tx.onDataReceived(onDataReceived, this);
   b5ce8:	4622      	mov	r2, r4
   b5cea:	4628      	mov	r0, r5
   b5cec:	494a      	ldr	r1, [pc, #296]	; (b5e18 <_ZN10LairdBt5104loopEv+0x294>)
   b5cee:	f003 fcd3 	bl	b9698 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
            tx.subscribe(true);
   b5cf2:	2101      	movs	r1, #1
   b5cf4:	4628      	mov	r0, r5
   b5cf6:	f002 fc03 	bl	b8500 <_ZNK8particle17BleCharacteristic9subscribeEb>
        state_(BEGIN) {
   b5cfa:	2500      	movs	r5, #0
    JSONVectorWriter(): v_(Vector<char>()) {}
   b5cfc:	4b47      	ldr	r3, [pc, #284]	; (b5e1c <_ZN10LairdBt5104loopEv+0x298>)
   b5cfe:	60fb      	str	r3, [r7, #12]
            config_.createJson(writer_, configId_);
   b5d00:	f104 0284 	add.w	r2, r4, #132	; 0x84
   b5d04:	f107 010c 	add.w	r1, r7, #12
   b5d08:	f104 004c 	add.w	r0, r4, #76	; 0x4c
        capacity_(0) {
   b5d0c:	e9c7 5505 	strd	r5, r5, [r7, #20]
   b5d10:	743d      	strb	r5, [r7, #16]
   b5d12:	61fd      	str	r5, [r7, #28]
   b5d14:	f7ff fb16 	bl	b5344 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt>
            char buf[writer_.vectorSize()];
   b5d18:	69bb      	ldr	r3, [r7, #24]
   b5d1a:	3307      	adds	r3, #7
   b5d1c:	f023 0307 	bic.w	r3, r3, #7
   b5d20:	ebad 0d03 	sub.w	sp, sp, r3
   b5d24:	46e9      	mov	r9, sp
            for (size_t i = 0; i < writer_.vectorSize(); ++i) {
   b5d26:	69bb      	ldr	r3, [r7, #24]
   b5d28:	429d      	cmp	r5, r3
   b5d2a:	d20d      	bcs.n	b5d48 <_ZN10LairdBt5104loopEv+0x1c4>
    Vector<char> vector() const {return v_;}
   b5d2c:	f107 0114 	add.w	r1, r7, #20
   b5d30:	4638      	mov	r0, r7
   b5d32:	f7ff fa6a 	bl	b520a <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
                buf[i] = writer_.vector().at(i);
   b5d36:	683b      	ldr	r3, [r7, #0]
   b5d38:	5d5b      	ldrb	r3, [r3, r5]
   b5d3a:	f809 3005 	strb.w	r3, [r9, r5]
   b5d3e:	4638      	mov	r0, r7
   b5d40:	f7ff f9f7 	bl	b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
            for (size_t i = 0; i < writer_.vectorSize(); ++i) {
   b5d44:	3501      	adds	r5, #1
   b5d46:	e7ee      	b.n	b5d26 <_ZN10LairdBt5104loopEv+0x1a2>
            Log.trace("Send value: %s", buf);
   b5d48:	464a      	mov	r2, r9
   b5d4a:	4935      	ldr	r1, [pc, #212]	; (b5e20 <_ZN10LairdBt5104loopEv+0x29c>)
   b5d4c:	482f      	ldr	r0, [pc, #188]	; (b5e0c <_ZN10LairdBt5104loopEv+0x288>)
   b5d4e:	f7ff f94f 	bl	b4ff0 <_ZNK5spark6Logger5traceEPKcz>
    Vector<char> vector() const {return v_;}
   b5d52:	f107 0114 	add.w	r1, r7, #20
   b5d56:	4638      	mov	r0, r7
   b5d58:	f7ff fa57 	bl	b520a <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
            Log.trace("set value return: %d",rx.setValue(reinterpret_cast<const uint8_t*>(writer_.vector().data()), writer_.vectorSize(), BleTxRxType::ACK));
   b5d5c:	2301      	movs	r3, #1
   b5d5e:	69ba      	ldr	r2, [r7, #24]
   b5d60:	6839      	ldr	r1, [r7, #0]
   b5d62:	4630      	mov	r0, r6
   b5d64:	f002 fb6c 	bl	b8440 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5d68:	492e      	ldr	r1, [pc, #184]	; (b5e24 <_ZN10LairdBt5104loopEv+0x2a0>)
   b5d6a:	4602      	mov	r2, r0
   b5d6c:	4827      	ldr	r0, [pc, #156]	; (b5e0c <_ZN10LairdBt5104loopEv+0x288>)
   b5d6e:	f7ff f93f 	bl	b4ff0 <_ZNK5spark6Logger5traceEPKcz>
   b5d72:	4638      	mov	r0, r7
   b5d74:	f7ff f9dd 	bl	b5132 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
            if (state_ == SENDING) {
   b5d78:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b5d7c:	2b03      	cmp	r3, #3
   b5d7e:	d105      	bne.n	b5d8c <_ZN10LairdBt5104loopEv+0x208>
                state_ = RECEIVING;
   b5d80:	2305      	movs	r3, #5
   b5d82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                timeout = 0;
   b5d86:	4b28      	ldr	r3, [pc, #160]	; (b5e28 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5d88:	2200      	movs	r2, #0
   b5d8a:	701a      	strb	r2, [r3, #0]
            JSONVectorWriter writer_;
   b5d8c:	f107 000c 	add.w	r0, r7, #12
   b5d90:	f7ff f9f6 	bl	b5180 <_ZN16JSONVectorWriterD1Ev>
   b5d94:	46c5      	mov	sp, r8
   b5d96:	e75f      	b.n	b5c58 <_ZN10LairdBt5104loopEv+0xd4>
            if (++timeout > RECEIVE_TIMEOUT_LOOPS) {
   b5d98:	4a23      	ldr	r2, [pc, #140]	; (b5e28 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5d9a:	7813      	ldrb	r3, [r2, #0]
   b5d9c:	3301      	adds	r3, #1
   b5d9e:	b2db      	uxtb	r3, r3
   b5da0:	2b14      	cmp	r3, #20
   b5da2:	7013      	strb	r3, [r2, #0]
   b5da4:	f67f af58 	bls.w	b5c58 <_ZN10LairdBt5104loopEv+0xd4>
                state_ = DISCONNECT;
   b5da8:	2304      	movs	r3, #4
   b5daa:	e748      	b.n	b5c3e <_ZN10LairdBt5104loopEv+0xba>
            auto p = Promise<bool>::fromDataPtr(handler_data_);
   b5dac:	6961      	ldr	r1, [r4, #20]
   b5dae:	4638      	mov	r0, r7
   b5db0:	f7ff f9fc 	bl	b51ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
            if (timeout > RECEIVE_TIMEOUT_LOOPS) {
   b5db4:	4b1c      	ldr	r3, [pc, #112]	; (b5e28 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5db6:	781b      	ldrb	r3, [r3, #0]
   b5db8:	2b14      	cmp	r3, #20
   b5dba:	d914      	bls.n	b5de6 <_ZN10LairdBt5104loopEv+0x262>
        type_(type) {
   b5dbc:	2300      	movs	r3, #0
   b5dbe:	60fb      	str	r3, [r7, #12]
                p.setError(Error::TIMEOUT);
   b5dc0:	4638      	mov	r0, r7
   b5dc2:	f64f 7360 	movw	r3, #65376	; 0xff60
   b5dc6:	f107 010c 	add.w	r1, r7, #12
   b5dca:	823b      	strh	r3, [r7, #16]
   b5dcc:	f7ff fd82 	bl	b58d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5dd0:	f107 000c 	add.w	r0, r7, #12
   b5dd4:	f7ff f893 	bl	b4efe <_ZN8particle5ErrorD1Ev>
            state_ = CLEANUP;
   b5dd8:	2306      	movs	r3, #6
   b5dda:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b5dde:	1d38      	adds	r0, r7, #4
   b5de0:	f7ff f998 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5de4:	e738      	b.n	b5c58 <_ZN10LairdBt5104loopEv+0xd4>
                p.setResult(true);
   b5de6:	2101      	movs	r1, #1
   b5de8:	4638      	mov	r0, r7
   b5dea:	f7ff fe61 	bl	b5ab0 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb>
   b5dee:	e7f3      	b.n	b5dd8 <_ZN10LairdBt5104loopEv+0x254>
            state_ = IDLE;
   b5df0:	2300      	movs	r3, #0
   b5df2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            peer_.disconnect();
   b5df6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5dfa:	f003 fa15 	bl	b9228 <_ZNK8particle13BlePeerDevice10disconnectEv>
            break;
   b5dfe:	e72b      	b.n	b5c58 <_ZN10LairdBt5104loopEv+0xd4>
   b5e00:	2003e664 	.word	0x2003e664
   b5e04:	2003e67c 	.word	0x2003e67c
   b5e08:	000bc1c1 	.word	0x000bc1c1
   b5e0c:	2003e6c4 	.word	0x2003e6c4
   b5e10:	000bc1c9 	.word	0x000bc1c9
   b5e14:	000bc1ee 	.word	0x000bc1ee
   b5e18:	000b5021 	.word	0x000b5021
   b5e1c:	000bc240 	.word	0x000bc240
   b5e20:	000bc213 	.word	0x000bc213
   b5e24:	000bc222 	.word	0x000bc222
   b5e28:	2003e680 	.word	0x2003e680

000b5e2c <_GLOBAL__sub_I__ZN10LairdBt51014_eventCallbackE>:
   b5e2c:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <_GLOBAL__sub_I__ZN10LairdBt51014_eventCallbackE+0xc>)
   b5e2e:	2200      	movs	r2, #0
   b5e30:	e9c3 2200 	strd	r2, r2, [r3]
   b5e34:	609a      	str	r2, [r3, #8]
        {};
   b5e36:	4770      	bx	lr
   b5e38:	2003e670 	.word	0x2003e670

000b5e3c <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE>:
#include "iBeacon-scan.h"

Vector<iBeaconScan> iBeaconScan::beacons;

void iBeaconScan::populateData(const BleScanResult *scanResult)
{
   b5e3c:	b530      	push	{r4, r5, lr}
   b5e3e:	4604      	mov	r4, r0
   b5e40:	b099      	sub	sp, #100	; 0x64
   b5e42:	460d      	mov	r5, r1
    Beacon::populateData(scanResult);
   b5e44:	f7fe f933 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b5e48:	4629      	mov	r1, r5
   b5e4a:	1de0      	adds	r0, r4, #7
   b5e4c:	f002 f80b 	bl	b7e66 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t custom_data[BLE_MAX_ADV_DATA_LEN];
    ADVERTISING_DATA(scanResult).customData(custom_data, sizeof(custom_data));
   b5e50:	a910      	add	r1, sp, #64	; 0x40
   b5e52:	221f      	movs	r2, #31
   b5e54:	f105 0008 	add.w	r0, r5, #8
   b5e58:	f002 fa68 	bl	b832c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
    snprintf(uuid, sizeof(uuid), "%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X",
   b5e5c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   b5e60:	930e      	str	r3, [sp, #56]	; 0x38
   b5e62:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
   b5e66:	930d      	str	r3, [sp, #52]	; 0x34
   b5e68:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   b5e6c:	930c      	str	r3, [sp, #48]	; 0x30
   b5e6e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   b5e72:	930b      	str	r3, [sp, #44]	; 0x2c
   b5e74:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   b5e78:	930a      	str	r3, [sp, #40]	; 0x28
   b5e7a:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   b5e7e:	9309      	str	r3, [sp, #36]	; 0x24
   b5e80:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
   b5e84:	9308      	str	r3, [sp, #32]
   b5e86:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   b5e8a:	9307      	str	r3, [sp, #28]
   b5e8c:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
   b5e90:	9306      	str	r3, [sp, #24]
   b5e92:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   b5e96:	9305      	str	r3, [sp, #20]
   b5e98:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   b5e9c:	9304      	str	r3, [sp, #16]
   b5e9e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   b5ea2:	9303      	str	r3, [sp, #12]
   b5ea4:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   b5ea8:	9302      	str	r3, [sp, #8]
   b5eaa:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
   b5eae:	9301      	str	r3, [sp, #4]
   b5eb0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   b5eb4:	9300      	str	r3, [sp, #0]
   b5eb6:	4a0e      	ldr	r2, [pc, #56]	; (b5ef0 <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE+0xb4>)
   b5eb8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   b5ebc:	2125      	movs	r1, #37	; 0x25
   b5ebe:	f104 0013 	add.w	r0, r4, #19
   b5ec2:	f001 fc51 	bl	b7768 <snprintf>
                custom_data[4], custom_data[5], custom_data[6], custom_data[7], custom_data[8], custom_data[9], custom_data[10], custom_data[11], custom_data[12],
                custom_data[13], custom_data[14], custom_data[15], custom_data[16], custom_data[17], custom_data[18], custom_data[19]);
    major = custom_data[20] * 256 + custom_data[21];
   b5ec6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b5eca:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   b5ece:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b5ed2:	8723      	strh	r3, [r4, #56]	; 0x38
    minor = custom_data[22] * 256 + custom_data[23];
   b5ed4:	f89d 2056 	ldrb.w	r2, [sp, #86]	; 0x56
   b5ed8:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   b5edc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b5ee0:	8763      	strh	r3, [r4, #58]	; 0x3a
    power = (int8_t)custom_data[24];
   b5ee2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b5ee6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
   b5eea:	b019      	add	sp, #100	; 0x64
   b5eec:	bd30      	pop	{r4, r5, pc}
   b5eee:	bf00      	nop
   b5ef0:	000bc284 	.word	0x000bc284

000b5ef4 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE>:
    }
    return false;
}

void iBeaconScan::toJson(JSONWriter *writer) const
{
   b5ef4:	b570      	push	{r4, r5, r6, lr}
   b5ef6:	b086      	sub	sp, #24
   b5ef8:	460c      	mov	r4, r1
   b5efa:	4605      	mov	r5, r0
        writer->name(address.toString()).beginObject();
   b5efc:	1dc1      	adds	r1, r0, #7
   b5efe:	2200      	movs	r2, #0
   b5f00:	a802      	add	r0, sp, #8
   b5f02:	f002 f83d 	bl	b7f80 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b5f06:	9a04      	ldr	r2, [sp, #16]
   b5f08:	9902      	ldr	r1, [sp, #8]
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	f005 f808 	bl	baf20 <_ZN5spark10JSONWriter4nameEPKcj>
   b5f10:	f004 ff4c 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
   b5f14:	a802      	add	r0, sp, #8
   b5f16:	f001 fd05 	bl	b7924 <_ZN6StringD1Ev>
        writer->name("uuid").value(getUuid());
   b5f1a:	491c      	ldr	r1, [pc, #112]	; (b5f8c <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0x98>)
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	f7fe fd5f 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
    iBeaconScan() : Beacon(SCAN_IBEACON) {};
    ~iBeaconScan() = default;

    void toJson(JSONWriter *writer) const override;

    const char* getUuid() const {return uuid;};
   b5f22:	f105 0113 	add.w	r1, r5, #19
   b5f26:	4606      	mov	r6, r0
    return value(val, strlen(val));
   b5f28:	4608      	mov	r0, r1
   b5f2a:	9101      	str	r1, [sp, #4]
   b5f2c:	f005 ffbd 	bl	bbeaa <strlen>
   b5f30:	9901      	ldr	r1, [sp, #4]
   b5f32:	4602      	mov	r2, r0
   b5f34:	4630      	mov	r0, r6
   b5f36:	f005 f803 	bl	baf40 <_ZN5spark10JSONWriter5valueEPKcj>
        writer->name("major").value(getMajor());
   b5f3a:	4915      	ldr	r1, [pc, #84]	; (b5f90 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0x9c>)
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	f7fe fd4f 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5f42:	8f29      	ldrh	r1, [r5, #56]	; 0x38
   b5f44:	f004 ff56 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->name("minor").value(getMinor());
   b5f48:	4912      	ldr	r1, [pc, #72]	; (b5f94 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa0>)
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	f7fe fd48 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5f50:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
   b5f52:	f004 ff4f 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->name("power").value(getPower());
   b5f56:	4910      	ldr	r1, [pc, #64]	; (b5f98 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa4>)
   b5f58:	4620      	mov	r0, r4
   b5f5a:	f7fe fd41 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b5f5e:	f995 103c 	ldrsb.w	r1, [r5, #60]	; 0x3c
   b5f62:	f004 ff47 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->name("rssi").value(getRssi());
   b5f66:	490d      	ldr	r1, [pc, #52]	; (b5f9c <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa8>)
   b5f68:	4620      	mov	r0, r4
   b5f6a:	f7fe fd39 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b5f6e:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   b5f72:	7cab      	ldrb	r3, [r5, #18]
   b5f74:	fb91 f1f3 	sdiv	r1, r1, r3
   b5f78:	b249      	sxtb	r1, r1
   b5f7a:	f004 ff3b 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b5f7e:	4620      	mov	r0, r4
}
   b5f80:	b006      	add	sp, #24
   b5f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer->endObject();
   b5f86:	f004 befb 	b.w	bad80 <_ZN5spark10JSONWriter9endObjectEv>
   b5f8a:	bf00      	nop
   b5f8c:	000bc2c9 	.word	0x000bc2c9
   b5f90:	000bc2ce 	.word	0x000bc2ce
   b5f94:	000bc2d4 	.word	0x000bc2d4
   b5f98:	000bc2da 	.word	0x000bc2da
   b5f9c:	000bc06d 	.word	0x000bc06d

000b5fa0 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE>:
{
   b5fa0:	b500      	push	{lr}
   b5fa2:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).customData(custom_data, sizeof(custom_data)) == 25)
   b5fa4:	221f      	movs	r2, #31
   b5fa6:	4669      	mov	r1, sp
   b5fa8:	3008      	adds	r0, #8
   b5faa:	f002 f9bf 	bl	b832c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
   b5fae:	2819      	cmp	r0, #25
   b5fb0:	d113      	bne.n	b5fda <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
        if (custom_data[0] == 0x4c && custom_data[1] == 0x00 && custom_data[2] == 0x02 && custom_data[3] == 0x15)
   b5fb2:	f89d 3000 	ldrb.w	r3, [sp]
   b5fb6:	2b4c      	cmp	r3, #76	; 0x4c
   b5fb8:	d10f      	bne.n	b5fda <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
   b5fba:	f89d 0001 	ldrb.w	r0, [sp, #1]
   b5fbe:	b960      	cbnz	r0, b5fda <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
   b5fc0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   b5fc4:	2b02      	cmp	r3, #2
   b5fc6:	d105      	bne.n	b5fd4 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x34>
   b5fc8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   b5fcc:	f1a0 0315 	sub.w	r3, r0, #21
   b5fd0:	4258      	negs	r0, r3
   b5fd2:	4158      	adcs	r0, r3
}
   b5fd4:	b009      	add	sp, #36	; 0x24
   b5fd6:	f85d fb04 	ldr.w	pc, [sp], #4
    return false;
   b5fda:	2000      	movs	r0, #0
   b5fdc:	e7fa      	b.n	b5fd4 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x34>
	...

000b5fe0 <_ZN11iBeaconScanC1ERKS_>:
class iBeaconScan : public Beacon
   b5fe0:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b5fe2:	4b14      	ldr	r3, [pc, #80]	; (b6034 <_ZN11iBeaconScanC1ERKS_+0x54>)
   b5fe4:	888a      	ldrh	r2, [r1, #4]
   b5fe6:	6003      	str	r3, [r0, #0]
   b5fe8:	460d      	mov	r5, r1
   b5fea:	798b      	ldrb	r3, [r1, #6]
   b5fec:	8082      	strh	r2, [r0, #4]
   b5fee:	4604      	mov	r4, r0
   b5ff0:	7183      	strb	r3, [r0, #6]
   b5ff2:	3107      	adds	r1, #7
   b5ff4:	3007      	adds	r0, #7
   b5ff6:	f001 ff31 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
   b5ffa:	8a2b      	ldrh	r3, [r5, #16]
   b5ffc:	8223      	strh	r3, [r4, #16]
   b5ffe:	7cab      	ldrb	r3, [r5, #18]
   b6000:	74a3      	strb	r3, [r4, #18]
   b6002:	4623      	mov	r3, r4
   b6004:	4a0c      	ldr	r2, [pc, #48]	; (b6038 <_ZN11iBeaconScanC1ERKS_+0x58>)
   b6006:	f843 2b13 	str.w	r2, [r3], #19
   b600a:	f105 0137 	add.w	r1, r5, #55	; 0x37
   b600e:	f105 0213 	add.w	r2, r5, #19
   b6012:	f852 0b04 	ldr.w	r0, [r2], #4
   b6016:	f843 0b04 	str.w	r0, [r3], #4
   b601a:	428a      	cmp	r2, r1
   b601c:	d1f9      	bne.n	b6012 <_ZN11iBeaconScanC1ERKS_+0x32>
   b601e:	7812      	ldrb	r2, [r2, #0]
   b6020:	701a      	strb	r2, [r3, #0]
   b6022:	f995 303c 	ldrsb.w	r3, [r5, #60]	; 0x3c
   b6026:	6baa      	ldr	r2, [r5, #56]	; 0x38
   b6028:	63a2      	str	r2, [r4, #56]	; 0x38
   b602a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b602e:	4620      	mov	r0, r4
   b6030:	bd38      	pop	{r3, r4, r5, pc}
   b6032:	bf00      	nop
   b6034:	000bc044 	.word	0x000bc044
   b6038:	000bc2e8 	.word	0x000bc2e8

000b603c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b603c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b603e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6040:	4604      	mov	r4, r0
   b6042:	460d      	mov	r5, r1
   b6044:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6046:	d911      	bls.n	b606c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b6048:	4290      	cmp	r0, r2
   b604a:	d210      	bcs.n	b606e <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b604c:	f1a2 0640 	sub.w	r6, r2, #64	; 0x40
            dest += end - p - 1;
   b6050:	1a75      	subs	r5, r6, r1
   b6052:	f1a1 0740 	sub.w	r7, r1, #64	; 0x40
   b6056:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6058:	42b7      	cmp	r7, r6
   b605a:	d012      	beq.n	b6082 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b605c:	b11c      	cbz	r4, b6066 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b605e:	4631      	mov	r1, r6
   b6060:	4620      	mov	r0, r4
   b6062:	f7ff ffbd 	bl	b5fe0 <_ZN11iBeaconScanC1ERKS_>
            for (; end != p; --end, --dest) {
   b6066:	3e40      	subs	r6, #64	; 0x40
   b6068:	3c40      	subs	r4, #64	; 0x40
   b606a:	e7f5      	b.n	b6058 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b606c:	d009      	beq.n	b6082 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b606e:	42b5      	cmp	r5, r6
   b6070:	d007      	beq.n	b6082 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b6072:	b11c      	cbz	r4, b607c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b6074:	4629      	mov	r1, r5
   b6076:	4620      	mov	r0, r4
   b6078:	f7ff ffb2 	bl	b5fe0 <_ZN11iBeaconScanC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b607c:	3540      	adds	r5, #64	; 0x40
   b607e:	3440      	adds	r4, #64	; 0x40
   b6080:	e7f5      	b.n	b606e <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b6082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6084 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE>:

void iBeaconScan::addOrUpdate(const BleScanResult *scanResult)
{
   b6084:	b5f0      	push	{r4, r5, r6, r7, lr}
    return size_;
   b6086:	4c39      	ldr	r4, [pc, #228]	; (b616c <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xe8>)
   b6088:	b0b1      	sub	sp, #196	; 0xc4
   b608a:	4606      	mov	r6, r0
   b608c:	2700      	movs	r7, #0
    uint8_t i;
    for (i = 0; i < beacons.size(); ++i) {
   b608e:	6863      	ldr	r3, [r4, #4]
   b6090:	b2fd      	uxtb	r5, r7
   b6092:	429d      	cmp	r5, r3
   b6094:	da0d      	bge.n	b60b2 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0x2e>
    return data_[i];
   b6096:	6821      	ldr	r1, [r4, #0]
   b6098:	eb01 1185 	add.w	r1, r1, r5, lsl #6
    BleAddress getAddress() const { return address;}
   b609c:	3107      	adds	r1, #7
   b609e:	a820      	add	r0, sp, #128	; 0x80
   b60a0:	f001 fedc 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult)) {
   b60a4:	4631      	mov	r1, r6
   b60a6:	a820      	add	r0, sp, #128	; 0x80
   b60a8:	f001 feef 	bl	b7e8a <_ZNK8particle10BleAddresseqERKS0_>
   b60ac:	3701      	adds	r7, #1
   b60ae:	2800      	cmp	r0, #0
   b60b0:	d0ed      	beq.n	b608e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xa>
            break;
        }
    }
    if (i == beacons.size()) {
   b60b2:	6863      	ldr	r3, [r4, #4]
   b60b4:	429d      	cmp	r5, r3
   b60b6:	d14c      	bne.n	b6152 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xce>
        rssi_count(0) {};
   b60b8:	4b2d      	ldr	r3, [pc, #180]	; (b6170 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xec>)
   b60ba:	9300      	str	r3, [sp, #0]
   b60bc:	f10d 0007 	add.w	r0, sp, #7
   b60c0:	2301      	movs	r3, #1
   b60c2:	2500      	movs	r5, #0
   b60c4:	f88d 3005 	strb.w	r3, [sp, #5]
   b60c8:	f88d 3006 	strb.w	r3, [sp, #6]
   b60cc:	f001 fef1 	bl	b7eb2 <_ZN8particle10BleAddressC1Ev>
    iBeaconScan() : Beacon(SCAN_IBEACON) {};
   b60d0:	4b28      	ldr	r3, [pc, #160]	; (b6174 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xf0>)
   b60d2:	9300      	str	r3, [sp, #0]
        iBeaconScan new_beacon;
        new_beacon.populateData(scanResult);
   b60d4:	4631      	mov	r1, r6
   b60d6:	4668      	mov	r0, sp
   b60d8:	f8ad 5010 	strh.w	r5, [sp, #16]
   b60dc:	f88d 5012 	strb.w	r5, [sp, #18]
   b60e0:	f7ff feac 	bl	b5e3c <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b60e4:	4669      	mov	r1, sp
   b60e6:	a810      	add	r0, sp, #64	; 0x40
        new_beacon.missed_scan = 0;
   b60e8:	f88d 5004 	strb.w	r5, [sp, #4]
        beacons.append(new_beacon);
   b60ec:	f7ff ff78 	bl	b5fe0 <_ZN11iBeaconScanC1ERKS_>
    return insert(size_, std::move(value));
   b60f0:	a910      	add	r1, sp, #64	; 0x40
   b60f2:	a820      	add	r0, sp, #128	; 0x80
   b60f4:	6866      	ldr	r6, [r4, #4]
   b60f6:	f7ff ff73 	bl	b5fe0 <_ZN11iBeaconScanC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b60fa:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b60fe:	429f      	cmp	r7, r3
   b6100:	db12      	blt.n	b6128 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xa4>
   b6102:	3701      	adds	r7, #1
        if (n > 0) {
   b6104:	42af      	cmp	r7, r5
   b6106:	dd0a      	ble.n	b611e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0x9a>
    return ::malloc(size);
   b6108:	01b8      	lsls	r0, r7, #6
   b610a:	f001 fb0d 	bl	b7728 <malloc>
            if (!d) {
   b610e:	4605      	mov	r5, r0
   b6110:	b1e8      	cbz	r0, b614e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xca>
            move(d, data_, data_ + size_);
   b6112:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6116:	eb01 1282 	add.w	r2, r1, r2, lsl #6
   b611a:	f7ff ff8f 	bl	b603c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b611e:	6820      	ldr	r0, [r4, #0]
   b6120:	f001 fb0a 	bl	b7738 <free>
        data_ = d;
   b6124:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6126:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6128:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b612a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b612c:	eb03 1686 	add.w	r6, r3, r6, lsl #6
    move(p + 1, p, data_ + size_);
   b6130:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   b6134:	4631      	mov	r1, r6
   b6136:	f106 0040 	add.w	r0, r6, #64	; 0x40
   b613a:	f7ff ff7f 	bl	b603c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b613e:	b11e      	cbz	r6, b6148 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xc4>
   b6140:	a920      	add	r1, sp, #128	; 0x80
   b6142:	4630      	mov	r0, r6
   b6144:	f7ff ff4c 	bl	b5fe0 <_ZN11iBeaconScanC1ERKS_>
    ++size_;
   b6148:	6863      	ldr	r3, [r4, #4]
   b614a:	3301      	adds	r3, #1
   b614c:	6063      	str	r3, [r4, #4]
        iBeaconScan& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b614e:	b031      	add	sp, #196	; 0xc4
   b6150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return data_[i];
   b6152:	6823      	ldr	r3, [r4, #0]
   b6154:	01aa      	lsls	r2, r5, #6
   b6156:	eb03 1585 	add.w	r5, r3, r5, lsl #6
        beacon.newly_scanned = false;
   b615a:	2400      	movs	r4, #0
   b615c:	716c      	strb	r4, [r5, #5]
        beacon.populateData(scanResult);
   b615e:	589b      	ldr	r3, [r3, r2]
   b6160:	4631      	mov	r1, r6
   b6162:	685b      	ldr	r3, [r3, #4]
   b6164:	4628      	mov	r0, r5
   b6166:	4798      	blx	r3
        beacon.missed_scan = 0;
   b6168:	712c      	strb	r4, [r5, #4]
   b616a:	e7f0      	b.n	b614e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xca>
   b616c:	2003e684 	.word	0x2003e684
   b6170:	000bc044 	.word	0x000bc044
   b6174:	000bc2e8 	.word	0x000bc2e8

000b6178 <_GLOBAL__sub_I__ZN11iBeaconScan7beaconsE>:
        capacity_(0) {
   b6178:	4b02      	ldr	r3, [pc, #8]	; (b6184 <_GLOBAL__sub_I__ZN11iBeaconScan7beaconsE+0xc>)
   b617a:	2200      	movs	r2, #0
   b617c:	e9c3 2200 	strd	r2, r2, [r3]
   b6180:	609a      	str	r2, [r3, #8]
   b6182:	4770      	bx	lr
   b6184:	2003e684 	.word	0x2003e684

000b6188 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6188:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b618a:	2301      	movs	r3, #1
   b618c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b618e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6190:	4604      	mov	r4, r0
        if (th->func) {
   b6192:	b143      	cbz	r3, b61a6 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6194:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6196:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6198:	2301      	movs	r3, #1
   b619a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b619c:	2000      	movs	r0, #0
    }
   b619e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b61a2:	f001 b8e5 	b.w	b7370 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b61a6:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b61a8:	2800      	cmp	r0, #0
   b61aa:	d0f5      	beq.n	b6198 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b61ac:	6883      	ldr	r3, [r0, #8]
   b61ae:	b90b      	cbnz	r3, b61b4 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b61b0:	f005 f957 	bl	bb462 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b61b4:	68c3      	ldr	r3, [r0, #12]
   b61b6:	e7ee      	b.n	b6196 <_ZN6Thread3runEPv+0xe>

000b61b8 <_ZN21SingleThreadedSectionC1Ev>:
    SingleThreadedSection() {
   b61b8:	b510      	push	{r4, lr}
        os_thread_scheduling(false, NULL);
   b61ba:	2100      	movs	r1, #0
    SingleThreadedSection() {
   b61bc:	4604      	mov	r4, r0
        os_thread_scheduling(false, NULL);
   b61be:	4608      	mov	r0, r1
   b61c0:	f001 f8b6 	bl	b7330 <os_thread_scheduling>
    }
   b61c4:	4620      	mov	r0, r4
   b61c6:	bd10      	pop	{r4, pc}

000b61c8 <_ZN21SingleThreadedSectionD1Ev>:
    ~SingleThreadedSection() {
   b61c8:	b510      	push	{r4, lr}
        os_thread_scheduling(true, NULL);
   b61ca:	2100      	movs	r1, #0
    ~SingleThreadedSection() {
   b61cc:	4604      	mov	r4, r0
        os_thread_scheduling(true, NULL);
   b61ce:	2001      	movs	r0, #1
   b61d0:	f001 f8ae 	bl	b7330 <os_thread_scheduling>
    }
   b61d4:	4620      	mov	r0, r4
   b61d6:	bd10      	pop	{r4, pc}

000b61d8 <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b61d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b61dc:	4604      	mov	r4, r0
   b61de:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b61e0:	2014      	movs	r0, #20
   b61e2:	491d      	ldr	r1, [pc, #116]	; (b6258 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b61e4:	4690      	mov	r8, r2
   b61e6:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b61e8:	f004 ff9e 	bl	bb128 <_ZnwjRKSt9nothrow_t>
   b61ec:	b130      	cbz	r0, b61fc <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>
      : _M_head_impl() { }
   b61ee:	2500      	movs	r5, #0
            exited(false) {
   b61f0:	e9c0 5500 	strd	r5, r5, [r0]
   b61f4:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b61f8:	7405      	strb	r5, [r0, #16]
   b61fa:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b61fc:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b61fe:	b198      	cbz	r0, b6228 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b6200:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6202:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b6206:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b620a:	4631      	mov	r1, r6
   b620c:	e9cd 0300 	strd	r0, r3, [sp]
   b6210:	4b12      	ldr	r3, [pc, #72]	; (b625c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x84>)
   b6212:	3004      	adds	r0, #4
   b6214:	f001 f87c 	bl	b7310 <os_thread_create>
   b6218:	b930      	cbnz	r0, b6228 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b621a:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b621c:	7c1b      	ldrb	r3, [r3, #16]
   b621e:	b9bb      	cbnz	r3, b6250 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
            HAL_Delay_Milliseconds(1);
   b6220:	2001      	movs	r0, #1
   b6222:	f000 ff99 	bl	b7158 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6226:	e7f8      	b.n	b621a <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b6228:	6826      	ldr	r6, [r4, #0]
	_M_ptr() = __p;
   b622a:	2300      	movs	r3, #0
   b622c:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b622e:	b17e      	cbz	r6, b6250 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6230:	6835      	ldr	r5, [r6, #0]
   b6232:	b14d      	cbz	r5, b6248 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x70>
      if (_M_manager)
   b6234:	68ab      	ldr	r3, [r5, #8]
   b6236:	b11b      	cbz	r3, b6240 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6238:	2203      	movs	r2, #3
   b623a:	4629      	mov	r1, r5
   b623c:	4628      	mov	r0, r5
   b623e:	4798      	blx	r3
	delete __ptr;
   b6240:	2110      	movs	r1, #16
   b6242:	4628      	mov	r0, r5
   b6244:	f7fd ff29 	bl	b409a <_ZdlPvj>
   b6248:	2114      	movs	r1, #20
   b624a:	4630      	mov	r0, r6
   b624c:	f7fd ff25 	bl	b409a <_ZdlPvj>
    }
   b6250:	4620      	mov	r0, r4
   b6252:	b002      	add	sp, #8
   b6254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6258:	000bc825 	.word	0x000bc825
   b625c:	000b6189 	.word	0x000b6189

000b6260 <_Z18custom_scan_paramsv>:
    }
    ctx->writer->endObject();
    return String::format("%.*s", ctx->writer->dataSize(), ctx->writer->buffer());
}

void custom_scan_params() {
   b6260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     *  To be able to get all the data, we have to scan multiple times for the duration.
     * 
     *  This function makes a short scan (150ms) and runs it for the number of seconds passed in.
     */
    BleScanParams scanParams;
    scanParams.size = sizeof(BleScanParams);
   b6262:	2310      	movs	r3, #16
   b6264:	f8ad 3002 	strh.w	r3, [sp, #2]
    BLE.getScanParameters(&scanParams);
   b6268:	f002 fa50 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b626c:	4669      	mov	r1, sp
   b626e:	f002 fabe 	bl	b87ee <_ZNK8particle14BleLocalDevice17getScanParametersEPNS_13BleScanParamsE>
#if SYSTEM_VERSION >= SYSTEM_VERSION_RC(3, 1, 0, 1)
    if (scanParams.scan_phys != BLE_PHYS_1MBPS && 
   b6272:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b6276:	2b01      	cmp	r3, #1
   b6278:	d005      	beq.n	b6286 <_Z18custom_scan_paramsv+0x26>
   b627a:	3b04      	subs	r3, #4
   b627c:	2b01      	cmp	r3, #1
            scanParams.scan_phys != BLE_PHYS_CODED &&
            scanParams.scan_phys != (BLE_PHYS_1MBPS | BLE_PHYS_CODED))
                scanParams.scan_phys = BLE_PHYS_1MBPS;
   b627e:	bf84      	itt	hi
   b6280:	2301      	movhi	r3, #1
   b6282:	f88d 300c 	strbhi.w	r3, [sp, #12]
#endif
    scanParams.interval = 80;   // 50ms
   b6286:	2350      	movs	r3, #80	; 0x50
   b6288:	f8ad 3004 	strh.w	r3, [sp, #4]
    scanParams.window = 40;     // 25ms
   b628c:	2328      	movs	r3, #40	; 0x28
   b628e:	f8ad 3006 	strh.w	r3, [sp, #6]
    scanParams.timeout = 15;    // 150ms
   b6292:	230f      	movs	r3, #15
   b6294:	f8ad 3008 	strh.w	r3, [sp, #8]
    scanParams.active = true;
   b6298:	2301      	movs	r3, #1
   b629a:	f8ad 300a 	strh.w	r3, [sp, #10]
    scanParams.filter_policy = BLE_SCAN_FP_ACCEPT_ALL;
    BLE.setScanParameters(&scanParams); 
   b629e:	f002 fa35 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b62a2:	4669      	mov	r1, sp
   b62a4:	f002 fa9f 	bl	b87e6 <_ZNK8particle14BleLocalDevice17setScanParametersEPKNS_13BleScanParamsE>
}
   b62a8:	b005      	add	sp, #20
   b62aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b62ae <_ZN8particle13BleScanResultD1Ev>:
class BleScanResult {
   b62ae:	b510      	push	{r4, lr}
   b62b0:	4604      	mov	r4, r0
    ::free(ptr);
   b62b2:	6940      	ldr	r0, [r0, #20]
   b62b4:	f001 fa40 	bl	b7738 <free>
   b62b8:	68a0      	ldr	r0, [r4, #8]
   b62ba:	f001 fa3d 	bl	b7738 <free>
   b62be:	4620      	mov	r0, r4
   b62c0:	bd10      	pop	{r4, pc}
	...

000b62c4 <_ZN13Beaconscanner15startContinuousEi>:
        _instance->_scan_done = true;
        os_thread_yield();
    }
}

void Beaconscanner::startContinuous(int flags) {
   b62c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    _flags = flags;
    _run = true;
    if (_thread == nullptr) 
   b62c6:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    _flags = flags;
   b62c8:	6081      	str	r1, [r0, #8]
    _run = true;
   b62ca:	2301      	movs	r3, #1
void Beaconscanner::startContinuous(int flags) {
   b62cc:	4604      	mov	r4, r0
    _run = true;
   b62ce:	7183      	strb	r3, [r0, #6]
    if (_thread == nullptr) 
   b62d0:	b97e      	cbnz	r6, b62f2 <_ZN13Beaconscanner15startContinuousEi+0x2e>
        _thread = new Thread("scan_thread", scan_thread);
   b62d2:	2004      	movs	r0, #4
   b62d4:	f7fd fedd 	bl	b4092 <_Znwj>
   b62d8:	4605      	mov	r5, r0
   b62da:	b148      	cbz	r0, b62f0 <_ZN13Beaconscanner15startContinuousEi+0x2c>
   b62dc:	2302      	movs	r3, #2
   b62de:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b62e2:	e9cd 3200 	strd	r3, r2, [sp]
   b62e6:	4904      	ldr	r1, [pc, #16]	; (b62f8 <_ZN13Beaconscanner15startContinuousEi+0x34>)
   b62e8:	4a04      	ldr	r2, [pc, #16]	; (b62fc <_ZN13Beaconscanner15startContinuousEi+0x38>)
   b62ea:	4633      	mov	r3, r6
   b62ec:	f7ff ff74 	bl	b61d8 <_ZN6ThreadC1EPKcPFvPvES2_hj>
   b62f0:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   b62f2:	b002      	add	sp, #8
   b62f4:	bd70      	pop	{r4, r5, r6, pc}
   b62f6:	bf00      	nop
   b62f8:	000bc2f0 	.word	0x000bc2f0
   b62fc:	000b6645 	.word	0x000b6645

000b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6300:	b570      	push	{r4, r5, r6, lr}
   b6302:	4604      	mov	r4, r0
        capacity_(0) {
   b6304:	2000      	movs	r0, #0
   b6306:	e9c4 0000 	strd	r0, r0, [r4]
   b630a:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b630c:	684e      	ldr	r6, [r1, #4]
   b630e:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6310:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6312:	dd11      	ble.n	b6338 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x38>
    return ::realloc(ptr, size);
   b6314:	4631      	mov	r1, r6
   b6316:	f001 fa17 	bl	b7748 <realloc>
            if (!d) {
   b631a:	b168      	cbz	r0, b6338 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x38>
        data_ = d;
   b631c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b631e:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6320:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6324:	441a      	add	r2, r3
        for (; it != end; ++it, ++dest) {
   b6326:	429a      	cmp	r2, r3
   b6328:	d004      	beq.n	b6334 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x34>
            new(dest) T(*it);
   b632a:	f813 1b01 	ldrb.w	r1, [r3], #1
   b632e:	f800 1b01 	strb.w	r1, [r0], #1
        for (; it != end; ++it, ++dest) {
   b6332:	e7f8      	b.n	b6326 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x26>
        size_ = vector.size_;
   b6334:	686b      	ldr	r3, [r5, #4]
   b6336:	6063      	str	r3, [r4, #4]
}
   b6338:	4620      	mov	r0, r4
   b633a:	bd70      	pop	{r4, r5, r6, pc}

000b633c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>:
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
   b633c:	b570      	push	{r4, r5, r6, lr}
    return find(data_, data_ + size_, value);
   b633e:	e9d0 4500 	ldrd	r4, r5, [r0]
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
   b6342:	460e      	mov	r6, r1
    return find(data_, data_ + size_, value);
   b6344:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        for (; p != end; ++p) {
   b6348:	42a5      	cmp	r5, r4
   b634a:	d006      	beq.n	b635a <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0x1e>
            if (*p == value) {
   b634c:	4631      	mov	r1, r6
   b634e:	4620      	mov	r0, r4
   b6350:	f001 fd9b 	bl	b7e8a <_ZNK8particle10BleAddresseqERKS0_>
   b6354:	b910      	cbnz	r0, b635c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0x20>
        for (; p != end; ++p) {
   b6356:	3408      	adds	r4, #8
   b6358:	e7f6      	b.n	b6348 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0xc>
        return nullptr;
   b635a:	2400      	movs	r4, #0
}
   b635c:	1e20      	subs	r0, r4, #0
   b635e:	bf18      	it	ne
   b6360:	2001      	movne	r0, #1
   b6362:	bd70      	pop	{r4, r5, r6, pc}

000b6364 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6364:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6366:	e9d0 5300 	ldrd	r5, r3, [r0]
   b636a:	2624      	movs	r6, #36	; 0x24
inline spark::Vector<T, AllocatorT>::~Vector() {
   b636c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b636e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6372:	42ae      	cmp	r6, r5
   b6374:	d004      	beq.n	b6380 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
   b6376:	4628      	mov	r0, r5
   b6378:	f7ff ff99 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b637c:	3524      	adds	r5, #36	; 0x24
   b637e:	e7f8      	b.n	b6372 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6380:	6820      	ldr	r0, [r4, #0]
   b6382:	f001 f9d9 	bl	b7738 <free>
}
   b6386:	4620      	mov	r0, r4
   b6388:	bd70      	pop	{r4, r5, r6, pc}

000b638a <_ZN8particle13BleScanResultC1EOS0_>:
   b638a:	b538      	push	{r3, r4, r5, lr}
   b638c:	4604      	mov	r4, r0
   b638e:	460d      	mov	r5, r1
   b6390:	f001 fd64 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
class BleAdvertisingData {
   b6394:	f105 0108 	add.w	r1, r5, #8
   b6398:	f104 0008 	add.w	r0, r4, #8
   b639c:	f7ff ffb0 	bl	b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b63a0:	f105 0114 	add.w	r1, r5, #20
   b63a4:	f104 0014 	add.w	r0, r4, #20
   b63a8:	f7ff ffaa 	bl	b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b63ac:	f895 3020 	ldrb.w	r3, [r5, #32]
   b63b0:	f884 3020 	strb.w	r3, [r4, #32]
   b63b4:	4620      	mov	r0, r4
   b63b6:	bd38      	pop	{r3, r4, r5, pc}

000b63b8 <_ZN6BeaconC1ERKS_>:
class Beacon {
   b63b8:	b538      	push	{r3, r4, r5, lr}
   b63ba:	4b09      	ldr	r3, [pc, #36]	; (b63e0 <_ZN6BeaconC1ERKS_+0x28>)
   b63bc:	888a      	ldrh	r2, [r1, #4]
   b63be:	6003      	str	r3, [r0, #0]
   b63c0:	460d      	mov	r5, r1
   b63c2:	798b      	ldrb	r3, [r1, #6]
   b63c4:	8082      	strh	r2, [r0, #4]
   b63c6:	4604      	mov	r4, r0
   b63c8:	7183      	strb	r3, [r0, #6]
   b63ca:	3107      	adds	r1, #7
   b63cc:	3007      	adds	r0, #7
   b63ce:	f001 fd45 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
   b63d2:	8a2b      	ldrh	r3, [r5, #16]
   b63d4:	8223      	strh	r3, [r4, #16]
   b63d6:	7cab      	ldrb	r3, [r5, #18]
   b63d8:	74a3      	strb	r3, [r4, #18]
   b63da:	4620      	mov	r0, r4
   b63dc:	bd38      	pop	{r3, r4, r5, pc}
   b63de:	bf00      	nop
   b63e0:	000bc044 	.word	0x000bc044

000b63e4 <_ZN9EddystoneC1ERKS_>:

#include "beacon.h"

// Eddystone specification: https://github.com/google/eddystone/blob/master/protocol-specification.md

class Eddystone : public Beacon
   b63e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63e6:	4607      	mov	r7, r0
   b63e8:	460c      	mov	r4, r1
   b63ea:	463d      	mov	r5, r7
   b63ec:	f7ff ffe4 	bl	b63b8 <_ZN6BeaconC1ERKS_>
   b63f0:	f104 0614 	add.w	r6, r4, #20
   b63f4:	4b13      	ldr	r3, [pc, #76]	; (b6444 <_ZN9EddystoneC1ERKS_+0x60>)
   b63f6:	f845 3b14 	str.w	r3, [r5], #20
   b63fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b63fe:	e896 0003 	ldmia.w	r6, {r0, r1}
   b6402:	f845 0b04 	str.w	r0, [r5], #4
   b6406:	f104 032a 	add.w	r3, r4, #42	; 0x2a
   b640a:	8029      	strh	r1, [r5, #0]
   b640c:	f107 022a 	add.w	r2, r7, #42	; 0x2a
   b6410:	f104 0142 	add.w	r1, r4, #66	; 0x42
   b6414:	f853 0b04 	ldr.w	r0, [r3], #4
   b6418:	f842 0b04 	str.w	r0, [r2], #4
   b641c:	428b      	cmp	r3, r1
   b641e:	d1f9      	bne.n	b6414 <_ZN9EddystoneC1ERKS_+0x30>
   b6420:	881b      	ldrh	r3, [r3, #0]
   b6422:	8013      	strh	r3, [r2, #0]
   b6424:	f104 0344 	add.w	r3, r4, #68	; 0x44
   b6428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b642a:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b642e:	3454      	adds	r4, #84	; 0x54
   b6430:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b6434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b6438:	f107 0554 	add.w	r5, r7, #84	; 0x54
   b643c:	c507      	stmia	r5!, {r0, r1, r2}
   b643e:	802b      	strh	r3, [r5, #0]
   b6440:	4638      	mov	r0, r7
   b6442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6444:	000bc408 	.word	0x000bc408

000b6448 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6448:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b644a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b644c:	4604      	mov	r4, r0
   b644e:	460d      	mov	r5, r1
   b6450:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6452:	d911      	bls.n	b6478 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b6454:	4290      	cmp	r0, r2
   b6456:	d210      	bcs.n	b647a <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b6458:	f1a2 0664 	sub.w	r6, r2, #100	; 0x64
            dest += end - p - 1;
   b645c:	1a75      	subs	r5, r6, r1
   b645e:	f1a1 0764 	sub.w	r7, r1, #100	; 0x64
   b6462:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6464:	42b7      	cmp	r7, r6
   b6466:	d012      	beq.n	b648e <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b6468:	b11c      	cbz	r4, b6472 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b646a:	4631      	mov	r1, r6
   b646c:	4620      	mov	r0, r4
   b646e:	f7ff ffb9 	bl	b63e4 <_ZN9EddystoneC1ERKS_>
            for (; end != p; --end, --dest) {
   b6472:	3e64      	subs	r6, #100	; 0x64
   b6474:	3c64      	subs	r4, #100	; 0x64
   b6476:	e7f5      	b.n	b6464 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6478:	d009      	beq.n	b648e <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b647a:	42b5      	cmp	r5, r6
   b647c:	d007      	beq.n	b648e <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b647e:	b11c      	cbz	r4, b6488 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b6480:	4629      	mov	r1, r5
   b6482:	4620      	mov	r0, r4
   b6484:	f7ff ffae 	bl	b63e4 <_ZN9EddystoneC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b6488:	3564      	adds	r5, #100	; 0x64
   b648a:	3464      	adds	r4, #100	; 0x64
   b648c:	e7f5      	b.n	b647a <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b648e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6490 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6490:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6494:	4604      	mov	r4, r0
   b6496:	460d      	mov	r5, r1
   b6498:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b649a:	d914      	bls.n	b64c6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b649c:	4290      	cmp	r0, r2
   b649e:	d213      	bcs.n	b64c8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b64a0:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b64a4:	1a75      	subs	r5, r6, r1
   b64a6:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b64aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b64ac:	42b7      	cmp	r7, r6
   b64ae:	d018      	beq.n	b64e2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b64b0:	b11c      	cbz	r4, b64ba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b64b2:	4631      	mov	r1, r6
   b64b4:	4620      	mov	r0, r4
   b64b6:	f7ff ff68 	bl	b638a <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b64ba:	4630      	mov	r0, r6
   b64bc:	f7ff fef7 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b64c0:	3e24      	subs	r6, #36	; 0x24
   b64c2:	3c24      	subs	r4, #36	; 0x24
   b64c4:	e7f2      	b.n	b64ac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b64c6:	d00c      	beq.n	b64e2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b64c8:	42b5      	cmp	r5, r6
   b64ca:	d00a      	beq.n	b64e2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b64cc:	b11c      	cbz	r4, b64d6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b64ce:	4629      	mov	r1, r5
   b64d0:	4620      	mov	r0, r4
   b64d2:	f7ff ff5a 	bl	b638a <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b64d6:	4628      	mov	r0, r5
   b64d8:	f7ff fee9 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b64dc:	3524      	adds	r5, #36	; 0x24
   b64de:	3424      	adds	r4, #36	; 0x24
   b64e0:	e7f2      	b.n	b64c8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b64e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b64e4 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE>:
void Beaconscanner::processScan(Vector<BleScanResult> scans) {
   b64e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64e8:	4604      	mov	r4, r0
   b64ea:	b08a      	sub	sp, #40	; 0x28
   b64ec:	460d      	mov	r5, r1
    move(p, p + 1, data_ + size_);
   b64ee:	2724      	movs	r7, #36	; 0x24
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b64f0:	f100 081c 	add.w	r8, r0, #28
    while(!scans.isEmpty()) {
   b64f4:	686b      	ldr	r3, [r5, #4]
   b64f6:	2b00      	cmp	r3, #0
   b64f8:	d061      	beq.n	b65be <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xda>
    T* const p = data_ + i;
   b64fa:	682e      	ldr	r6, [r5, #0]
    T v(std::move(*p));
   b64fc:	a801      	add	r0, sp, #4
   b64fe:	4631      	mov	r1, r6
   b6500:	f7ff ff43 	bl	b638a <_ZN8particle13BleScanResultC1EOS0_>
    p->~T();
   b6504:	4630      	mov	r0, r6
   b6506:	f7ff fed2 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
    move(p, p + 1, data_ + size_);
   b650a:	e9d5 3200 	ldrd	r3, r2, [r5]
   b650e:	4630      	mov	r0, r6
   b6510:	fb07 3202 	mla	r2, r7, r2, r3
   b6514:	f106 0124 	add.w	r1, r6, #36	; 0x24
   b6518:	f7ff ffba 	bl	b6490 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b651c:	686b      	ldr	r3, [r5, #4]
   b651e:	3b01      	subs	r3, #1
   b6520:	606b      	str	r3, [r5, #4]
        else if ((_flags & SCAN_IBEACON) && iBeaconScan::isBeacon(scanResult) && !iPublished.contains(ADDRESS(scanResult)))
   b6522:	68a3      	ldr	r3, [r4, #8]
   b6524:	07d8      	lsls	r0, r3, #31
   b6526:	d510      	bpl.n	b654a <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
   b6528:	a801      	add	r0, sp, #4
   b652a:	f7ff fd39 	bl	b5fa0 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE>
   b652e:	b160      	cbz	r0, b654a <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
   b6530:	a901      	add	r1, sp, #4
   b6532:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6536:	f7ff ff01 	bl	b633c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b653a:	b930      	cbnz	r0, b654a <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
            iBeaconScan::addOrUpdate(scanResult);
   b653c:	a801      	add	r0, sp, #4
   b653e:	f7ff fda1 	bl	b6084 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE>
        BleScanResult scan = scans.takeFirst();
   b6542:	a801      	add	r0, sp, #4
   b6544:	f7ff feb3 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
    while(!scans.isEmpty()) {
   b6548:	e7d4      	b.n	b64f4 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x10>
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b654a:	68a3      	ldr	r3, [r4, #8]
   b654c:	0799      	lsls	r1, r3, #30
   b654e:	d410      	bmi.n	b6572 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x8e>
        else if ((_flags & SCAN_EDDYSTONE) && Eddystone::isBeacon(scanResult) && !ePublished.contains(ADDRESS(scanResult)))
   b6550:	68a3      	ldr	r3, [r4, #8]
   b6552:	075a      	lsls	r2, r3, #29
   b6554:	d51c      	bpl.n	b6590 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
   b6556:	a801      	add	r0, sp, #4
   b6558:	f000 fa0e 	bl	b6978 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE>
   b655c:	b1c0      	cbz	r0, b6590 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
   b655e:	a901      	add	r1, sp, #4
   b6560:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6564:	f7ff feea 	bl	b633c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6568:	b990      	cbnz	r0, b6590 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
            Eddystone::addOrUpdate(scanResult);
   b656a:	a801      	add	r0, sp, #4
   b656c:	f000 fd2e 	bl	b6fcc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE>
   b6570:	e7e7      	b.n	b6542 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b6572:	a801      	add	r0, sp, #4
   b6574:	f7fe fb7e 	bl	b4c74 <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE>
   b6578:	2800      	cmp	r0, #0
   b657a:	d0e9      	beq.n	b6550 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x6c>
   b657c:	a901      	add	r1, sp, #4
   b657e:	4640      	mov	r0, r8
   b6580:	f7ff fedc 	bl	b633c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6584:	2800      	cmp	r0, #0
   b6586:	d1e3      	bne.n	b6550 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x6c>
            KontaktTag::addOrUpdate(scanResult);
   b6588:	a801      	add	r0, sp, #4
   b658a:	f7fe fbdf 	bl	b4d4c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE>
   b658e:	e7d8      	b.n	b6542 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if ((_flags & SCAN_LAIRDBT510) && LairdBt510::isBeacon(scanResult) && !lPublished.contains(ADDRESS(scanResult)))
   b6590:	68a3      	ldr	r3, [r4, #8]
   b6592:	071b      	lsls	r3, r3, #28
   b6594:	d50d      	bpl.n	b65b2 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
   b6596:	a801      	add	r0, sp, #4
   b6598:	f7fe fd6c 	bl	b5074 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE>
   b659c:	b148      	cbz	r0, b65b2 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
   b659e:	a901      	add	r1, sp, #4
   b65a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b65a4:	f7ff feca 	bl	b633c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b65a8:	b918      	cbnz	r0, b65b2 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
            LairdBt510::addOrUpdate(scanResult);          
   b65aa:	a801      	add	r0, sp, #4
   b65ac:	f7ff f8c2 	bl	b5734 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE>
   b65b0:	e7c7      	b.n	b6542 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if (_customCallback) {
   b65b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b65b4:	2b00      	cmp	r3, #0
   b65b6:	d0c4      	beq.n	b6542 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
            _customCallback(scanResult);
   b65b8:	a801      	add	r0, sp, #4
   b65ba:	4798      	blx	r3
   b65bc:	e7c1      	b.n	b6542 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
}
   b65be:	b00a      	add	sp, #40	; 0x28
   b65c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b65c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b65c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b65c8:	2300      	movs	r3, #0
   b65ca:	e9c0 3300 	strd	r3, r3, [r0]
   b65ce:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b65d0:	684e      	ldr	r6, [r1, #4]
   b65d2:	429e      	cmp	r6, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b65d4:	4604      	mov	r4, r0
   b65d6:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b65d8:	dd31      	ble.n	b663e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x7a>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b65da:	f04f 0824 	mov.w	r8, #36	; 0x24
    return ::malloc(size);
   b65de:	fb08 f006 	mul.w	r0, r8, r6
   b65e2:	f001 f8a1 	bl	b7728 <malloc>
            if (!d) {
   b65e6:	4605      	mov	r5, r0
   b65e8:	b348      	cbz	r0, b663e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x7a>
            move(d, data_, data_ + size_);
   b65ea:	e9d4 1200 	ldrd	r1, r2, [r4]
   b65ee:	fb08 1202 	mla	r2, r8, r2, r1
   b65f2:	f7ff ff4d 	bl	b6490 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b65f6:	6820      	ldr	r0, [r4, #0]
   b65f8:	f001 f89e 	bl	b7738 <free>
        data_ = d;
   b65fc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b65fe:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6600:	e9d7 6300 	ldrd	r6, r3, [r7]
   b6604:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   b6608:	45b0      	cmp	r8, r6
   b660a:	d016      	beq.n	b663a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x76>
   b660c:	4631      	mov	r1, r6
   b660e:	4628      	mov	r0, r5
   b6610:	f001 fc24 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
class BleAdvertisingData {
   b6614:	f106 0108 	add.w	r1, r6, #8
   b6618:	f105 0008 	add.w	r0, r5, #8
   b661c:	f7ff fe70 	bl	b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6620:	f106 0114 	add.w	r1, r6, #20
   b6624:	f105 0014 	add.w	r0, r5, #20
   b6628:	f7ff fe6a 	bl	b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b662c:	f996 3020 	ldrsb.w	r3, [r6, #32]
   b6630:	f885 3020 	strb.w	r3, [r5, #32]
   b6634:	3624      	adds	r6, #36	; 0x24
   b6636:	3524      	adds	r5, #36	; 0x24
   b6638:	e7e6      	b.n	b6608 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x44>
        size_ = vector.size_;
   b663a:	687b      	ldr	r3, [r7, #4]
   b663c:	6063      	str	r3, [r4, #4]
}
   b663e:	4620      	mov	r0, r4
   b6640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6644 <_ZN13Beaconscanner11scan_threadEPv>:
void Beaconscanner::scan_thread(void *param) {
   b6644:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (!_instance->_run) {
   b6646:	4c1a      	ldr	r4, [pc, #104]	; (b66b0 <_ZN13Beaconscanner11scan_threadEPv+0x6c>)
void Beaconscanner::scan_thread(void *param) {
   b6648:	b087      	sub	sp, #28
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b664a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
        if (!_instance->_run) {
   b664e:	6823      	ldr	r3, [r4, #0]
   b6650:	799b      	ldrb	r3, [r3, #6]
   b6652:	b913      	cbnz	r3, b665a <_ZN13Beaconscanner11scan_threadEPv+0x16>
        os_thread_yield();
   b6654:	f000 fe64 	bl	b7320 <os_thread_yield>
   b6658:	e7f9      	b.n	b664e <_ZN13Beaconscanner11scan_threadEPv+0xa>
        custom_scan_params();
   b665a:	f7ff fe01 	bl	b6260 <_Z18custom_scan_paramsv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b665e:	f000 fd8b 	bl	b7178 <HAL_Timer_Get_Milli_Seconds>
   b6662:	4605      	mov	r5, r0
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b6664:	6823      	ldr	r3, [r4, #0]
   b6666:	799b      	ldrb	r3, [r3, #6]
   b6668:	b1eb      	cbz	r3, b66a6 <_ZN13Beaconscanner11scan_threadEPv+0x62>
   b666a:	f000 fd85 	bl	b7178 <HAL_Timer_Get_Milli_Seconds>
   b666e:	6823      	ldr	r3, [r4, #0]
   b6670:	7b5b      	ldrb	r3, [r3, #13]
   b6672:	1b40      	subs	r0, r0, r5
   b6674:	4373      	muls	r3, r6
   b6676:	4298      	cmp	r0, r3
   b6678:	d215      	bcs.n	b66a6 <_ZN13Beaconscanner11scan_threadEPv+0x62>
            Vector<BleScanResult> cur_responses = BLE.scan();
   b667a:	f002 f847 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b667e:	4601      	mov	r1, r0
   b6680:	4668      	mov	r0, sp
   b6682:	f003 fc69 	bl	b9f58 <_ZNK8particle14BleLocalDevice4scanEv>
            _instance->processScan(cur_responses);
   b6686:	6827      	ldr	r7, [r4, #0]
   b6688:	4669      	mov	r1, sp
   b668a:	a803      	add	r0, sp, #12
   b668c:	f7ff ff9a 	bl	b65c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
   b6690:	a903      	add	r1, sp, #12
   b6692:	4638      	mov	r0, r7
   b6694:	f7ff ff26 	bl	b64e4 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE>
   b6698:	a803      	add	r0, sp, #12
   b669a:	f7ff fe63 	bl	b6364 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>
            Vector<BleScanResult> cur_responses = BLE.scan();
   b669e:	4668      	mov	r0, sp
   b66a0:	f7ff fe60 	bl	b6364 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b66a4:	e7de      	b.n	b6664 <_ZN13Beaconscanner11scan_threadEPv+0x20>
        _instance->_scan_done = true;
   b66a6:	6823      	ldr	r3, [r4, #0]
   b66a8:	2201      	movs	r2, #1
   b66aa:	71da      	strb	r2, [r3, #7]
   b66ac:	e7d2      	b.n	b6654 <_ZN13Beaconscanner11scan_threadEPv+0x10>
   b66ae:	bf00      	nop
   b66b0:	2003e690 	.word	0x2003e690

000b66b4 <_ZN13Beaconscanner4loopEv>:

void Beaconscanner::stopContinuous() {
    _run = false;
}

void Beaconscanner::loop() {
   b66b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_;
   b66b8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; b6968 <_ZN13Beaconscanner4loopEv+0x2b4>
    return data_ + size_;
   b66bc:	e9d9 5300 	ldrd	r5, r3, [r9]
   b66c0:	4604      	mov	r4, r0
   b66c2:	eb05 1683 	add.w	r6, r5, r3, lsl #6
#ifdef SUPPORT_IBEACON
    for (auto& i : iBeaconScan::beacons) {
        if (_callback && i.newly_scanned) {
            _callback(i, NEW);
            i.newly_scanned = false;
   b66c6:	2700      	movs	r7, #0
    for (auto& i : iBeaconScan::beacons) {
   b66c8:	42ae      	cmp	r6, r5
   b66ca:	d009      	beq.n	b66e0 <_ZN13Beaconscanner4loopEv+0x2c>
        if (_callback && i.newly_scanned) {
   b66cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b66ce:	b12b      	cbz	r3, b66dc <_ZN13Beaconscanner4loopEv+0x28>
   b66d0:	796a      	ldrb	r2, [r5, #5]
   b66d2:	b11a      	cbz	r2, b66dc <_ZN13Beaconscanner4loopEv+0x28>
            _callback(i, NEW);
   b66d4:	2101      	movs	r1, #1
   b66d6:	4628      	mov	r0, r5
   b66d8:	4798      	blx	r3
            i.newly_scanned = false;
   b66da:	716f      	strb	r7, [r5, #5]
    for (auto& i : iBeaconScan::beacons) {
   b66dc:	3540      	adds	r5, #64	; 0x40
   b66de:	e7f3      	b.n	b66c8 <_ZN13Beaconscanner4loopEv+0x14>
    return data_;
   b66e0:	f8df 8288 	ldr.w	r8, [pc, #648]	; b696c <_ZN13Beaconscanner4loopEv+0x2b8>
    return data_ + size_;
   b66e4:	e9d8 5300 	ldrd	r5, r3, [r8]
   b66e8:	2664      	movs	r6, #100	; 0x64
   b66ea:	fb06 5603 	mla	r6, r6, r3, r5
#endif
#ifdef SUPPORT_EDDYSTONE
    for (auto& e : Eddystone::beacons) {
        if (_callback && e.newly_scanned) {
            _callback(e, NEW);
            e.newly_scanned = false;
   b66ee:	2700      	movs	r7, #0
    for (auto& e : Eddystone::beacons) {
   b66f0:	42ae      	cmp	r6, r5
   b66f2:	d009      	beq.n	b6708 <_ZN13Beaconscanner4loopEv+0x54>
        if (_callback && e.newly_scanned) {
   b66f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b66f6:	b12b      	cbz	r3, b6704 <_ZN13Beaconscanner4loopEv+0x50>
   b66f8:	796a      	ldrb	r2, [r5, #5]
   b66fa:	b11a      	cbz	r2, b6704 <_ZN13Beaconscanner4loopEv+0x50>
            _callback(e, NEW);
   b66fc:	2101      	movs	r1, #1
   b66fe:	4628      	mov	r0, r5
   b6700:	4798      	blx	r3
            e.newly_scanned = false;
   b6702:	716f      	strb	r7, [r5, #5]
    for (auto& e : Eddystone::beacons) {
   b6704:	3564      	adds	r5, #100	; 0x64
   b6706:	e7f3      	b.n	b66f0 <_ZN13Beaconscanner4loopEv+0x3c>
    return data_;
   b6708:	4f95      	ldr	r7, [pc, #596]	; (b6960 <_ZN13Beaconscanner4loopEv+0x2ac>)
    return data_ + size_;
   b670a:	e9d7 5300 	ldrd	r5, r3, [r7]
   b670e:	2624      	movs	r6, #36	; 0x24
   b6710:	fb06 5603 	mla	r6, r6, r3, r5
#endif
#ifdef SUPPORT_KONTAKT
    for (KontaktTag& k : KontaktTag::beacons) {
        if (_callback && k.newly_scanned) {
            _callback(k, NEW);
            k.newly_scanned = false;
   b6714:	f04f 0a00 	mov.w	sl, #0
    for (KontaktTag& k : KontaktTag::beacons) {
   b6718:	42ae      	cmp	r6, r5
   b671a:	d00a      	beq.n	b6732 <_ZN13Beaconscanner4loopEv+0x7e>
        if (_callback && k.newly_scanned) {
   b671c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b671e:	b133      	cbz	r3, b672e <_ZN13Beaconscanner4loopEv+0x7a>
   b6720:	796a      	ldrb	r2, [r5, #5]
   b6722:	b122      	cbz	r2, b672e <_ZN13Beaconscanner4loopEv+0x7a>
            _callback(k, NEW);
   b6724:	2101      	movs	r1, #1
   b6726:	4628      	mov	r0, r5
   b6728:	4798      	blx	r3
            k.newly_scanned = false;
   b672a:	f885 a005 	strb.w	sl, [r5, #5]
    for (KontaktTag& k : KontaktTag::beacons) {
   b672e:	3524      	adds	r5, #36	; 0x24
   b6730:	e7f2      	b.n	b6718 <_ZN13Beaconscanner4loopEv+0x64>
    return data_;
   b6732:	4e8c      	ldr	r6, [pc, #560]	; (b6964 <_ZN13Beaconscanner4loopEv+0x2b0>)
    return data_ + size_;
   b6734:	e9d6 5300 	ldrd	r5, r3, [r6]
   b6738:	f04f 0a88 	mov.w	sl, #136	; 0x88
   b673c:	fb0a 5a03 	mla	sl, sl, r3, r5
#endif
#ifdef SUPPORT_LAIRDBT510
    for (LairdBt510& l : LairdBt510::beacons) {
        if (_callback && l.newly_scanned) {
            _callback(l, NEW);
            l.newly_scanned = false;
   b6740:	f04f 0b00 	mov.w	fp, #0
    for (LairdBt510& l : LairdBt510::beacons) {
   b6744:	4555      	cmp	r5, sl
   b6746:	d00d      	beq.n	b6764 <_ZN13Beaconscanner4loopEv+0xb0>
        if (_callback && l.newly_scanned) {
   b6748:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b674a:	b133      	cbz	r3, b675a <_ZN13Beaconscanner4loopEv+0xa6>
   b674c:	796a      	ldrb	r2, [r5, #5]
   b674e:	b122      	cbz	r2, b675a <_ZN13Beaconscanner4loopEv+0xa6>
            _callback(l, NEW);
   b6750:	2101      	movs	r1, #1
   b6752:	4628      	mov	r0, r5
   b6754:	4798      	blx	r3
            l.newly_scanned = false;
   b6756:	f885 b005 	strb.w	fp, [r5, #5]
        }
        l.loop();
   b675a:	4628      	mov	r0, r5
   b675c:	f7ff fa12 	bl	b5b84 <_ZN10LairdBt5104loopEv>
    for (LairdBt510& l : LairdBt510::beacons) {
   b6760:	3588      	adds	r5, #136	; 0x88
   b6762:	e7ef      	b.n	b6744 <_ZN13Beaconscanner4loopEv+0x90>
    }
#endif

    if (_scan_done) {
   b6764:	79e3      	ldrb	r3, [r4, #7]
   b6766:	2b00      	cmp	r3, #0
   b6768:	f000 80dd 	beq.w	b6926 <_ZN13Beaconscanner4loopEv+0x272>
   b676c:	e9d9 5300 	ldrd	r5, r3, [r9]
        for (auto& i : iBeaconScan::beacons) {
            if (i.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(i, REMOVED);
                }
                i.missed_scan = -1; // Use an invalid value to mark for removal
   b6770:	f04f 0bff 	mov.w	fp, #255	; 0xff
   b6774:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
        for (auto& i : iBeaconScan::beacons) {
   b6778:	45aa      	cmp	sl, r5
   b677a:	d010      	beq.n	b679e <_ZN13Beaconscanner4loopEv+0xea>
            if (i.missed_scan >= _clear_missed) {
   b677c:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6780:	7b22      	ldrb	r2, [r4, #12]
   b6782:	4293      	cmp	r3, r2
   b6784:	db08      	blt.n	b6798 <_ZN13Beaconscanner4loopEv+0xe4>
                if (_callback) {
   b6786:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6788:	b113      	cbz	r3, b6790 <_ZN13Beaconscanner4loopEv+0xdc>
                    _callback(i, REMOVED);
   b678a:	2102      	movs	r1, #2
   b678c:	4628      	mov	r0, r5
   b678e:	4798      	blx	r3
                i.missed_scan = -1; // Use an invalid value to mark for removal
   b6790:	f885 b004 	strb.w	fp, [r5, #4]
        for (auto& i : iBeaconScan::beacons) {
   b6794:	3540      	adds	r5, #64	; 0x40
   b6796:	e7ef      	b.n	b6778 <_ZN13Beaconscanner4loopEv+0xc4>
            } else {
                i.missed_scan++;
   b6798:	3301      	adds	r3, #1
   b679a:	712b      	strb	r3, [r5, #4]
   b679c:	e7fa      	b.n	b6794 <_ZN13Beaconscanner4loopEv+0xe0>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b679e:	a801      	add	r0, sp, #4
   b67a0:	f7ff fd0a 	bl	b61b8 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < iBeaconScan::beacons.size(); i++) {
   b67a4:	2500      	movs	r5, #0
    return size_;
   b67a6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   b67aa:	4295      	cmp	r5, r2
   b67ac:	db1a      	blt.n	b67e4 <_ZN13Beaconscanner4loopEv+0x130>
        SINGLE_THREADED_BLOCK() {
   b67ae:	a801      	add	r0, sp, #4
   b67b0:	f7ff fd0a 	bl	b61c8 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b67b4:	e9d8 5300 	ldrd	r5, r3, [r8]
   b67b8:	f04f 0964 	mov.w	r9, #100	; 0x64
   b67bc:	fb09 5903 	mla	r9, r9, r3, r5
        for (auto& e : Eddystone::beacons) {
            if (e.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(e, REMOVED);
                }
                e.missed_scan = -1;
   b67c0:	f04f 0aff 	mov.w	sl, #255	; 0xff
        for (auto& e : Eddystone::beacons) {
   b67c4:	45a9      	cmp	r9, r5
   b67c6:	d026      	beq.n	b6816 <_ZN13Beaconscanner4loopEv+0x162>
            if (e.missed_scan >= _clear_missed) {
   b67c8:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b67cc:	7b22      	ldrb	r2, [r4, #12]
   b67ce:	4293      	cmp	r3, r2
   b67d0:	db1e      	blt.n	b6810 <_ZN13Beaconscanner4loopEv+0x15c>
                if (_callback) {
   b67d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b67d4:	b113      	cbz	r3, b67dc <_ZN13Beaconscanner4loopEv+0x128>
                    _callback(e, REMOVED);
   b67d6:	2102      	movs	r1, #2
   b67d8:	4628      	mov	r0, r5
   b67da:	4798      	blx	r3
                e.missed_scan = -1;
   b67dc:	f885 a004 	strb.w	sl, [r5, #4]
        for (auto& e : Eddystone::beacons) {
   b67e0:	3564      	adds	r5, #100	; 0x64
   b67e2:	e7ef      	b.n	b67c4 <_ZN13Beaconscanner4loopEv+0x110>
    return data_[i];
   b67e4:	f8d9 3000 	ldr.w	r3, [r9]
   b67e8:	eb03 1085 	add.w	r0, r3, r5, lsl #6
                if (iBeaconScan::beacons.at(i).missed_scan < 0) {
   b67ec:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b67f0:	2900      	cmp	r1, #0
   b67f2:	da0b      	bge.n	b680c <_ZN13Beaconscanner4loopEv+0x158>
    move(p, p + n, data_ + size_);
   b67f4:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   b67f8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   b67fc:	f7ff fc1e 	bl	b603c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b6800:	f8d9 3004 	ldr.w	r3, [r9, #4]
   b6804:	3b01      	subs	r3, #1
   b6806:	f8c9 3004 	str.w	r3, [r9, #4]
                    i--;
   b680a:	3d01      	subs	r5, #1
            for (int i = 0; i < iBeaconScan::beacons.size(); i++) {
   b680c:	3501      	adds	r5, #1
   b680e:	e7ca      	b.n	b67a6 <_ZN13Beaconscanner4loopEv+0xf2>
            } else {
                e.missed_scan++;
   b6810:	3301      	adds	r3, #1
   b6812:	712b      	strb	r3, [r5, #4]
   b6814:	e7e4      	b.n	b67e0 <_ZN13Beaconscanner4loopEv+0x12c>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b6816:	a801      	add	r0, sp, #4
   b6818:	f7ff fcce 	bl	b61b8 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < Eddystone::beacons.size(); i++) {
   b681c:	2500      	movs	r5, #0
    return data_[i];
   b681e:	f04f 0964 	mov.w	r9, #100	; 0x64
    return size_;
   b6822:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b6826:	4295      	cmp	r5, r2
   b6828:	db1a      	blt.n	b6860 <_ZN13Beaconscanner4loopEv+0x1ac>
        SINGLE_THREADED_BLOCK() {
   b682a:	a801      	add	r0, sp, #4
   b682c:	f7ff fccc 	bl	b61c8 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b6830:	e9d7 5300 	ldrd	r5, r3, [r7]
   b6834:	f04f 0824 	mov.w	r8, #36	; 0x24
   b6838:	fb08 5803 	mla	r8, r8, r3, r5
        for (auto& k : KontaktTag::beacons) {
            if (k.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(k, REMOVED);
                } 
                k.missed_scan = -1;
   b683c:	f04f 09ff 	mov.w	r9, #255	; 0xff
        for (auto& k : KontaktTag::beacons) {
   b6840:	45a8      	cmp	r8, r5
   b6842:	d026      	beq.n	b6892 <_ZN13Beaconscanner4loopEv+0x1de>
            if (k.missed_scan >= _clear_missed) {
   b6844:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6848:	7b22      	ldrb	r2, [r4, #12]
   b684a:	4293      	cmp	r3, r2
   b684c:	db1e      	blt.n	b688c <_ZN13Beaconscanner4loopEv+0x1d8>
                if (_callback) {
   b684e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6850:	b113      	cbz	r3, b6858 <_ZN13Beaconscanner4loopEv+0x1a4>
                    _callback(k, REMOVED);
   b6852:	2102      	movs	r1, #2
   b6854:	4628      	mov	r0, r5
   b6856:	4798      	blx	r3
                k.missed_scan = -1;
   b6858:	f885 9004 	strb.w	r9, [r5, #4]
        for (auto& k : KontaktTag::beacons) {
   b685c:	3524      	adds	r5, #36	; 0x24
   b685e:	e7ef      	b.n	b6840 <_ZN13Beaconscanner4loopEv+0x18c>
    return data_[i];
   b6860:	f8d8 3000 	ldr.w	r3, [r8]
   b6864:	fb09 3005 	mla	r0, r9, r5, r3
                if (Eddystone::beacons.at(i).missed_scan < 0) {
   b6868:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b686c:	2900      	cmp	r1, #0
   b686e:	da0b      	bge.n	b6888 <_ZN13Beaconscanner4loopEv+0x1d4>
    move(p, p + n, data_ + size_);
   b6870:	fb09 3202 	mla	r2, r9, r2, r3
   b6874:	f100 0164 	add.w	r1, r0, #100	; 0x64
   b6878:	f7ff fde6 	bl	b6448 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b687c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6880:	3b01      	subs	r3, #1
   b6882:	f8c8 3004 	str.w	r3, [r8, #4]
                    i--;
   b6886:	3d01      	subs	r5, #1
            for (int i = 0; i < Eddystone::beacons.size(); i++) {
   b6888:	3501      	adds	r5, #1
   b688a:	e7ca      	b.n	b6822 <_ZN13Beaconscanner4loopEv+0x16e>
            } else {
                k.missed_scan++;
   b688c:	3301      	adds	r3, #1
   b688e:	712b      	strb	r3, [r5, #4]
   b6890:	e7e4      	b.n	b685c <_ZN13Beaconscanner4loopEv+0x1a8>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b6892:	a801      	add	r0, sp, #4
   b6894:	f7ff fc90 	bl	b61b8 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < KontaktTag::beacons.size(); i++) {
   b6898:	2500      	movs	r5, #0
    return data_[i];
   b689a:	f04f 0824 	mov.w	r8, #36	; 0x24
    return size_;
   b689e:	687a      	ldr	r2, [r7, #4]
   b68a0:	4295      	cmp	r5, r2
   b68a2:	db1c      	blt.n	b68de <_ZN13Beaconscanner4loopEv+0x22a>
        SINGLE_THREADED_BLOCK() {
   b68a4:	a801      	add	r0, sp, #4
   b68a6:	f7ff fc8f 	bl	b61c8 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b68aa:	e9d6 5700 	ldrd	r5, r7, [r6]
   b68ae:	2388      	movs	r3, #136	; 0x88
   b68b0:	fb03 5707 	mla	r7, r3, r7, r5
        for (auto& l : LairdBt510::beacons) {
            if (l.state_ == LairdBt510::State::IDLE && l.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(l, REMOVED);
                }
                l.missed_scan = -1;
   b68b4:	f04f 08ff 	mov.w	r8, #255	; 0xff
        for (auto& l : LairdBt510::beacons) {
   b68b8:	42af      	cmp	r7, r5
   b68ba:	d026      	beq.n	b690a <_ZN13Beaconscanner4loopEv+0x256>
            if (l.state_ == LairdBt510::State::IDLE && l.missed_scan >= _clear_missed) {
   b68bc:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   b68c0:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b68c4:	b9f2      	cbnz	r2, b6904 <_ZN13Beaconscanner4loopEv+0x250>
   b68c6:	7b22      	ldrb	r2, [r4, #12]
   b68c8:	4293      	cmp	r3, r2
   b68ca:	db1b      	blt.n	b6904 <_ZN13Beaconscanner4loopEv+0x250>
                if (_callback) {
   b68cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b68ce:	b113      	cbz	r3, b68d6 <_ZN13Beaconscanner4loopEv+0x222>
                    _callback(l, REMOVED);
   b68d0:	2102      	movs	r1, #2
   b68d2:	4628      	mov	r0, r5
   b68d4:	4798      	blx	r3
                l.missed_scan = -1;
   b68d6:	f885 8004 	strb.w	r8, [r5, #4]
        for (auto& l : LairdBt510::beacons) {
   b68da:	3588      	adds	r5, #136	; 0x88
   b68dc:	e7ec      	b.n	b68b8 <_ZN13Beaconscanner4loopEv+0x204>
    return data_[i];
   b68de:	683b      	ldr	r3, [r7, #0]
   b68e0:	fb08 3005 	mla	r0, r8, r5, r3
                if (KontaktTag::beacons.at(i).missed_scan < 0) {
   b68e4:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b68e8:	2900      	cmp	r1, #0
   b68ea:	da09      	bge.n	b6900 <_ZN13Beaconscanner4loopEv+0x24c>
    move(p, p + n, data_ + size_);
   b68ec:	fb08 3202 	mla	r2, r8, r2, r3
   b68f0:	f100 0124 	add.w	r1, r0, #36	; 0x24
   b68f4:	f7fe fa06 	bl	b4d04 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b68f8:	687b      	ldr	r3, [r7, #4]
   b68fa:	3b01      	subs	r3, #1
   b68fc:	607b      	str	r3, [r7, #4]
                    i--;
   b68fe:	3d01      	subs	r5, #1
            for (int i = 0; i < KontaktTag::beacons.size(); i++) {
   b6900:	3501      	adds	r5, #1
   b6902:	e7cc      	b.n	b689e <_ZN13Beaconscanner4loopEv+0x1ea>
            } else {
                l.missed_scan++;
   b6904:	3301      	adds	r3, #1
   b6906:	712b      	strb	r3, [r5, #4]
   b6908:	e7e7      	b.n	b68da <_ZN13Beaconscanner4loopEv+0x226>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b690a:	a801      	add	r0, sp, #4
   b690c:	f7ff fc54 	bl	b61b8 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < LairdBt510::beacons.size(); i++) {
   b6910:	2700      	movs	r7, #0
    return data_[i];
   b6912:	f04f 0888 	mov.w	r8, #136	; 0x88
   b6916:	6873      	ldr	r3, [r6, #4]
   b6918:	429f      	cmp	r7, r3
   b691a:	db07      	blt.n	b692c <_ZN13Beaconscanner4loopEv+0x278>
        SINGLE_THREADED_BLOCK() {
   b691c:	a801      	add	r0, sp, #4
   b691e:	f7ff fc53 	bl	b61c8 <_ZN21SingleThreadedSectionD1Ev>
                    i--;
                }
            }
        }
#endif
        _scan_done = false;
   b6922:	2300      	movs	r3, #0
   b6924:	71e3      	strb	r3, [r4, #7]
    }
}
   b6926:	b003      	add	sp, #12
   b6928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b692c:	6835      	ldr	r5, [r6, #0]
   b692e:	fb08 5507 	mla	r5, r8, r7, r5
                if (LairdBt510::beacons.at(i).missed_scan < 0) {
   b6932:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6936:	2b00      	cmp	r3, #0
   b6938:	da0f      	bge.n	b695a <_ZN13Beaconscanner4loopEv+0x2a6>
            p->~T();
   b693a:	4628      	mov	r0, r5
   b693c:	f7fe fc00 	bl	b5140 <_ZN10LairdBt510D1Ev>
    move(p, p + n, data_ + size_);
   b6940:	e9d6 3200 	ldrd	r3, r2, [r6]
   b6944:	f105 0188 	add.w	r1, r5, #136	; 0x88
   b6948:	fb08 3202 	mla	r2, r8, r2, r3
   b694c:	4628      	mov	r0, r5
   b694e:	f7fe fec6 	bl	b56de <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b6952:	6873      	ldr	r3, [r6, #4]
   b6954:	3b01      	subs	r3, #1
   b6956:	6073      	str	r3, [r6, #4]
                    i--;
   b6958:	3f01      	subs	r7, #1
            for (int i = 0; i < LairdBt510::beacons.size(); i++) {
   b695a:	3701      	adds	r7, #1
   b695c:	e7db      	b.n	b6916 <_ZN13Beaconscanner4loopEv+0x262>
   b695e:	bf00      	nop
   b6960:	2003e658 	.word	0x2003e658
   b6964:	2003e670 	.word	0x2003e670
   b6968:	2003e684 	.word	0x2003e684
   b696c:	2003e694 	.word	0x2003e694

000b6970 <_ZN5spark10JSONWriter5valueERK6String>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
   b6970:	688a      	ldr	r2, [r1, #8]
   b6972:	6809      	ldr	r1, [r1, #0]
   b6974:	f004 bae4 	b.w	baf40 <_ZN5spark10JSONWriter5valueEPKcj>

000b6978 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE>:
        }
    }
}

bool Eddystone::isBeacon(const BleScanResult *scanResult)
{
   b6978:	b530      	push	{r4, r5, lr}
        return advertisingData_;
   b697a:	f100 0508 	add.w	r5, r0, #8
   b697e:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).contains(BleAdvertisingDataType::SERVICE_DATA))
   b6980:	2116      	movs	r1, #22
   b6982:	4628      	mov	r0, r5
   b6984:	f001 fce3 	bl	b834e <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>
   b6988:	4604      	mov	r4, r0
   b698a:	b188      	cbz	r0, b69b0 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x38>
    {
        uint8_t buf[BLE_MAX_ADV_DATA_LEN];
        uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b698c:	231f      	movs	r3, #31
   b698e:	466a      	mov	r2, sp
   b6990:	2116      	movs	r1, #22
   b6992:	4628      	mov	r0, r5
   b6994:	f001 fc79 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        if (count > 3 && buf[0] == 0xAA && buf[1] == 0xFE) // Eddystone UUID
   b6998:	b2c0      	uxtb	r0, r0
   b699a:	2803      	cmp	r0, #3
   b699c:	d907      	bls.n	b69ae <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x36>
   b699e:	f89d 3000 	ldrb.w	r3, [sp]
   b69a2:	2baa      	cmp	r3, #170	; 0xaa
   b69a4:	d103      	bne.n	b69ae <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x36>
   b69a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
   b69aa:	2bfe      	cmp	r3, #254	; 0xfe
   b69ac:	d000      	beq.n	b69b0 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x38>
            return true;
    }
    return false;
   b69ae:	2400      	movs	r4, #0
}
   b69b0:	4620      	mov	r0, r4
   b69b2:	b009      	add	sp, #36	; 0x24
   b69b4:	bd30      	pop	{r4, r5, pc}

000b69b6 <_ZN9Eddystone3Uid12populateDataEPha>:
        writer->endObject();
}

void Eddystone::Uid::populateData(uint8_t *buf, int8_t rssi)
{
    found = true;
   b69b6:	2301      	movs	r3, #1
   b69b8:	7003      	strb	r3, [r0, #0]
    power = (int8_t)buf[3];
   b69ba:	78cb      	ldrb	r3, [r1, #3]
   b69bc:	7143      	strb	r3, [r0, #5]
    memcpy(name,buf+4,10);
   b69be:	684b      	ldr	r3, [r1, #4]
   b69c0:	f8c0 3006 	str.w	r3, [r0, #6]
   b69c4:	688b      	ldr	r3, [r1, #8]
   b69c6:	f8c0 300a 	str.w	r3, [r0, #10]
   b69ca:	898b      	ldrh	r3, [r1, #12]
   b69cc:	81c3      	strh	r3, [r0, #14]
    memcpy(instance, buf+14,6);
   b69ce:	f8d1 300e 	ldr.w	r3, [r1, #14]
   b69d2:	6103      	str	r3, [r0, #16]
   b69d4:	8a4b      	ldrh	r3, [r1, #18]
   b69d6:	8283      	strh	r3, [r0, #20]
    this->rssi+=rssi;
   b69d8:	8843      	ldrh	r3, [r0, #2]
   b69da:	441a      	add	r2, r3
    rssi_count++;
   b69dc:	7903      	ldrb	r3, [r0, #4]
    this->rssi+=rssi;
   b69de:	8042      	strh	r2, [r0, #2]
    rssi_count++;
   b69e0:	3301      	adds	r3, #1
   b69e2:	7103      	strb	r3, [r0, #4]
}
   b69e4:	4770      	bx	lr

000b69e6 <_ZN9Eddystone3Url12populateDataEPhah>:

void Eddystone::Url::populateData(uint8_t *buf, int8_t rssi, uint8_t packet_size)
{
   b69e6:	b538      	push	{r3, r4, r5, lr}
   b69e8:	4615      	mov	r5, r2
    found = true;
   b69ea:	2201      	movs	r2, #1
   b69ec:	7002      	strb	r2, [r0, #0]
    power = (int8_t)buf[3];
   b69ee:	78ca      	ldrb	r2, [r1, #3]
   b69f0:	7142      	strb	r2, [r0, #5]
    scheme = (uint8_t)buf[4];
   b69f2:	790a      	ldrb	r2, [r1, #4]
   b69f4:	7182      	strb	r2, [r0, #6]
    locator_size = packet_size - 5;
   b69f6:	3b05      	subs	r3, #5
{
   b69f8:	4604      	mov	r4, r0
    locator_size = packet_size - 5;
   b69fa:	b2da      	uxtb	r2, r3
   b69fc:	7602      	strb	r2, [r0, #24]
    memcpy(locator, buf+5,locator_size);
   b69fe:	3105      	adds	r1, #5
   b6a00:	3007      	adds	r0, #7
   b6a02:	f005 f9c5 	bl	bbd90 <memcpy>
    this->rssi+=rssi;
   b6a06:	8862      	ldrh	r2, [r4, #2]
    rssi_count++;
   b6a08:	7923      	ldrb	r3, [r4, #4]
    this->rssi+=rssi;
   b6a0a:	4415      	add	r5, r2
    rssi_count++;
   b6a0c:	3301      	adds	r3, #1
    this->rssi+=rssi;
   b6a0e:	8065      	strh	r5, [r4, #2]
    rssi_count++;
   b6a10:	7123      	strb	r3, [r4, #4]
}
   b6a12:	bd38      	pop	{r3, r4, r5, pc}

000b6a14 <_ZN9Eddystone3Tlm12populateDataEPh>:

void Eddystone::Tlm::populateData(uint8_t *buf)
{
    if (buf[3] == 0x00)     // Version. Only one that exists right now
   b6a14:	78cb      	ldrb	r3, [r1, #3]
   b6a16:	b9f3      	cbnz	r3, b6a56 <_ZN9Eddystone3Tlm12populateDataEPh+0x42>
    {
        found = true;
   b6a18:	2301      	movs	r3, #1
   b6a1a:	7003      	strb	r3, [r0, #0]
        vbatt = (buf[4]<<8)+buf[5];
   b6a1c:	790a      	ldrb	r2, [r1, #4]
   b6a1e:	794b      	ldrb	r3, [r1, #5]
   b6a20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6a24:	8043      	strh	r3, [r0, #2]
        memcpy(temp, buf+6, 2);
   b6a26:	88cb      	ldrh	r3, [r1, #6]
   b6a28:	8083      	strh	r3, [r0, #4]
        adv_cnt = (buf[8]<<24)+(buf[9]<<16)+(buf[10]<<8)+buf[11];
   b6a2a:	7a4b      	ldrb	r3, [r1, #9]
   b6a2c:	7a0a      	ldrb	r2, [r1, #8]
   b6a2e:	041b      	lsls	r3, r3, #16
   b6a30:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   b6a34:	7a8a      	ldrb	r2, [r1, #10]
   b6a36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6a3a:	7aca      	ldrb	r2, [r1, #11]
   b6a3c:	4413      	add	r3, r2
   b6a3e:	6083      	str	r3, [r0, #8]
        sec_cnt = (buf[12]<<24)+(buf[13]<<16)+(buf[14]<<8)+buf[15];
   b6a40:	7b4b      	ldrb	r3, [r1, #13]
   b6a42:	7b0a      	ldrb	r2, [r1, #12]
   b6a44:	041b      	lsls	r3, r3, #16
   b6a46:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   b6a4a:	7b8a      	ldrb	r2, [r1, #14]
   b6a4c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6a50:	7bca      	ldrb	r2, [r1, #15]
   b6a52:	4413      	add	r3, r2
   b6a54:	60c3      	str	r3, [r0, #12]
    }
}
   b6a56:	4770      	bx	lr

000b6a58 <_ZN9Eddystone3Kkm12populateDataEPhh>:
#define KKM_SENSOR_MASK_VOLTAGE     0x1
#define KKM_SENSOR_MASK_TEMP        0x2
#define KKM_SENSOR_MASK_HUME        0x4
#define KKM_SENSOR_MASK_ACC_AIX     0x8
void Eddystone::Kkm::populateData(uint8_t *buf, uint8_t size) {
    found = true;
   b6a58:	2301      	movs	r3, #1
   b6a5a:	7003      	strb	r3, [r0, #0]
void Eddystone::Kkm::populateData(uint8_t *buf, uint8_t size) {
   b6a5c:	b570      	push	{r4, r5, r6, lr}
    uint8_t cursor = 3;
    //uint8_t version = buf[cursor++];
    cursor++;   // Currently not using version. Remove this statement if version is uncommented out.
    uint8_t sensorMask = buf[cursor++];
   b6a5e:	790c      	ldrb	r4, [r1, #4]
    if ( (sensorMask & KKM_SENSOR_MASK_VOLTAGE) != 0) {
   b6a60:	07e3      	lsls	r3, r4, #31
   b6a62:	d53a      	bpl.n	b6ada <_ZN9Eddystone3Kkm12populateDataEPhh+0x82>
        if ( cursor + 2 > size) return;
   b6a64:	2a06      	cmp	r2, #6
   b6a66:	d937      	bls.n	b6ad8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        vbatt = buf[cursor] << 8 | buf[cursor+1];
   b6a68:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   b6a6c:	ba5b      	rev16	r3, r3
   b6a6e:	8043      	strh	r3, [r0, #2]
        cursor += 2;
   b6a70:	2307      	movs	r3, #7
    }
    if ( (sensorMask & KKM_SENSOR_MASK_TEMP) != 0) {
   b6a72:	07a6      	lsls	r6, r4, #30
   b6a74:	d509      	bpl.n	b6a8a <_ZN9Eddystone3Kkm12populateDataEPhh+0x32>
        if ( cursor + 2 > size) return;
   b6a76:	1c5d      	adds	r5, r3, #1
   b6a78:	b2ed      	uxtb	r5, r5
   b6a7a:	4295      	cmp	r5, r2
   b6a7c:	d22c      	bcs.n	b6ad8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        temp_integer = buf[cursor++];
   b6a7e:	5cce      	ldrb	r6, [r1, r3]
   b6a80:	7106      	strb	r6, [r0, #4]
        temp_fraction = buf[cursor++]; 
   b6a82:	5d4d      	ldrb	r5, [r1, r5]
   b6a84:	7145      	strb	r5, [r0, #5]
   b6a86:	3302      	adds	r3, #2
   b6a88:	b2db      	uxtb	r3, r3
    }
    if ( (sensorMask & KKM_SENSOR_MASK_HUME) != 0) {
   b6a8a:	0765      	lsls	r5, r4, #29
   b6a8c:	d505      	bpl.n	b6a9a <_ZN9Eddystone3Kkm12populateDataEPhh+0x42>
        if (cursor + 2 > size) return;
   b6a8e:	1c5d      	adds	r5, r3, #1
   b6a90:	b2ed      	uxtb	r5, r5
   b6a92:	4295      	cmp	r5, r2
   b6a94:	d220      	bcs.n	b6ad8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        // TODO: Add humidity
        cursor +=2;
   b6a96:	3302      	adds	r3, #2
   b6a98:	b2db      	uxtb	r3, r3
    }
    if ( (sensorMask & KKM_SENSOR_MASK_ACC_AIX) != 0) {
   b6a9a:	0724      	lsls	r4, r4, #28
   b6a9c:	d51c      	bpl.n	b6ad8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        if (cursor + 6 > size) return;
   b6a9e:	1d5c      	adds	r4, r3, #5
   b6aa0:	b2e4      	uxtb	r4, r4
   b6aa2:	4294      	cmp	r4, r2
   b6aa4:	d218      	bcs.n	b6ad8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        accel_data = true;
   b6aa6:	2201      	movs	r2, #1
        x_axis = buf[cursor] << 8 | buf[cursor+1];
   b6aa8:	189d      	adds	r5, r3, r2
   b6aaa:	b2ed      	uxtb	r5, r5
        accel_data = true;
   b6aac:	7302      	strb	r2, [r0, #12]
        x_axis = buf[cursor] << 8 | buf[cursor+1];
   b6aae:	5cce      	ldrb	r6, [r1, r3]
   b6ab0:	5d4a      	ldrb	r2, [r1, r5]
   b6ab2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   b6ab6:	80c2      	strh	r2, [r0, #6]
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b6ab8:	1cdd      	adds	r5, r3, #3
   b6aba:	1c9a      	adds	r2, r3, #2
   b6abc:	b2d2      	uxtb	r2, r2
   b6abe:	b2ed      	uxtb	r5, r5
   b6ac0:	5c8e      	ldrb	r6, [r1, r2]
   b6ac2:	5d4a      	ldrb	r2, [r1, r5]
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b6ac4:	3304      	adds	r3, #4
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b6ac6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b6aca:	b2db      	uxtb	r3, r3
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b6acc:	8102      	strh	r2, [r0, #8]
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b6ace:	5cca      	ldrb	r2, [r1, r3]
   b6ad0:	5d0b      	ldrb	r3, [r1, r4]
   b6ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   b6ad6:	8143      	strh	r3, [r0, #10]
        cursor += 6;
    }
}
   b6ad8:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t sensorMask = buf[cursor++];
   b6ada:	2305      	movs	r3, #5
   b6adc:	e7c9      	b.n	b6a72 <_ZN9Eddystone3Kkm12populateDataEPhh+0x1a>
	...

000b6ae0 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE>:
{
   b6ae0:	b530      	push	{r4, r5, lr}
   b6ae2:	460d      	mov	r5, r1
   b6ae4:	b089      	sub	sp, #36	; 0x24
   b6ae6:	4604      	mov	r4, r0
    address = ADDRESS(scanResult);
   b6ae8:	3007      	adds	r0, #7
   b6aea:	f001 f9bc 	bl	b7e66 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, sizeof(buf));
   b6aee:	231f      	movs	r3, #31
   b6af0:	466a      	mov	r2, sp
   b6af2:	2116      	movs	r1, #22
   b6af4:	f105 0008 	add.w	r0, r5, #8
   b6af8:	f001 fbc7 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b6afc:	b2c3      	uxtb	r3, r0
    if (count > 2 && buf[0] == 0xAA && buf[1] == 0xFE) // Eddystone UUID
   b6afe:	2b02      	cmp	r3, #2
   b6b00:	d928      	bls.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6b02:	f89d 2000 	ldrb.w	r2, [sp]
   b6b06:	2aaa      	cmp	r2, #170	; 0xaa
   b6b08:	d124      	bne.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6b0a:	f89d 2001 	ldrb.w	r2, [sp, #1]
   b6b0e:	2afe      	cmp	r2, #254	; 0xfe
   b6b10:	d120      	bne.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
        switch (buf[2])
   b6b12:	f89d 2002 	ldrb.w	r2, [sp, #2]
   b6b16:	2a20      	cmp	r2, #32
   b6b18:	d028      	beq.n	b6b6c <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x8c>
   b6b1a:	d807      	bhi.n	b6b2c <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x4c>
   b6b1c:	b18a      	cbz	r2, b6b42 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x62>
   b6b1e:	2a10      	cmp	r2, #16
   b6b20:	d01a      	beq.n	b6b58 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x78>
            Log.info("Eddystone format not supported: %02X", buf[2]);
   b6b22:	4916      	ldr	r1, [pc, #88]	; (b6b7c <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x9c>)
   b6b24:	4816      	ldr	r0, [pc, #88]	; (b6b80 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0xa0>)
   b6b26:	f7fd ffd5 	bl	b4ad4 <_ZNK5spark6Logger4infoEPKcz>
}
   b6b2a:	e013      	b.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
        switch (buf[2])
   b6b2c:	2a21      	cmp	r2, #33	; 0x21
   b6b2e:	d1f8      	bne.n	b6b22 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x42>
            if (count >= 5) kkm.populateData(buf, count);
   b6b30:	2b04      	cmp	r3, #4
   b6b32:	d90f      	bls.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6b34:	461a      	mov	r2, r3
   b6b36:	4669      	mov	r1, sp
   b6b38:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6b3c:	f7ff ff8c 	bl	b6a58 <_ZN9Eddystone3Kkm12populateDataEPhh>
   b6b40:	e008      	b.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
            if (count > 19)
   b6b42:	2b13      	cmp	r3, #19
   b6b44:	d906      	bls.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                uid.populateData(buf, RSSI(scanResult));
   b6b46:	f995 2020 	ldrsb.w	r2, [r5, #32]
   b6b4a:	4669      	mov	r1, sp
   b6b4c:	f104 0014 	add.w	r0, r4, #20
   b6b50:	f7ff ff31 	bl	b69b6 <_ZN9Eddystone3Uid12populateDataEPha>
}
   b6b54:	b009      	add	sp, #36	; 0x24
   b6b56:	bd30      	pop	{r4, r5, pc}
            if (count > 5)
   b6b58:	2b05      	cmp	r3, #5
   b6b5a:	d9fb      	bls.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                url.populateData(buf, RSSI(scanResult), count);
   b6b5c:	f995 2020 	ldrsb.w	r2, [r5, #32]
   b6b60:	4669      	mov	r1, sp
   b6b62:	f104 002a 	add.w	r0, r4, #42	; 0x2a
   b6b66:	f7ff ff3e 	bl	b69e6 <_ZN9Eddystone3Url12populateDataEPhah>
   b6b6a:	e7f3      	b.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
            if (count == 16)      // According to the spec, packet length must be 16
   b6b6c:	2b10      	cmp	r3, #16
   b6b6e:	d1f1      	bne.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                tlm.populateData(buf);
   b6b70:	4669      	mov	r1, sp
   b6b72:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6b76:	f7ff ff4d 	bl	b6a14 <_ZN9Eddystone3Tlm12populateDataEPh>
   b6b7a:	e7eb      	b.n	b6b54 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6b7c:	000bc2fc 	.word	0x000bc2fc
   b6b80:	2003e6c4 	.word	0x2003e6c4

000b6b84 <_ZNK9Eddystone3Url9urlStringEv>:
#endif

String Eddystone::Url::urlString() const
{
   b6b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b88:	798b      	ldrb	r3, [r1, #6]
   b6b8a:	b08e      	sub	sp, #56	; 0x38
   b6b8c:	4606      	mov	r6, r0
   b6b8e:	460d      	mov	r5, r1
   b6b90:	2b03      	cmp	r3, #3
   b6b92:	d826      	bhi.n	b6be2 <_ZNK9Eddystone3Url9urlStringEv+0x5e>
   b6b94:	e8df f003 	tbb	[pc, r3]
   b6b98:	2d271f02 	.word	0x2d271f02
    char buf[50];
    uint8_t cursor=0;
    switch(scheme)
    {
        case 0x00:
            cursor+=snprintf(buf,sizeof(buf),"http://www.");
   b6b9c:	493a      	ldr	r1, [pc, #232]	; (b6c88 <_ZNK9Eddystone3Url9urlStringEv+0x104>)
   b6b9e:	a801      	add	r0, sp, #4
   b6ba0:	f005 f95e 	bl	bbe60 <strcpy>
   b6ba4:	240b      	movs	r4, #11
                break;
            case 0x0c:
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
                break;
            case 0x0d:
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b6ba6:	f8df 8120 	ldr.w	r8, [pc, #288]	; b6cc8 <_ZNK9Eddystone3Url9urlStringEv+0x144>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
   b6baa:	f8df 9120 	ldr.w	r9, [pc, #288]	; b6ccc <_ZNK9Eddystone3Url9urlStringEv+0x148>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info");
   b6bae:	f8df a120 	ldr.w	sl, [pc, #288]	; b6cd0 <_ZNK9Eddystone3Url9urlStringEv+0x14c>
    switch(scheme)
   b6bb2:	2700      	movs	r7, #0
    for(uint8_t i=0;i<locator_size;i++)
   b6bb4:	7e2a      	ldrb	r2, [r5, #24]
   b6bb6:	b2fb      	uxtb	r3, r7
   b6bb8:	429a      	cmp	r2, r3
   b6bba:	d95b      	bls.n	b6c74 <_ZNK9Eddystone3Url9urlStringEv+0xf0>
        switch(locator[i])
   b6bbc:	442b      	add	r3, r5
   b6bbe:	79da      	ldrb	r2, [r3, #7]
   b6bc0:	2a0d      	cmp	r2, #13
   b6bc2:	d850      	bhi.n	b6c66 <_ZNK9Eddystone3Url9urlStringEv+0xe2>
   b6bc4:	e8df f002 	tbb	[pc, r2]
   b6bc8:	2b29271b 	.word	0x2b29271b
   b6bcc:	3a38362d 	.word	0x3a38362d
   b6bd0:	49474543 	.word	0x49474543
   b6bd4:	4d4b      	.short	0x4d4b
            cursor+=snprintf(buf,sizeof(buf),"https://www.");
   b6bd6:	492d      	ldr	r1, [pc, #180]	; (b6c8c <_ZNK9Eddystone3Url9urlStringEv+0x108>)
   b6bd8:	a801      	add	r0, sp, #4
   b6bda:	f005 f941 	bl	bbe60 <strcpy>
   b6bde:	240c      	movs	r4, #12
            break;
   b6be0:	e7e1      	b.n	b6ba6 <_ZNK9Eddystone3Url9urlStringEv+0x22>
    switch(scheme)
   b6be2:	2400      	movs	r4, #0
   b6be4:	e7df      	b.n	b6ba6 <_ZNK9Eddystone3Url9urlStringEv+0x22>
            cursor+=snprintf(buf,sizeof(buf),"http://");
   b6be6:	492a      	ldr	r1, [pc, #168]	; (b6c90 <_ZNK9Eddystone3Url9urlStringEv+0x10c>)
   b6be8:	a801      	add	r0, sp, #4
   b6bea:	f005 f939 	bl	bbe60 <strcpy>
   b6bee:	2407      	movs	r4, #7
            break;
   b6bf0:	e7d9      	b.n	b6ba6 <_ZNK9Eddystone3Url9urlStringEv+0x22>
            cursor+=snprintf(buf,sizeof(buf),"https://");
   b6bf2:	4928      	ldr	r1, [pc, #160]	; (b6c94 <_ZNK9Eddystone3Url9urlStringEv+0x110>)
   b6bf4:	a801      	add	r0, sp, #4
   b6bf6:	f005 f933 	bl	bbe60 <strcpy>
   b6bfa:	2408      	movs	r4, #8
            break;
   b6bfc:	e7d3      	b.n	b6ba6 <_ZNK9Eddystone3Url9urlStringEv+0x22>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".com/");
   b6bfe:	4a26      	ldr	r2, [pc, #152]	; (b6c98 <_ZNK9Eddystone3Url9urlStringEv+0x114>)
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org/");
   b6c00:	ab01      	add	r3, sp, #4
   b6c02:	1918      	adds	r0, r3, r4
   b6c04:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6c08:	f000 fdae 	bl	b7768 <snprintf>
   b6c0c:	1d63      	adds	r3, r4, #5
   b6c0e:	b2db      	uxtb	r3, r3
    for(uint8_t i=0;i<locator_size;i++)
   b6c10:	3701      	adds	r7, #1
   b6c12:	461c      	mov	r4, r3
   b6c14:	e7ce      	b.n	b6bb4 <_ZNK9Eddystone3Url9urlStringEv+0x30>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org/");
   b6c16:	4a21      	ldr	r2, [pc, #132]	; (b6c9c <_ZNK9Eddystone3Url9urlStringEv+0x118>)
   b6c18:	e7f2      	b.n	b6c00 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".edu/");
   b6c1a:	4a21      	ldr	r2, [pc, #132]	; (b6ca0 <_ZNK9Eddystone3Url9urlStringEv+0x11c>)
   b6c1c:	e7f0      	b.n	b6c00 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".net/");
   b6c1e:	4a21      	ldr	r2, [pc, #132]	; (b6ca4 <_ZNK9Eddystone3Url9urlStringEv+0x120>)
   b6c20:	e7ee      	b.n	b6c00 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info/");
   b6c22:	ab01      	add	r3, sp, #4
   b6c24:	1918      	adds	r0, r3, r4
   b6c26:	4a20      	ldr	r2, [pc, #128]	; (b6ca8 <_ZNK9Eddystone3Url9urlStringEv+0x124>)
   b6c28:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6c2c:	f000 fd9c 	bl	b7768 <snprintf>
   b6c30:	1da3      	adds	r3, r4, #6
   b6c32:	e7ec      	b.n	b6c0e <_ZNK9Eddystone3Url9urlStringEv+0x8a>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz/");
   b6c34:	4a1d      	ldr	r2, [pc, #116]	; (b6cac <_ZNK9Eddystone3Url9urlStringEv+0x128>)
   b6c36:	e7e3      	b.n	b6c00 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov/");
   b6c38:	4a1d      	ldr	r2, [pc, #116]	; (b6cb0 <_ZNK9Eddystone3Url9urlStringEv+0x12c>)
   b6c3a:	e7e1      	b.n	b6c00 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".com");
   b6c3c:	4a1d      	ldr	r2, [pc, #116]	; (b6cb4 <_ZNK9Eddystone3Url9urlStringEv+0x130>)
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b6c3e:	ab01      	add	r3, sp, #4
   b6c40:	1918      	adds	r0, r3, r4
   b6c42:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6c46:	f000 fd8f 	bl	b7768 <snprintf>
   b6c4a:	1d23      	adds	r3, r4, #4
   b6c4c:	e7df      	b.n	b6c0e <_ZNK9Eddystone3Url9urlStringEv+0x8a>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org");
   b6c4e:	4a1a      	ldr	r2, [pc, #104]	; (b6cb8 <_ZNK9Eddystone3Url9urlStringEv+0x134>)
   b6c50:	e7f5      	b.n	b6c3e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".edu");
   b6c52:	4a1a      	ldr	r2, [pc, #104]	; (b6cbc <_ZNK9Eddystone3Url9urlStringEv+0x138>)
   b6c54:	e7f3      	b.n	b6c3e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".net");
   b6c56:	4a1a      	ldr	r2, [pc, #104]	; (b6cc0 <_ZNK9Eddystone3Url9urlStringEv+0x13c>)
   b6c58:	e7f1      	b.n	b6c3e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info");
   b6c5a:	4652      	mov	r2, sl
   b6c5c:	e7d0      	b.n	b6c00 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
   b6c5e:	464a      	mov	r2, r9
   b6c60:	e7ed      	b.n	b6c3e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b6c62:	4642      	mov	r2, r8
   b6c64:	e7eb      	b.n	b6c3e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                break;
            default:
                buf[cursor++] = locator[i];
   b6c66:	a90e      	add	r1, sp, #56	; 0x38
   b6c68:	1c63      	adds	r3, r4, #1
   b6c6a:	440c      	add	r4, r1
   b6c6c:	b2db      	uxtb	r3, r3
   b6c6e:	f804 2c34 	strb.w	r2, [r4, #-52]
   b6c72:	e7cd      	b.n	b6c10 <_ZNK9Eddystone3Url9urlStringEv+0x8c>
        }
    }
    return String::format("%.*s", cursor, buf);
   b6c74:	4630      	mov	r0, r6
   b6c76:	4913      	ldr	r1, [pc, #76]	; (b6cc4 <_ZNK9Eddystone3Url9urlStringEv+0x140>)
   b6c78:	ab01      	add	r3, sp, #4
   b6c7a:	4622      	mov	r2, r4
   b6c7c:	f000 ff8c 	bl	b7b98 <_ZN6String6formatEPKcz>
}
   b6c80:	4630      	mov	r0, r6
   b6c82:	b00e      	add	sp, #56	; 0x38
   b6c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6c88:	000bc321 	.word	0x000bc321
   b6c8c:	000bc32d 	.word	0x000bc32d
   b6c90:	000bc33a 	.word	0x000bc33a
   b6c94:	000bc342 	.word	0x000bc342
   b6c98:	000bc34b 	.word	0x000bc34b
   b6c9c:	000bc351 	.word	0x000bc351
   b6ca0:	000bc357 	.word	0x000bc357
   b6ca4:	000bc35d 	.word	0x000bc35d
   b6ca8:	000bc363 	.word	0x000bc363
   b6cac:	000bc36a 	.word	0x000bc36a
   b6cb0:	000bc370 	.word	0x000bc370
   b6cb4:	000bc376 	.word	0x000bc376
   b6cb8:	000bc37b 	.word	0x000bc37b
   b6cbc:	000bc380 	.word	0x000bc380
   b6cc0:	000bc385 	.word	0x000bc385
   b6cc4:	000bc39a 	.word	0x000bc39a
   b6cc8:	000bc395 	.word	0x000bc395
   b6ccc:	000bc390 	.word	0x000bc390
   b6cd0:	000bc38a 	.word	0x000bc38a

000b6cd4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE>:
{
   b6cd4:	b570      	push	{r4, r5, r6, lr}
   b6cd6:	b08c      	sub	sp, #48	; 0x30
   b6cd8:	4604      	mov	r4, r0
   b6cda:	460d      	mov	r5, r1
        writer->name(address.toString()).beginObject();
   b6cdc:	2200      	movs	r2, #0
   b6cde:	1dc1      	adds	r1, r0, #7
   b6ce0:	a808      	add	r0, sp, #32
   b6ce2:	f001 f94d 	bl	b7f80 <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b6ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6ce8:	9908      	ldr	r1, [sp, #32]
   b6cea:	4628      	mov	r0, r5
   b6cec:	f004 f918 	bl	baf20 <_ZN5spark10JSONWriter4nameEPKcj>
   b6cf0:	f004 f85c 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
   b6cf4:	a808      	add	r0, sp, #32
   b6cf6:	f000 fe15 	bl	b7924 <_ZN6StringD1Ev>
        if (uid.found) 
   b6cfa:	7d23      	ldrb	r3, [r4, #20]
   b6cfc:	2b00      	cmp	r3, #0
   b6cfe:	d062      	beq.n	b6dc6 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0xf2>
            writer->name("uid").beginObject();
   b6d00:	499f      	ldr	r1, [pc, #636]	; (b6f80 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2ac>)
   b6d02:	4628      	mov	r0, r5
   b6d04:	f7fd fe6c 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6d08:	f004 f850 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("power").value(uid.getPower());
   b6d0c:	499d      	ldr	r1, [pc, #628]	; (b6f84 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b0>)
   b6d0e:	4628      	mov	r0, r5
   b6d10:	f7fd fe66 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6d14:	f994 1019 	ldrsb.w	r1, [r4, #25]
   b6d18:	f004 f86c 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->name("namespace").value(uid.namespaceString());
   b6d1c:	499a      	ldr	r1, [pc, #616]	; (b6f88 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b4>)
   b6d1e:	4628      	mov	r0, r5
   b6d20:	f7fd fe5e 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
        uint8_t* getNamespace() {return name;}
        uint8_t* getInstance() {return instance;}
        String namespaceString() const {
            return String::format("%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
                        name[0],name[1],name[2],name[3],name[4],
                        name[5],name[6],name[7],name[8],name[9]);
   b6d24:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   b6d28:	9307      	str	r3, [sp, #28]
   b6d2a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b6d2e:	9306      	str	r3, [sp, #24]
   b6d30:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   b6d34:	9305      	str	r3, [sp, #20]
   b6d36:	f894 3020 	ldrb.w	r3, [r4, #32]
   b6d3a:	9304      	str	r3, [sp, #16]
   b6d3c:	7fe3      	ldrb	r3, [r4, #31]
   b6d3e:	9303      	str	r3, [sp, #12]
   b6d40:	7fa3      	ldrb	r3, [r4, #30]
   b6d42:	9302      	str	r3, [sp, #8]
   b6d44:	7f63      	ldrb	r3, [r4, #29]
   b6d46:	9301      	str	r3, [sp, #4]
   b6d48:	7f23      	ldrb	r3, [r4, #28]
   b6d4a:	7ea2      	ldrb	r2, [r4, #26]
   b6d4c:	498f      	ldr	r1, [pc, #572]	; (b6f8c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b8>)
   b6d4e:	9300      	str	r3, [sp, #0]
   b6d50:	4606      	mov	r6, r0
   b6d52:	7ee3      	ldrb	r3, [r4, #27]
   b6d54:	a808      	add	r0, sp, #32
   b6d56:	f000 ff1f 	bl	b7b98 <_ZN6String6formatEPKcz>
   b6d5a:	a908      	add	r1, sp, #32
   b6d5c:	4630      	mov	r0, r6
   b6d5e:	f7ff fe07 	bl	b6970 <_ZN5spark10JSONWriter5valueERK6String>
   b6d62:	a808      	add	r0, sp, #32
   b6d64:	f000 fdde 	bl	b7924 <_ZN6StringD1Ev>
            writer->name("instance").value(uid.instanceString());
   b6d68:	4989      	ldr	r1, [pc, #548]	; (b6f90 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2bc>)
   b6d6a:	4628      	mov	r0, r5
   b6d6c:	f7fd fe38 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
        }
        String instanceString() const {
            return String::format("%02X%02X%02X%02X%02X%02X",instance[0],instance[1],instance[2],instance[3],
                        instance[4],instance[5]);
   b6d70:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   b6d74:	9303      	str	r3, [sp, #12]
   b6d76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b6d7a:	9302      	str	r3, [sp, #8]
   b6d7c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b6d86:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   b6d8a:	4982      	ldr	r1, [pc, #520]	; (b6f94 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c0>)
   b6d8c:	9300      	str	r3, [sp, #0]
   b6d8e:	4606      	mov	r6, r0
   b6d90:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   b6d94:	a808      	add	r0, sp, #32
   b6d96:	f000 feff 	bl	b7b98 <_ZN6String6formatEPKcz>
   b6d9a:	a908      	add	r1, sp, #32
   b6d9c:	4630      	mov	r0, r6
   b6d9e:	f7ff fde7 	bl	b6970 <_ZN5spark10JSONWriter5valueERK6String>
   b6da2:	a808      	add	r0, sp, #32
   b6da4:	f000 fdbe 	bl	b7924 <_ZN6StringD1Ev>
            writer->name("rssi").value(uid.getRssi());
   b6da8:	497b      	ldr	r1, [pc, #492]	; (b6f98 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c4>)
   b6daa:	4628      	mov	r0, r5
   b6dac:	f7fd fe18 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
        int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b6db0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
   b6db4:	7e23      	ldrb	r3, [r4, #24]
   b6db6:	fb91 f1f3 	sdiv	r1, r1, r3
   b6dba:	b249      	sxtb	r1, r1
   b6dbc:	f004 f81a 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6dc0:	4628      	mov	r0, r5
   b6dc2:	f003 ffdd 	bl	bad80 <_ZN5spark10JSONWriter9endObjectEv>
        if (url.found)
   b6dc6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   b6dca:	b373      	cbz	r3, b6e2a <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x156>
            writer->name("url").beginObject();
   b6dcc:	4973      	ldr	r1, [pc, #460]	; (b6f9c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c8>)
   b6dce:	4628      	mov	r0, r5
   b6dd0:	f7fd fe06 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6dd4:	f003 ffea 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("url").value(url.urlString());
   b6dd8:	4970      	ldr	r1, [pc, #448]	; (b6f9c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c8>)
   b6dda:	4628      	mov	r0, r5
   b6ddc:	f7fd fe00 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6de0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   b6de4:	4606      	mov	r6, r0
   b6de6:	a808      	add	r0, sp, #32
   b6de8:	f7ff fecc 	bl	b6b84 <_ZNK9Eddystone3Url9urlStringEv>
   b6dec:	a908      	add	r1, sp, #32
   b6dee:	4630      	mov	r0, r6
   b6df0:	f7ff fdbe 	bl	b6970 <_ZN5spark10JSONWriter5valueERK6String>
   b6df4:	a808      	add	r0, sp, #32
   b6df6:	f000 fd95 	bl	b7924 <_ZN6StringD1Ev>
            writer->name("power").value(url.getPower());
   b6dfa:	4962      	ldr	r1, [pc, #392]	; (b6f84 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b0>)
   b6dfc:	4628      	mov	r0, r5
   b6dfe:	f7fd fdef 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6e02:	f994 102f 	ldrsb.w	r1, [r4, #47]	; 0x2f
   b6e06:	f003 fff5 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->name("rssi").value(url.getRssi());
   b6e0a:	4963      	ldr	r1, [pc, #396]	; (b6f98 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c4>)
   b6e0c:	4628      	mov	r0, r5
   b6e0e:	f7fd fde7 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
        Url() {
            found=false;
            rssi=rssi_count=0;
            }
        ~Url() = default;
        int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b6e12:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   b6e16:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   b6e1a:	fb91 f1f3 	sdiv	r1, r1, r3
   b6e1e:	b249      	sxtb	r1, r1
   b6e20:	f003 ffe8 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6e24:	4628      	mov	r0, r5
   b6e26:	f003 ffab 	bl	bad80 <_ZN5spark10JSONWriter9endObjectEv>
        if (tlm.found)
   b6e2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   b6e2e:	2b00      	cmp	r3, #0
   b6e30:	d04c      	beq.n	b6ecc <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x1f8>
            writer->name("tlm").beginObject();
   b6e32:	495b      	ldr	r1, [pc, #364]	; (b6fa0 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2cc>)
   b6e34:	4628      	mov	r0, r5
   b6e36:	f7fd fdd3 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6e3a:	f003 ffb7 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("vbatt").value(tlm.getVbatt());
   b6e3e:	4959      	ldr	r1, [pc, #356]	; (b6fa4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d0>)
   b6e40:	4628      	mov	r0, r5
   b6e42:	f7fd fdcd 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
    class Tlm {
    public:
        Tlm() {found=false;}
        ~Tlm() = default;

        float getVbatt() const {return (uint16_t)vbatt/(float)1000;}
   b6e46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   b6e4a:	ed9f 7a57 	vldr	s14, [pc, #348]	; b6fa8 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d4>
   b6e4e:	ee07 3a90 	vmov	s15, r3
   b6e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6e56:	4606      	mov	r6, r0
   b6e58:	eec7 7a87 	vdiv.f32	s15, s15, s14
   b6e5c:	ee17 0a90 	vmov	r0, s15
   b6e60:	f004 fd78 	bl	bb954 <__aeabi_f2d>
   b6e64:	ec41 0b10 	vmov	d0, r0, r1
   b6e68:	4630      	mov	r0, r6
   b6e6a:	f003 ffe7 	bl	bae3c <_ZN5spark10JSONWriter5valueEd>
            writer->name("temp").value(tlm.getTemp());
   b6e6e:	494f      	ldr	r1, [pc, #316]	; (b6fac <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d8>)
   b6e70:	4628      	mov	r0, r5
   b6e72:	f7fd fdb5 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
        float getTemp() const {return (float)((int8_t)temp[0]+(uint8_t)temp[1]/(float)256);}
   b6e76:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   b6e7a:	eddf 6a4d 	vldr	s13, [pc, #308]	; b6fb0 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2dc>
   b6e7e:	ee07 3a10 	vmov	s14, r3
   b6e82:	f994 3048 	ldrsb.w	r3, [r4, #72]	; 0x48
   b6e86:	ee07 3a90 	vmov	s15, r3
   b6e8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   b6e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6e92:	4606      	mov	r6, r0
   b6e94:	eee7 7a26 	vfma.f32	s15, s14, s13
   b6e98:	ee17 0a90 	vmov	r0, s15
   b6e9c:	f004 fd5a 	bl	bb954 <__aeabi_f2d>
   b6ea0:	ec41 0b10 	vmov	d0, r0, r1
   b6ea4:	4630      	mov	r0, r6
   b6ea6:	f003 ffc9 	bl	bae3c <_ZN5spark10JSONWriter5valueEd>
            writer->name("adv_cnt").value((unsigned int)tlm.getAdvCnt());
   b6eaa:	4942      	ldr	r1, [pc, #264]	; (b6fb4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e0>)
   b6eac:	4628      	mov	r0, r5
   b6eae:	f7fd fd97 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6eb2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6eb4:	f003 ffb0 	bl	bae18 <_ZN5spark10JSONWriter5valueEj>
            writer->name("sec_cnt").value((unsigned int)tlm.getSecCnt());
   b6eb8:	493f      	ldr	r1, [pc, #252]	; (b6fb8 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e4>)
   b6eba:	4628      	mov	r0, r5
   b6ebc:	f7fd fd90 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6ec0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   b6ec2:	f003 ffa9 	bl	bae18 <_ZN5spark10JSONWriter5valueEj>
            writer->endObject();
   b6ec6:	4628      	mov	r0, r5
   b6ec8:	f003 ff5a 	bl	bad80 <_ZN5spark10JSONWriter9endObjectEv>
        if (kkm.found)
   b6ecc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   b6ed0:	2b00      	cmp	r3, #0
   b6ed2:	d04e      	beq.n	b6f72 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x29e>
            writer->name("kkm").beginObject();
   b6ed4:	4939      	ldr	r1, [pc, #228]	; (b6fbc <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e8>)
   b6ed6:	4628      	mov	r0, r5
   b6ed8:	f7fd fd82 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6edc:	f003 ff66 	bl	badac <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("vbatt").value(kkm.getVbatt());
   b6ee0:	4930      	ldr	r1, [pc, #192]	; (b6fa4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d0>)
   b6ee2:	4628      	mov	r0, r5
   b6ee4:	f7fd fd7c 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6ee8:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
   b6eec:	f003 ff82 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->name("temp").value(kkm.getTemp());
   b6ef0:	492e      	ldr	r1, [pc, #184]	; (b6fac <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d8>)
   b6ef2:	4628      	mov	r0, r5
   b6ef4:	f7fd fd74 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
            accel_data = false;
        }
        ~Kkm() = default;
        uint16_t getVbatt() const { return vbatt; };
        float getTemp() const { 
            if (temp_integer > 0) {
   b6ef8:	f994 3058 	ldrsb.w	r3, [r4, #88]	; 0x58
   b6efc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
   b6f00:	eddf 6a2b 	vldr	s13, [pc, #172]	; b6fb0 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2dc>
   b6f04:	ee07 3a90 	vmov	s15, r3
   b6f08:	ee07 2a10 	vmov	s14, r2
   b6f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                return (float)(temp_integer+temp_fraction/(float)256); 
   b6f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            if (temp_integer > 0) {
   b6f14:	2b00      	cmp	r3, #0
                return (float)(temp_integer+temp_fraction/(float)256); 
   b6f16:	bfc8      	it	gt
   b6f18:	eee7 7a26 	vfmagt.f32	s15, s14, s13
   b6f1c:	4606      	mov	r6, r0
            }
            return (float)(temp_integer-temp_fraction/(float)256);
   b6f1e:	bfd8      	it	le
   b6f20:	eee7 7a66 	vfmsle.f32	s15, s14, s13
   b6f24:	ee17 0a90 	vmov	r0, s15
   b6f28:	f004 fd14 	bl	bb954 <__aeabi_f2d>
   b6f2c:	ec41 0b10 	vmov	d0, r0, r1
   b6f30:	4630      	mov	r0, r6
   b6f32:	f003 ff83 	bl	bae3c <_ZN5spark10JSONWriter5valueEd>
            if (kkm.hasAccelData()) {
   b6f36:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   b6f3a:	b1bb      	cbz	r3, b6f6c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x298>
                writer->name("x_axis").value(kkm.getAccelXaxis());
   b6f3c:	4920      	ldr	r1, [pc, #128]	; (b6fc0 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2ec>)
   b6f3e:	4628      	mov	r0, r5
   b6f40:	f7fd fd4e 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6f44:	f9b4 105a 	ldrsh.w	r1, [r4, #90]	; 0x5a
   b6f48:	f003 ff54 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
                writer->name("y_axis").value(kkm.getAccelYaxis());
   b6f4c:	491d      	ldr	r1, [pc, #116]	; (b6fc4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2f0>)
   b6f4e:	4628      	mov	r0, r5
   b6f50:	f7fd fd46 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6f54:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
   b6f58:	f003 ff4c 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
                writer->name("z_axis").value(kkm.getAccelZaxis());
   b6f5c:	491a      	ldr	r1, [pc, #104]	; (b6fc8 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2f4>)
   b6f5e:	4628      	mov	r0, r5
   b6f60:	f7fd fd3e 	bl	b49e0 <_ZN5spark10JSONWriter4nameEPKc>
   b6f64:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
   b6f68:	f003 ff44 	bl	badf4 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6f6c:	4628      	mov	r0, r5
   b6f6e:	f003 ff07 	bl	bad80 <_ZN5spark10JSONWriter9endObjectEv>
        writer->endObject();
   b6f72:	4628      	mov	r0, r5
}
   b6f74:	b00c      	add	sp, #48	; 0x30
   b6f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer->endObject();
   b6f7a:	f003 bf01 	b.w	bad80 <_ZN5spark10JSONWriter9endObjectEv>
   b6f7e:	bf00      	nop
   b6f80:	000bc2ca 	.word	0x000bc2ca
   b6f84:	000bc2da 	.word	0x000bc2da
   b6f88:	000bc39f 	.word	0x000bc39f
   b6f8c:	000bc3a9 	.word	0x000bc3a9
   b6f90:	000bc3d2 	.word	0x000bc3d2
   b6f94:	000bc2b0 	.word	0x000bc2b0
   b6f98:	000bc06d 	.word	0x000bc06d
   b6f9c:	000bc3db 	.word	0x000bc3db
   b6fa0:	000bc3df 	.word	0x000bc3df
   b6fa4:	000bc3e3 	.word	0x000bc3e3
   b6fa8:	447a0000 	.word	0x447a0000
   b6fac:	000bc04c 	.word	0x000bc04c
   b6fb0:	3b800000 	.word	0x3b800000
   b6fb4:	000bc3e9 	.word	0x000bc3e9
   b6fb8:	000bc3f1 	.word	0x000bc3f1
   b6fbc:	000bc3f9 	.word	0x000bc3f9
   b6fc0:	000bc058 	.word	0x000bc058
   b6fc4:	000bc05f 	.word	0x000bc05f
   b6fc8:	000bc066 	.word	0x000bc066

000b6fcc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE>:

void Eddystone::addOrUpdate(const BleScanResult *scanResult)
{
   b6fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b6fd0:	4d42      	ldr	r5, [pc, #264]	; (b70dc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x110>)
   b6fd2:	b0cc      	sub	sp, #304	; 0x130
   b6fd4:	4606      	mov	r6, r0
   b6fd6:	2700      	movs	r7, #0
    return data_[i];
   b6fd8:	f04f 0864 	mov.w	r8, #100	; 0x64
    uint8_t i;
    for (i = 0; i < beacons.size(); ++i) {
   b6fdc:	686b      	ldr	r3, [r5, #4]
   b6fde:	b2fc      	uxtb	r4, r7
   b6fe0:	429c      	cmp	r4, r3
   b6fe2:	da0d      	bge.n	b7000 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b6fe4:	6829      	ldr	r1, [r5, #0]
   b6fe6:	fb08 1104 	mla	r1, r8, r4, r1
    BleAddress getAddress() const { return address;}
   b6fea:	3107      	adds	r1, #7
   b6fec:	a833      	add	r0, sp, #204	; 0xcc
   b6fee:	f000 ff35 	bl	b7e5c <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult)) {
   b6ff2:	4631      	mov	r1, r6
   b6ff4:	a833      	add	r0, sp, #204	; 0xcc
   b6ff6:	f000 ff48 	bl	b7e8a <_ZNK8particle10BleAddresseqERKS0_>
   b6ffa:	3701      	adds	r7, #1
   b6ffc:	2800      	cmp	r0, #0
   b6ffe:	d0ed      	beq.n	b6fdc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x10>
            break;
        }
    }
    if (i == beacons.size()) {
   b7000:	686b      	ldr	r3, [r5, #4]
   b7002:	429c      	cmp	r4, r3
   b7004:	d15c      	bne.n	b70c0 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xf4>
        rssi_count(0) {};
   b7006:	4b36      	ldr	r3, [pc, #216]	; (b70e0 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x114>)
   b7008:	9301      	str	r3, [sp, #4]
   b700a:	2301      	movs	r3, #1
   b700c:	f88d 3009 	strb.w	r3, [sp, #9]
   b7010:	f10d 000b 	add.w	r0, sp, #11
   b7014:	2304      	movs	r3, #4
   b7016:	2400      	movs	r4, #0
   b7018:	f88d 300a 	strb.w	r3, [sp, #10]
   b701c:	f000 ff49 	bl	b7eb2 <_ZN8particle10BleAddressC1Ev>
    Eddystone() : Beacon(SCAN_EDDYSTONE) {};
   b7020:	4b30      	ldr	r3, [pc, #192]	; (b70e4 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x118>)
   b7022:	9301      	str	r3, [sp, #4]
        Eddystone new_beacon;
        new_beacon.populateData(scanResult);
   b7024:	4631      	mov	r1, r6
   b7026:	a801      	add	r0, sp, #4
        Uid() {rssi=rssi_count=0;found=false;}
   b7028:	e9cd 4406 	strd	r4, r4, [sp, #24]
        Url() {
   b702c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
   b7030:	f8ad 4014 	strh.w	r4, [sp, #20]
   b7034:	f88d 4016 	strb.w	r4, [sp, #22]
        Tlm() {found=false;}
   b7038:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
            found = false;
   b703c:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
            accel_data = false;
   b7040:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
   b7044:	f7ff fd4c 	bl	b6ae0 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b7048:	a901      	add	r1, sp, #4
   b704a:	a81a      	add	r0, sp, #104	; 0x68
        new_beacon.missed_scan = 0;
   b704c:	f88d 4008 	strb.w	r4, [sp, #8]
        beacons.append(new_beacon);
   b7050:	f7ff f9c8 	bl	b63e4 <_ZN9EddystoneC1ERKS_>
    return insert(size_, std::move(value));
   b7054:	a91a      	add	r1, sp, #104	; 0x68
   b7056:	a833      	add	r0, sp, #204	; 0xcc
   b7058:	686e      	ldr	r6, [r5, #4]
   b705a:	f7ff f9c3 	bl	b63e4 <_ZN9EddystoneC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b705e:	e9d5 7301 	ldrd	r7, r3, [r5, #4]
   b7062:	429f      	cmp	r7, r3
   b7064:	db15      	blt.n	b7092 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xc6>
   b7066:	3701      	adds	r7, #1
        if (n > 0) {
   b7068:	42a7      	cmp	r7, r4
   b706a:	dd0d      	ble.n	b7088 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xbc>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b706c:	f04f 0864 	mov.w	r8, #100	; 0x64
    return ::malloc(size);
   b7070:	fb08 f007 	mul.w	r0, r8, r7
   b7074:	f000 fb58 	bl	b7728 <malloc>
            if (!d) {
   b7078:	4604      	mov	r4, r0
   b707a:	b1f0      	cbz	r0, b70ba <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xee>
            move(d, data_, data_ + size_);
   b707c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7080:	fb08 1202 	mla	r2, r8, r2, r1
   b7084:	f7ff f9e0 	bl	b6448 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7088:	6828      	ldr	r0, [r5, #0]
   b708a:	f000 fb55 	bl	b7738 <free>
        data_ = d;
   b708e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7090:	60af      	str	r7, [r5, #8]
    T* const p = data_ + i;
   b7092:	682b      	ldr	r3, [r5, #0]
    move(p + 1, p, data_ + size_);
   b7094:	6869      	ldr	r1, [r5, #4]
    T* const p = data_ + i;
   b7096:	2264      	movs	r2, #100	; 0x64
   b7098:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b709c:	f106 0064 	add.w	r0, r6, #100	; 0x64
   b70a0:	fb02 3201 	mla	r2, r2, r1, r3
   b70a4:	4631      	mov	r1, r6
   b70a6:	f7ff f9cf 	bl	b6448 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b70aa:	b11e      	cbz	r6, b70b4 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xe8>
   b70ac:	a933      	add	r1, sp, #204	; 0xcc
   b70ae:	4630      	mov	r0, r6
   b70b0:	f7ff f998 	bl	b63e4 <_ZN9EddystoneC1ERKS_>
    ++size_;
   b70b4:	686b      	ldr	r3, [r5, #4]
   b70b6:	3301      	adds	r3, #1
   b70b8:	606b      	str	r3, [r5, #4]
        Eddystone& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b70ba:	b04c      	add	sp, #304	; 0x130
   b70bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b70c0:	2364      	movs	r3, #100	; 0x64
   b70c2:	435c      	muls	r4, r3
   b70c4:	682b      	ldr	r3, [r5, #0]
   b70c6:	191d      	adds	r5, r3, r4
        beacon.newly_scanned = false;
   b70c8:	2700      	movs	r7, #0
   b70ca:	716f      	strb	r7, [r5, #5]
        beacon.populateData(scanResult);
   b70cc:	591b      	ldr	r3, [r3, r4]
   b70ce:	4631      	mov	r1, r6
   b70d0:	685b      	ldr	r3, [r3, #4]
   b70d2:	4628      	mov	r0, r5
   b70d4:	4798      	blx	r3
        beacon.missed_scan = 0;
   b70d6:	712f      	strb	r7, [r5, #4]
   b70d8:	e7ef      	b.n	b70ba <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xee>
   b70da:	bf00      	nop
   b70dc:	2003e694 	.word	0x2003e694
   b70e0:	000bc044 	.word	0x000bc044
   b70e4:	000bc408 	.word	0x000bc408

000b70e8 <_GLOBAL__sub_I__ZN9Eddystone7beaconsE>:
        capacity_(0) {
   b70e8:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <_GLOBAL__sub_I__ZN9Eddystone7beaconsE+0xc>)
   b70ea:	2200      	movs	r2, #0
   b70ec:	e9c3 2200 	strd	r2, r2, [r3]
   b70f0:	609a      	str	r2, [r3, #8]
   b70f2:	4770      	bx	lr
   b70f4:	2003e694 	.word	0x2003e694

000b70f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <netdb_freeaddrinfo+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	689b      	ldr	r3, [r3, #8]
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	00030268 	.word	0x00030268

000b7108 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <netdb_getaddrinfo+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	68db      	ldr	r3, [r3, #12]
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	00030268 	.word	0x00030268

000b7118 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <HAL_Pin_Mode+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	689b      	ldr	r3, [r3, #8]
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	0003022c 	.word	0x0003022c

000b7128 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <HAL_Get_Pin_Mode+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	68db      	ldr	r3, [r3, #12]
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	0003022c 	.word	0x0003022c

000b7138 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <HAL_GPIO_Write+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	691b      	ldr	r3, [r3, #16]
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	0003022c 	.word	0x0003022c

000b7148 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b02      	ldr	r3, [pc, #8]	; (b7154 <HAL_RNG_GetRandomNumber+0xc>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	685b      	ldr	r3, [r3, #4]
   b7150:	9301      	str	r3, [sp, #4]
   b7152:	bd08      	pop	{r3, pc}
   b7154:	00030218 	.word	0x00030218

000b7158 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b7158:	b508      	push	{r3, lr}
   b715a:	4b02      	ldr	r3, [pc, #8]	; (b7164 <HAL_Delay_Milliseconds+0xc>)
   b715c:	681b      	ldr	r3, [r3, #0]
   b715e:	689b      	ldr	r3, [r3, #8]
   b7160:	9301      	str	r3, [sp, #4]
   b7162:	bd08      	pop	{r3, pc}
   b7164:	00030218 	.word	0x00030218

000b7168 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7168:	b508      	push	{r3, lr}
   b716a:	4b02      	ldr	r3, [pc, #8]	; (b7174 <HAL_Delay_Microseconds+0xc>)
   b716c:	681b      	ldr	r3, [r3, #0]
   b716e:	68db      	ldr	r3, [r3, #12]
   b7170:	9301      	str	r3, [sp, #4]
   b7172:	bd08      	pop	{r3, pc}
   b7174:	00030218 	.word	0x00030218

000b7178 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7178:	b508      	push	{r3, lr}
   b717a:	4b02      	ldr	r3, [pc, #8]	; (b7184 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b717c:	681b      	ldr	r3, [r3, #0]
   b717e:	695b      	ldr	r3, [r3, #20]
   b7180:	9301      	str	r3, [sp, #4]
   b7182:	bd08      	pop	{r3, pc}
   b7184:	00030218 	.word	0x00030218

000b7188 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7188:	b508      	push	{r3, lr}
   b718a:	4b02      	ldr	r3, [pc, #8]	; (b7194 <hal_rtc_time_is_valid+0xc>)
   b718c:	681b      	ldr	r3, [r3, #0]
   b718e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7190:	9301      	str	r3, [sp, #4]
   b7192:	bd08      	pop	{r3, pc}
   b7194:	00030218 	.word	0x00030218

000b7198 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7198:	b508      	push	{r3, lr}
   b719a:	4b02      	ldr	r3, [pc, #8]	; (b71a4 <hal_timer_millis+0xc>)
   b719c:	681b      	ldr	r3, [r3, #0]
   b719e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b71a0:	9301      	str	r3, [sp, #4]
   b71a2:	bd08      	pop	{r3, pc}
   b71a4:	00030218 	.word	0x00030218

000b71a8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b71a8:	b508      	push	{r3, lr}
   b71aa:	4b02      	ldr	r3, [pc, #8]	; (b71b4 <hal_rtc_get_time+0xc>)
   b71ac:	681b      	ldr	r3, [r3, #0]
   b71ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b71b0:	9301      	str	r3, [sp, #4]
   b71b2:	bd08      	pop	{r3, pc}
   b71b4:	00030218 	.word	0x00030218

000b71b8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b71b8:	b508      	push	{r3, lr}
   b71ba:	4b02      	ldr	r3, [pc, #8]	; (b71c4 <hal_ble_stack_init+0xc>)
   b71bc:	681b      	ldr	r3, [r3, #0]
   b71be:	689b      	ldr	r3, [r3, #8]
   b71c0:	9301      	str	r3, [sp, #4]
   b71c2:	bd08      	pop	{r3, pc}
   b71c4:	00030278 	.word	0x00030278

000b71c8 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b71c8:	b508      	push	{r3, lr}
   b71ca:	4b02      	ldr	r3, [pc, #8]	; (b71d4 <hal_ble_gap_set_scan_parameters+0xc>)
   b71cc:	681b      	ldr	r3, [r3, #0]
   b71ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b71d0:	9301      	str	r3, [sp, #4]
   b71d2:	bd08      	pop	{r3, pc}
   b71d4:	00030278 	.word	0x00030278

000b71d8 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b71d8:	b508      	push	{r3, lr}
   b71da:	4b02      	ldr	r3, [pc, #8]	; (b71e4 <hal_ble_gap_get_scan_parameters+0xc>)
   b71dc:	681b      	ldr	r3, [r3, #0]
   b71de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b71e0:	9301      	str	r3, [sp, #4]
   b71e2:	bd08      	pop	{r3, pc}
   b71e4:	00030278 	.word	0x00030278

000b71e8 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b71e8:	b508      	push	{r3, lr}
   b71ea:	4b02      	ldr	r3, [pc, #8]	; (b71f4 <hal_ble_gap_start_scan+0xc>)
   b71ec:	681b      	ldr	r3, [r3, #0]
   b71ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b71f0:	9301      	str	r3, [sp, #4]
   b71f2:	bd08      	pop	{r3, pc}
   b71f4:	00030278 	.word	0x00030278

000b71f8 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b71f8:	b508      	push	{r3, lr}
   b71fa:	4b03      	ldr	r3, [pc, #12]	; (b7208 <hal_ble_gap_stop_scan+0x10>)
   b71fc:	681b      	ldr	r3, [r3, #0]
   b71fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b7202:	9301      	str	r3, [sp, #4]
   b7204:	bd08      	pop	{r3, pc}
   b7206:	0000      	.short	0x0000
   b7208:	00030278 	.word	0x00030278

000b720c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b720c:	b508      	push	{r3, lr}
   b720e:	4b03      	ldr	r3, [pc, #12]	; (b721c <hal_ble_gap_disconnect+0x10>)
   b7210:	681b      	ldr	r3, [r3, #0]
   b7212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7216:	9301      	str	r3, [sp, #4]
   b7218:	bd08      	pop	{r3, pc}
   b721a:	0000      	.short	0x0000
   b721c:	00030278 	.word	0x00030278

000b7220 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b03      	ldr	r3, [pc, #12]	; (b7230 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b722a:	9301      	str	r3, [sp, #4]
   b722c:	bd08      	pop	{r3, pc}
   b722e:	0000      	.short	0x0000
   b7230:	00030278 	.word	0x00030278

000b7234 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b03      	ldr	r3, [pc, #12]	; (b7244 <hal_ble_gatt_client_discover_all_services+0x10>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b723e:	9301      	str	r3, [sp, #4]
   b7240:	bd08      	pop	{r3, pc}
   b7242:	0000      	.short	0x0000
   b7244:	00030278 	.word	0x00030278

000b7248 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b7248:	b508      	push	{r3, lr}
   b724a:	4b03      	ldr	r3, [pc, #12]	; (b7258 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b724c:	681b      	ldr	r3, [r3, #0]
   b724e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b7252:	9301      	str	r3, [sp, #4]
   b7254:	bd08      	pop	{r3, pc}
   b7256:	0000      	.short	0x0000
   b7258:	00030278 	.word	0x00030278

000b725c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b725c:	b508      	push	{r3, lr}
   b725e:	4b03      	ldr	r3, [pc, #12]	; (b726c <hal_ble_gatt_client_write_with_response+0x10>)
   b7260:	681b      	ldr	r3, [r3, #0]
   b7262:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b7266:	9301      	str	r3, [sp, #4]
   b7268:	bd08      	pop	{r3, pc}
   b726a:	0000      	.short	0x0000
   b726c:	00030278 	.word	0x00030278

000b7270 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b03      	ldr	r3, [pc, #12]	; (b7280 <hal_ble_gatt_client_write_without_response+0x10>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b727a:	9301      	str	r3, [sp, #4]
   b727c:	bd08      	pop	{r3, pc}
   b727e:	0000      	.short	0x0000
   b7280:	00030278 	.word	0x00030278

000b7284 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b03      	ldr	r3, [pc, #12]	; (b7294 <hal_ble_gatt_client_read+0x10>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b728e:	9301      	str	r3, [sp, #4]
   b7290:	bd08      	pop	{r3, pc}
   b7292:	0000      	.short	0x0000
   b7294:	00030278 	.word	0x00030278

000b7298 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b7298:	b508      	push	{r3, lr}
   b729a:	4b03      	ldr	r3, [pc, #12]	; (b72a8 <hal_ble_gap_connect+0x10>)
   b729c:	681b      	ldr	r3, [r3, #0]
   b729e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b72a2:	9301      	str	r3, [sp, #4]
   b72a4:	bd08      	pop	{r3, pc}
   b72a6:	0000      	.short	0x0000
   b72a8:	00030278 	.word	0x00030278

000b72ac <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b72ac:	b508      	push	{r3, lr}
   b72ae:	4b03      	ldr	r3, [pc, #12]	; (b72bc <hal_ble_set_callback_on_periph_link_events+0x10>)
   b72b0:	681b      	ldr	r3, [r3, #0]
   b72b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b72b6:	9301      	str	r3, [sp, #4]
   b72b8:	bd08      	pop	{r3, pc}
   b72ba:	0000      	.short	0x0000
   b72bc:	00030278 	.word	0x00030278

000b72c0 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b03      	ldr	r3, [pc, #12]	; (b72d0 <hal_ble_gatt_client_configure_cccd+0x10>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b72ca:	9301      	str	r3, [sp, #4]
   b72cc:	bd08      	pop	{r3, pc}
   b72ce:	0000      	.short	0x0000
   b72d0:	00030278 	.word	0x00030278

000b72d4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b03      	ldr	r3, [pc, #12]	; (b72e4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b72de:	9301      	str	r3, [sp, #4]
   b72e0:	bd08      	pop	{r3, pc}
   b72e2:	0000      	.short	0x0000
   b72e4:	00030278 	.word	0x00030278

000b72e8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b72e8:	b508      	push	{r3, lr}
   b72ea:	4b03      	ldr	r3, [pc, #12]	; (b72f8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b72ec:	681b      	ldr	r3, [r3, #0]
   b72ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b72f2:	9301      	str	r3, [sp, #4]
   b72f4:	bd08      	pop	{r3, pc}
   b72f6:	0000      	.short	0x0000
   b72f8:	00030278 	.word	0x00030278

000b72fc <hal_ble_gap_start_pairing>:

DYNALIB_FN(66, hal_ble, hal_ble_gap_set_pairing_config, int(const hal_ble_pairing_config_t*, void*))
DYNALIB_FN(67, hal_ble, hal_ble_gap_start_pairing, int(hal_ble_conn_handle_t, void*))
   b72fc:	b508      	push	{r3, lr}
   b72fe:	4b03      	ldr	r3, [pc, #12]	; (b730c <hal_ble_gap_start_pairing+0x10>)
   b7300:	681b      	ldr	r3, [r3, #0]
   b7302:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   b7306:	9301      	str	r3, [sp, #4]
   b7308:	bd08      	pop	{r3, pc}
   b730a:	0000      	.short	0x0000
   b730c:	00030278 	.word	0x00030278

000b7310 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <os_thread_create+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	685b      	ldr	r3, [r3, #4]
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030248 	.word	0x00030248

000b7320 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <os_thread_yield+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	68db      	ldr	r3, [r3, #12]
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030248 	.word	0x00030248

000b7330 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <os_thread_scheduling+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	69db      	ldr	r3, [r3, #28]
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	00030248 	.word	0x00030248

000b7340 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <os_mutex_recursive_create+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	00030248 	.word	0x00030248

000b7350 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <os_mutex_recursive_lock+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	00030248 	.word	0x00030248

000b7360 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <os_mutex_recursive_unlock+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	00030248 	.word	0x00030248

000b7370 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <os_thread_exit+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	00030248 	.word	0x00030248

000b7380 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <inet_inet_ntop+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	695b      	ldr	r3, [r3, #20]
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	00030264 	.word	0x00030264

000b7390 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <hal_usart_write+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	68db      	ldr	r3, [r3, #12]
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	0003023c 	.word	0x0003023c

000b73a0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b02      	ldr	r3, [pc, #8]	; (b73ac <hal_usart_available+0xc>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	691b      	ldr	r3, [r3, #16]
   b73a8:	9301      	str	r3, [sp, #4]
   b73aa:	bd08      	pop	{r3, pc}
   b73ac:	0003023c 	.word	0x0003023c

000b73b0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b73b0:	b508      	push	{r3, lr}
   b73b2:	4b02      	ldr	r3, [pc, #8]	; (b73bc <hal_usart_read+0xc>)
   b73b4:	681b      	ldr	r3, [r3, #0]
   b73b6:	695b      	ldr	r3, [r3, #20]
   b73b8:	9301      	str	r3, [sp, #4]
   b73ba:	bd08      	pop	{r3, pc}
   b73bc:	0003023c 	.word	0x0003023c

000b73c0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b73c0:	b508      	push	{r3, lr}
   b73c2:	4b02      	ldr	r3, [pc, #8]	; (b73cc <hal_usart_peek+0xc>)
   b73c4:	681b      	ldr	r3, [r3, #0]
   b73c6:	699b      	ldr	r3, [r3, #24]
   b73c8:	9301      	str	r3, [sp, #4]
   b73ca:	bd08      	pop	{r3, pc}
   b73cc:	0003023c 	.word	0x0003023c

000b73d0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b73d0:	b508      	push	{r3, lr}
   b73d2:	4b02      	ldr	r3, [pc, #8]	; (b73dc <hal_usart_flush+0xc>)
   b73d4:	681b      	ldr	r3, [r3, #0]
   b73d6:	69db      	ldr	r3, [r3, #28]
   b73d8:	9301      	str	r3, [sp, #4]
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	0003023c 	.word	0x0003023c

000b73e0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b73e0:	b508      	push	{r3, lr}
   b73e2:	4b02      	ldr	r3, [pc, #8]	; (b73ec <hal_usart_is_enabled+0xc>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	6a1b      	ldr	r3, [r3, #32]
   b73e8:	9301      	str	r3, [sp, #4]
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	0003023c 	.word	0x0003023c

000b73f0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b73f0:	b508      	push	{r3, lr}
   b73f2:	4b02      	ldr	r3, [pc, #8]	; (b73fc <hal_usart_available_data_for_write+0xc>)
   b73f4:	681b      	ldr	r3, [r3, #0]
   b73f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b73f8:	9301      	str	r3, [sp, #4]
   b73fa:	bd08      	pop	{r3, pc}
   b73fc:	0003023c 	.word	0x0003023c

000b7400 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7400:	b508      	push	{r3, lr}
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <hal_usart_init_ex+0xc>)
   b7404:	681b      	ldr	r3, [r3, #0]
   b7406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7408:	9301      	str	r3, [sp, #4]
   b740a:	bd08      	pop	{r3, pc}
   b740c:	0003023c 	.word	0x0003023c

000b7410 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7410:	b508      	push	{r3, lr}
   b7412:	4b02      	ldr	r3, [pc, #8]	; (b741c <hal_i2c_write+0xc>)
   b7414:	681b      	ldr	r3, [r3, #0]
   b7416:	6a1b      	ldr	r3, [r3, #32]
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	bd08      	pop	{r3, pc}
   b741c:	00030228 	.word	0x00030228

000b7420 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7420:	b508      	push	{r3, lr}
   b7422:	4b02      	ldr	r3, [pc, #8]	; (b742c <hal_i2c_available+0xc>)
   b7424:	681b      	ldr	r3, [r3, #0]
   b7426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7428:	9301      	str	r3, [sp, #4]
   b742a:	bd08      	pop	{r3, pc}
   b742c:	00030228 	.word	0x00030228

000b7430 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7430:	b508      	push	{r3, lr}
   b7432:	4b02      	ldr	r3, [pc, #8]	; (b743c <hal_i2c_read+0xc>)
   b7434:	681b      	ldr	r3, [r3, #0]
   b7436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7438:	9301      	str	r3, [sp, #4]
   b743a:	bd08      	pop	{r3, pc}
   b743c:	00030228 	.word	0x00030228

000b7440 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7440:	b508      	push	{r3, lr}
   b7442:	4b02      	ldr	r3, [pc, #8]	; (b744c <hal_i2c_peek+0xc>)
   b7444:	681b      	ldr	r3, [r3, #0]
   b7446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7448:	9301      	str	r3, [sp, #4]
   b744a:	bd08      	pop	{r3, pc}
   b744c:	00030228 	.word	0x00030228

000b7450 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7450:	b508      	push	{r3, lr}
   b7452:	4b02      	ldr	r3, [pc, #8]	; (b745c <hal_i2c_flush+0xc>)
   b7454:	681b      	ldr	r3, [r3, #0]
   b7456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7458:	9301      	str	r3, [sp, #4]
   b745a:	bd08      	pop	{r3, pc}
   b745c:	00030228 	.word	0x00030228

000b7460 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7460:	b508      	push	{r3, lr}
   b7462:	4b02      	ldr	r3, [pc, #8]	; (b746c <hal_i2c_is_enabled+0xc>)
   b7464:	681b      	ldr	r3, [r3, #0]
   b7466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7468:	9301      	str	r3, [sp, #4]
   b746a:	bd08      	pop	{r3, pc}
   b746c:	00030228 	.word	0x00030228

000b7470 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7470:	b508      	push	{r3, lr}
   b7472:	4b02      	ldr	r3, [pc, #8]	; (b747c <hal_i2c_init+0xc>)
   b7474:	681b      	ldr	r3, [r3, #0]
   b7476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7478:	9301      	str	r3, [sp, #4]
   b747a:	bd08      	pop	{r3, pc}
   b747c:	00030228 	.word	0x00030228

000b7480 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7480:	b508      	push	{r3, lr}
   b7482:	4b02      	ldr	r3, [pc, #8]	; (b748c <hal_spi_init+0xc>)
   b7484:	681b      	ldr	r3, [r3, #0]
   b7486:	69db      	ldr	r3, [r3, #28]
   b7488:	9301      	str	r3, [sp, #4]
   b748a:	bd08      	pop	{r3, pc}
   b748c:	00030230 	.word	0x00030230

000b7490 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7490:	b508      	push	{r3, lr}
   b7492:	4b02      	ldr	r3, [pc, #8]	; (b749c <hal_spi_is_enabled+0xc>)
   b7494:	681b      	ldr	r3, [r3, #0]
   b7496:	6a1b      	ldr	r3, [r3, #32]
   b7498:	9301      	str	r3, [sp, #4]
   b749a:	bd08      	pop	{r3, pc}
   b749c:	00030230 	.word	0x00030230

000b74a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b74a0:	b508      	push	{r3, lr}
   b74a2:	4b02      	ldr	r3, [pc, #8]	; (b74ac <HAL_USB_USART_Init+0xc>)
   b74a4:	681b      	ldr	r3, [r3, #0]
   b74a6:	681b      	ldr	r3, [r3, #0]
   b74a8:	9301      	str	r3, [sp, #4]
   b74aa:	bd08      	pop	{r3, pc}
   b74ac:	0003024c 	.word	0x0003024c

000b74b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b74b0:	b508      	push	{r3, lr}
   b74b2:	4b02      	ldr	r3, [pc, #8]	; (b74bc <HAL_USB_USART_Begin+0xc>)
   b74b4:	681b      	ldr	r3, [r3, #0]
   b74b6:	685b      	ldr	r3, [r3, #4]
   b74b8:	9301      	str	r3, [sp, #4]
   b74ba:	bd08      	pop	{r3, pc}
   b74bc:	0003024c 	.word	0x0003024c

000b74c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b74c0:	b508      	push	{r3, lr}
   b74c2:	4b02      	ldr	r3, [pc, #8]	; (b74cc <HAL_USB_USART_Available_Data+0xc>)
   b74c4:	681b      	ldr	r3, [r3, #0]
   b74c6:	691b      	ldr	r3, [r3, #16]
   b74c8:	9301      	str	r3, [sp, #4]
   b74ca:	bd08      	pop	{r3, pc}
   b74cc:	0003024c 	.word	0x0003024c

000b74d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b74d0:	b508      	push	{r3, lr}
   b74d2:	4b02      	ldr	r3, [pc, #8]	; (b74dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b74d4:	681b      	ldr	r3, [r3, #0]
   b74d6:	695b      	ldr	r3, [r3, #20]
   b74d8:	9301      	str	r3, [sp, #4]
   b74da:	bd08      	pop	{r3, pc}
   b74dc:	0003024c 	.word	0x0003024c

000b74e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b74e0:	b508      	push	{r3, lr}
   b74e2:	4b02      	ldr	r3, [pc, #8]	; (b74ec <HAL_USB_USART_Receive_Data+0xc>)
   b74e4:	681b      	ldr	r3, [r3, #0]
   b74e6:	699b      	ldr	r3, [r3, #24]
   b74e8:	9301      	str	r3, [sp, #4]
   b74ea:	bd08      	pop	{r3, pc}
   b74ec:	0003024c 	.word	0x0003024c

000b74f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b74f0:	b508      	push	{r3, lr}
   b74f2:	4b02      	ldr	r3, [pc, #8]	; (b74fc <HAL_USB_USART_Send_Data+0xc>)
   b74f4:	681b      	ldr	r3, [r3, #0]
   b74f6:	69db      	ldr	r3, [r3, #28]
   b74f8:	9301      	str	r3, [sp, #4]
   b74fa:	bd08      	pop	{r3, pc}
   b74fc:	0003024c 	.word	0x0003024c

000b7500 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7500:	b508      	push	{r3, lr}
   b7502:	4b02      	ldr	r3, [pc, #8]	; (b750c <HAL_USB_USART_Flush_Data+0xc>)
   b7504:	681b      	ldr	r3, [r3, #0]
   b7506:	6a1b      	ldr	r3, [r3, #32]
   b7508:	9301      	str	r3, [sp, #4]
   b750a:	bd08      	pop	{r3, pc}
   b750c:	0003024c 	.word	0x0003024c

000b7510 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b7510:	b508      	push	{r3, lr}
   b7512:	4b02      	ldr	r3, [pc, #8]	; (b751c <HAL_USB_USART_Is_Connected+0xc>)
   b7514:	681b      	ldr	r3, [r3, #0]
   b7516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7518:	9301      	str	r3, [sp, #4]
   b751a:	bd08      	pop	{r3, pc}
   b751c:	0003024c 	.word	0x0003024c

000b7520 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7520:	b508      	push	{r3, lr}
   b7522:	4b02      	ldr	r3, [pc, #8]	; (b752c <panic_+0xc>)
   b7524:	681b      	ldr	r3, [r3, #0]
   b7526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7528:	9301      	str	r3, [sp, #4]
   b752a:	bd08      	pop	{r3, pc}
   b752c:	00030260 	.word	0x00030260

000b7530 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7530:	b508      	push	{r3, lr}
   b7532:	4b02      	ldr	r3, [pc, #8]	; (b753c <log_message+0xc>)
   b7534:	681b      	ldr	r3, [r3, #0]
   b7536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7538:	9301      	str	r3, [sp, #4]
   b753a:	bd08      	pop	{r3, pc}
   b753c:	00030260 	.word	0x00030260

000b7540 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7540:	b508      	push	{r3, lr}
   b7542:	4b02      	ldr	r3, [pc, #8]	; (b754c <log_message_v+0xc>)
   b7544:	681b      	ldr	r3, [r3, #0]
   b7546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7548:	9301      	str	r3, [sp, #4]
   b754a:	bd08      	pop	{r3, pc}
   b754c:	00030260 	.word	0x00030260

000b7550 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7550:	b508      	push	{r3, lr}
   b7552:	4b02      	ldr	r3, [pc, #8]	; (b755c <system_mode+0xc>)
   b7554:	681b      	ldr	r3, [r3, #0]
   b7556:	681b      	ldr	r3, [r3, #0]
   b7558:	9301      	str	r3, [sp, #4]
   b755a:	bd08      	pop	{r3, pc}
   b755c:	00030220 	.word	0x00030220

000b7560 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7560:	b508      	push	{r3, lr}
   b7562:	4b02      	ldr	r3, [pc, #8]	; (b756c <set_system_mode+0xc>)
   b7564:	681b      	ldr	r3, [r3, #0]
   b7566:	685b      	ldr	r3, [r3, #4]
   b7568:	9301      	str	r3, [sp, #4]
   b756a:	bd08      	pop	{r3, pc}
   b756c:	00030220 	.word	0x00030220

000b7570 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7570:	b508      	push	{r3, lr}
   b7572:	4b02      	ldr	r3, [pc, #8]	; (b757c <system_thread_set_state+0xc>)
   b7574:	681b      	ldr	r3, [r3, #0]
   b7576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7578:	9301      	str	r3, [sp, #4]
   b757a:	bd08      	pop	{r3, pc}
   b757c:	00030220 	.word	0x00030220

000b7580 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7580:	b508      	push	{r3, lr}
   b7582:	4b02      	ldr	r3, [pc, #8]	; (b758c <application_thread_current+0xc>)
   b7584:	681b      	ldr	r3, [r3, #0]
   b7586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7588:	9301      	str	r3, [sp, #4]
   b758a:	bd08      	pop	{r3, pc}
   b758c:	00030220 	.word	0x00030220

000b7590 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7590:	b508      	push	{r3, lr}
   b7592:	4b02      	ldr	r3, [pc, #8]	; (b759c <application_thread_invoke+0xc>)
   b7594:	681b      	ldr	r3, [r3, #0]
   b7596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7598:	9301      	str	r3, [sp, #4]
   b759a:	bd08      	pop	{r3, pc}
   b759c:	00030220 	.word	0x00030220

000b75a0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b75a0:	b508      	push	{r3, lr}
   b75a2:	4b02      	ldr	r3, [pc, #8]	; (b75ac <system_thread_get_state+0xc>)
   b75a4:	681b      	ldr	r3, [r3, #0]
   b75a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b75a8:	9301      	str	r3, [sp, #4]
   b75aa:	bd08      	pop	{r3, pc}
   b75ac:	00030220 	.word	0x00030220

000b75b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b75b0:	b508      	push	{r3, lr}
   b75b2:	4b03      	ldr	r3, [pc, #12]	; (b75c0 <system_ctrl_set_app_request_handler+0x10>)
   b75b4:	681b      	ldr	r3, [r3, #0]
   b75b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b75ba:	9301      	str	r3, [sp, #4]
   b75bc:	bd08      	pop	{r3, pc}
   b75be:	0000      	.short	0x0000
   b75c0:	00030220 	.word	0x00030220

000b75c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b75c4:	b508      	push	{r3, lr}
   b75c6:	4b03      	ldr	r3, [pc, #12]	; (b75d4 <system_ctrl_set_result+0x10>)
   b75c8:	681b      	ldr	r3, [r3, #0]
   b75ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b75ce:	9301      	str	r3, [sp, #4]
   b75d0:	bd08      	pop	{r3, pc}
   b75d2:	0000      	.short	0x0000
   b75d4:	00030220 	.word	0x00030220

000b75d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b75d8:	b508      	push	{r3, lr}
   b75da:	4b02      	ldr	r3, [pc, #8]	; (b75e4 <network_connect+0xc>)
   b75dc:	681b      	ldr	r3, [r3, #0]
   b75de:	685b      	ldr	r3, [r3, #4]
   b75e0:	9301      	str	r3, [sp, #4]
   b75e2:	bd08      	pop	{r3, pc}
   b75e4:	00030240 	.word	0x00030240

000b75e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b75e8:	b508      	push	{r3, lr}
   b75ea:	4b02      	ldr	r3, [pc, #8]	; (b75f4 <network_connecting+0xc>)
   b75ec:	681b      	ldr	r3, [r3, #0]
   b75ee:	689b      	ldr	r3, [r3, #8]
   b75f0:	9301      	str	r3, [sp, #4]
   b75f2:	bd08      	pop	{r3, pc}
   b75f4:	00030240 	.word	0x00030240

000b75f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b75f8:	b508      	push	{r3, lr}
   b75fa:	4b02      	ldr	r3, [pc, #8]	; (b7604 <network_disconnect+0xc>)
   b75fc:	681b      	ldr	r3, [r3, #0]
   b75fe:	68db      	ldr	r3, [r3, #12]
   b7600:	9301      	str	r3, [sp, #4]
   b7602:	bd08      	pop	{r3, pc}
   b7604:	00030240 	.word	0x00030240

000b7608 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7608:	b508      	push	{r3, lr}
   b760a:	4b02      	ldr	r3, [pc, #8]	; (b7614 <network_ready+0xc>)
   b760c:	681b      	ldr	r3, [r3, #0]
   b760e:	691b      	ldr	r3, [r3, #16]
   b7610:	9301      	str	r3, [sp, #4]
   b7612:	bd08      	pop	{r3, pc}
   b7614:	00030240 	.word	0x00030240

000b7618 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7618:	b508      	push	{r3, lr}
   b761a:	4b02      	ldr	r3, [pc, #8]	; (b7624 <network_on+0xc>)
   b761c:	681b      	ldr	r3, [r3, #0]
   b761e:	695b      	ldr	r3, [r3, #20]
   b7620:	9301      	str	r3, [sp, #4]
   b7622:	bd08      	pop	{r3, pc}
   b7624:	00030240 	.word	0x00030240

000b7628 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7628:	b508      	push	{r3, lr}
   b762a:	4b02      	ldr	r3, [pc, #8]	; (b7634 <network_off+0xc>)
   b762c:	681b      	ldr	r3, [r3, #0]
   b762e:	699b      	ldr	r3, [r3, #24]
   b7630:	9301      	str	r3, [sp, #4]
   b7632:	bd08      	pop	{r3, pc}
   b7634:	00030240 	.word	0x00030240

000b7638 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7638:	b508      	push	{r3, lr}
   b763a:	4b02      	ldr	r3, [pc, #8]	; (b7644 <network_listen+0xc>)
   b763c:	681b      	ldr	r3, [r3, #0]
   b763e:	69db      	ldr	r3, [r3, #28]
   b7640:	9301      	str	r3, [sp, #4]
   b7642:	bd08      	pop	{r3, pc}
   b7644:	00030240 	.word	0x00030240

000b7648 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7648:	b508      	push	{r3, lr}
   b764a:	4b02      	ldr	r3, [pc, #8]	; (b7654 <network_listening+0xc>)
   b764c:	681b      	ldr	r3, [r3, #0]
   b764e:	6a1b      	ldr	r3, [r3, #32]
   b7650:	9301      	str	r3, [sp, #4]
   b7652:	bd08      	pop	{r3, pc}
   b7654:	00030240 	.word	0x00030240

000b7658 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7658:	b508      	push	{r3, lr}
   b765a:	4b02      	ldr	r3, [pc, #8]	; (b7664 <network_set_listen_timeout+0xc>)
   b765c:	681b      	ldr	r3, [r3, #0]
   b765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7660:	9301      	str	r3, [sp, #4]
   b7662:	bd08      	pop	{r3, pc}
   b7664:	00030240 	.word	0x00030240

000b7668 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7668:	b508      	push	{r3, lr}
   b766a:	4b02      	ldr	r3, [pc, #8]	; (b7674 <network_get_listen_timeout+0xc>)
   b766c:	681b      	ldr	r3, [r3, #0]
   b766e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7670:	9301      	str	r3, [sp, #4]
   b7672:	bd08      	pop	{r3, pc}
   b7674:	00030240 	.word	0x00030240

000b7678 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7678:	b508      	push	{r3, lr}
   b767a:	4b02      	ldr	r3, [pc, #8]	; (b7684 <network_is_on+0xc>)
   b767c:	681b      	ldr	r3, [r3, #0]
   b767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7680:	9301      	str	r3, [sp, #4]
   b7682:	bd08      	pop	{r3, pc}
   b7684:	00030240 	.word	0x00030240

000b7688 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7688:	b508      	push	{r3, lr}
   b768a:	4b02      	ldr	r3, [pc, #8]	; (b7694 <network_is_off+0xc>)
   b768c:	681b      	ldr	r3, [r3, #0]
   b768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7690:	9301      	str	r3, [sp, #4]
   b7692:	bd08      	pop	{r3, pc}
   b7694:	00030240 	.word	0x00030240

000b7698 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b7698:	b508      	push	{r3, lr}
   b769a:	4b02      	ldr	r3, [pc, #8]	; (b76a4 <spark_variable+0xc>)
   b769c:	681b      	ldr	r3, [r3, #0]
   b769e:	681b      	ldr	r3, [r3, #0]
   b76a0:	9301      	str	r3, [sp, #4]
   b76a2:	bd08      	pop	{r3, pc}
   b76a4:	00030244 	.word	0x00030244

000b76a8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b76a8:	b508      	push	{r3, lr}
   b76aa:	4b02      	ldr	r3, [pc, #8]	; (b76b4 <spark_function+0xc>)
   b76ac:	681b      	ldr	r3, [r3, #0]
   b76ae:	685b      	ldr	r3, [r3, #4]
   b76b0:	9301      	str	r3, [sp, #4]
   b76b2:	bd08      	pop	{r3, pc}
   b76b4:	00030244 	.word	0x00030244

000b76b8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b76b8:	b508      	push	{r3, lr}
   b76ba:	4b02      	ldr	r3, [pc, #8]	; (b76c4 <spark_process+0xc>)
   b76bc:	681b      	ldr	r3, [r3, #0]
   b76be:	689b      	ldr	r3, [r3, #8]
   b76c0:	9301      	str	r3, [sp, #4]
   b76c2:	bd08      	pop	{r3, pc}
   b76c4:	00030244 	.word	0x00030244

000b76c8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b76c8:	b508      	push	{r3, lr}
   b76ca:	4b02      	ldr	r3, [pc, #8]	; (b76d4 <spark_cloud_flag_connect+0xc>)
   b76cc:	681b      	ldr	r3, [r3, #0]
   b76ce:	68db      	ldr	r3, [r3, #12]
   b76d0:	9301      	str	r3, [sp, #4]
   b76d2:	bd08      	pop	{r3, pc}
   b76d4:	00030244 	.word	0x00030244

000b76d8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b76d8:	b508      	push	{r3, lr}
   b76da:	4b02      	ldr	r3, [pc, #8]	; (b76e4 <spark_cloud_flag_connected+0xc>)
   b76dc:	681b      	ldr	r3, [r3, #0]
   b76de:	695b      	ldr	r3, [r3, #20]
   b76e0:	9301      	str	r3, [sp, #4]
   b76e2:	bd08      	pop	{r3, pc}
   b76e4:	00030244 	.word	0x00030244

000b76e8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b76e8:	b508      	push	{r3, lr}
   b76ea:	4b02      	ldr	r3, [pc, #8]	; (b76f4 <spark_deviceID+0xc>)
   b76ec:	681b      	ldr	r3, [r3, #0]
   b76ee:	69db      	ldr	r3, [r3, #28]
   b76f0:	9301      	str	r3, [sp, #4]
   b76f2:	bd08      	pop	{r3, pc}
   b76f4:	00030244 	.word	0x00030244

000b76f8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b76f8:	b508      	push	{r3, lr}
   b76fa:	4b02      	ldr	r3, [pc, #8]	; (b7704 <spark_send_event+0xc>)
   b76fc:	681b      	ldr	r3, [r3, #0]
   b76fe:	6a1b      	ldr	r3, [r3, #32]
   b7700:	9301      	str	r3, [sp, #4]
   b7702:	bd08      	pop	{r3, pc}
   b7704:	00030244 	.word	0x00030244

000b7708 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7708:	b508      	push	{r3, lr}
   b770a:	4b02      	ldr	r3, [pc, #8]	; (b7714 <spark_sync_time_pending+0xc>)
   b770c:	681b      	ldr	r3, [r3, #0]
   b770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7710:	9301      	str	r3, [sp, #4]
   b7712:	bd08      	pop	{r3, pc}
   b7714:	00030244 	.word	0x00030244

000b7718 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7718:	b508      	push	{r3, lr}
   b771a:	4b02      	ldr	r3, [pc, #8]	; (b7724 <spark_set_random_seed_from_cloud_handler+0xc>)
   b771c:	681b      	ldr	r3, [r3, #0]
   b771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7720:	9301      	str	r3, [sp, #4]
   b7722:	bd08      	pop	{r3, pc}
   b7724:	00030244 	.word	0x00030244

000b7728 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7728:	b508      	push	{r3, lr}
   b772a:	4b02      	ldr	r3, [pc, #8]	; (b7734 <malloc+0xc>)
   b772c:	681b      	ldr	r3, [r3, #0]
   b772e:	681b      	ldr	r3, [r3, #0]
   b7730:	9301      	str	r3, [sp, #4]
   b7732:	bd08      	pop	{r3, pc}
   b7734:	0003021c 	.word	0x0003021c

000b7738 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7738:	b508      	push	{r3, lr}
   b773a:	4b02      	ldr	r3, [pc, #8]	; (b7744 <free+0xc>)
   b773c:	681b      	ldr	r3, [r3, #0]
   b773e:	685b      	ldr	r3, [r3, #4]
   b7740:	9301      	str	r3, [sp, #4]
   b7742:	bd08      	pop	{r3, pc}
   b7744:	0003021c 	.word	0x0003021c

000b7748 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7748:	b508      	push	{r3, lr}
   b774a:	4b02      	ldr	r3, [pc, #8]	; (b7754 <realloc+0xc>)
   b774c:	681b      	ldr	r3, [r3, #0]
   b774e:	689b      	ldr	r3, [r3, #8]
   b7750:	9301      	str	r3, [sp, #4]
   b7752:	bd08      	pop	{r3, pc}
   b7754:	0003021c 	.word	0x0003021c

000b7758 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b7758:	b508      	push	{r3, lr}
   b775a:	4b02      	ldr	r3, [pc, #8]	; (b7764 <siprintf+0xc>)
   b775c:	681b      	ldr	r3, [r3, #0]
   b775e:	691b      	ldr	r3, [r3, #16]
   b7760:	9301      	str	r3, [sp, #4]
   b7762:	bd08      	pop	{r3, pc}
   b7764:	0003021c 	.word	0x0003021c

000b7768 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7768:	b508      	push	{r3, lr}
   b776a:	4b02      	ldr	r3, [pc, #8]	; (b7774 <snprintf+0xc>)
   b776c:	681b      	ldr	r3, [r3, #0]
   b776e:	69db      	ldr	r3, [r3, #28]
   b7770:	9301      	str	r3, [sp, #4]
   b7772:	bd08      	pop	{r3, pc}
   b7774:	0003021c 	.word	0x0003021c

000b7778 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7778:	b508      	push	{r3, lr}
   b777a:	4b02      	ldr	r3, [pc, #8]	; (b7784 <vsnprintf+0xc>)
   b777c:	681b      	ldr	r3, [r3, #0]
   b777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7780:	9301      	str	r3, [sp, #4]
   b7782:	bd08      	pop	{r3, pc}
   b7784:	0003021c 	.word	0x0003021c

000b7788 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7788:	b508      	push	{r3, lr}
   b778a:	4b02      	ldr	r3, [pc, #8]	; (b7794 <abort+0xc>)
   b778c:	681b      	ldr	r3, [r3, #0]
   b778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7790:	9301      	str	r3, [sp, #4]
   b7792:	bd08      	pop	{r3, pc}
   b7794:	0003021c 	.word	0x0003021c

000b7798 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7798:	b508      	push	{r3, lr}
   b779a:	4b02      	ldr	r3, [pc, #8]	; (b77a4 <_malloc_r+0xc>)
   b779c:	681b      	ldr	r3, [r3, #0]
   b779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77a0:	9301      	str	r3, [sp, #4]
   b77a2:	bd08      	pop	{r3, pc}
   b77a4:	0003021c 	.word	0x0003021c

000b77a8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b77a8:	b508      	push	{r3, lr}
   b77aa:	4b02      	ldr	r3, [pc, #8]	; (b77b4 <__assert_func+0xc>)
   b77ac:	681b      	ldr	r3, [r3, #0]
   b77ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b77b0:	9301      	str	r3, [sp, #4]
   b77b2:	bd08      	pop	{r3, pc}
   b77b4:	0003021c 	.word	0x0003021c

000b77b8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b77b8:	b508      	push	{r3, lr}
   b77ba:	4b02      	ldr	r3, [pc, #8]	; (b77c4 <newlib_impure_ptr_callback+0xc>)
   b77bc:	681b      	ldr	r3, [r3, #0]
   b77be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b77c0:	9301      	str	r3, [sp, #4]
   b77c2:	bd08      	pop	{r3, pc}
   b77c4:	0003021c 	.word	0x0003021c

000b77c8 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b77c8:	b508      	push	{r3, lr}
   b77ca:	4b02      	ldr	r3, [pc, #8]	; (b77d4 <localtime_r+0xc>)
   b77cc:	681b      	ldr	r3, [r3, #0]
   b77ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b77d0:	9301      	str	r3, [sp, #4]
   b77d2:	bd08      	pop	{r3, pc}
   b77d4:	0003021c 	.word	0x0003021c

000b77d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b77d8:	2200      	movs	r2, #0
   b77da:	6840      	ldr	r0, [r0, #4]
   b77dc:	4611      	mov	r1, r2
   b77de:	f7ff bf33 	b.w	b7648 <network_listening>

000b77e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b77e2:	2200      	movs	r2, #0
   b77e4:	6840      	ldr	r0, [r0, #4]
   b77e6:	4611      	mov	r1, r2
   b77e8:	f7ff bf3e 	b.w	b7668 <network_get_listen_timeout>

000b77ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77ec:	6840      	ldr	r0, [r0, #4]
   b77ee:	2200      	movs	r2, #0
   b77f0:	f7ff bf32 	b.w	b7658 <network_set_listen_timeout>

000b77f4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b77f4:	6840      	ldr	r0, [r0, #4]
   b77f6:	2200      	movs	r2, #0
   b77f8:	f081 0101 	eor.w	r1, r1, #1
   b77fc:	f7ff bf1c 	b.w	b7638 <network_listen>

000b7800 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7800:	2300      	movs	r3, #0
   b7802:	6840      	ldr	r0, [r0, #4]
   b7804:	461a      	mov	r2, r3
   b7806:	4619      	mov	r1, r3
   b7808:	f7ff bf0e 	b.w	b7628 <network_off>

000b780c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b780c:	2300      	movs	r3, #0
   b780e:	6840      	ldr	r0, [r0, #4]
   b7810:	461a      	mov	r2, r3
   b7812:	4619      	mov	r1, r3
   b7814:	f7ff bf00 	b.w	b7618 <network_on>

000b7818 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7818:	2200      	movs	r2, #0
   b781a:	6840      	ldr	r0, [r0, #4]
   b781c:	4611      	mov	r1, r2
   b781e:	f7ff bef3 	b.w	b7608 <network_ready>

000b7822 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7822:	2200      	movs	r2, #0
   b7824:	6840      	ldr	r0, [r0, #4]
   b7826:	4611      	mov	r1, r2
   b7828:	f7ff bede 	b.w	b75e8 <network_connecting>

000b782c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b782c:	6840      	ldr	r0, [r0, #4]
   b782e:	2200      	movs	r2, #0
   b7830:	2102      	movs	r1, #2
   b7832:	f7ff bee1 	b.w	b75f8 <network_disconnect>

000b7836 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7836:	2300      	movs	r3, #0
   b7838:	6840      	ldr	r0, [r0, #4]
   b783a:	461a      	mov	r2, r3
   b783c:	f7ff becc 	b.w	b75d8 <network_connect>

000b7840 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7840:	4b02      	ldr	r3, [pc, #8]	; (b784c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7842:	2203      	movs	r2, #3
   b7844:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7846:	4a02      	ldr	r2, [pc, #8]	; (b7850 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7848:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b784a:	4770      	bx	lr
   b784c:	2003e6a0 	.word	0x2003e6a0
   b7850:	000bc418 	.word	0x000bc418

000b7854 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7854:	b510      	push	{r4, lr}
   b7856:	4604      	mov	r4, r0
   b7858:	4608      	mov	r0, r1
{
    _spi = spi;
   b785a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b785c:	f7ff fe10 	bl	b7480 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7860:	2300      	movs	r3, #0
   b7862:	6063      	str	r3, [r4, #4]
}
   b7864:	4620      	mov	r0, r4
   b7866:	bd10      	pop	{r4, pc}

000b7868 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7868:	4b05      	ldr	r3, [pc, #20]	; (b7880 <_GLOBAL__sub_I_System+0x18>)
   b786a:	2202      	movs	r2, #2
   b786c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b786e:	4b05      	ldr	r3, [pc, #20]	; (b7884 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7870:	4a05      	ldr	r2, [pc, #20]	; (b7888 <_GLOBAL__sub_I_System+0x20>)
   b7872:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7874:	2000      	movs	r0, #0
   b7876:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b787a:	f7ff be71 	b.w	b7560 <set_system_mode>
   b787e:	bf00      	nop
   b7880:	2003e6b4 	.word	0x2003e6b4
   b7884:	2003e6a8 	.word	0x2003e6a8
   b7888:	ffff0000 	.word	0xffff0000

000b788c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b788c:	b510      	push	{r4, lr}
   b788e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7890:	f004 fb0b 	bl	bbeaa <strlen>
   b7894:	3801      	subs	r0, #1
   b7896:	1823      	adds	r3, r4, r0
   b7898:	4620      	mov	r0, r4
	while(i<j){
   b789a:	4283      	cmp	r3, r0
   b789c:	d906      	bls.n	b78ac <_Z11str_reversePc+0x20>
		c = *i;
   b789e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b78a0:	7819      	ldrb	r1, [r3, #0]
   b78a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b78a6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b78aa:	e7f6      	b.n	b789a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b78ac:	bd10      	pop	{r4, pc}

000b78ae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b78ae:	b570      	push	{r4, r5, r6, lr}
   b78b0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b78b2:	1e91      	subs	r1, r2, #2
   b78b4:	2922      	cmp	r1, #34	; 0x22
   b78b6:	d81d      	bhi.n	b78f4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b78b8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b78ba:	b930      	cbnz	r0, b78ca <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b78bc:	4423      	add	r3, r4
            *ptr++ = '0';
   b78be:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b78c0:	429d      	cmp	r5, r3
   b78c2:	d210      	bcs.n	b78e6 <ultoa+0x38>
            *ptr++ = '0';
   b78c4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b78c8:	e7fa      	b.n	b78c0 <ultoa+0x12>
            result.quot = a/radix;
   b78ca:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b78ce:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b78d2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b78d4:	2809      	cmp	r0, #9
                *ptr += '0';
   b78d6:	bf94      	ite	ls
   b78d8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b78da:	3157      	addhi	r1, #87	; 0x57
   b78dc:	b2c9      	uxtb	r1, r1
   b78de:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b78e2:	4630      	mov	r0, r6
	while(a){
   b78e4:	e7e9      	b.n	b78ba <ultoa+0xc>

	*ptr = '\0';
   b78e6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b78e8:	4620      	mov	r0, r4
	*ptr = '\0';
   b78ea:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b78ec:	f7ff ffce 	bl	b788c <_Z11str_reversePc>
	return buffer;
   b78f0:	4620      	mov	r0, r4
}
   b78f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b78f4:	2000      	movs	r0, #0
   b78f6:	e7fc      	b.n	b78f2 <ultoa+0x44>

000b78f8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b78f8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b78fa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b78fc:	460c      	mov	r4, r1
   b78fe:	4615      	mov	r5, r2
	if(a<0){
   b7900:	da0e      	bge.n	b7920 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7906:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b790a:	bf14      	ite	ne
   b790c:	4258      	negne	r0, r3
   b790e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7910:	2301      	movs	r3, #1
		*buffer = '-';
   b7912:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7914:	462a      	mov	r2, r5
   b7916:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7918:	f7ff ffc9 	bl	b78ae <ultoa>
	}
	return buffer;
}
   b791c:	4620      	mov	r0, r4
   b791e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7920:	2301      	movs	r3, #1
   b7922:	e7f9      	b.n	b7918 <itoa+0x20>

000b7924 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7924:	b510      	push	{r4, lr}
   b7926:	4604      	mov	r4, r0
{
	free(buffer);
   b7928:	6800      	ldr	r0, [r0, #0]
   b792a:	f7ff ff05 	bl	b7738 <free>
}
   b792e:	4620      	mov	r0, r4
   b7930:	bd10      	pop	{r4, pc}

000b7932 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7932:	b510      	push	{r4, lr}
   b7934:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7936:	6800      	ldr	r0, [r0, #0]
   b7938:	b108      	cbz	r0, b793e <_ZN6String10invalidateEv+0xc>
   b793a:	f7ff fefd 	bl	b7738 <free>
	buffer = NULL;
   b793e:	2300      	movs	r3, #0
	capacity = len = 0;
   b7940:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7944:	6023      	str	r3, [r4, #0]
}
   b7946:	bd10      	pop	{r4, pc}

000b7948 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7948:	b538      	push	{r3, r4, r5, lr}
   b794a:	4604      	mov	r4, r0
   b794c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b794e:	6800      	ldr	r0, [r0, #0]
   b7950:	3101      	adds	r1, #1
   b7952:	f7ff fef9 	bl	b7748 <realloc>
	if (newbuffer) {
   b7956:	b110      	cbz	r0, b795e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7958:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b795c:	2001      	movs	r0, #1
	}
	return 0;
}
   b795e:	bd38      	pop	{r3, r4, r5, pc}

000b7960 <_ZN6String7reserveEj>:
{
   b7960:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7962:	6803      	ldr	r3, [r0, #0]
{
   b7964:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7966:	b123      	cbz	r3, b7972 <_ZN6String7reserveEj+0x12>
   b7968:	6843      	ldr	r3, [r0, #4]
   b796a:	428b      	cmp	r3, r1
   b796c:	d301      	bcc.n	b7972 <_ZN6String7reserveEj+0x12>
   b796e:	2001      	movs	r0, #1
}
   b7970:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7972:	4620      	mov	r0, r4
   b7974:	f7ff ffe8 	bl	b7948 <_ZN6String12changeBufferEj>
   b7978:	2800      	cmp	r0, #0
   b797a:	d0f9      	beq.n	b7970 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b797c:	68a3      	ldr	r3, [r4, #8]
   b797e:	2b00      	cmp	r3, #0
   b7980:	d1f5      	bne.n	b796e <_ZN6String7reserveEj+0xe>
   b7982:	6822      	ldr	r2, [r4, #0]
   b7984:	7013      	strb	r3, [r2, #0]
   b7986:	e7f2      	b.n	b796e <_ZN6String7reserveEj+0xe>

000b7988 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7988:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b798a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b798c:	4611      	mov	r1, r2
   b798e:	9201      	str	r2, [sp, #4]
{
   b7990:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7992:	f7ff ffe5 	bl	b7960 <_ZN6String7reserveEj>
   b7996:	9a01      	ldr	r2, [sp, #4]
   b7998:	b928      	cbnz	r0, b79a6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b799a:	4620      	mov	r0, r4
   b799c:	f7ff ffc9 	bl	b7932 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b79a0:	4620      	mov	r0, r4
   b79a2:	b003      	add	sp, #12
   b79a4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b79a6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b79a8:	4629      	mov	r1, r5
   b79aa:	6820      	ldr	r0, [r4, #0]
   b79ac:	f004 f9f0 	bl	bbd90 <memcpy>
	buffer[len] = 0;
   b79b0:	6822      	ldr	r2, [r4, #0]
   b79b2:	68a3      	ldr	r3, [r4, #8]
   b79b4:	2100      	movs	r1, #0
   b79b6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b79b8:	e7f2      	b.n	b79a0 <_ZN6String4copyEPKcj+0x18>

000b79ba <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b79ba:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b79bc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b79be:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b79c2:	4604      	mov	r4, r0
	len = 0;
   b79c4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b79c6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b79c8:	b141      	cbz	r1, b79dc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b79ca:	4608      	mov	r0, r1
   b79cc:	9101      	str	r1, [sp, #4]
   b79ce:	f004 fa6c 	bl	bbeaa <strlen>
   b79d2:	9901      	ldr	r1, [sp, #4]
   b79d4:	4602      	mov	r2, r0
   b79d6:	4620      	mov	r0, r4
   b79d8:	f7ff ffd6 	bl	b7988 <_ZN6String4copyEPKcj>
}
   b79dc:	4620      	mov	r0, r4
   b79de:	b002      	add	sp, #8
   b79e0:	bd10      	pop	{r4, pc}

000b79e2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b79e2:	b538      	push	{r3, r4, r5, lr}
   b79e4:	4605      	mov	r5, r0
	if (buffer) {
   b79e6:	6800      	ldr	r0, [r0, #0]
{
   b79e8:	460c      	mov	r4, r1
	if (buffer) {
   b79ea:	b168      	cbz	r0, b7a08 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b79ec:	686a      	ldr	r2, [r5, #4]
   b79ee:	688b      	ldr	r3, [r1, #8]
   b79f0:	429a      	cmp	r2, r3
   b79f2:	d307      	bcc.n	b7a04 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b79f4:	6809      	ldr	r1, [r1, #0]
   b79f6:	f004 fa33 	bl	bbe60 <strcpy>
			len = rhs.len;
   b79fa:	68a3      	ldr	r3, [r4, #8]
   b79fc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b79fe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7a00:	60a3      	str	r3, [r4, #8]
}
   b7a02:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7a04:	f7ff fe98 	bl	b7738 <free>
	buffer = rhs.buffer;
   b7a08:	6823      	ldr	r3, [r4, #0]
   b7a0a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7a0c:	6863      	ldr	r3, [r4, #4]
   b7a0e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7a10:	68a3      	ldr	r3, [r4, #8]
   b7a12:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7a14:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7a16:	e9c4 3300 	strd	r3, r3, [r4]
   b7a1a:	e7f1      	b.n	b7a00 <_ZN6String4moveERS_+0x1e>

000b7a1c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b7a1c:	b510      	push	{r4, lr}
	buffer = NULL;
   b7a1e:	2300      	movs	r3, #0
	capacity = 0;
   b7a20:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7a24:	4604      	mov	r4, r0
	len = 0;
   b7a26:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7a28:	7303      	strb	r3, [r0, #12]
	move(rval);
   b7a2a:	f7ff ffda 	bl	b79e2 <_ZN6String4moveERS_>
}
   b7a2e:	4620      	mov	r0, r4
   b7a30:	bd10      	pop	{r4, pc}

000b7a32 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7a32:	4288      	cmp	r0, r1
{
   b7a34:	b510      	push	{r4, lr}
   b7a36:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7a38:	d005      	beq.n	b7a46 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7a3a:	680b      	ldr	r3, [r1, #0]
   b7a3c:	b12b      	cbz	r3, b7a4a <_ZN6StringaSERKS_+0x18>
   b7a3e:	688a      	ldr	r2, [r1, #8]
   b7a40:	4619      	mov	r1, r3
   b7a42:	f7ff ffa1 	bl	b7988 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7a46:	4620      	mov	r0, r4
   b7a48:	bd10      	pop	{r4, pc}
	else invalidate();
   b7a4a:	f7ff ff72 	bl	b7932 <_ZN6String10invalidateEv>
   b7a4e:	e7fa      	b.n	b7a46 <_ZN6StringaSERKS_+0x14>

000b7a50 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7a50:	b510      	push	{r4, lr}
	buffer = NULL;
   b7a52:	2300      	movs	r3, #0
String::String(const String &value)
   b7a54:	4604      	mov	r4, r0
	capacity = 0;
   b7a56:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7a5a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7a5c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7a5e:	f7ff ffe8 	bl	b7a32 <_ZN6StringaSERKS_>
}
   b7a62:	4620      	mov	r0, r4
   b7a64:	bd10      	pop	{r4, pc}

000b7a66 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7a66:	b513      	push	{r0, r1, r4, lr}
   b7a68:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7a6a:	b159      	cbz	r1, b7a84 <_ZN6StringaSEPKc+0x1e>
   b7a6c:	4608      	mov	r0, r1
   b7a6e:	9101      	str	r1, [sp, #4]
   b7a70:	f004 fa1b 	bl	bbeaa <strlen>
   b7a74:	9901      	ldr	r1, [sp, #4]
   b7a76:	4602      	mov	r2, r0
   b7a78:	4620      	mov	r0, r4
   b7a7a:	f7ff ff85 	bl	b7988 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7a7e:	4620      	mov	r0, r4
   b7a80:	b002      	add	sp, #8
   b7a82:	bd10      	pop	{r4, pc}
	else invalidate();
   b7a84:	f7ff ff55 	bl	b7932 <_ZN6String10invalidateEv>
   b7a88:	e7f9      	b.n	b7a7e <_ZN6StringaSEPKc+0x18>

000b7a8a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7a8a:	b570      	push	{r4, r5, r6, lr}
   b7a8c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7a8e:	460e      	mov	r6, r1
   b7a90:	b909      	cbnz	r1, b7a96 <_ZN6String6concatEPKcj+0xc>
   b7a92:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7a94:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7a96:	b16a      	cbz	r2, b7ab4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7a98:	6884      	ldr	r4, [r0, #8]
   b7a9a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7a9c:	4621      	mov	r1, r4
   b7a9e:	f7ff ff5f 	bl	b7960 <_ZN6String7reserveEj>
   b7aa2:	2800      	cmp	r0, #0
   b7aa4:	d0f5      	beq.n	b7a92 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7aa6:	6828      	ldr	r0, [r5, #0]
   b7aa8:	68ab      	ldr	r3, [r5, #8]
   b7aaa:	4631      	mov	r1, r6
   b7aac:	4418      	add	r0, r3
   b7aae:	f004 f9d7 	bl	bbe60 <strcpy>
	len = newlen;
   b7ab2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7ab4:	2001      	movs	r0, #1
   b7ab6:	e7ed      	b.n	b7a94 <_ZN6String6concatEPKcj+0xa>

000b7ab8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b7ab8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b7aba:	2300      	movs	r3, #0
	buf[0] = c;
   b7abc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7ac0:	2201      	movs	r2, #1
   b7ac2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7ac4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7ac8:	f7ff ffdf 	bl	b7a8a <_ZN6String6concatEPKcj>
}
   b7acc:	b003      	add	sp, #12
   b7ace:	f85d fb04 	ldr.w	pc, [sp], #4

000b7ad2 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   b7ad2:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   b7ad4:	220a      	movs	r2, #10
{
   b7ad6:	4604      	mov	r4, r0
   b7ad8:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b7ada:	4669      	mov	r1, sp
   b7adc:	f7ff ff0c 	bl	b78f8 <itoa>
	return concat(buf, strlen(buf));
   b7ae0:	4668      	mov	r0, sp
   b7ae2:	f004 f9e2 	bl	bbeaa <strlen>
   b7ae6:	4669      	mov	r1, sp
   b7ae8:	4602      	mov	r2, r0
   b7aea:	4620      	mov	r0, r4
   b7aec:	f7ff ffcd 	bl	b7a8a <_ZN6String6concatEPKcj>
}
   b7af0:	b002      	add	sp, #8
   b7af2:	bd10      	pop	{r4, pc}

000b7af4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7af4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7af6:	688a      	ldr	r2, [r1, #8]
   b7af8:	6809      	ldr	r1, [r1, #0]
{
   b7afa:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7afc:	f7ff ffc5 	bl	b7a8a <_ZN6String6concatEPKcj>
   b7b00:	b910      	cbnz	r0, b7b08 <_ZplRK15StringSumHelperRK6String+0x14>
   b7b02:	4620      	mov	r0, r4
   b7b04:	f7ff ff15 	bl	b7932 <_ZN6String10invalidateEv>
	return a;
}
   b7b08:	4620      	mov	r0, r4
   b7b0a:	bd10      	pop	{r4, pc}

000b7b0c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b7b0c:	b513      	push	{r0, r1, r4, lr}
   b7b0e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7b10:	b929      	cbnz	r1, b7b1e <_ZplRK15StringSumHelperPKc+0x12>
   b7b12:	4620      	mov	r0, r4
   b7b14:	f7ff ff0d 	bl	b7932 <_ZN6String10invalidateEv>
	return a;
}
   b7b18:	4620      	mov	r0, r4
   b7b1a:	b002      	add	sp, #8
   b7b1c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7b1e:	4608      	mov	r0, r1
   b7b20:	9101      	str	r1, [sp, #4]
   b7b22:	f004 f9c2 	bl	bbeaa <strlen>
   b7b26:	9901      	ldr	r1, [sp, #4]
   b7b28:	4602      	mov	r2, r0
   b7b2a:	4620      	mov	r0, r4
   b7b2c:	f7ff ffad 	bl	b7a8a <_ZN6String6concatEPKcj>
   b7b30:	2800      	cmp	r0, #0
   b7b32:	d0ee      	beq.n	b7b12 <_ZplRK15StringSumHelperPKc+0x6>
   b7b34:	e7f0      	b.n	b7b18 <_ZplRK15StringSumHelperPKc+0xc>

000b7b36 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   b7b36:	b510      	push	{r4, lr}
   b7b38:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b7b3a:	f7ff ffca 	bl	b7ad2 <_ZN6String6concatEi>
   b7b3e:	b910      	cbnz	r0, b7b46 <_ZplRK15StringSumHelperi+0x10>
   b7b40:	4620      	mov	r0, r4
   b7b42:	f7ff fef6 	bl	b7932 <_ZN6String10invalidateEv>
	return a;
}
   b7b46:	4620      	mov	r0, r4
   b7b48:	bd10      	pop	{r4, pc}

000b7b4a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b7b4a:	6802      	ldr	r2, [r0, #0]
{
   b7b4c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b7b4e:	6809      	ldr	r1, [r1, #0]
   b7b50:	b162      	cbz	r2, b7b6c <_ZNK6String9compareToERKS_+0x22>
   b7b52:	b941      	cbnz	r1, b7b66 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b7b54:	6880      	ldr	r0, [r0, #8]
   b7b56:	b160      	cbz	r0, b7b72 <_ZNK6String9compareToERKS_+0x28>
   b7b58:	7810      	ldrb	r0, [r2, #0]
   b7b5a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7b5c:	6898      	ldr	r0, [r3, #8]
   b7b5e:	b140      	cbz	r0, b7b72 <_ZNK6String9compareToERKS_+0x28>
   b7b60:	7809      	ldrb	r1, [r1, #0]
   b7b62:	4248      	negs	r0, r1
   b7b64:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b7b66:	4610      	mov	r0, r2
   b7b68:	f004 b970 	b.w	bbe4c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7b6c:	2900      	cmp	r1, #0
   b7b6e:	d1f5      	bne.n	b7b5c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b7b70:	4608      	mov	r0, r1
}
   b7b72:	4770      	bx	lr

000b7b74 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b7b74:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b7b76:	6882      	ldr	r2, [r0, #8]
   b7b78:	688b      	ldr	r3, [r1, #8]
   b7b7a:	429a      	cmp	r2, r3
   b7b7c:	d105      	bne.n	b7b8a <_ZNK6String6equalsERKS_+0x16>
   b7b7e:	f7ff ffe4 	bl	b7b4a <_ZNK6String9compareToERKS_>
   b7b82:	fab0 f080 	clz	r0, r0
   b7b86:	0940      	lsrs	r0, r0, #5
}
   b7b88:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b7b8a:	2000      	movs	r0, #0
   b7b8c:	e7fc      	b.n	b7b88 <_ZNK6String6equalsERKS_+0x14>

000b7b8e <_ZNK6StringltERKS_>:
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
   b7b8e:	b508      	push	{r3, lr}
	return compareTo(rhs) < 0;
   b7b90:	f7ff ffdb 	bl	b7b4a <_ZNK6String9compareToERKS_>
}
   b7b94:	0fc0      	lsrs	r0, r0, #31
   b7b96:	bd08      	pop	{r3, pc}

000b7b98 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b7b98:	b40e      	push	{r1, r2, r3}
   b7b9a:	b570      	push	{r4, r5, r6, lr}
   b7b9c:	b087      	sub	sp, #28
   b7b9e:	ad0b      	add	r5, sp, #44	; 0x2c
   b7ba0:	4604      	mov	r4, r0
   b7ba2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7ba6:	9201      	str	r2, [sp, #4]
   b7ba8:	462b      	mov	r3, r5
   b7baa:	2105      	movs	r1, #5
   b7bac:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b7bae:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7bb0:	f7ff fde2 	bl	b7778 <vsnprintf>
    va_end(marker);

    String result;
   b7bb4:	490b      	ldr	r1, [pc, #44]	; (b7be4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7bb6:	4606      	mov	r6, r0
    String result;
   b7bb8:	4620      	mov	r0, r4
   b7bba:	f7ff fefe 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b7bbe:	4631      	mov	r1, r6
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	f7ff fecd 	bl	b7960 <_ZN6String7reserveEj>
    if (result.buffer) {
   b7bc6:	6820      	ldr	r0, [r4, #0]
   b7bc8:	b130      	cbz	r0, b7bd8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7bca:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b7bcc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7bce:	462b      	mov	r3, r5
   b7bd0:	1c71      	adds	r1, r6, #1
   b7bd2:	f7ff fdd1 	bl	b7778 <vsnprintf>
        va_end(marker);
        result.len = n;
   b7bd6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b7bd8:	4620      	mov	r0, r4
   b7bda:	b007      	add	sp, #28
   b7bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7be0:	b003      	add	sp, #12
   b7be2:	4770      	bx	lr
   b7be4:	000bc938 	.word	0x000bc938

000b7be8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7be8:	4770      	bx	lr

000b7bea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7bea:	4770      	bx	lr

000b7bec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7bec:	4770      	bx	lr

000b7bee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7bee:	4770      	bx	lr

000b7bf0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7bf0:	4b06      	ldr	r3, [pc, #24]	; (b7c0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7bf2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7bf4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7bf6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7bfa:	d005      	beq.n	b7c08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7bfc:	4608      	mov	r0, r1
   b7bfe:	f003 fc33 	bl	bb468 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7c02:	2800      	cmp	r0, #0
   b7c04:	bf08      	it	eq
   b7c06:	2400      	moveq	r4, #0
      }
   b7c08:	4620      	mov	r0, r4
   b7c0a:	bd10      	pop	{r4, pc}
   b7c0c:	000bc6bc 	.word	0x000bc6bc

000b7c10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7c10:	4b06      	ldr	r3, [pc, #24]	; (b7c2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7c12:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7c14:	b510      	push	{r4, lr}
   b7c16:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7c1a:	d005      	beq.n	b7c28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7c1c:	4608      	mov	r0, r1
   b7c1e:	f003 fc23 	bl	bb468 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7c22:	2800      	cmp	r0, #0
   b7c24:	bf08      	it	eq
   b7c26:	2400      	moveq	r4, #0
      }
   b7c28:	4620      	mov	r0, r4
   b7c2a:	bd10      	pop	{r4, pc}
   b7c2c:	000bc6bc 	.word	0x000bc6bc

000b7c30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7c30:	4b06      	ldr	r3, [pc, #24]	; (b7c4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7c32:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7c34:	b510      	push	{r4, lr}
   b7c36:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7c3a:	d005      	beq.n	b7c48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7c3c:	4608      	mov	r0, r1
   b7c3e:	f003 fc13 	bl	bb468 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7c42:	2800      	cmp	r0, #0
   b7c44:	bf08      	it	eq
   b7c46:	2400      	moveq	r4, #0
      }
   b7c48:	4620      	mov	r0, r4
   b7c4a:	bd10      	pop	{r4, pc}
   b7c4c:	000bc6bc 	.word	0x000bc6bc

000b7c50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7c50:	b510      	push	{r4, lr}
   b7c52:	2168      	movs	r1, #104	; 0x68
   b7c54:	4604      	mov	r4, r0
   b7c56:	f7fc fa20 	bl	b409a <_ZdlPvj>
   b7c5a:	4620      	mov	r0, r4
   b7c5c:	bd10      	pop	{r4, pc}

000b7c5e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7c5e:	b510      	push	{r4, lr}
   b7c60:	2128      	movs	r1, #40	; 0x28
   b7c62:	4604      	mov	r4, r0
   b7c64:	f7fc fa19 	bl	b409a <_ZdlPvj>
   b7c68:	4620      	mov	r0, r4
   b7c6a:	bd10      	pop	{r4, pc}

000b7c6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7c6c:	b510      	push	{r4, lr}
   b7c6e:	2130      	movs	r1, #48	; 0x30
   b7c70:	4604      	mov	r4, r0
   b7c72:	f7fc fa12 	bl	b409a <_ZdlPvj>
   b7c76:	4620      	mov	r0, r4
   b7c78:	bd10      	pop	{r4, pc}

000b7c7a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7c7a:	2168      	movs	r1, #104	; 0x68
   b7c7c:	f7fc ba0d 	b.w	b409a <_ZdlPvj>

000b7c80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7c80:	2128      	movs	r1, #40	; 0x28
   b7c82:	f7fc ba0a 	b.w	b409a <_ZdlPvj>

000b7c86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7c86:	2130      	movs	r1, #48	; 0x30
   b7c88:	f7fc ba07 	b.w	b409a <_ZdlPvj>

000b7c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7c8e:	2500      	movs	r5, #0
   b7c90:	1cec      	adds	r4, r5, #3
   b7c92:	428c      	cmp	r4, r1
   b7c94:	d80d      	bhi.n	b7cb2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7c96:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7c98:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7c9a:	5d87      	ldrb	r7, [r0, r6]
   b7c9c:	4297      	cmp	r7, r2
   b7c9e:	d105      	bne.n	b7cac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7ca0:	4426      	add	r6, r4
   b7ca2:	42b1      	cmp	r1, r6
   b7ca4:	d305      	bcc.n	b7cb2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7ca6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7ca8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7cac:	3401      	adds	r4, #1
   b7cae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7cb0:	e7ee      	b.n	b7c90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7cb2:	2000      	movs	r0, #0
   b7cb4:	e7f9      	b.n	b7caa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7cb8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7cb8:	4a02      	ldr	r2, [pc, #8]	; (b7cc4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7cba:	4903      	ldr	r1, [pc, #12]	; (b7cc8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7cbc:	200a      	movs	r0, #10
   b7cbe:	f7ff bc2f 	b.w	b7520 <panic_>
   b7cc2:	bf00      	nop
   b7cc4:	000b7169 	.word	0x000b7169
   b7cc8:	000bc44c 	.word	0x000bc44c

000b7ccc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7ccc:	b430      	push	{r4, r5}
   b7cce:	460d      	mov	r5, r1
   b7cd0:	4611      	mov	r1, r2
   b7cd2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7cd4:	6803      	ldr	r3, [r0, #0]
   b7cd6:	6809      	ldr	r1, [r1, #0]
   b7cd8:	6828      	ldr	r0, [r5, #0]
   b7cda:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7cde:	46a4      	mov	ip, r4
      }
   b7ce0:	bc30      	pop	{r4, r5}
   b7ce2:	4760      	bx	ip

000b7ce4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7ce4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7ce6:	b538      	push	{r3, r4, r5, lr}
   b7ce8:	4604      	mov	r4, r0
	switch (__op)
   b7cea:	d102      	bne.n	b7cf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7cec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7cee:	6023      	str	r3, [r4, #0]
	}
   b7cf0:	e003      	b.n	b7cfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7cf2:	2a02      	cmp	r2, #2
   b7cf4:	d003      	beq.n	b7cfe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7cf6:	2a03      	cmp	r2, #3
   b7cf8:	d00d      	beq.n	b7d16 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7cfa:	2000      	movs	r0, #0
   b7cfc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7cfe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7d00:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7d02:	f7fc f9c6 	bl	b4092 <_Znwj>
   b7d06:	4603      	mov	r3, r0
   b7d08:	2800      	cmp	r0, #0
   b7d0a:	d0f0      	beq.n	b7cee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7d0c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7d10:	e883 0003 	stmia.w	r3, {r0, r1}
   b7d14:	e7eb      	b.n	b7cee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7d16:	6800      	ldr	r0, [r0, #0]
   b7d18:	2800      	cmp	r0, #0
   b7d1a:	d0ee      	beq.n	b7cfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7d1c:	2108      	movs	r1, #8
   b7d1e:	f7fc f9bc 	bl	b409a <_ZdlPvj>
   b7d22:	e7ea      	b.n	b7cfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7d24 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7d24:	b510      	push	{r4, lr}
	if (_M_manager)
   b7d26:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7d28:	4604      	mov	r4, r0
	if (_M_manager)
   b7d2a:	b12b      	cbz	r3, b7d38 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7d2c:	2203      	movs	r2, #3
   b7d2e:	4601      	mov	r1, r0
   b7d30:	4798      	blx	r3
	    _M_manager = nullptr;
   b7d32:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7d34:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7d38:	bd10      	pop	{r4, pc}

000b7d3a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7d3a:	b510      	push	{r4, lr}
	if (_M_manager)
   b7d3c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7d3e:	4604      	mov	r4, r0
	if (_M_manager)
   b7d40:	b12b      	cbz	r3, b7d4e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7d42:	2203      	movs	r2, #3
   b7d44:	4601      	mov	r1, r0
   b7d46:	4798      	blx	r3
	    _M_manager = nullptr;
   b7d48:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7d4a:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7d4e:	bd10      	pop	{r4, pc}

000b7d50 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b7d50:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b7d52:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b7d54:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b7d56:	2220      	movs	r2, #32
   b7d58:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b7d5c:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b7d5e:	4a08      	ldr	r2, [pc, #32]	; (b7d80 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b7d60:	9200      	str	r2, [sp, #0]
   b7d62:	4908      	ldr	r1, [pc, #32]	; (b7d84 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b7d64:	aa02      	add	r2, sp, #8
   b7d66:	2001      	movs	r0, #1
   b7d68:	f7ff fbe2 	bl	b7530 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7d6c:	6820      	ldr	r0, [r4, #0]
   b7d6e:	4906      	ldr	r1, [pc, #24]	; (b7d88 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b7d70:	8800      	ldrh	r0, [r0, #0]
   b7d72:	2300      	movs	r3, #0
   b7d74:	4622      	mov	r2, r4
    }
   b7d76:	b00a      	add	sp, #40	; 0x28
   b7d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7d7c:	f7ff ba5a 	b.w	b7234 <hal_ble_gatt_client_discover_all_services>
   b7d80:	000bc46e 	.word	0x000bc46e
   b7d84:	000bc463 	.word	0x000bc463
   b7d88:	000b9841 	.word	0x000b9841

000b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b7d8c:	b510      	push	{r4, lr}
   b7d8e:	3801      	subs	r0, #1
   b7d90:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b7d94:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b7d98:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b7d9a:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b7d9e:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b7da0:	bf88      	it	hi
   b7da2:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b7da6:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b7daa:	7803      	ldrb	r3, [r0, #0]
   b7dac:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b7db0:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b7db4:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b7db6:	bf88      	it	hi
   b7db8:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b7dbc:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b7dbe:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b7dc2:	d1e7      	bne.n	b7d94 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b7dc4:	bd10      	pop	{r4, pc}

000b7dc6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7dc6:	b510      	push	{r4, lr}
   b7dc8:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7dca:	3058      	adds	r0, #88	; 0x58
   b7dcc:	f7fd f870 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7dd0:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7dd8:	f7ff bda4 	b.w	b7924 <_ZN6StringD1Ev>

000b7ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b7ddc:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b7dde:	6803      	ldr	r3, [r0, #0]
   b7de0:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b7de2:	4605      	mov	r5, r0
   b7de4:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b7de6:	d008      	beq.n	b7dfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b7de8:	b111      	cbz	r1, b7df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b7dea:	684b      	ldr	r3, [r1, #4]
   b7dec:	3301      	adds	r3, #1
   b7dee:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b7df0:	6828      	ldr	r0, [r5, #0]
   b7df2:	b108      	cbz	r0, b7df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b7df4:	f7fd f865 	bl	b4ec2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7df8:	602c      	str	r4, [r5, #0]
      }
   b7dfa:	bd38      	pop	{r3, r4, r5, pc}

000b7dfc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7dfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7e00:	b2da      	uxtb	r2, r3
   b7e02:	2a09      	cmp	r2, #9
   b7e04:	d801      	bhi.n	b7e0a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7e06:	4618      	mov	r0, r3
   b7e08:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7e0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7e0e:	2b05      	cmp	r3, #5
   b7e10:	d801      	bhi.n	b7e16 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7e12:	3857      	subs	r0, #87	; 0x57
   b7e14:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7e16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7e1a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7e1c:	bf94      	ite	ls
   b7e1e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7e20:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b7e24:	4770      	bx	lr
	...

000b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7e28:	b510      	push	{r4, lr}
            locked_(false) {
   b7e2a:	2300      	movs	r3, #0
   b7e2c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7e2e:	4b04      	ldr	r3, [pc, #16]	; (b7e40 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7e30:	4604      	mov	r4, r0
   b7e32:	6818      	ldr	r0, [r3, #0]
   b7e34:	f7ff fa8c 	bl	b7350 <os_mutex_recursive_lock>
        locked_ = true;
   b7e38:	2301      	movs	r3, #1
   b7e3a:	7023      	strb	r3, [r4, #0]
    }
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	bd10      	pop	{r4, pc}
   b7e40:	2003e6bc 	.word	0x2003e6bc

000b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7e44:	b510      	push	{r4, lr}
        if (locked_) {
   b7e46:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7e48:	4604      	mov	r4, r0
        if (locked_) {
   b7e4a:	b11b      	cbz	r3, b7e54 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7e4c:	4b02      	ldr	r3, [pc, #8]	; (b7e58 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7e4e:	6818      	ldr	r0, [r3, #0]
   b7e50:	f7ff fa86 	bl	b7360 <os_mutex_recursive_unlock>
    }
   b7e54:	4620      	mov	r0, r4
   b7e56:	bd10      	pop	{r4, pc}
   b7e58:	2003e6bc 	.word	0x2003e6bc

000b7e5c <_ZN8particle10BleAddressC1ERKS0_>:
    address_ = addr.address_;
   b7e5c:	680a      	ldr	r2, [r1, #0]
   b7e5e:	6002      	str	r2, [r0, #0]
   b7e60:	684a      	ldr	r2, [r1, #4]
   b7e62:	6042      	str	r2, [r0, #4]
}
   b7e64:	4770      	bx	lr

000b7e66 <_ZN8particle10BleAddressaSERKS0_>:
    address_ = addr.address_;
   b7e66:	680a      	ldr	r2, [r1, #0]
   b7e68:	6002      	str	r2, [r0, #0]
   b7e6a:	684a      	ldr	r2, [r1, #4]
   b7e6c:	6042      	str	r2, [r0, #4]
}
   b7e6e:	4770      	bx	lr

000b7e70 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7e70:	b082      	sub	sp, #8
   b7e72:	4603      	mov	r3, r0
    address_ = addr;
   b7e74:	6808      	ldr	r0, [r1, #0]
   b7e76:	6849      	ldr	r1, [r1, #4]
   b7e78:	466a      	mov	r2, sp
   b7e7a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7e7c:	466a      	mov	r2, sp
   b7e7e:	ca03      	ldmia	r2!, {r0, r1}
   b7e80:	6018      	str	r0, [r3, #0]
}
   b7e82:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7e84:	6059      	str	r1, [r3, #4]
}
   b7e86:	b002      	add	sp, #8
   b7e88:	4770      	bx	lr

000b7e8a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7e8a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7e8c:	7982      	ldrb	r2, [r0, #6]
   b7e8e:	798b      	ldrb	r3, [r1, #6]
   b7e90:	429a      	cmp	r2, r3
   b7e92:	d106      	bne.n	b7ea2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7e94:	2206      	movs	r2, #6
   b7e96:	f003 ff6b 	bl	bbd70 <memcmp>
   b7e9a:	fab0 f080 	clz	r0, r0
   b7e9e:	0940      	lsrs	r0, r0, #5
}
   b7ea0:	bd08      	pop	{r3, pc}
    return false;
   b7ea2:	2000      	movs	r0, #0
   b7ea4:	e7fc      	b.n	b7ea0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7ea6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7ea6:	f04f 33ff 	mov.w	r3, #4294967295
   b7eaa:	6003      	str	r3, [r0, #0]
   b7eac:	8083      	strh	r3, [r0, #4]
}
   b7eae:	2000      	movs	r0, #0
   b7eb0:	4770      	bx	lr

000b7eb2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7eb2:	b508      	push	{r3, lr}
   b7eb4:	4602      	mov	r2, r0
        : address_{} {
   b7eb6:	2100      	movs	r1, #0
   b7eb8:	6001      	str	r1, [r0, #0]
   b7eba:	6041      	str	r1, [r0, #4]
    clear();
   b7ebc:	f7ff fff3 	bl	b7ea6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7ec0:	7191      	strb	r1, [r2, #6]
}
   b7ec2:	4610      	mov	r0, r2
   b7ec4:	bd08      	pop	{r3, pc}

000b7ec6 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b7ec6:	b510      	push	{r4, lr}
   b7ec8:	1d43      	adds	r3, r0, #5
   b7eca:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b7ecc:	781c      	ldrb	r4, [r3, #0]
   b7ece:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b7ed2:	4283      	cmp	r3, r0
   b7ed4:	f103 33ff 	add.w	r3, r3, #4294967295
   b7ed8:	d1f8      	bne.n	b7ecc <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b7eda:	bd10      	pop	{r4, pc}

000b7edc <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b7edc:	b570      	push	{r4, r5, r6, lr}
   b7ede:	4614      	mov	r4, r2
   b7ee0:	b088      	sub	sp, #32
   b7ee2:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b7ee4:	460d      	mov	r5, r1
   b7ee6:	2900      	cmp	r1, #0
   b7ee8:	d048      	beq.n	b7f7c <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b7eea:	b1a4      	cbz	r4, b7f16 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b7eec:	a901      	add	r1, sp, #4
   b7eee:	f7ff ffea 	bl	b7ec6 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b7ef2:	b19a      	cbz	r2, b7f1c <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b7ef4:	aa03      	add	r2, sp, #12
   b7ef6:	2106      	movs	r1, #6
   b7ef8:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b7efa:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7efc:	f7ff ff46 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b7f00:	2e11      	cmp	r6, #17
   b7f02:	bf28      	it	cs
   b7f04:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b7f06:	4632      	mov	r2, r6
   b7f08:	a903      	add	r1, sp, #12
   b7f0a:	4628      	mov	r0, r5
   b7f0c:	f003 ff40 	bl	bbd90 <memcpy>
    buf[len++] = '\0';
   b7f10:	2300      	movs	r3, #0
   b7f12:	55ab      	strb	r3, [r5, r6]
   b7f14:	1c74      	adds	r4, r6, #1
}
   b7f16:	4620      	mov	r0, r4
   b7f18:	b008      	add	sp, #32
   b7f1a:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b7f1c:	aa03      	add	r2, sp, #12
   b7f1e:	2101      	movs	r1, #1
   b7f20:	a801      	add	r0, sp, #4
   b7f22:	f7ff ff33 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b7f26:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b7f28:	f10d 020f 	add.w	r2, sp, #15
   b7f2c:	2101      	movs	r1, #1
   b7f2e:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b7f32:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b7f36:	f7ff ff29 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7f3a:	f10d 0212 	add.w	r2, sp, #18
   b7f3e:	2101      	movs	r1, #1
   b7f40:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b7f44:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7f48:	f7ff ff20 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7f4c:	f10d 0215 	add.w	r2, sp, #21
   b7f50:	2101      	movs	r1, #1
   b7f52:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b7f56:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7f5a:	f7ff ff17 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7f5e:	aa06      	add	r2, sp, #24
   b7f60:	2101      	movs	r1, #1
   b7f62:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b7f64:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7f68:	f7ff ff10 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b7f6c:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7f70:	f10d 021b 	add.w	r2, sp, #27
   b7f74:	2101      	movs	r1, #1
   b7f76:	f10d 0009 	add.w	r0, sp, #9
   b7f7a:	e7be      	b.n	b7efa <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b7f7c:	460c      	mov	r4, r1
   b7f7e:	e7ca      	b.n	b7f16 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b7f80 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b7f80:	b510      	push	{r4, lr}
   b7f82:	b086      	sub	sp, #24
   b7f84:	4604      	mov	r4, r0
   b7f86:	4613      	mov	r3, r2
   b7f88:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b7f8a:	2212      	movs	r2, #18
   b7f8c:	a901      	add	r1, sp, #4
   b7f8e:	f7ff ffa5 	bl	b7edc <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b7f92:	a901      	add	r1, sp, #4
   b7f94:	4620      	mov	r0, r4
   b7f96:	f7ff fd10 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7f9a:	4620      	mov	r0, r4
   b7f9c:	b006      	add	sp, #24
   b7f9e:	bd10      	pop	{r4, pc}

000b7fa0 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7fa0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7fa2:	2301      	movs	r3, #1
   b7fa4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7fa6:	4b05      	ldr	r3, [pc, #20]	; (b7fbc <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7fa8:	4602      	mov	r2, r0
   b7faa:	f103 0110 	add.w	r1, r3, #16
   b7fae:	f853 4b04 	ldr.w	r4, [r3], #4
   b7fb2:	f842 4b04 	str.w	r4, [r2], #4
   b7fb6:	428b      	cmp	r3, r1
   b7fb8:	d1f9      	bne.n	b7fae <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7fba:	bd10      	pop	{r4, pc}
   b7fbc:	000bc6ca 	.word	0x000bc6ca

000b7fc0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7fc0:	7c0b      	ldrb	r3, [r1, #16]
   b7fc2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b7fc6:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7fc8:	d10d      	bne.n	b7fe6 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b7fca:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7fcc:	4b0c      	ldr	r3, [pc, #48]	; (b8000 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b7fce:	4602      	mov	r2, r0
   b7fd0:	f103 0410 	add.w	r4, r3, #16
   b7fd4:	f853 5b04 	ldr.w	r5, [r3], #4
   b7fd8:	f842 5b04 	str.w	r5, [r2], #4
   b7fdc:	42a3      	cmp	r3, r4
   b7fde:	d1f9      	bne.n	b7fd4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b7fe0:	880b      	ldrh	r3, [r1, #0]
   b7fe2:	8183      	strh	r3, [r0, #12]
}
   b7fe4:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b7fe6:	2301      	movs	r3, #1
   b7fe8:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7fea:	f101 0210 	add.w	r2, r1, #16
   b7fee:	4603      	mov	r3, r0
   b7ff0:	f851 4b04 	ldr.w	r4, [r1], #4
   b7ff4:	f843 4b04 	str.w	r4, [r3], #4
   b7ff8:	4291      	cmp	r1, r2
   b7ffa:	d1f9      	bne.n	b7ff0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b7ffc:	e7f2      	b.n	b7fe4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b7ffe:	bf00      	nop
   b8000:	000bc6ca 	.word	0x000bc6ca

000b8004 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8004:	b510      	push	{r4, lr}
    if (uuid128) {
   b8006:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8008:	4604      	mov	r4, r0
    if (uuid128) {
   b800a:	b1b1      	cbz	r1, b803a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b800c:	2a01      	cmp	r2, #1
   b800e:	f101 0210 	add.w	r2, r1, #16
   b8012:	d10a      	bne.n	b802a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8014:	4601      	mov	r1, r0
   b8016:	f853 0b04 	ldr.w	r0, [r3], #4
   b801a:	f841 0b04 	str.w	r0, [r1], #4
   b801e:	4293      	cmp	r3, r2
   b8020:	d1f9      	bne.n	b8016 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b8022:	2301      	movs	r3, #1
   b8024:	6123      	str	r3, [r4, #16]
}
   b8026:	4620      	mov	r0, r4
   b8028:	bd10      	pop	{r4, pc}
   b802a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b802c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8030:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8034:	429a      	cmp	r2, r3
   b8036:	d1f9      	bne.n	b802c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8038:	e7f3      	b.n	b8022 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b803a:	2210      	movs	r2, #16
   b803c:	f003 fed0 	bl	bbde0 <memset>
   b8040:	e7f1      	b.n	b8026 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b8042 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b8042:	b538      	push	{r3, r4, r5, lr}
   b8044:	4604      	mov	r4, r0
   b8046:	460d      	mov	r5, r1
        : BleUuid() {
   b8048:	f7ff ffaa 	bl	b7fa0 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b804c:	2300      	movs	r3, #0
   b804e:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8050:	81a5      	strh	r5, [r4, #12]
}
   b8052:	4620      	mov	r0, r4
   b8054:	bd38      	pop	{r3, r4, r5, pc}

000b8056 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8056:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8058:	6902      	ldr	r2, [r0, #16]
   b805a:	690b      	ldr	r3, [r1, #16]
   b805c:	429a      	cmp	r2, r3
   b805e:	d106      	bne.n	b806e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8060:	2210      	movs	r2, #16
   b8062:	f003 fe85 	bl	bbd70 <memcmp>
   b8066:	fab0 f080 	clz	r0, r0
   b806a:	0940      	lsrs	r0, r0, #5
}
   b806c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b806e:	2000      	movs	r0, #0
   b8070:	e7fc      	b.n	b806c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8074 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8074:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8076:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b807a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b807c:	4b34      	ldr	r3, [pc, #208]	; (b8150 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b807e:	460c      	mov	r4, r1
   b8080:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8082:	4602      	mov	r2, r0
   b8084:	f103 0110 	add.w	r1, r3, #16
   b8088:	f853 0b04 	ldr.w	r0, [r3], #4
   b808c:	f842 0b04 	str.w	r0, [r2], #4
   b8090:	428b      	cmp	r3, r1
   b8092:	d1f9      	bne.n	b8088 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8094:	b344      	cbz	r4, b80e8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8096:	2124      	movs	r1, #36	; 0x24
   b8098:	4620      	mov	r0, r4
   b809a:	f003 ff0e 	bl	bbeba <strnlen>
   b809e:	2804      	cmp	r0, #4
   b80a0:	f04f 0500 	mov.w	r5, #0
   b80a4:	d123      	bne.n	b80ee <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b80a6:	f8ad 5004 	strh.w	r5, [sp, #4]
   b80aa:	af01      	add	r7, sp, #4
   b80ac:	1ca5      	adds	r5, r4, #2
   b80ae:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b80b0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b80b4:	f7ff fea2 	bl	b7dfc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b80b8:	f1b0 0800 	subs.w	r8, r0, #0
   b80bc:	db12      	blt.n	b80e4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b80be:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b80c2:	f7ff fe9b 	bl	b7dfc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b80c6:	2800      	cmp	r0, #0
   b80c8:	db0c      	blt.n	b80e4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b80ca:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b80cc:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b80d0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b80d2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b80d6:	d1eb      	bne.n	b80b0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b80d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b80dc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b80de:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b80e2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b80e4:	2300      	movs	r3, #0
   b80e6:	6133      	str	r3, [r6, #16]
}
   b80e8:	b002      	add	sp, #8
   b80ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b80ee:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b80f2:	2124      	movs	r1, #36	; 0x24
   b80f4:	4620      	mov	r0, r4
   b80f6:	f003 fee0 	bl	bbeba <strnlen>
   b80fa:	42a8      	cmp	r0, r5
   b80fc:	d807      	bhi.n	b810e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b80fe:	4642      	mov	r2, r8
   b8100:	2100      	movs	r1, #0
   b8102:	4630      	mov	r0, r6
}
   b8104:	b002      	add	sp, #8
   b8106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b810a:	f003 be69 	b.w	bbde0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b810e:	f1b8 0f00 	cmp.w	r8, #0
   b8112:	d0e9      	beq.n	b80e8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8114:	5d60      	ldrb	r0, [r4, r5]
   b8116:	f7ff fe71 	bl	b7dfc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b811a:	0603      	lsls	r3, r0, #24
   b811c:	d415      	bmi.n	b814a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b811e:	0100      	lsls	r0, r0, #4
   b8120:	f108 38ff 	add.w	r8, r8, #4294967295
   b8124:	b2c7      	uxtb	r7, r0
   b8126:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b812a:	2124      	movs	r1, #36	; 0x24
   b812c:	4620      	mov	r0, r4
   b812e:	f003 fec4 	bl	bbeba <strnlen>
   b8132:	3501      	adds	r5, #1
   b8134:	42a8      	cmp	r0, r5
   b8136:	d908      	bls.n	b814a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8138:	5d60      	ldrb	r0, [r4, r5]
   b813a:	f7ff fe5f 	bl	b7dfc <_ZN8particle11hexToNibbleEc>
   b813e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8140:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8142:	bfa4      	itt	ge
   b8144:	4338      	orrge	r0, r7
   b8146:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b814a:	3501      	adds	r5, #1
   b814c:	e7d1      	b.n	b80f2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b814e:	bf00      	nop
   b8150:	000bc6ca 	.word	0x000bc6ca

000b8154 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8154:	b513      	push	{r0, r1, r4, lr}
   b8156:	4604      	mov	r4, r0
   b8158:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b815a:	f7ff ff21 	bl	b7fa0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b815e:	4620      	mov	r0, r4
   b8160:	9901      	ldr	r1, [sp, #4]
   b8162:	f7ff ff87 	bl	b8074 <_ZN8particle7BleUuid9constructEPKc>
}
   b8166:	4620      	mov	r0, r4
   b8168:	b002      	add	sp, #8
   b816a:	bd10      	pop	{r4, pc}

000b816c <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b816c:	b510      	push	{r4, lr}
   b816e:	f100 030f 	add.w	r3, r0, #15
   b8172:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b8174:	781c      	ldrb	r4, [r3, #0]
   b8176:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b817a:	4283      	cmp	r3, r0
   b817c:	f103 33ff 	add.w	r3, r3, #4294967295
   b8180:	d1f8      	bne.n	b8174 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b8182:	bd10      	pop	{r4, pc}

000b8184 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b8184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8188:	461f      	mov	r7, r3
   b818a:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b818c:	460d      	mov	r5, r1
   b818e:	2900      	cmp	r1, #0
   b8190:	d05b      	beq.n	b824a <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b8192:	b1da      	cbz	r2, b81cc <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b8194:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b8198:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b819a:	f1b8 0f00 	cmp.w	r8, #0
   b819e:	d119      	bne.n	b81d4 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b81a0:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b81a2:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b81a6:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b81a8:	aa05      	add	r2, sp, #20
   b81aa:	2102      	movs	r1, #2
   b81ac:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b81ae:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b81b2:	f7ff fdeb 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b81b6:	2c04      	cmp	r4, #4
   b81b8:	bf28      	it	cs
   b81ba:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b81bc:	4622      	mov	r2, r4
   b81be:	a905      	add	r1, sp, #20
   b81c0:	4628      	mov	r0, r5
   b81c2:	f003 fde5 	bl	bbd90 <memcpy>
        buf[len++] = '\0';
   b81c6:	f805 8004 	strb.w	r8, [r5, r4]
   b81ca:	1c62      	adds	r2, r4, #1
}
   b81cc:	4610      	mov	r0, r2
   b81ce:	b00e      	add	sp, #56	; 0x38
   b81d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b81d4:	a901      	add	r1, sp, #4
   b81d6:	f7ff ffc9 	bl	b816c <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b81da:	aa05      	add	r2, sp, #20
    if (stripped) {
   b81dc:	b17f      	cbz	r7, b81fe <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b81de:	2110      	movs	r1, #16
   b81e0:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b81e2:	f7ff fdd3 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b81e6:	2c24      	cmp	r4, #36	; 0x24
   b81e8:	bf28      	it	cs
   b81ea:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b81ec:	4622      	mov	r2, r4
   b81ee:	a905      	add	r1, sp, #20
   b81f0:	4628      	mov	r0, r5
   b81f2:	f003 fdcd 	bl	bbd90 <memcpy>
    buf[len++] = '\0';
   b81f6:	2300      	movs	r3, #0
   b81f8:	552b      	strb	r3, [r5, r4]
   b81fa:	1c62      	adds	r2, r4, #1
    return len;
   b81fc:	e7e6      	b.n	b81cc <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b81fe:	2104      	movs	r1, #4
   b8200:	eb0d 0001 	add.w	r0, sp, r1
   b8204:	f7ff fdc2 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b8208:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b820a:	f10d 021d 	add.w	r2, sp, #29
   b820e:	2102      	movs	r1, #2
   b8210:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b8212:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b8216:	f7ff fdb9 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b821a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b821e:	2102      	movs	r1, #2
   b8220:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b8224:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b8228:	f7ff fdb0 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b822c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b8230:	2102      	movs	r1, #2
   b8232:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b8234:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b8238:	f7ff fda8 	bl	b7d8c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b823c:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b8240:	aa0b      	add	r2, sp, #44	; 0x2c
   b8242:	2106      	movs	r1, #6
   b8244:	f10d 000e 	add.w	r0, sp, #14
   b8248:	e7cb      	b.n	b81e2 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b824a:	460a      	mov	r2, r1
   b824c:	e7be      	b.n	b81cc <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b824e <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b824e:	b510      	push	{r4, lr}
   b8250:	b08a      	sub	sp, #40	; 0x28
   b8252:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b8254:	2300      	movs	r3, #0
   b8256:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b8258:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b825a:	4669      	mov	r1, sp
   b825c:	f7ff ff92 	bl	b8184 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b8260:	4669      	mov	r1, sp
   b8262:	4620      	mov	r0, r4
   b8264:	f7ff fba9 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8268:	4620      	mov	r0, r4
   b826a:	b00a      	add	sp, #40	; 0x28
   b826c:	bd10      	pop	{r4, pc}

000b826e <_ZNK8particle18BleAdvertisingData3getEPhj>:
size_t BleAdvertisingData::get(uint8_t* buf, size_t len) const {
   b826e:	b510      	push	{r4, lr}
   b8270:	4603      	mov	r3, r0
        len = std::min(len, (size_t)selfData_.size());
   b8272:	6844      	ldr	r4, [r0, #4]
    if (buf != nullptr) {
   b8274:	4608      	mov	r0, r1
   b8276:	b131      	cbz	r1, b8286 <_ZNK8particle18BleAdvertisingData3getEPhj+0x18>
    }
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
   b8278:	4294      	cmp	r4, r2
   b827a:	bf28      	it	cs
   b827c:	4614      	movcs	r4, r2
        memcpy(buf, selfData_.data(), len);
   b827e:	6819      	ldr	r1, [r3, #0]
   b8280:	4622      	mov	r2, r4
   b8282:	f003 fd85 	bl	bbd90 <memcpy>
}
   b8286:	4620      	mov	r0, r4
   b8288:	bd10      	pop	{r4, pc}

000b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b828a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b828c:	4605      	mov	r5, r0
   b828e:	4616      	mov	r6, r2
   b8290:	461f      	mov	r7, r3
   b8292:	460a      	mov	r2, r1
   b8294:	ab01      	add	r3, sp, #4
   b8296:	e9d0 0100 	ldrd	r0, r1, [r0]
   b829a:	f7ff fcf7 	bl	b7c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b829e:	f030 0402 	bics.w	r4, r0, #2
   b82a2:	d00c      	beq.n	b82be <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b82a4:	1e84      	subs	r4, r0, #2
   b82a6:	42bc      	cmp	r4, r7
   b82a8:	bf28      	it	cs
   b82aa:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b82ac:	b13e      	cbz	r6, b82be <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b82ae:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b82b0:	682b      	ldr	r3, [r5, #0]
   b82b2:	3102      	adds	r1, #2
   b82b4:	4622      	mov	r2, r4
   b82b6:	4419      	add	r1, r3
   b82b8:	4630      	mov	r0, r6
   b82ba:	f003 fd69 	bl	bbd90 <memcpy>
}
   b82be:	4620      	mov	r0, r4
   b82c0:	b003      	add	sp, #12
   b82c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b82c4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b82c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82c6:	4613      	mov	r3, r2
   b82c8:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b82ca:	9201      	str	r2, [sp, #4]
   b82cc:	460a      	mov	r2, r1
   b82ce:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b82d0:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b82d2:	f7ff ffda 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b82d6:	b940      	cbnz	r0, b82ea <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b82d8:	9b01      	ldr	r3, [sp, #4]
   b82da:	4622      	mov	r2, r4
   b82dc:	2109      	movs	r1, #9
   b82de:	4628      	mov	r0, r5
}
   b82e0:	b003      	add	sp, #12
   b82e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b82e6:	f7ff bfd0 	b.w	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b82ea:	b003      	add	sp, #12
   b82ec:	bd30      	pop	{r4, r5, pc}
	...

000b82f0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b82f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b82f2:	460c      	mov	r4, r1
   b82f4:	b089      	sub	sp, #36	; 0x24
    String name;
   b82f6:	490c      	ldr	r1, [pc, #48]	; (b8328 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b82f8:	4605      	mov	r5, r0
    String name;
   b82fa:	f7ff fb5e 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b82fe:	221f      	movs	r2, #31
   b8300:	4669      	mov	r1, sp
   b8302:	4620      	mov	r0, r4
   b8304:	f7ff ffde 	bl	b82c4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b8308:	4606      	mov	r6, r0
   b830a:	b150      	cbz	r0, b8322 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b830c:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b830e:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b8310:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8314:	4628      	mov	r0, r5
   b8316:	f7ff fbcf 	bl	b7ab8 <_ZN6String6concatEc>
   b831a:	b110      	cbz	r0, b8322 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b831c:	3701      	adds	r7, #1
   b831e:	42be      	cmp	r6, r7
   b8320:	d1f6      	bne.n	b8310 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b8322:	4628      	mov	r0, r5
   b8324:	b009      	add	sp, #36	; 0x24
   b8326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8328:	000bc938 	.word	0x000bc938

000b832c <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b832c:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b832e:	460a      	mov	r2, r1
   b8330:	21ff      	movs	r1, #255	; 0xff
   b8332:	f7ff bfaa 	b.w	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b8336 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b8336:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b8338:	2302      	movs	r3, #2
   b833a:	aa01      	add	r2, sp, #4
   b833c:	2119      	movs	r1, #25
   b833e:	f7ff ffa4 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b8342:	b108      	cbz	r0, b8348 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b8344:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b8348:	b003      	add	sp, #12
   b834a:	f85d fb04 	ldr.w	pc, [sp], #4

000b834e <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
   b834e:	b507      	push	{r0, r1, r2, lr}
   b8350:	460a      	mov	r2, r1
    if (offset == nullptr) {
   b8352:	ab01      	add	r3, sp, #4
   b8354:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8358:	f7ff fc98 	bl	b7c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
}
   b835c:	3800      	subs	r0, #0
   b835e:	bf18      	it	ne
   b8360:	2001      	movne	r0, #1
   b8362:	b003      	add	sp, #12
   b8364:	f85d fb04 	ldr.w	pc, [sp], #4

000b8368 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8368:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b836a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b836e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8370:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8372:	8043      	strh	r3, [r0, #2]
   b8374:	220e      	movs	r2, #14
   b8376:	4629      	mov	r1, r5
   b8378:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b837a:	7105      	strb	r5, [r0, #4]
   b837c:	3006      	adds	r0, #6
   b837e:	f003 fd2f 	bl	bbde0 <memset>
   b8382:	f104 0014 	add.w	r0, r4, #20
   b8386:	f7ff fe0b 	bl	b7fa0 <_ZN8particle7BleUuidC1Ev>
   b838a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b838e:	f7ff fe07 	bl	b7fa0 <_ZN8particle7BleUuidC1Ev>
   b8392:	4904      	ldr	r1, [pc, #16]	; (b83a4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8394:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8398:	f7ff fb0f 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b839c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b839e:	4620      	mov	r0, r4
   b83a0:	bd38      	pop	{r3, r4, r5, pc}
   b83a2:	bf00      	nop
   b83a4:	000bc938 	.word	0x000bc938

000b83a8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b83a8:	b538      	push	{r3, r4, r5, lr}
      { return _M_ptr; }
   b83aa:	680d      	ldr	r5, [r1, #0]
   b83ac:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b83ae:	4601      	mov	r1, r0
   b83b0:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b83b4:	f7ff fe4f 	bl	b8056 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b83b8:	b140      	cbz	r0, b83cc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b83ba:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b83bc:	8aa2      	ldrh	r2, [r4, #20]
   b83be:	429a      	cmp	r2, r3
   b83c0:	d805      	bhi.n	b83ce <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b83c2:	8ae0      	ldrh	r0, [r4, #22]
   b83c4:	4298      	cmp	r0, r3
   b83c6:	bf34      	ite	cc
   b83c8:	2000      	movcc	r0, #0
   b83ca:	2001      	movcs	r0, #1
    }
   b83cc:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b83ce:	2000      	movs	r0, #0
   b83d0:	e7fc      	b.n	b83cc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b83d2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b83d2:	b510      	push	{r4, lr}
    return data_ + size_;
   b83d4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b83d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b83dc:	4293      	cmp	r3, r2
   b83de:	4618      	mov	r0, r3
   b83e0:	d006      	beq.n	b83f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b83e2:	6804      	ldr	r4, [r0, #0]
   b83e4:	8824      	ldrh	r4, [r4, #0]
   b83e6:	428c      	cmp	r4, r1
   b83e8:	f103 0308 	add.w	r3, r3, #8
   b83ec:	d1f6      	bne.n	b83dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b83ee:	bd10      	pop	{r4, pc}
        return nullptr;
   b83f0:	2000      	movs	r0, #0
   b83f2:	e7fc      	b.n	b83ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b83f4 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b83f4:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b83f6:	b570      	push	{r4, r5, r6, lr}
   b83f8:	6003      	str	r3, [r0, #0]
   b83fa:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b83fc:	2068      	movs	r0, #104	; 0x68
   b83fe:	f7fb fe48 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b8402:	1e04      	subs	r4, r0, #0
   b8404:	f104 060c 	add.w	r6, r4, #12
   b8408:	d007      	beq.n	b841a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b840a:	2301      	movs	r3, #1
   b840c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b8410:	4b04      	ldr	r3, [pc, #16]	; (b8424 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b8412:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8414:	4630      	mov	r0, r6
   b8416:	f7ff ffa7 	bl	b8368 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b841a:	e9c5 6400 	strd	r6, r4, [r5]
}
   b841e:	4628      	mov	r0, r5
   b8420:	bd70      	pop	{r4, r5, r6, pc}
   b8422:	bf00      	nop
   b8424:	000bc670 	.word	0x000bc670

000b8428 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b8428:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b842a:	680c      	ldr	r4, [r1, #0]
   b842c:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b842e:	4606      	mov	r6, r0
    return impl()->charUUID();
   b8430:	4605      	mov	r5, r0
   b8432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8436:	6823      	ldr	r3, [r4, #0]
   b8438:	602b      	str	r3, [r5, #0]
}
   b843a:	4630      	mov	r0, r6
   b843c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8440 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8440:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8442:	4606      	mov	r6, r0
   b8444:	b085      	sub	sp, #20
   b8446:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8448:	460d      	mov	r5, r1
   b844a:	2900      	cmp	r1, #0
   b844c:	d050      	beq.n	b84f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b844e:	2a00      	cmp	r2, #0
   b8450:	d04e      	beq.n	b84f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b8452:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b8454:	7823      	ldrb	r3, [r4, #0]
   b8456:	2af4      	cmp	r2, #244	; 0xf4
   b8458:	bf28      	it	cs
   b845a:	22f4      	movcs	r2, #244	; 0xf4
   b845c:	b343      	cbz	r3, b84b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b845e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b8460:	0798      	lsls	r0, r3, #30
   b8462:	d509      	bpl.n	b8478 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b8464:	89a0      	ldrh	r0, [r4, #12]
   b8466:	9203      	str	r2, [sp, #12]
   b8468:	2300      	movs	r3, #0
   b846a:	f7fe fed9 	bl	b7220 <hal_ble_gatt_server_set_characteristic_value>
   b846e:	2800      	cmp	r0, #0
   b8470:	9a03      	ldr	r2, [sp, #12]
   b8472:	da03      	bge.n	b847c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b8474:	b005      	add	sp, #20
   b8476:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b8478:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b847c:	6834      	ldr	r4, [r6, #0]
   b847e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b8480:	06d9      	lsls	r1, r3, #27
   b8482:	d509      	bpl.n	b8498 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b8484:	2f01      	cmp	r7, #1
   b8486:	d007      	beq.n	b8498 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8488:	89a0      	ldrh	r0, [r4, #12]
   b848a:	2300      	movs	r3, #0
   b848c:	4629      	mov	r1, r5
}
   b848e:	b005      	add	sp, #20
   b8490:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8494:	f7fe bf1e 	b.w	b72d4 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b8498:	069b      	lsls	r3, r3, #26
   b849a:	d5eb      	bpl.n	b8474 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b849c:	2f02      	cmp	r7, #2
   b849e:	d0e9      	beq.n	b8474 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b84a0:	89a0      	ldrh	r0, [r4, #12]
   b84a2:	2300      	movs	r3, #0
   b84a4:	4629      	mov	r1, r5
}
   b84a6:	b005      	add	sp, #20
   b84a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b84ac:	f7fe bf1c 	b.w	b72e8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b84b0:	8860      	ldrh	r0, [r4, #2]
   b84b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b84b6:	4288      	cmp	r0, r1
   b84b8:	d01c      	beq.n	b84f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b84ba:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b84bc:	074e      	lsls	r6, r1, #29
   b84be:	d501      	bpl.n	b84c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b84c0:	2f01      	cmp	r7, #1
   b84c2:	d104      	bne.n	b84ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b84c4:	070b      	lsls	r3, r1, #28
   b84c6:	d409      	bmi.n	b84dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b84c8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b84cc:	e7d2      	b.n	b8474 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b84ce:	89a1      	ldrh	r1, [r4, #12]
   b84d0:	9300      	str	r3, [sp, #0]
   b84d2:	4613      	mov	r3, r2
   b84d4:	462a      	mov	r2, r5
   b84d6:	f7fe fecb 	bl	b7270 <hal_ble_gatt_client_write_without_response>
   b84da:	e7cb      	b.n	b8474 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b84dc:	2f02      	cmp	r7, #2
   b84de:	d0f3      	beq.n	b84c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b84e0:	2300      	movs	r3, #0
   b84e2:	89a1      	ldrh	r1, [r4, #12]
   b84e4:	9300      	str	r3, [sp, #0]
   b84e6:	4613      	mov	r3, r2
   b84e8:	462a      	mov	r2, r5
   b84ea:	f7fe feb7 	bl	b725c <hal_ble_gatt_client_write_with_response>
   b84ee:	e7c1      	b.n	b8474 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b84f0:	4802      	ldr	r0, [pc, #8]	; (b84fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b84f2:	e7bf      	b.n	b8474 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b84f4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b84f8:	e7bc      	b.n	b8474 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b84fa:	bf00      	nop
   b84fc:	fffffef2 	.word	0xfffffef2

000b8500 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b8500:	b510      	push	{r4, lr}
   b8502:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b8504:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b8506:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b8508:	bb52      	cbnz	r2, b8560 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b850a:	885c      	ldrh	r4, [r3, #2]
   b850c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8510:	4284      	cmp	r4, r0
   b8512:	d025      	beq.n	b8560 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b8514:	8a18      	ldrh	r0, [r3, #16]
   b8516:	b330      	cbz	r0, b8566 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b8518:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b851c:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b851e:	4a13      	ldr	r2, [pc, #76]	; (b856c <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b8520:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b8522:	4a13      	ldr	r2, [pc, #76]	; (b8570 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b8524:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b8528:	885a      	ldrh	r2, [r3, #2]
   b852a:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b852e:	8a1a      	ldrh	r2, [r3, #16]
   b8530:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b8534:	899a      	ldrh	r2, [r3, #12]
   b8536:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b853a:	b159      	cbz	r1, b8554 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b853c:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b853e:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b8540:	bf44      	itt	mi
   b8542:	2202      	movmi	r2, #2
   b8544:	9205      	strmi	r2, [sp, #20]
   b8546:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b8548:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b854a:	bf42      	ittt	mi
   b854c:	9b05      	ldrmi	r3, [sp, #20]
   b854e:	f043 0301 	orrmi.w	r3, r3, #1
   b8552:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b8554:	2100      	movs	r1, #0
   b8556:	4668      	mov	r0, sp
   b8558:	f7fe feb2 	bl	b72c0 <hal_ble_gatt_client_configure_cccd>
}
   b855c:	b006      	add	sp, #24
   b855e:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b8560:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8564:	e7fa      	b.n	b855c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b8566:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b856a:	e7f7      	b.n	b855c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b856c:	00180003 	.word	0x00180003
   b8570:	000b8745 	.word	0x000b8745

000b8574 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b8574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8576:	2600      	movs	r6, #0
   b8578:	6006      	str	r6, [r0, #0]
   b857a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b857c:	2028      	movs	r0, #40	; 0x28
   b857e:	f7fb fd88 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b8582:	1e04      	subs	r4, r0, #0
   b8584:	f104 070c 	add.w	r7, r4, #12
   b8588:	d00a      	beq.n	b85a0 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b858a:	2301      	movs	r3, #1
   b858c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b8590:	4b05      	ldr	r3, [pc, #20]	; (b85a8 <_ZN8particle10BleServiceC1Ev+0x34>)
   b8592:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b8594:	4638      	mov	r0, r7
   b8596:	f7ff fd03 	bl	b7fa0 <_ZN8particle7BleUuidC1Ev>
   b859a:	6226      	str	r6, [r4, #32]
   b859c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b85a0:	e9c5 7400 	strd	r7, r4, [r5]
}
   b85a4:	4628      	mov	r0, r5
   b85a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b85a8:	000bc68c 	.word	0x000bc68c

000b85ac <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b85ac:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b85ae:	2500      	movs	r5, #0
   b85b0:	6005      	str	r5, [r0, #0]
   b85b2:	4606      	mov	r6, r0
   b85b4:	2030      	movs	r0, #48	; 0x30
   b85b6:	f7fb fd6c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b85ba:	4604      	mov	r4, r0
   b85bc:	b188      	cbz	r0, b85e2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b85be:	2301      	movs	r3, #1
   b85c0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b85c4:	4b09      	ldr	r3, [pc, #36]	; (b85ec <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b85c6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b85c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b85cc:	8183      	strh	r3, [r0, #12]
   b85ce:	300e      	adds	r0, #14
   b85d0:	f7ff fc6f 	bl	b7eb2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b85d4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b85d8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b85dc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b85e0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b85e2:	6074      	str	r4, [r6, #4]
   b85e4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b85e6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b85e8:	4630      	mov	r0, r6
   b85ea:	bd70      	pop	{r4, r5, r6, pc}
   b85ec:	000bc6a8 	.word	0x000bc6a8

000b85f0 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b85f0:	b513      	push	{r0, r1, r4, lr}
   b85f2:	4604      	mov	r4, r0
    WiringBleLock lk;
   b85f4:	a801      	add	r0, sp, #4
   b85f6:	f7ff fc17 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b85fa:	6823      	ldr	r3, [r4, #0]
   b85fc:	881c      	ldrh	r4, [r3, #0]
   b85fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8602:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b8604:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b8606:	bf18      	it	ne
   b8608:	2401      	movne	r4, #1
    WiringBleLock lk;
   b860a:	f7ff fc1b 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b860e:	4620      	mov	r0, r4
   b8610:	b002      	add	sp, #8
   b8612:	bd10      	pop	{r4, pc}

000b8614 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b8614:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8616:	4605      	mov	r5, r0
   b8618:	460c      	mov	r4, r1
    WiringBleLock lk;
   b861a:	a801      	add	r0, sp, #4
   b861c:	f7ff fc04 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8620:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8622:	6823      	ldr	r3, [r4, #0]
   b8624:	f8c2 3002 	str.w	r3, [r2, #2]
   b8628:	6863      	ldr	r3, [r4, #4]
   b862a:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b862e:	a801      	add	r0, sp, #4
   b8630:	f7ff fc08 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b8634:	b003      	add	sp, #12
   b8636:	bd30      	pop	{r4, r5, pc}

000b8638 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b8638:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b863a:	460d      	mov	r5, r1
   b863c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b863e:	a801      	add	r0, sp, #4
   b8640:	f7ff fbf2 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
   b8644:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8646:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b864a:	6023      	str	r3, [r4, #0]
   b864c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8650:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8652:	a801      	add	r0, sp, #4
   b8654:	f7ff fbf6 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8658:	4620      	mov	r0, r4
   b865a:	b003      	add	sp, #12
   b865c:	bd30      	pop	{r4, r5, pc}

000b865e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b865e:	b530      	push	{r4, r5, lr}
   b8660:	4605      	mov	r5, r0
   b8662:	b087      	sub	sp, #28
   b8664:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8666:	a801      	add	r0, sp, #4
   b8668:	f7ff fbde 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b866c:	682a      	ldr	r2, [r5, #0]
   b866e:	6823      	ldr	r3, [r4, #0]
   b8670:	8812      	ldrh	r2, [r2, #0]
   b8672:	881b      	ldrh	r3, [r3, #0]
   b8674:	429a      	cmp	r2, r3
   b8676:	d10d      	bne.n	b8694 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8678:	4629      	mov	r1, r5
   b867a:	a802      	add	r0, sp, #8
   b867c:	f7ff ffdc 	bl	b8638 <_ZNK8particle13BlePeerDevice7addressEv>
   b8680:	4621      	mov	r1, r4
   b8682:	a804      	add	r0, sp, #16
   b8684:	f7ff ffd8 	bl	b8638 <_ZNK8particle13BlePeerDevice7addressEv>
   b8688:	a904      	add	r1, sp, #16
   b868a:	a802      	add	r0, sp, #8
   b868c:	f7ff fbfd 	bl	b7e8a <_ZNK8particle10BleAddresseqERKS0_>
   b8690:	4604      	mov	r4, r0
   b8692:	b900      	cbnz	r0, b8696 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8694:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8696:	a801      	add	r0, sp, #4
   b8698:	f7ff fbd4 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b869c:	4620      	mov	r0, r4
   b869e:	b007      	add	sp, #28
   b86a0:	bd30      	pop	{r4, r5, pc}
	...

000b86a4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b86a4:	b510      	push	{r4, lr}
   b86a6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b86a8:	2064      	movs	r0, #100	; 0x64
   b86aa:	f7fb fcf2 	bl	b4092 <_Znwj>
   b86ae:	b168      	cbz	r0, b86cc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b86b0:	2300      	movs	r3, #0
   b86b2:	e9c0 3300 	strd	r3, r3, [r0]
   b86b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b86ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b86be:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b86c2:	6203      	str	r3, [r0, #32]
   b86c4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b86c6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b86c8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b86ca:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b86cc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b86ce:	b920      	cbnz	r0, b86da <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b86d0:	4a0a      	ldr	r2, [pc, #40]	; (b86fc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b86d2:	490b      	ldr	r1, [pc, #44]	; (b8700 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b86d4:	200a      	movs	r0, #10
   b86d6:	f7fe ff23 	bl	b7520 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b86da:	2000      	movs	r0, #0
   b86dc:	f7fe fd6c 	bl	b71b8 <hal_ble_stack_init>
   b86e0:	b120      	cbz	r0, b86ec <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b86e2:	4a06      	ldr	r2, [pc, #24]	; (b86fc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b86e4:	4907      	ldr	r1, [pc, #28]	; (b8704 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b86e6:	200a      	movs	r0, #10
   b86e8:	f7fe ff1a 	bl	b7520 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b86ec:	6821      	ldr	r1, [r4, #0]
   b86ee:	4806      	ldr	r0, [pc, #24]	; (b8708 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b86f0:	2200      	movs	r2, #0
   b86f2:	f7fe fddb 	bl	b72ac <hal_ble_set_callback_on_periph_link_events>
}
   b86f6:	4620      	mov	r0, r4
   b86f8:	bd10      	pop	{r4, pc}
   b86fa:	bf00      	nop
   b86fc:	000b7169 	.word	0x000b7169
   b8700:	000bc44c 	.word	0x000bc44c
   b8704:	000bc48a 	.word	0x000bc48a
   b8708:	000b9031 	.word	0x000b9031

000b870c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b870c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b870e:	4c0a      	ldr	r4, [pc, #40]	; (b8738 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8710:	7823      	ldrb	r3, [r4, #0]
   b8712:	f3bf 8f5b 	dmb	ish
   b8716:	07db      	lsls	r3, r3, #31
   b8718:	d40c      	bmi.n	b8734 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b871a:	4620      	mov	r0, r4
   b871c:	f7fb fcbf 	bl	b409e <__cxa_guard_acquire>
   b8720:	b140      	cbz	r0, b8734 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8722:	4806      	ldr	r0, [pc, #24]	; (b873c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8724:	f7ff ffbe 	bl	b86a4 <_ZN8particle14BleLocalDeviceC1Ev>
   b8728:	4620      	mov	r0, r4
   b872a:	f7fb fcbd 	bl	b40a8 <__cxa_guard_release>
   b872e:	4804      	ldr	r0, [pc, #16]	; (b8740 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8730:	f003 fb10 	bl	bbd54 <atexit>
    return instance;
}
   b8734:	4801      	ldr	r0, [pc, #4]	; (b873c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8736:	bd10      	pop	{r4, pc}
   b8738:	2003e6b8 	.word	0x2003e6b8
   b873c:	2003e6c0 	.word	0x2003e6c0
   b8740:	000b899d 	.word	0x000b899d

000b8744 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8744:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8746:	6803      	ldr	r3, [r0, #0]
   b8748:	3b09      	subs	r3, #9
   b874a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b874c:	b08d      	sub	sp, #52	; 0x34
   b874e:	4604      	mov	r4, r0
   b8750:	460d      	mov	r5, r1
    switch (event->type) {
   b8752:	d811      	bhi.n	b8778 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8754:	f7ff ffda 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8758:	88a1      	ldrh	r1, [r4, #4]
   b875a:	6800      	ldr	r0, [r0, #0]
   b875c:	f7ff fe39 	bl	b83d2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8760:	4603      	mov	r3, r0
   b8762:	b958      	cbnz	r0, b877c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8764:	2220      	movs	r2, #32
   b8766:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b876a:	4a0b      	ldr	r2, [pc, #44]	; (b8798 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b876c:	9200      	str	r2, [sp, #0]
   b876e:	490b      	ldr	r1, [pc, #44]	; (b879c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8770:	aa04      	add	r2, sp, #16
   b8772:	2032      	movs	r0, #50	; 0x32
   b8774:	f7fe fedc 	bl	b7530 <log_message>
}
   b8778:	b00d      	add	sp, #52	; 0x34
   b877a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b877c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b877e:	2a00      	cmp	r2, #0
   b8780:	d0fa      	beq.n	b8778 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8782:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8786:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b878a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b878e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8790:	aa04      	add	r2, sp, #16
   b8792:	a903      	add	r1, sp, #12
   b8794:	47a0      	blx	r4
}
   b8796:	e7ef      	b.n	b8778 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8798:	000bc4cc 	.word	0x000bc4cc
   b879c:	000bc463 	.word	0x000bc463

000b87a0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b87a0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b87a2:	2000      	movs	r0, #0
   b87a4:	f7fe fd08 	bl	b71b8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b87a8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b87ac:	bd08      	pop	{r3, pc}

000b87ae <_ZN8particle16BleScanDelegatorC1Ev>:
   b87ae:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b87b0:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b87b4:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b87b8:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b87bc:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b87c0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b87c4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b87c8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b87cc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b87d0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b87d4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b87d8:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b87dc:	6202      	str	r2, [r0, #32]
   b87de:	6302      	str	r2, [r0, #48]	; 0x30
   b87e0:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b87e4:	4770      	bx	lr

000b87e6 <_ZNK8particle14BleLocalDevice17setScanParametersEPKNS_13BleScanParamsE>:
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.scan_phys = static_cast<uint8_t>(phy.value());
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}

int BleLocalDevice::setScanParameters(const BleScanParams* params) const {
   b87e6:	4608      	mov	r0, r1
    return hal_ble_gap_set_scan_parameters(params, nullptr);
   b87e8:	2100      	movs	r1, #0
   b87ea:	f7fe bced 	b.w	b71c8 <hal_ble_gap_set_scan_parameters>

000b87ee <_ZNK8particle14BleLocalDevice17getScanParametersEPNS_13BleScanParamsE>:

int BleLocalDevice::setScanParameters(const BleScanParams& params) const {
    return setScanParameters(&params);
}

int BleLocalDevice::getScanParameters(BleScanParams* params) const {
   b87ee:	4608      	mov	r0, r1
    return hal_ble_gap_get_scan_parameters(params, nullptr);
   b87f0:	2100      	movs	r1, #0
   b87f2:	f7fe bcf1 	b.w	b71d8 <hal_ble_gap_get_scan_parameters>

000b87f6 <_ZNK8particle14BleLocalDevice12startPairingERKNS_13BlePeerDeviceE>:
    config.algorithm = static_cast<hal_ble_pairing_algorithm_t>(algorithm);
    return hal_ble_gap_set_pairing_config(&config, nullptr);
}

int BleLocalDevice::startPairing(const BlePeerDevice& peer) const {
    return hal_ble_gap_start_pairing(peer.impl()->connHandle(), nullptr);
   b87f6:	680b      	ldr	r3, [r1, #0]
   b87f8:	2100      	movs	r1, #0
   b87fa:	8818      	ldrh	r0, [r3, #0]
   b87fc:	f7fe bd7e 	b.w	b72fc <hal_ble_gap_start_pairing>

000b8800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8800:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8802:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8806:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8808:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b880c:	42ae      	cmp	r6, r5
   b880e:	d004      	beq.n	b881a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8810:	4628      	mov	r0, r5
   b8812:	f7ff f887 	bl	b7924 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8816:	3510      	adds	r5, #16
   b8818:	e7f8      	b.n	b880c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b881a:	6820      	ldr	r0, [r4, #0]
   b881c:	f7fe ff8c 	bl	b7738 <free>
}
   b8820:	4620      	mov	r0, r4
   b8822:	bd70      	pop	{r4, r5, r6, pc}

000b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8824:	b510      	push	{r4, lr}
   b8826:	4604      	mov	r4, r0
    ::free(ptr);
   b8828:	6800      	ldr	r0, [r0, #0]
   b882a:	f7fe ff85 	bl	b7738 <free>
}
   b882e:	4620      	mov	r0, r4
   b8830:	bd10      	pop	{r4, pc}

000b8832 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b8832:	b570      	push	{r4, r5, r6, lr}
   b8834:	4604      	mov	r4, r0
    ::free(ptr);
   b8836:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8838:	f7fe ff7e 	bl	b7738 <free>
   b883c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b883e:	f7fe ff7b 	bl	b7738 <free>
    }
    ~BleScanFilter() = default;
   b8842:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b8846:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b884a:	f7ff ffeb 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b884e:	4628      	mov	r0, r5
   b8850:	f7ff ffd6 	bl	b8800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b8854:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8858:	f7fc fb2a 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
   b885c:	f104 0018 	add.w	r0, r4, #24
   b8860:	f7fc fb26 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8864:	e9d4 5300 	ldrd	r5, r3, [r4]
   b8868:	2624      	movs	r6, #36	; 0x24
   b886a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b886e:	42ae      	cmp	r6, r5
   b8870:	d004      	beq.n	b887c <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b8872:	4628      	mov	r0, r5
   b8874:	f7fd fd1b 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b8878:	3524      	adds	r5, #36	; 0x24
   b887a:	e7f8      	b.n	b886e <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b887c:	6820      	ldr	r0, [r4, #0]
   b887e:	f7fe ff5b 	bl	b7738 <free>
   b8882:	4620      	mov	r0, r4
   b8884:	bd70      	pop	{r4, r5, r6, pc}

000b8886 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8886:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8888:	1e14      	subs	r4, r2, #0
   b888a:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b888c:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b888e:	db02      	blt.n	b8896 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8890:	1862      	adds	r2, r4, r1
   b8892:	429a      	cmp	r2, r3
   b8894:	dd00      	ble.n	b8898 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8896:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8898:	682a      	ldr	r2, [r5, #0]
   b889a:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b889c:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b889e:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b88a0:	1a52      	subs	r2, r2, r1
   b88a2:	f003 fa83 	bl	bbdac <memmove>
    size_ -= n;
   b88a6:	686a      	ldr	r2, [r5, #4]
   b88a8:	1b12      	subs	r2, r2, r4
   b88aa:	606a      	str	r2, [r5, #4]
}
   b88ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b88b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b88b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b88b2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b88b4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b88b6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b88b8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b88ba:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b88bc:	f7fb fbe9 	bl	b4092 <_Znwj>
   b88c0:	b118      	cbz	r0, b88ca <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
      _Bind(_Bind&&) = default;
   b88c2:	682b      	ldr	r3, [r5, #0]
   b88c4:	6003      	str	r3, [r0, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b88c6:	686b      	ldr	r3, [r5, #4]
   b88c8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b88ca:	4b03      	ldr	r3, [pc, #12]	; (b88d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b88cc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b88ce:	4b03      	ldr	r3, [pc, #12]	; (b88dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b88d0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b88d2:	60a3      	str	r3, [r4, #8]
      }
   b88d4:	4620      	mov	r0, r4
   b88d6:	bd38      	pop	{r3, r4, r5, pc}
   b88d8:	000b7ccd 	.word	0x000b7ccd
   b88dc:	000b7ce5 	.word	0x000b7ce5

000b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b88e0:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b88e2:	f851 3b04 	ldr.w	r3, [r1], #4
   b88e6:	4604      	mov	r4, r0
   b88e8:	f840 3b04 	str.w	r3, [r0], #4
   b88ec:	f7fc fc1a 	bl	b5124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b88f0:	6823      	ldr	r3, [r4, #0]
   b88f2:	b90b      	cbnz	r3, b88f8 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b88f4:	f7ff f9e0 	bl	b7cb8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b88f8:	4620      	mov	r0, r4
   b88fa:	bd10      	pop	{r4, pc}

000b88fc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b88fc:	b510      	push	{r4, lr}
   b88fe:	f851 3b04 	ldr.w	r3, [r1], #4
   b8902:	4604      	mov	r4, r0
   b8904:	f840 3b04 	str.w	r3, [r0], #4
   b8908:	f7fc fc0c 	bl	b5124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b890c:	4620      	mov	r0, r4
   b890e:	bd10      	pop	{r4, pc}

000b8910 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8910:	b510      	push	{r4, lr}
   b8912:	f851 3b04 	ldr.w	r3, [r1], #4
   b8916:	4604      	mov	r4, r0
   b8918:	f840 3b04 	str.w	r3, [r0], #4
   b891c:	f7fc fc02 	bl	b5124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8920:	4620      	mov	r0, r4
   b8922:	bd10      	pop	{r4, pc}

000b8924 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8924:	b510      	push	{r4, lr}
   b8926:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8928:	3004      	adds	r0, #4
   b892a:	f7fc fbf3 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b892e:	4620      	mov	r0, r4
   b8930:	bd10      	pop	{r4, pc}

000b8932 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b8932:	b510      	push	{r4, lr}
   b8934:	4604      	mov	r4, r0
   b8936:	3004      	adds	r0, #4
   b8938:	f7fc fbec 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b893c:	4620      	mov	r0, r4
   b893e:	bd10      	pop	{r4, pc}

000b8940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8940:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8942:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8946:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8948:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b894c:	42ae      	cmp	r6, r5
   b894e:	d004      	beq.n	b895a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8950:	1d28      	adds	r0, r5, #4
   b8952:	f7fc fbdf 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8956:	3508      	adds	r5, #8
   b8958:	e7f8      	b.n	b894c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b895a:	6820      	ldr	r0, [r4, #0]
   b895c:	f7fe feec 	bl	b7738 <free>
}
   b8960:	4620      	mov	r0, r4
   b8962:	bd70      	pop	{r4, r5, r6, pc}

000b8964 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8964:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8966:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b896a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b896c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8970:	42ae      	cmp	r6, r5
   b8972:	d004      	beq.n	b897e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8974:	1d28      	adds	r0, r5, #4
   b8976:	f7fc fbcd 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b897a:	3508      	adds	r5, #8
   b897c:	e7f8      	b.n	b8970 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b897e:	6820      	ldr	r0, [r4, #0]
   b8980:	f7fe feda 	bl	b7738 <free>
}
   b8984:	4620      	mov	r0, r4
   b8986:	bd70      	pop	{r4, r5, r6, pc}

000b8988 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8988:	b510      	push	{r4, lr}
   b898a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b898c:	3024      	adds	r0, #36	; 0x24
   b898e:	f7ff ffe9 	bl	b8964 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8992:	f104 0018 	add.w	r0, r4, #24
   b8996:	f7ff ffd3 	bl	b8940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b899a:	bd10      	pop	{r4, pc}

000b899c <__tcf_0>:
    static BleLocalDevice instance;
   b899c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b899e:	4b17      	ldr	r3, [pc, #92]	; (b89fc <__tcf_0+0x60>)
   b89a0:	681c      	ldr	r4, [r3, #0]
   b89a2:	b354      	cbz	r4, b89fa <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b89a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b89a8:	f7fc fa82 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
   b89ac:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b89b0:	f7fc fa7e 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
   b89b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b89b8:	f7fc fa7a 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
   b89bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b89c0:	f7fc fa76 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b89c4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b89c8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b89cc:	42ae      	cmp	r6, r5
   b89ce:	d004      	beq.n	b89da <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b89d0:	1d28      	adds	r0, r5, #4
   b89d2:	f7fc fb9f 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89d6:	3508      	adds	r5, #8
   b89d8:	e7f8      	b.n	b89cc <__tcf_0+0x30>
    ::free(ptr);
   b89da:	69a0      	ldr	r0, [r4, #24]
   b89dc:	f7fe feac 	bl	b7738 <free>
    ~BleLocalDeviceImpl() = default;
   b89e0:	f104 000c 	add.w	r0, r4, #12
   b89e4:	f7ff ffbe 	bl	b8964 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b89e8:	4620      	mov	r0, r4
   b89ea:	f7ff ffa9 	bl	b8940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b89ee:	4620      	mov	r0, r4
   b89f0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b89f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b89f6:	f7fb bb50 	b.w	b409a <_ZdlPvj>
   b89fa:	bd70      	pop	{r4, r5, r6, pc}
   b89fc:	2003e6c0 	.word	0x2003e6c0

000b8a00 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8a00:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8a02:	b510      	push	{r4, lr}
      if (_M_empty())
   b8a04:	b90a      	cbnz	r2, b8a0a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8a06:	f002 fd2c 	bl	bb462 <_ZSt25__throw_bad_function_callv>
    }
   b8a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8a0e:	68c3      	ldr	r3, [r0, #12]
   b8a10:	4718      	bx	r3

000b8a12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b8a16:	2300      	movs	r3, #0
   b8a18:	e9c0 3300 	strd	r3, r3, [r0]
   b8a1c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a1e:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b8a22:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a24:	4605      	mov	r5, r0
   b8a26:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a28:	dd4a      	ble.n	b8ac0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b8a2a:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b8a2e:	f7fe fe7b 	bl	b7728 <malloc>
            if (!d) {
   b8a32:	4606      	mov	r6, r0
   b8a34:	2800      	cmp	r0, #0
   b8a36:	d043      	beq.n	b8ac0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b8a38:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b8a3c:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b8a3e:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b8a42:	d916      	bls.n	b8a72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b8a44:	4550      	cmp	r0, sl
   b8a46:	d215      	bcs.n	b8a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b8a48:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b8a4c:	f1a4 0910 	sub.w	r9, r4, #16
   b8a50:	ebaa 0404 	sub.w	r4, sl, r4
   b8a54:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b8a56:	45d1      	cmp	r9, sl
   b8a58:	d01d      	beq.n	b8a96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b8a5a:	b11c      	cbz	r4, b8a64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b8a5c:	4651      	mov	r1, sl
   b8a5e:	4620      	mov	r0, r4
   b8a60:	f7fe ffdc 	bl	b7a1c <_ZN6StringC1EOS_>
                end->~T();
   b8a64:	4650      	mov	r0, sl
   b8a66:	f7fe ff5d 	bl	b7924 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8a6a:	f1aa 0a10 	sub.w	sl, sl, #16
   b8a6e:	3c10      	subs	r4, #16
   b8a70:	e7f1      	b.n	b8a56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b8a72:	d010      	beq.n	b8a96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b8a74:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b8a76:	45a2      	cmp	sl, r4
   b8a78:	d00d      	beq.n	b8a96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b8a7a:	f1b9 0f00 	cmp.w	r9, #0
   b8a7e:	d003      	beq.n	b8a88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b8a80:	4621      	mov	r1, r4
   b8a82:	4648      	mov	r0, r9
   b8a84:	f7fe ffca 	bl	b7a1c <_ZN6StringC1EOS_>
                p->~T();
   b8a88:	4620      	mov	r0, r4
   b8a8a:	f7fe ff4b 	bl	b7924 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8a8e:	3410      	adds	r4, #16
   b8a90:	f109 0910 	add.w	r9, r9, #16
   b8a94:	e7ef      	b.n	b8a76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b8a96:	6828      	ldr	r0, [r5, #0]
   b8a98:	f7fe fe4e 	bl	b7738 <free>
        capacity_ = n;
   b8a9c:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b8aa0:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8aa2:	e9d7 4300 	ldrd	r4, r3, [r7]
   b8aa6:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b8aaa:	45a0      	cmp	r8, r4
   b8aac:	d006      	beq.n	b8abc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b8aae:	4621      	mov	r1, r4
   b8ab0:	4630      	mov	r0, r6
   b8ab2:	f7fe ffcd 	bl	b7a50 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b8ab6:	3410      	adds	r4, #16
   b8ab8:	3610      	adds	r6, #16
   b8aba:	e7f6      	b.n	b8aaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b8abc:	687b      	ldr	r3, [r7, #4]
   b8abe:	606b      	str	r3, [r5, #4]
}
   b8ac0:	4628      	mov	r0, r5
   b8ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8ac6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b8ac6:	b530      	push	{r4, r5, lr}
   b8ac8:	b08d      	sub	sp, #52	; 0x34
   b8aca:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b8acc:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b8ad0:	a801      	add	r0, sp, #4
   b8ad2:	f7ff ff9e 	bl	b8a12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b8ad6:	9b02      	ldr	r3, [sp, #8]
   b8ad8:	2b00      	cmp	r3, #0
   b8ada:	dd2f      	ble.n	b8b3c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b8adc:	f104 0114 	add.w	r1, r4, #20
   b8ae0:	a804      	add	r0, sp, #16
   b8ae2:	f7ff fc05 	bl	b82f0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b8ae6:	f104 0108 	add.w	r1, r4, #8
   b8aea:	a808      	add	r0, sp, #32
   b8aec:	f7ff fc00 	bl	b82f0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b8af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8af2:	9b06      	ldr	r3, [sp, #24]
   b8af4:	4313      	orrs	r3, r2
   b8af6:	d01f      	beq.n	b8b38 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b8af8:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b8afc:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b8b00:	42ac      	cmp	r4, r5
   b8b02:	d019      	beq.n	b8b38 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b8b04:	a904      	add	r1, sp, #16
   b8b06:	4620      	mov	r0, r4
   b8b08:	f7ff f834 	bl	b7b74 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8b0c:	b160      	cbz	r0, b8b28 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b8b0e:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b8b10:	a808      	add	r0, sp, #32
   b8b12:	f7fe ff07 	bl	b7924 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b8b16:	a804      	add	r0, sp, #16
   b8b18:	f7fe ff04 	bl	b7924 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b8b1c:	a801      	add	r0, sp, #4
   b8b1e:	f7ff fe6f 	bl	b8800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b8b22:	4620      	mov	r0, r4
   b8b24:	b00d      	add	sp, #52	; 0x34
   b8b26:	bd30      	pop	{r4, r5, pc}
   b8b28:	4620      	mov	r0, r4
   b8b2a:	a908      	add	r1, sp, #32
   b8b2c:	f7ff f822 	bl	b7b74 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8b30:	3410      	adds	r4, #16
   b8b32:	2800      	cmp	r0, #0
   b8b34:	d0e4      	beq.n	b8b00 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b8b36:	e7ea      	b.n	b8b0e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b8b38:	2400      	movs	r4, #0
   b8b3a:	e7e9      	b.n	b8b10 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b8b3c:	2401      	movs	r4, #1
   b8b3e:	e7ed      	b.n	b8b1c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b8b40 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b8b42:	2300      	movs	r3, #0
   b8b44:	e9c0 3300 	strd	r3, r3, [r0]
   b8b48:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8b4a:	684f      	ldr	r7, [r1, #4]
   b8b4c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8b4e:	4605      	mov	r5, r0
   b8b50:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8b52:	dd3e      	ble.n	b8bd2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b8b54:	00f8      	lsls	r0, r7, #3
   b8b56:	f7fe fde7 	bl	b7728 <malloc>
            if (!d) {
   b8b5a:	4604      	mov	r4, r0
   b8b5c:	b3c8      	cbz	r0, b8bd2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b8b5e:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b8b62:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b8b64:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b8b68:	d910      	bls.n	b8b8c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8b6a:	429c      	cmp	r4, r3
   b8b6c:	d20f      	bcs.n	b8b8e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b8b6e:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b8b70:	1a1a      	subs	r2, r3, r0
   b8b72:	f1a0 0c08 	sub.w	ip, r0, #8
   b8b76:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b8b78:	459c      	cmp	ip, r3
   b8b7a:	d018      	beq.n	b8bae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b8b7c:	b11a      	cbz	r2, b8b86 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b8b7e:	6819      	ldr	r1, [r3, #0]
   b8b80:	6011      	str	r1, [r2, #0]
   b8b82:	6859      	ldr	r1, [r3, #4]
   b8b84:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b8b86:	3b08      	subs	r3, #8
   b8b88:	3a08      	subs	r2, #8
   b8b8a:	e7f5      	b.n	b8b78 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b8b8c:	d00f      	beq.n	b8bae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b8b8e:	4601      	mov	r1, r0
   b8b90:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b8b92:	428b      	cmp	r3, r1
   b8b94:	d00b      	beq.n	b8bae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b8b96:	b13a      	cbz	r2, b8ba8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b8b98:	f8d1 c000 	ldr.w	ip, [r1]
   b8b9c:	f8c2 c000 	str.w	ip, [r2]
   b8ba0:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b8ba4:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b8ba8:	3108      	adds	r1, #8
   b8baa:	3208      	adds	r2, #8
   b8bac:	e7f1      	b.n	b8b92 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b8bae:	f7fe fdc3 	bl	b7738 <free>
        data_ = d;
   b8bb2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8bb4:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bb6:	e9d6 3100 	ldrd	r3, r1, [r6]
   b8bba:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b8bbe:	4298      	cmp	r0, r3
   b8bc0:	d006      	beq.n	b8bd0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b8bc2:	681a      	ldr	r2, [r3, #0]
   b8bc4:	6022      	str	r2, [r4, #0]
   b8bc6:	685a      	ldr	r2, [r3, #4]
   b8bc8:	6062      	str	r2, [r4, #4]
   b8bca:	3308      	adds	r3, #8
   b8bcc:	3408      	adds	r4, #8
   b8bce:	e7f6      	b.n	b8bbe <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b8bd0:	6069      	str	r1, [r5, #4]
}
   b8bd2:	4628      	mov	r0, r5
   b8bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8bd6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bd6:	b570      	push	{r4, r5, r6, lr}
   b8bd8:	4604      	mov	r4, r0
        capacity_(0) {
   b8bda:	2000      	movs	r0, #0
   b8bdc:	e9c4 0000 	strd	r0, r0, [r4]
   b8be0:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8be2:	684e      	ldr	r6, [r1, #4]
   b8be4:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8be6:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8be8:	dd12      	ble.n	b8c10 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b8bea:	0071      	lsls	r1, r6, #1
   b8bec:	f7fe fdac 	bl	b7748 <realloc>
            if (!d) {
   b8bf0:	b170      	cbz	r0, b8c10 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b8bf2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8bf4:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bf6:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8bfa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b8bfe:	429a      	cmp	r2, r3
   b8c00:	d004      	beq.n	b8c0c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b8c02:	f833 1b02 	ldrh.w	r1, [r3], #2
   b8c06:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b8c0a:	e7f8      	b.n	b8bfe <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8c0c:	686b      	ldr	r3, [r5, #4]
   b8c0e:	6063      	str	r3, [r4, #4]
}
   b8c10:	4620      	mov	r0, r4
   b8c12:	bd70      	pop	{r4, r5, r6, pc}

000b8c14 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b8c14:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8c16:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8c18:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8c1a:	b923      	cbnz	r3, b8c26 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b8c1c:	6803      	ldr	r3, [r0, #0]
   b8c1e:	6818      	ldr	r0, [r3, #0]
   b8c20:	b108      	cbz	r0, b8c26 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b8c22:	f7fe fd89 	bl	b7738 <free>
            func_();
        }
    }
   b8c26:	4620      	mov	r0, r4
   b8c28:	bd10      	pop	{r4, pc}

000b8c2a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b8c2a:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8c2c:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8c2e:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8c30:	b923      	cbnz	r3, b8c3c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b8c32:	6803      	ldr	r3, [r0, #0]
   b8c34:	6818      	ldr	r0, [r3, #0]
   b8c36:	b108      	cbz	r0, b8c3c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b8c38:	f7fe fd7e 	bl	b7738 <free>
    }
   b8c3c:	4620      	mov	r0, r4
   b8c3e:	bd10      	pop	{r4, pc}

000b8c40 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b8c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b8c44:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b8c48:	b08f      	sub	sp, #60	; 0x3c
   b8c4a:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b8c4c:	f1b8 0f00 	cmp.w	r8, #0
   b8c50:	d072      	beq.n	b8d38 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b8c52:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b8c54:	2d00      	cmp	r5, #0
   b8c56:	d06f      	beq.n	b8d38 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b8c58:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8c5c:	231f      	movs	r3, #31
   b8c5e:	2200      	movs	r2, #0
   b8c60:	21ff      	movs	r1, #255	; 0xff
   b8c62:	4648      	mov	r0, r9
   b8c64:	f7ff fb11 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b8c68:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c6a:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8c6c:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c6e:	2200      	movs	r2, #0
   b8c70:	4619      	mov	r1, r3
   b8c72:	4638      	mov	r0, r7
   b8c74:	f7ff fb09 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8c78:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c7a:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8c7c:	d006      	beq.n	b8c8c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b8c7e:	42ae      	cmp	r6, r5
   b8c80:	d030      	beq.n	b8ce4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b8c82:	2400      	movs	r4, #0
    }
   b8c84:	4620      	mov	r0, r4
   b8c86:	b00f      	add	sp, #60	; 0x3c
   b8c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b8c8c:	4620      	mov	r0, r4
   b8c8e:	f7fe fd4b 	bl	b7728 <malloc>
            dismissed_(false) {
   b8c92:	ab03      	add	r3, sp, #12
   b8c94:	9304      	str	r3, [sp, #16]
   b8c96:	2300      	movs	r3, #0
   b8c98:	4604      	mov	r4, r0
   b8c9a:	9003      	str	r0, [sp, #12]
   b8c9c:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b8ca0:	b970      	cbnz	r0, b8cc0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b8ca2:	2320      	movs	r3, #32
   b8ca4:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8ca8:	4b24      	ldr	r3, [pc, #144]	; (b8d3c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8caa:	9300      	str	r3, [sp, #0]
   b8cac:	4924      	ldr	r1, [pc, #144]	; (b8d40 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8cae:	4603      	mov	r3, r0
   b8cb0:	aa06      	add	r2, sp, #24
   b8cb2:	2032      	movs	r0, #50	; 0x32
   b8cb4:	f7fe fc3c 	bl	b7530 <log_message>
                    return false;
   b8cb8:	a804      	add	r0, sp, #16
   b8cba:	f7ff ffab 	bl	b8c14 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b8cbe:	e7e1      	b.n	b8c84 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b8cc0:	4602      	mov	r2, r0
   b8cc2:	21ff      	movs	r1, #255	; 0xff
   b8cc4:	462b      	mov	r3, r5
   b8cc6:	4648      	mov	r0, r9
   b8cc8:	f7ff fadf 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b8ccc:	9803      	ldr	r0, [sp, #12]
   b8cce:	462a      	mov	r2, r5
   b8cd0:	4641      	mov	r1, r8
   b8cd2:	f003 f84d 	bl	bbd70 <memcmp>
   b8cd6:	b118      	cbz	r0, b8ce0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b8cd8:	a804      	add	r0, sp, #16
   b8cda:	f7ff ff9b 	bl	b8c14 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b8cde:	e7ce      	b.n	b8c7e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b8ce0:	2401      	movs	r4, #1
   b8ce2:	e7e9      	b.n	b8cb8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b8ce4:	4628      	mov	r0, r5
   b8ce6:	f7fe fd1f 	bl	b7728 <malloc>
   b8cea:	2400      	movs	r4, #0
   b8cec:	ab03      	add	r3, sp, #12
   b8cee:	4606      	mov	r6, r0
   b8cf0:	9003      	str	r0, [sp, #12]
   b8cf2:	9304      	str	r3, [sp, #16]
   b8cf4:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b8cf8:	b978      	cbnz	r0, b8d1a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b8cfa:	2320      	movs	r3, #32
   b8cfc:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8d00:	4b0e      	ldr	r3, [pc, #56]	; (b8d3c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8d02:	9300      	str	r3, [sp, #0]
   b8d04:	490e      	ldr	r1, [pc, #56]	; (b8d40 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8d06:	4603      	mov	r3, r0
   b8d08:	aa06      	add	r2, sp, #24
   b8d0a:	2032      	movs	r0, #50	; 0x32
   b8d0c:	f7fe fc10 	bl	b7530 <log_message>
                    return false;
   b8d10:	4634      	mov	r4, r6
   b8d12:	a804      	add	r0, sp, #16
   b8d14:	f7ff ff89 	bl	b8c2a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b8d18:	e7b4      	b.n	b8c84 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b8d1a:	4602      	mov	r2, r0
   b8d1c:	21ff      	movs	r1, #255	; 0xff
   b8d1e:	462b      	mov	r3, r5
   b8d20:	4638      	mov	r0, r7
   b8d22:	f7ff fab2 	bl	b828a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b8d26:	9803      	ldr	r0, [sp, #12]
   b8d28:	462a      	mov	r2, r5
   b8d2a:	4641      	mov	r1, r8
   b8d2c:	f003 f820 	bl	bbd70 <memcmp>
   b8d30:	2800      	cmp	r0, #0
   b8d32:	d1ee      	bne.n	b8d12 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b8d34:	2401      	movs	r4, #1
   b8d36:	e7ec      	b.n	b8d12 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b8d38:	2401      	movs	r4, #1
   b8d3a:	e7a3      	b.n	b8c84 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b8d3c:	000bc4e4 	.word	0x000bc4e4
   b8d40:	000bc463 	.word	0x000bc463

000b8d44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8d44:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8d46:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8d48:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8d4a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8d4c:	dd03      	ble.n	b8d56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8d4e:	f7fe fcfb 	bl	b7748 <realloc>
            if (!d) {
   b8d52:	b918      	cbnz	r0, b8d5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8d54:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8d56:	f7fe fcef 	bl	b7738 <free>
        T* d = nullptr;
   b8d5a:	2000      	movs	r0, #0
        data_ = d;
   b8d5c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8d5e:	60a5      	str	r5, [r4, #8]
        return true;
   b8d60:	2001      	movs	r0, #1
   b8d62:	e7f7      	b.n	b8d54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8d64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8d64:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8d66:	6883      	ldr	r3, [r0, #8]
   b8d68:	428b      	cmp	r3, r1
   b8d6a:	da02      	bge.n	b8d72 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8d6c:	f7ff ffea 	bl	b8d44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8d70:	bd08      	pop	{r3, pc}
    return true;
   b8d72:	2001      	movs	r0, #1
   b8d74:	e7fc      	b.n	b8d70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8d76 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b8d76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8d78:	4604      	mov	r4, r0
   b8d7a:	a801      	add	r0, sp, #4
   b8d7c:	f7fd fac0 	bl	b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8d80:	9b01      	ldr	r3, [sp, #4]
   b8d82:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8d84:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8d86:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8d88:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8d8a:	6062      	str	r2, [r4, #4]
   b8d8c:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8d8e:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8d90:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8d92:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8d94:	9001      	str	r0, [sp, #4]
   b8d96:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b8d98:	f7fe fcce 	bl	b7738 <free>
   b8d9c:	b004      	add	sp, #16
   b8d9e:	bd10      	pop	{r4, pc}

000b8da0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8da4:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8da6:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8da8:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8daa:	4419      	add	r1, r3
   b8dac:	6883      	ldr	r3, [r0, #8]
   b8dae:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8db0:	4604      	mov	r4, r0
   b8db2:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8db4:	dc12      	bgt.n	b8ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8db6:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8db8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8dba:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8dbc:	1bd2      	subs	r2, r2, r7
   b8dbe:	4631      	mov	r1, r6
   b8dc0:	1970      	adds	r0, r6, r5
   b8dc2:	f002 fff3 	bl	bbdac <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8dc6:	462a      	mov	r2, r5
   b8dc8:	4641      	mov	r1, r8
   b8dca:	4630      	mov	r0, r6
   b8dcc:	f002 ffe0 	bl	bbd90 <memcpy>
    size_ += n;
   b8dd0:	6863      	ldr	r3, [r4, #4]
   b8dd2:	442b      	add	r3, r5
   b8dd4:	6063      	str	r3, [r4, #4]
    return true;
   b8dd6:	2001      	movs	r0, #1
}
   b8dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8ddc:	f7ff ffb2 	bl	b8d44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8de0:	2800      	cmp	r0, #0
   b8de2:	d1e8      	bne.n	b8db6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8de4:	e7f8      	b.n	b8dd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8de6 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8de6:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b8de8:	460a      	mov	r2, r1
   b8dea:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8dec:	b510      	push	{r4, lr}
   b8dee:	4604      	mov	r4, r0
    size_ = 0;
   b8df0:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b8df2:	b102      	cbz	r2, b8df6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b8df4:	b90b      	cbnz	r3, b8dfa <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b8df6:	2000      	movs	r0, #0
}
   b8df8:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b8dfa:	2bff      	cmp	r3, #255	; 0xff
   b8dfc:	bf28      	it	cs
   b8dfe:	23ff      	movcs	r3, #255	; 0xff
   b8e00:	f7ff ffce 	bl	b8da0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b8e04:	2800      	cmp	r0, #0
   b8e06:	d0f7      	beq.n	b8df8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b8e08:	6860      	ldr	r0, [r4, #4]
   b8e0a:	e7f5      	b.n	b8df8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b8e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e0e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e10:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8e14:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8e16:	4604      	mov	r4, r0
   b8e18:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e1a:	da0b      	bge.n	b8e34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8e1c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e1e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8e20:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e22:	1b52      	subs	r2, r2, r5
   b8e24:	1c48      	adds	r0, r1, #1
   b8e26:	f002 ffc1 	bl	bbdac <memmove>
    new(p) T(std::move(value));
   b8e2a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8e2c:	6863      	ldr	r3, [r4, #4]
   b8e2e:	3301      	adds	r3, #1
   b8e30:	6063      	str	r3, [r4, #4]
}
   b8e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e34:	3101      	adds	r1, #1
   b8e36:	f7ff ff85 	bl	b8d44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8e3a:	2800      	cmp	r0, #0
   b8e3c:	d1ee      	bne.n	b8e1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8e3e:	e7f8      	b.n	b8e32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8e40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8e40:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8e42:	6841      	ldr	r1, [r0, #4]
   b8e44:	f7ff bfe2 	b.w	b8e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8e48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8e4c:	4604      	mov	r4, r0
   b8e4e:	461d      	mov	r5, r3
   b8e50:	460f      	mov	r7, r1
   b8e52:	ab01      	add	r3, sp, #4
   b8e54:	4690      	mov	r8, r2
   b8e56:	460a      	mov	r2, r1
   b8e58:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8e5c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8e60:	f7fe ff14 	bl	b7c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8e64:	1cae      	adds	r6, r5, #2
   b8e66:	6863      	ldr	r3, [r4, #4]
   b8e68:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8e6a:	f1b9 0f00 	cmp.w	r9, #0
   b8e6e:	d126      	bne.n	b8ebe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8e70:	b328      	cbz	r0, b8ebe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8e72:	4433      	add	r3, r6
   b8e74:	1a1b      	subs	r3, r3, r0
   b8e76:	2bff      	cmp	r3, #255	; 0xff
   b8e78:	d809      	bhi.n	b8e8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8e7a:	9901      	ldr	r1, [sp, #4]
   b8e7c:	4620      	mov	r0, r4
   b8e7e:	f7ff fd02 	bl	b8886 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8e82:	6861      	ldr	r1, [r4, #4]
   b8e84:	4620      	mov	r0, r4
   b8e86:	4431      	add	r1, r6
   b8e88:	f7ff ff6c 	bl	b8d64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8e8c:	b918      	cbnz	r0, b8e96 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8e8e:	6860      	ldr	r0, [r4, #4]
}
   b8e90:	b003      	add	sp, #12
   b8e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8e96:	1c6a      	adds	r2, r5, #1
   b8e98:	9901      	ldr	r1, [sp, #4]
   b8e9a:	b2d2      	uxtb	r2, r2
   b8e9c:	4620      	mov	r0, r4
   b8e9e:	f7ff ffb5 	bl	b8e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8ea2:	9901      	ldr	r1, [sp, #4]
   b8ea4:	463a      	mov	r2, r7
   b8ea6:	3101      	adds	r1, #1
   b8ea8:	4620      	mov	r0, r4
   b8eaa:	f7ff ffaf 	bl	b8e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8eae:	9901      	ldr	r1, [sp, #4]
   b8eb0:	462b      	mov	r3, r5
   b8eb2:	4642      	mov	r2, r8
   b8eb4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8eb6:	4620      	mov	r0, r4
   b8eb8:	f7ff ff72 	bl	b8da0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8ebc:	e7e7      	b.n	b8e8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8ebe:	18f1      	adds	r1, r6, r3
   b8ec0:	29ff      	cmp	r1, #255	; 0xff
   b8ec2:	d8e4      	bhi.n	b8e8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8ec4:	4620      	mov	r0, r4
   b8ec6:	f7ff ff4d 	bl	b8d64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8eca:	2800      	cmp	r0, #0
   b8ecc:	d0df      	beq.n	b8e8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8ece:	1c69      	adds	r1, r5, #1
   b8ed0:	b2c9      	uxtb	r1, r1
   b8ed2:	4620      	mov	r0, r4
   b8ed4:	f7ff ffb4 	bl	b8e40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8ed8:	4639      	mov	r1, r7
   b8eda:	4620      	mov	r0, r4
   b8edc:	f7ff ffb0 	bl	b8e40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8ee0:	6861      	ldr	r1, [r4, #4]
   b8ee2:	462b      	mov	r3, r5
   b8ee4:	4642      	mov	r2, r8
   b8ee6:	e7e6      	b.n	b8eb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8ee8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8ee8:	b430      	push	{r4, r5}
   b8eea:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8eee:	b11a      	cbz	r2, b8ef8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8ef0:	9502      	str	r5, [sp, #8]
}
   b8ef2:	bc30      	pop	{r4, r5}
   b8ef4:	f7ff bfa8 	b.w	b8e48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8ef8:	6840      	ldr	r0, [r0, #4]
}
   b8efa:	bc30      	pop	{r4, r5}
   b8efc:	4770      	bx	lr

000b8efe <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8efe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8f00:	2300      	movs	r3, #0
   b8f02:	e9c0 3300 	strd	r3, r3, [r0]
   b8f06:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8f08:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f0a:	9300      	str	r3, [sp, #0]
   b8f0c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8f0e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f12:	4619      	mov	r1, r3
   b8f14:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8f18:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f1a:	f7ff ffe5 	bl	b8ee8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8f1e:	4620      	mov	r0, r4
   b8f20:	b004      	add	sp, #16
   b8f22:	bd10      	pop	{r4, pc}

000b8f24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8f24:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f28:	4604      	mov	r4, r0
   b8f2a:	460d      	mov	r5, r1
   b8f2c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8f2e:	d914      	bls.n	b8f5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8f30:	4290      	cmp	r0, r2
   b8f32:	d213      	bcs.n	b8f5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8f34:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8f38:	1a75      	subs	r5, r6, r1
   b8f3a:	f1a1 0708 	sub.w	r7, r1, #8
   b8f3e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8f40:	42b7      	cmp	r7, r6
   b8f42:	d018      	beq.n	b8f76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8f44:	b11c      	cbz	r4, b8f4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8f46:	4631      	mov	r1, r6
   b8f48:	4620      	mov	r0, r4
   b8f4a:	f7ff fce1 	bl	b8910 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8f4e:	1d30      	adds	r0, r6, #4
   b8f50:	f7fc f8e0 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8f54:	3e08      	subs	r6, #8
   b8f56:	3c08      	subs	r4, #8
   b8f58:	e7f2      	b.n	b8f40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8f5a:	d00c      	beq.n	b8f76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8f5c:	42b5      	cmp	r5, r6
   b8f5e:	d00a      	beq.n	b8f76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8f60:	b11c      	cbz	r4, b8f6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8f62:	4629      	mov	r1, r5
   b8f64:	4620      	mov	r0, r4
   b8f66:	f7ff fcd3 	bl	b8910 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8f6a:	1d28      	adds	r0, r5, #4
   b8f6c:	f7fc f8d2 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8f70:	3508      	adds	r5, #8
   b8f72:	3408      	adds	r4, #8
   b8f74:	e7f2      	b.n	b8f5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8f78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8f7a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8f7c:	6846      	ldr	r6, [r0, #4]
   b8f7e:	4668      	mov	r0, sp
   b8f80:	f7ff fcc6 	bl	b8910 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f84:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8f88:	429f      	cmp	r7, r3
   b8f8a:	db12      	blt.n	b8fb2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8f8c:	3701      	adds	r7, #1
        if (n > 0) {
   b8f8e:	2f00      	cmp	r7, #0
   b8f90:	dd29      	ble.n	b8fe6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8f92:	00f8      	lsls	r0, r7, #3
   b8f94:	f7fe fbc8 	bl	b7728 <malloc>
            if (!d) {
   b8f98:	4605      	mov	r5, r0
   b8f9a:	b1f0      	cbz	r0, b8fda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8f9c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8fa0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8fa4:	f7ff ffbe 	bl	b8f24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8fa8:	6820      	ldr	r0, [r4, #0]
   b8faa:	f7fe fbc5 	bl	b7738 <free>
        data_ = d;
   b8fae:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8fb0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8fb2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8fb4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8fb6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8fba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8fbe:	4631      	mov	r1, r6
   b8fc0:	f106 0008 	add.w	r0, r6, #8
   b8fc4:	f7ff ffae 	bl	b8f24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8fc8:	b11e      	cbz	r6, b8fd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8fca:	4669      	mov	r1, sp
   b8fcc:	4630      	mov	r0, r6
   b8fce:	f7ff fc9f 	bl	b8910 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8fd2:	6863      	ldr	r3, [r4, #4]
   b8fd4:	3301      	adds	r3, #1
   b8fd6:	6063      	str	r3, [r4, #4]
    return true;
   b8fd8:	2501      	movs	r5, #1
   b8fda:	a801      	add	r0, sp, #4
   b8fdc:	f7fc f89a 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8fe0:	4628      	mov	r0, r5
   b8fe2:	b003      	add	sp, #12
   b8fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8fe6:	2500      	movs	r5, #0
   b8fe8:	e7de      	b.n	b8fa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8fea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8fec:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8ff0:	4605      	mov	r5, r0
   b8ff2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8ff4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8ff8:	42a6      	cmp	r6, r4
   b8ffa:	d005      	beq.n	b9008 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8ffc:	4639      	mov	r1, r7
   b8ffe:	4620      	mov	r0, r4
   b9000:	f7ff fb2d 	bl	b865e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9004:	b108      	cbz	r0, b900a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9006:	b914      	cbnz	r4, b900e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b900a:	3408      	adds	r4, #8
   b900c:	e7f4      	b.n	b8ff8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b900e:	1d20      	adds	r0, r4, #4
   b9010:	f7fc f880 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b9014:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9018:	f104 0108 	add.w	r1, r4, #8
   b901c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9020:	4620      	mov	r0, r4
   b9022:	f7ff ff7f 	bl	b8f24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b9026:	686b      	ldr	r3, [r5, #4]
   b9028:	3b01      	subs	r3, #1
   b902a:	606b      	str	r3, [r5, #4]
    return true;
   b902c:	e7ec      	b.n	b9008 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b9030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9034:	4605      	mov	r5, r0
   b9036:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b9038:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b903a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b903c:	f7fe fef4 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b9040:	682e      	ldr	r6, [r5, #0]
   b9042:	1ef3      	subs	r3, r6, #3
   b9044:	2b0d      	cmp	r3, #13
   b9046:	d83c      	bhi.n	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9048:	e8df f013 	tbh	[pc, r3, lsl #1]
   b904c:	0053000e 	.word	0x0053000e
   b9050:	00d1003b 	.word	0x00d1003b
   b9054:	003b003b 	.word	0x003b003b
   b9058:	003b003b 	.word	0x003b003b
   b905c:	009b003b 	.word	0x009b003b
   b9060:	009b009b 	.word	0x009b009b
   b9064:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b9068:	a804      	add	r0, sp, #16
   b906a:	f7ff fa9f 	bl	b85ac <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b906e:	9b04      	ldr	r3, [sp, #16]
   b9070:	89aa      	ldrh	r2, [r5, #12]
   b9072:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b9074:	6869      	ldr	r1, [r5, #4]
   b9076:	9804      	ldr	r0, [sp, #16]
   b9078:	3108      	adds	r1, #8
   b907a:	3002      	adds	r0, #2
   b907c:	f7fe fef8 	bl	b7e70 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b9080:	a904      	add	r1, sp, #16
   b9082:	a806      	add	r0, sp, #24
   b9084:	f7ff fc44 	bl	b8910 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b9088:	a906      	add	r1, sp, #24
   b908a:	f104 0018 	add.w	r0, r4, #24
   b908e:	f7ff ff73 	bl	b8f78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b9092:	4605      	mov	r5, r0
   b9094:	a807      	add	r0, sp, #28
   b9096:	f7fc f83d 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b909a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b909c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b909e:	b9b5      	cbnz	r5, b90ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b90a0:	4b5d      	ldr	r3, [pc, #372]	; (b9218 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b90a2:	495e      	ldr	r1, [pc, #376]	; (b921c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b90a4:	9300      	str	r3, [sp, #0]
   b90a6:	2032      	movs	r0, #50	; 0x32
   b90a8:	462b      	mov	r3, r5
   b90aa:	aa06      	add	r2, sp, #24
   b90ac:	9507      	str	r5, [sp, #28]
   b90ae:	f7fe fa3f 	bl	b7530 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b90b2:	9b04      	ldr	r3, [sp, #16]
   b90b4:	4629      	mov	r1, r5
   b90b6:	8818      	ldrh	r0, [r3, #0]
   b90b8:	f7fe f8a8 	bl	b720c <hal_ble_gap_disconnect>
   b90bc:	a805      	add	r0, sp, #20
   b90be:	f7fc f829 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b90c2:	a803      	add	r0, sp, #12
   b90c4:	f7fe febe 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b90c8:	b00e      	add	sp, #56	; 0x38
   b90ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b90ce:	4a54      	ldr	r2, [pc, #336]	; (b9220 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b90d0:	9200      	str	r2, [sp, #0]
   b90d2:	2300      	movs	r3, #0
   b90d4:	4951      	ldr	r1, [pc, #324]	; (b921c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b90d6:	9307      	str	r3, [sp, #28]
   b90d8:	aa06      	add	r2, sp, #24
   b90da:	2001      	movs	r0, #1
   b90dc:	f7fe fa28 	bl	b7530 <log_message>
                if (impl->connectedCallback_) {
   b90e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b90e2:	2b00      	cmp	r3, #0
   b90e4:	d0ea      	beq.n	b90bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b90e6:	a904      	add	r1, sp, #16
   b90e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b90ec:	f7ff fc88 	bl	b8a00 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b90f0:	e7e4      	b.n	b90bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b90f2:	89a9      	ldrh	r1, [r5, #12]
   b90f4:	4620      	mov	r0, r4
   b90f6:	f7ff f96c 	bl	b83d2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b90fa:	4606      	mov	r6, r0
   b90fc:	2800      	cmp	r0, #0
   b90fe:	d0e0      	beq.n	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9100:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b9102:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b9106:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b910a:	8029      	strh	r1, [r5, #0]
   b910c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b9110:	429a      	cmp	r2, r3
   b9112:	d003      	beq.n	b911c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b9114:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9118:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b911a:	e7f9      	b.n	b9110 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b911c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b9120:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9124:	45b8      	cmp	r8, r7
   b9126:	d004      	beq.n	b9132 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b9128:	1d38      	adds	r0, r7, #4
   b912a:	f7fb fff3 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b912e:	3708      	adds	r7, #8
   b9130:	e7f8      	b.n	b9124 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b9132:	2300      	movs	r3, #0
   b9134:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b9136:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b913a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b913e:	45b8      	cmp	r8, r7
   b9140:	d004      	beq.n	b914c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b9142:	1d38      	adds	r0, r7, #4
   b9144:	f7fb ffe6 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9148:	3708      	adds	r7, #8
   b914a:	e7f8      	b.n	b913e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b914c:	2300      	movs	r3, #0
   b914e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b9150:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b9152:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9154:	b123      	cbz	r3, b9160 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b9156:	4631      	mov	r1, r6
   b9158:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b915c:	f7ff fc50 	bl	b8a00 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b9160:	2300      	movs	r3, #0
   b9162:	2220      	movs	r2, #32
   b9164:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b9168:	4a2e      	ldr	r2, [pc, #184]	; (b9224 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b916a:	9200      	str	r2, [sp, #0]
   b916c:	492b      	ldr	r1, [pc, #172]	; (b921c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b916e:	aa06      	add	r2, sp, #24
   b9170:	2001      	movs	r0, #1
   b9172:	f7fe f9dd 	bl	b7530 <log_message>
                    impl->peers_.removeOne(*peer);
   b9176:	4631      	mov	r1, r6
   b9178:	f104 0018 	add.w	r0, r4, #24
   b917c:	f7ff ff35 	bl	b8fea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b9180:	e79f      	b.n	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9182:	89a9      	ldrh	r1, [r5, #12]
   b9184:	4620      	mov	r0, r4
   b9186:	f7ff f924 	bl	b83d2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b918a:	2800      	cmp	r0, #0
   b918c:	d099      	beq.n	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b918e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9190:	2b00      	cmp	r3, #0
   b9192:	d096      	beq.n	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b9194:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9196:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b9198:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b919c:	d001      	beq.n	b91a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b919e:	2e10      	cmp	r6, #16
   b91a0:	d117      	bne.n	b91d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b91a2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b91a4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b91a6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b91a8:	2506      	movs	r5, #6
                        };
   b91aa:	f88d 3015 	strb.w	r3, [sp, #21]
   b91ae:	9104      	str	r1, [sp, #16]
   b91b0:	f88d 2014 	strb.w	r2, [sp, #20]
   b91b4:	9006      	str	r0, [sp, #24]
   b91b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b91ba:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b91bc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b91c0:	9508      	str	r5, [sp, #32]
   b91c2:	e883 0003 	stmia.w	r3, {r0, r1}
   b91c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b91c8:	a906      	add	r1, sp, #24
   b91ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b91ce:	4798      	blx	r3
   b91d0:	e777      	b.n	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b91d2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b91d4:	bf01      	itttt	eq
   b91d6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b91d8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b91da:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b91de:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b91e0:	bf0f      	iteee	eq
   b91e2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b91e6:	461a      	movne	r2, r3
   b91e8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b91ea:	461d      	movne	r5, r3
   b91ec:	e7dd      	b.n	b91aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b91ee:	89a9      	ldrh	r1, [r5, #12]
   b91f0:	4620      	mov	r0, r4
   b91f2:	f7ff f8ee 	bl	b83d2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b91f6:	4601      	mov	r1, r0
   b91f8:	2800      	cmp	r0, #0
   b91fa:	f43f af62 	beq.w	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b91fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9200:	2b00      	cmp	r3, #0
   b9202:	f43f af5e 	beq.w	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9206:	686b      	ldr	r3, [r5, #4]
   b9208:	9306      	str	r3, [sp, #24]
   b920a:	aa06      	add	r2, sp, #24
   b920c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b920e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9212:	4798      	blx	r3
   b9214:	e755      	b.n	b90c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9216:	bf00      	nop
   b9218:	000bc4ff 	.word	0x000bc4ff
   b921c:	000bc463 	.word	0x000bc463
   b9220:	000bc525 	.word	0x000bc525
   b9224:	000bc542 	.word	0x000bc542

000b9228 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b9228:	b513      	push	{r0, r1, r4, lr}
   b922a:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b922c:	f7ff f9e0 	bl	b85f0 <_ZNK8particle13BlePeerDevice9connectedEv>
   b9230:	b1d0      	cbz	r0, b9268 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b9232:	6823      	ldr	r3, [r4, #0]
   b9234:	2100      	movs	r1, #0
   b9236:	8818      	ldrh	r0, [r3, #0]
   b9238:	f7fd ffe8 	bl	b720c <hal_ble_gap_disconnect>
   b923c:	2800      	cmp	r0, #0
   b923e:	db11      	blt.n	b9264 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b9240:	a801      	add	r0, sp, #4
   b9242:	f7fe fdf1 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b9246:	f7ff fa61 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b924a:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b924c:	4621      	mov	r1, r4
   b924e:	3018      	adds	r0, #24
   b9250:	f7ff fecb 	bl	b8fea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b9254:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9256:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b925a:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b925c:	a801      	add	r0, sp, #4
   b925e:	f7fe fdf1 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b9262:	2000      	movs	r0, #0
}
   b9264:	b002      	add	sp, #8
   b9266:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b9268:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b926c:	e7fa      	b.n	b9264 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>

000b926e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b926e:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b9270:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b9272:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9274:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9276:	dd05      	ble.n	b9284 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b9278:	2114      	movs	r1, #20
   b927a:	4369      	muls	r1, r5
   b927c:	f7fe fa64 	bl	b7748 <realloc>
            if (!d) {
   b9280:	b918      	cbnz	r0, b928a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b9282:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b9284:	f7fe fa58 	bl	b7738 <free>
        T* d = nullptr;
   b9288:	2000      	movs	r0, #0
        data_ = d;
   b928a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b928c:	60a5      	str	r5, [r4, #8]
        return true;
   b928e:	2001      	movs	r0, #1
   b9290:	e7f7      	b.n	b9282 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b9292 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9292:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b9296:	2400      	movs	r4, #0
   b9298:	e9c0 4400 	strd	r4, r4, [r0]
   b929c:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b929e:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b92a0:	6849      	ldr	r1, [r1, #4]
   b92a2:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b92a4:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b92a6:	dd1a      	ble.n	b92de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b92a8:	f7ff ffe1 	bl	b926e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b92ac:	b1b8      	cbz	r0, b92de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b92ae:	e9d8 9300 	ldrd	r9, r3, [r8]
   b92b2:	f04f 0c14 	mov.w	ip, #20
   b92b6:	f8d7 e000 	ldr.w	lr, [r7]
   b92ba:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b92be:	eb09 0504 	add.w	r5, r9, r4
   b92c2:	45ac      	cmp	ip, r5
   b92c4:	d008      	beq.n	b92d8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b92c6:	eb1e 0604 	adds.w	r6, lr, r4
   b92ca:	bf1f      	itttt	ne
   b92cc:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b92ce:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b92d0:	682b      	ldrne	r3, [r5, #0]
   b92d2:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b92d4:	3414      	adds	r4, #20
   b92d6:	e7f2      	b.n	b92be <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b92d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b92dc:	607b      	str	r3, [r7, #4]
}
   b92de:	4638      	mov	r0, r7
   b92e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b92e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b92e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b92e8:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b92ec:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b92ee:	6883      	ldr	r3, [r0, #8]
   b92f0:	19e9      	adds	r1, r5, r7
   b92f2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b92f4:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b92f6:	dc17      	bgt.n	b9328 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b92f8:	2314      	movs	r3, #20
   b92fa:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b92fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b92fe:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b9300:	fb03 f907 	mul.w	r9, r3, r7
   b9304:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b9306:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9308:	1b52      	subs	r2, r2, r5
   b930a:	4631      	mov	r1, r6
   b930c:	eb06 0009 	add.w	r0, r6, r9
   b9310:	f002 fd4c 	bl	bbdac <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b9314:	464a      	mov	r2, r9
   b9316:	4641      	mov	r1, r8
   b9318:	4630      	mov	r0, r6
   b931a:	f002 fd39 	bl	bbd90 <memcpy>
    size_ += n;
   b931e:	6863      	ldr	r3, [r4, #4]
   b9320:	443b      	add	r3, r7
   b9322:	6063      	str	r3, [r4, #4]
}
   b9324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9328:	f7ff ffa1 	bl	b926e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b932c:	2800      	cmp	r0, #0
   b932e:	d1e3      	bne.n	b92f8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b9330:	e7f8      	b.n	b9324 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b9332 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9332:	b082      	sub	sp, #8
   b9334:	b570      	push	{r4, r5, r6, lr}
   b9336:	460c      	mov	r4, r1
   b9338:	a904      	add	r1, sp, #16
   b933a:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b933e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b9342:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9344:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9346:	da17      	bge.n	b9378 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b9348:	2314      	movs	r3, #20
   b934a:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b934e:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b9350:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b9352:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b9354:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9356:	1a52      	subs	r2, r2, r1
   b9358:	18e0      	adds	r0, r4, r3
   b935a:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b935c:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b935e:	f002 fd25 	bl	bbdac <memmove>
    new(p) T(std::move(value));
   b9362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9366:	6833      	ldr	r3, [r6, #0]
   b9368:	6023      	str	r3, [r4, #0]
    ++size_;
   b936a:	686b      	ldr	r3, [r5, #4]
   b936c:	3301      	adds	r3, #1
   b936e:	606b      	str	r3, [r5, #4]
}
   b9370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9374:	b002      	add	sp, #8
   b9376:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9378:	3101      	adds	r1, #1
   b937a:	f7ff ff78 	bl	b926e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b937e:	2800      	cmp	r0, #0
   b9380:	d1e2      	bne.n	b9348 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b9382:	e7f5      	b.n	b9370 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b9384 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b9384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b9388:	2400      	movs	r4, #0
   b938a:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b938c:	1e93      	subs	r3, r2, #2
   b938e:	e9c0 4400 	strd	r4, r4, [r0]
   b9392:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b9394:	4605      	mov	r5, r0
   b9396:	460f      	mov	r7, r1
   b9398:	4690      	mov	r8, r2
   b939a:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b939c:	9305      	str	r3, [sp, #20]
    return size_;
   b939e:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b93a0:	428c      	cmp	r4, r1
   b93a2:	da72      	bge.n	b948a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b93a4:	6838      	ldr	r0, [r7, #0]
   b93a6:	ab07      	add	r3, sp, #28
   b93a8:	4642      	mov	r2, r8
   b93aa:	1b09      	subs	r1, r1, r4
   b93ac:	4420      	add	r0, r4
   b93ae:	f7fe fc6d 	bl	b7c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b93b2:	4606      	mov	r6, r0
   b93b4:	2800      	cmp	r0, #0
   b93b6:	d068      	beq.n	b948a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b93b8:	9b05      	ldr	r3, [sp, #20]
   b93ba:	2b01      	cmp	r3, #1
   b93bc:	d82f      	bhi.n	b941e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b93be:	f1a0 0b02 	sub.w	fp, r0, #2
   b93c2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b93c6:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b93ca:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b93ce:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b93d0:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b93d2:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b93d4:	d055      	beq.n	b9482 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b93d6:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b93d8:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b93dc:	4413      	add	r3, r2
   b93de:	a808      	add	r0, sp, #32
   b93e0:	78d9      	ldrb	r1, [r3, #3]
   b93e2:	789b      	ldrb	r3, [r3, #2]
   b93e4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b93e8:	f7fe fe2b 	bl	b8042 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b93ec:	f10d 0e20 	add.w	lr, sp, #32
   b93f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b93f4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b93f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b93fc:	f8de 3000 	ldr.w	r3, [lr]
   b9400:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b9404:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b9408:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b940c:	ab0d      	add	r3, sp, #52	; 0x34
   b940e:	cb0c      	ldmia	r3, {r2, r3}
   b9410:	6869      	ldr	r1, [r5, #4]
   b9412:	4628      	mov	r0, r5
   b9414:	f7ff ff8d 	bl	b9332 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b9418:	f109 0901 	add.w	r9, r9, #1
   b941c:	e7d7      	b.n	b93ce <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b941e:	f1a8 0306 	sub.w	r3, r8, #6
   b9422:	2b01      	cmp	r3, #1
   b9424:	d82d      	bhi.n	b9482 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9426:	f1a0 0b02 	sub.w	fp, r0, #2
   b942a:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b942e:	f04f 0900 	mov.w	r9, #0
   b9432:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b9436:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b9438:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b943a:	d022      	beq.n	b9482 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b943c:	3302      	adds	r3, #2
    return data_[i];
   b943e:	6839      	ldr	r1, [r7, #0]
   b9440:	4423      	add	r3, r4
   b9442:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b9446:	2201      	movs	r2, #1
   b9448:	4419      	add	r1, r3
   b944a:	a808      	add	r0, sp, #32
   b944c:	f7fe fdda 	bl	b8004 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b9450:	f10d 0e20 	add.w	lr, sp, #32
   b9454:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b9458:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b945c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9460:	f8de 3000 	ldr.w	r3, [lr]
   b9464:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b9468:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b946c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b9470:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b9474:	6869      	ldr	r1, [r5, #4]
   b9476:	4628      	mov	r0, r5
   b9478:	f7ff ff5b 	bl	b9332 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b947c:	f109 0901 	add.w	r9, r9, #1
   b9480:	e7d9      	b.n	b9436 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b9482:	9b07      	ldr	r3, [sp, #28]
   b9484:	441c      	add	r4, r3
   b9486:	4434      	add	r4, r6
   b9488:	e789      	b.n	b939e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b948a:	4628      	mov	r0, r5
   b948c:	b013      	add	sp, #76	; 0x4c
   b948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9492 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b9492:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b9494:	2300      	movs	r3, #0
   b9496:	b085      	sub	sp, #20
   b9498:	e9c0 3300 	strd	r3, r3, [r0]
   b949c:	6083      	str	r3, [r0, #8]
   b949e:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94a0:	2202      	movs	r2, #2
   b94a2:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b94a4:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94a6:	f7ff ff6d 	bl	b9384 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b94aa:	a901      	add	r1, sp, #4
   b94ac:	4620      	mov	r0, r4
   b94ae:	f7ff ff19 	bl	b92e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b94b2:	a801      	add	r0, sp, #4
   b94b4:	f7ff f9b6 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94b8:	2202      	movs	r2, #2
   b94ba:	4629      	mov	r1, r5
   b94bc:	a801      	add	r0, sp, #4
   b94be:	f7ff ff61 	bl	b9384 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b94c2:	a901      	add	r1, sp, #4
   b94c4:	4620      	mov	r0, r4
   b94c6:	f7ff ff0d 	bl	b92e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b94ca:	a801      	add	r0, sp, #4
   b94cc:	f7ff f9aa 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b94d0:	2203      	movs	r2, #3
   b94d2:	4629      	mov	r1, r5
   b94d4:	a801      	add	r0, sp, #4
   b94d6:	f7ff ff55 	bl	b9384 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b94da:	a901      	add	r1, sp, #4
   b94dc:	4620      	mov	r0, r4
   b94de:	f7ff ff01 	bl	b92e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b94e2:	a801      	add	r0, sp, #4
   b94e4:	f7ff f99e 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b94e8:	2206      	movs	r2, #6
   b94ea:	4629      	mov	r1, r5
   b94ec:	a801      	add	r0, sp, #4
   b94ee:	f7ff ff49 	bl	b9384 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b94f2:	a901      	add	r1, sp, #4
   b94f4:	4620      	mov	r0, r4
   b94f6:	f7ff fef5 	bl	b92e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b94fa:	a801      	add	r0, sp, #4
   b94fc:	f7ff f992 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b9500:	2207      	movs	r2, #7
   b9502:	4629      	mov	r1, r5
   b9504:	a801      	add	r0, sp, #4
   b9506:	f7ff ff3d 	bl	b9384 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b950a:	a901      	add	r1, sp, #4
   b950c:	4620      	mov	r0, r4
   b950e:	f7ff fee9 	bl	b92e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b9512:	a801      	add	r0, sp, #4
   b9514:	f7ff f986 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b9518:	4620      	mov	r0, r4
   b951a:	b005      	add	sp, #20
   b951c:	bd30      	pop	{r4, r5, pc}

000b951e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b951e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9522:	b08b      	sub	sp, #44	; 0x2c
   b9524:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b9526:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b952a:	a801      	add	r0, sp, #4
   b952c:	f7ff feb1 	bl	b9292 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b9530:	9b02      	ldr	r3, [sp, #8]
   b9532:	2b00      	cmp	r3, #0
   b9534:	dd4a      	ble.n	b95cc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b9536:	f104 0114 	add.w	r1, r4, #20
   b953a:	a804      	add	r0, sp, #16
   b953c:	f7ff ffa9 	bl	b9492 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b9540:	f104 0108 	add.w	r1, r4, #8
   b9544:	a807      	add	r0, sp, #28
   b9546:	f7ff ffa4 	bl	b9492 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b954a:	9d05      	ldr	r5, [sp, #20]
   b954c:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b954e:	2d00      	cmp	r5, #0
   b9550:	dc01      	bgt.n	b9556 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b9552:	2e00      	cmp	r6, #0
   b9554:	dd38      	ble.n	b95c8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b9556:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b9558:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b955a:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b955e:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b9562:	2314      	movs	r3, #20
   b9564:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b9568:	fb03 8505 	mla	r5, r3, r5, r8
   b956c:	fb03 9606 	mla	r6, r3, r6, r9
   b9570:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b9572:	45ba      	cmp	sl, r7
   b9574:	d028      	beq.n	b95c8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b9576:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b9578:	45ab      	cmp	fp, r5
   b957a:	d015      	beq.n	b95a8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b957c:	4659      	mov	r1, fp
   b957e:	4650      	mov	r0, sl
   b9580:	f7fe fd69 	bl	b8056 <_ZNK8particle7BleUuideqERKS0_>
   b9584:	f10b 0b14 	add.w	fp, fp, #20
   b9588:	4604      	mov	r4, r0
   b958a:	2800      	cmp	r0, #0
   b958c:	d0f4      	beq.n	b9578 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b958e:	a807      	add	r0, sp, #28
   b9590:	f7ff f948 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b9594:	a804      	add	r0, sp, #16
   b9596:	f7ff f945 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b959a:	a801      	add	r0, sp, #4
   b959c:	f7ff f942 	bl	b8824 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b95a0:	4620      	mov	r0, r4
   b95a2:	b00b      	add	sp, #44	; 0x2c
   b95a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b95a8:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b95aa:	45b3      	cmp	fp, r6
   b95ac:	d009      	beq.n	b95c2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b95ae:	4659      	mov	r1, fp
   b95b0:	4650      	mov	r0, sl
   b95b2:	f7fe fd50 	bl	b8056 <_ZNK8particle7BleUuideqERKS0_>
   b95b6:	f10b 0b14 	add.w	fp, fp, #20
   b95ba:	4604      	mov	r4, r0
   b95bc:	2800      	cmp	r0, #0
   b95be:	d0f4      	beq.n	b95aa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b95c0:	e7e5      	b.n	b958e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b95c2:	f10a 0a14 	add.w	sl, sl, #20
   b95c6:	e7d4      	b.n	b9572 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b95c8:	2400      	movs	r4, #0
   b95ca:	e7e0      	b.n	b958e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b95cc:	2401      	movs	r4, #1
   b95ce:	e7e4      	b.n	b959a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b95d0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b95d0:	b538      	push	{r3, r4, r5, lr}
   b95d2:	4605      	mov	r5, r0
   b95d4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b95d6:	f7fc f870 	bl	b56ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b95da:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b95dc:	68a2      	ldr	r2, [r4, #8]
   b95de:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b95e0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b95e2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b95e4:	68e2      	ldr	r2, [r4, #12]
   b95e6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b95e8:	60e3      	str	r3, [r4, #12]
      }
   b95ea:	bd38      	pop	{r3, r4, r5, pc}

000b95ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b95ec:	b530      	push	{r4, r5, lr}
   b95ee:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b95f0:	2300      	movs	r3, #0
   b95f2:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b95f4:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b95f6:	4605      	mov	r5, r0
   b95f8:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b95fa:	b133      	cbz	r3, b960a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b95fc:	2202      	movs	r2, #2
   b95fe:	4668      	mov	r0, sp
   b9600:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9602:	68e3      	ldr	r3, [r4, #12]
   b9604:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b9606:	68a3      	ldr	r3, [r4, #8]
   b9608:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b960a:	4629      	mov	r1, r5
   b960c:	4668      	mov	r0, sp
   b960e:	f7ff ffdf 	bl	b95d0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b9612:	4668      	mov	r0, sp
   b9614:	f7fb fc4c 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
      }
   b9618:	b005      	add	sp, #20
   b961a:	bd30      	pop	{r4, r5, pc}

000b961c <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b961c:	b538      	push	{r3, r4, r5, lr}
   b961e:	460d      	mov	r5, r1
   b9620:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b9622:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b9624:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b9626:	b123      	cbz	r3, b9632 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b9628:	6828      	ldr	r0, [r5, #0]
   b962a:	314c      	adds	r1, #76	; 0x4c
   b962c:	304c      	adds	r0, #76	; 0x4c
   b962e:	f7ff ffdd 	bl	b95ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9632:	4620      	mov	r0, r4
   b9634:	682b      	ldr	r3, [r5, #0]
   b9636:	f840 3b04 	str.w	r3, [r0], #4
   b963a:	6869      	ldr	r1, [r5, #4]
   b963c:	f7fe fbce 	bl	b7ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b9640:	4620      	mov	r0, r4
   b9642:	bd38      	pop	{r3, r4, r5, pc}

000b9644 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b9644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9648:	4604      	mov	r4, r0
   b964a:	b087      	sub	sp, #28
    WiringBleLock lk;
   b964c:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b964e:	460e      	mov	r6, r1
   b9650:	4617      	mov	r7, r2
    WiringBleLock lk;
   b9652:	f7fe fbe9 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9656:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b9658:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b965c:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b9660:	4544      	cmp	r4, r8
   b9662:	46a1      	mov	r9, r4
   b9664:	d016      	beq.n	b9694 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b9666:	4621      	mov	r1, r4
   b9668:	a801      	add	r0, sp, #4
   b966a:	f7fe fedd 	bl	b8428 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b966e:	4639      	mov	r1, r7
   b9670:	a801      	add	r0, sp, #4
   b9672:	f7fe fcf0 	bl	b8056 <_ZNK8particle7BleUuideqERKS0_>
   b9676:	3408      	adds	r4, #8
   b9678:	4605      	mov	r5, r0
   b967a:	2800      	cmp	r0, #0
   b967c:	d0f0      	beq.n	b9660 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b967e:	4649      	mov	r1, r9
   b9680:	4630      	mov	r0, r6
   b9682:	f7ff ffcb 	bl	b961c <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b9686:	4668      	mov	r0, sp
   b9688:	f7fe fbdc 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b968c:	4628      	mov	r0, r5
   b968e:	b007      	add	sp, #28
   b9690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b9694:	2500      	movs	r5, #0
   b9696:	e7f6      	b.n	b9686 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b9698 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b9698:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b969a:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b969c:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b969e:	344c      	adds	r4, #76	; 0x4c
   b96a0:	b1b9      	cbz	r1, b96d2 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b96a2:	e9cd 1200 	strd	r1, r2, [sp]
   b96a6:	a802      	add	r0, sp, #8
   b96a8:	4669      	mov	r1, sp
   b96aa:	f7ff f901 	bl	b88b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b96ae:	2300      	movs	r3, #0
	__x.swap(*this);
   b96b0:	a906      	add	r1, sp, #24
   b96b2:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b96b4:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b96b6:	f7ff ff8b 	bl	b95d0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b96ba:	4621      	mov	r1, r4
   b96bc:	a806      	add	r0, sp, #24
   b96be:	f7ff ff87 	bl	b95d0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b96c2:	a806      	add	r0, sp, #24
   b96c4:	f7fb fbf4 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
   b96c8:	a802      	add	r0, sp, #8
   b96ca:	f7fb fbf1 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
}
   b96ce:	b00a      	add	sp, #40	; 0x28
   b96d0:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b96d2:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b96d4:	e7eb      	b.n	b96ae <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b96d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b96d6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b96d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b96da:	4604      	mov	r4, r0
   b96dc:	460d      	mov	r5, r1
   b96de:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b96e0:	d914      	bls.n	b970c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b96e2:	4290      	cmp	r0, r2
   b96e4:	d213      	bcs.n	b970e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b96e6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b96ea:	1a75      	subs	r5, r6, r1
   b96ec:	f1a1 0708 	sub.w	r7, r1, #8
   b96f0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b96f2:	42b7      	cmp	r7, r6
   b96f4:	d018      	beq.n	b9728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b96f6:	b11c      	cbz	r4, b9700 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b96f8:	4631      	mov	r1, r6
   b96fa:	4620      	mov	r0, r4
   b96fc:	f7ff f8fe 	bl	b88fc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b9700:	1d30      	adds	r0, r6, #4
   b9702:	f7fb fd07 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9706:	3e08      	subs	r6, #8
   b9708:	3c08      	subs	r4, #8
   b970a:	e7f2      	b.n	b96f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b970c:	d00c      	beq.n	b9728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b970e:	42b5      	cmp	r5, r6
   b9710:	d00a      	beq.n	b9728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9712:	b11c      	cbz	r4, b971c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9714:	4629      	mov	r1, r5
   b9716:	4620      	mov	r0, r4
   b9718:	f7ff f8f0 	bl	b88fc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b971c:	1d28      	adds	r0, r5, #4
   b971e:	f7fb fcf9 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9722:	3508      	adds	r5, #8
   b9724:	3408      	adds	r4, #8
   b9726:	e7f2      	b.n	b970e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b972a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b972a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b972c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b972e:	4605      	mov	r5, r0
        if (n > 0) {
   b9730:	dd11      	ble.n	b9756 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9732:	00f0      	lsls	r0, r6, #3
   b9734:	f7fd fff8 	bl	b7728 <malloc>
            if (!d) {
   b9738:	4604      	mov	r4, r0
   b973a:	b158      	cbz	r0, b9754 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b973c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9740:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9744:	f7ff ffc7 	bl	b96d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9748:	6828      	ldr	r0, [r5, #0]
   b974a:	f7fd fff5 	bl	b7738 <free>
        data_ = d;
   b974e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9750:	60ae      	str	r6, [r5, #8]
        return true;
   b9752:	2001      	movs	r0, #1
    }
   b9754:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9756:	2400      	movs	r4, #0
   b9758:	e7f6      	b.n	b9748 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b975a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b975a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b975e:	2300      	movs	r3, #0
   b9760:	e9c0 3300 	strd	r3, r3, [r0]
   b9764:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9766:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9768:	6849      	ldr	r1, [r1, #4]
   b976a:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b976c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b976e:	dd13      	ble.n	b9798 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b9770:	f7ff ffdb 	bl	b972a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9774:	b180      	cbz	r0, b9798 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9776:	e9d5 6300 	ldrd	r6, r3, [r5]
   b977a:	6827      	ldr	r7, [r4, #0]
   b977c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b9780:	45b0      	cmp	r8, r6
   b9782:	d007      	beq.n	b9794 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9784:	b11f      	cbz	r7, b978e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b9786:	4631      	mov	r1, r6
   b9788:	4638      	mov	r0, r7
   b978a:	f7ff f8b7 	bl	b88fc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b978e:	3608      	adds	r6, #8
   b9790:	3708      	adds	r7, #8
   b9792:	e7f5      	b.n	b9780 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b9794:	686b      	ldr	r3, [r5, #4]
   b9796:	6063      	str	r3, [r4, #4]
}
   b9798:	4620      	mov	r0, r4
   b979a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b979e <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b979e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b97a0:	460d      	mov	r5, r1
   b97a2:	4604      	mov	r4, r0
    WiringBleLock lk;
   b97a4:	a801      	add	r0, sp, #4
   b97a6:	f7fe fb3f 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b97aa:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b97ac:	4620      	mov	r0, r4
   b97ae:	310c      	adds	r1, #12
   b97b0:	f7ff ffd3 	bl	b975a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b97b4:	a801      	add	r0, sp, #4
   b97b6:	f7fe fb45 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b97ba:	4620      	mov	r0, r4
   b97bc:	b003      	add	sp, #12
   b97be:	bd30      	pop	{r4, r5, pc}

000b97c0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b97c0:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b97c2:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b97c4:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b97c6:	4605      	mov	r5, r0
   b97c8:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b97ca:	b933      	cbnz	r3, b97da <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b97cc:	4608      	mov	r0, r1
   b97ce:	f7fe fabf 	bl	b7d50 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b97d2:	b910      	cbnz	r0, b97da <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b97d4:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b97d6:	2201      	movs	r2, #1
   b97d8:	729a      	strb	r2, [r3, #10]
    return services();
   b97da:	4628      	mov	r0, r5
   b97dc:	4621      	mov	r1, r4
   b97de:	f7ff ffde 	bl	b979e <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b97e2:	4628      	mov	r0, r5
   b97e4:	bd38      	pop	{r3, r4, r5, pc}

000b97e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b97e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b97e8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b97ea:	6845      	ldr	r5, [r0, #4]
   b97ec:	4668      	mov	r0, sp
   b97ee:	f7ff f885 	bl	b88fc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b97f2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b97f6:	4299      	cmp	r1, r3
   b97f8:	da10      	bge.n	b981c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b97fa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b97fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b97fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9802:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9806:	4629      	mov	r1, r5
   b9808:	f105 0008 	add.w	r0, r5, #8
   b980c:	f7ff ff63 	bl	b96d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9810:	b98d      	cbnz	r5, b9836 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9812:	6863      	ldr	r3, [r4, #4]
   b9814:	3301      	adds	r3, #1
   b9816:	6063      	str	r3, [r4, #4]
    return true;
   b9818:	2601      	movs	r6, #1
   b981a:	e006      	b.n	b982a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b981c:	3101      	adds	r1, #1
   b981e:	4620      	mov	r0, r4
   b9820:	f7ff ff83 	bl	b972a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9824:	4606      	mov	r6, r0
   b9826:	2800      	cmp	r0, #0
   b9828:	d1e7      	bne.n	b97fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b982a:	a801      	add	r0, sp, #4
   b982c:	f7fb fc72 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9830:	4630      	mov	r0, r6
   b9832:	b002      	add	sp, #8
   b9834:	bd70      	pop	{r4, r5, r6, pc}
   b9836:	4669      	mov	r1, sp
   b9838:	4628      	mov	r0, r5
   b983a:	f7ff f85f 	bl	b88fc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b983e:	e7e8      	b.n	b9812 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9840 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b9840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b9844:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b9900 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b9848:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b9904 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b984c:	b093      	sub	sp, #76	; 0x4c
   b984e:	4605      	mov	r5, r0
   b9850:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b9852:	2700      	movs	r7, #0
   b9854:	682b      	ldr	r3, [r5, #0]
   b9856:	42bb      	cmp	r3, r7
   b9858:	d94e      	bls.n	b98f8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b985a:	a803      	add	r0, sp, #12
   b985c:	f7fe fe8a 	bl	b8574 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9860:	261c      	movs	r6, #28
   b9862:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b9864:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b9866:	437e      	muls	r6, r7
   b9868:	4432      	add	r2, r6
   b986a:	f10d 0c14 	add.w	ip, sp, #20
   b986e:	1d13      	adds	r3, r2, #4
   b9870:	46e3      	mov	fp, ip
   b9872:	3214      	adds	r2, #20
   b9874:	6818      	ldr	r0, [r3, #0]
   b9876:	6859      	ldr	r1, [r3, #4]
   b9878:	46e6      	mov	lr, ip
   b987a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b987e:	3308      	adds	r3, #8
   b9880:	4293      	cmp	r3, r2
   b9882:	46f4      	mov	ip, lr
   b9884:	d1f6      	bne.n	b9874 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b9886:	6818      	ldr	r0, [r3, #0]
   b9888:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b988c:	4659      	mov	r1, fp
   b988e:	a80a      	add	r0, sp, #40	; 0x28
   b9890:	f7fe fb96 	bl	b7fc0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9894:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b9898:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b989c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b989e:	f8dc 3000 	ldr.w	r3, [ip]
   b98a2:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b98a4:	686b      	ldr	r3, [r5, #4]
   b98a6:	9a03      	ldr	r2, [sp, #12]
   b98a8:	4433      	add	r3, r6
   b98aa:	a903      	add	r1, sp, #12
   b98ac:	8b1b      	ldrh	r3, [r3, #24]
   b98ae:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b98b0:	686b      	ldr	r3, [r5, #4]
   b98b2:	4433      	add	r3, r6
   b98b4:	8b5b      	ldrh	r3, [r3, #26]
   b98b6:	82d3      	strh	r3, [r2, #22]
        return services_;
   b98b8:	f8d8 0000 	ldr.w	r0, [r8]
   b98bc:	f100 040c 	add.w	r4, r0, #12
   b98c0:	a80a      	add	r0, sp, #40	; 0x28
   b98c2:	f7ff f81b 	bl	b88fc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b98c6:	4620      	mov	r0, r4
   b98c8:	a90a      	add	r1, sp, #40	; 0x28
   b98ca:	f7ff ff8c 	bl	b97e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b98ce:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b98d0:	a80b      	add	r0, sp, #44	; 0x2c
   b98d2:	f7fb fc1f 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98d6:	b954      	cbnz	r4, b98ee <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b98d8:	2320      	movs	r3, #32
   b98da:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b98de:	f8cd 9000 	str.w	r9, [sp]
   b98e2:	4623      	mov	r3, r4
   b98e4:	aa0a      	add	r2, sp, #40	; 0x28
   b98e6:	4651      	mov	r1, sl
   b98e8:	2032      	movs	r0, #50	; 0x32
   b98ea:	f7fd fe21 	bl	b7530 <log_message>
   b98ee:	a804      	add	r0, sp, #16
   b98f0:	f7fb fc10 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b98f4:	3701      	adds	r7, #1
   b98f6:	e7ad      	b.n	b9854 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b98f8:	b013      	add	sp, #76	; 0x4c
   b98fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98fe:	bf00      	nop
   b9900:	000bc561 	.word	0x000bc561
   b9904:	000bc463 	.word	0x000bc463

000b9908 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9908:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b990a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b990c:	4604      	mov	r4, r0
   b990e:	460d      	mov	r5, r1
   b9910:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9912:	d914      	bls.n	b993e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9914:	4290      	cmp	r0, r2
   b9916:	d213      	bcs.n	b9940 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9918:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b991c:	1a75      	subs	r5, r6, r1
   b991e:	f1a1 0708 	sub.w	r7, r1, #8
   b9922:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9924:	42b7      	cmp	r7, r6
   b9926:	d018      	beq.n	b995a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9928:	b11c      	cbz	r4, b9932 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b992a:	4631      	mov	r1, r6
   b992c:	4620      	mov	r0, r4
   b992e:	f7fe ffd7 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9932:	1d30      	adds	r0, r6, #4
   b9934:	f7fb fbee 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9938:	3e08      	subs	r6, #8
   b993a:	3c08      	subs	r4, #8
   b993c:	e7f2      	b.n	b9924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b993e:	d00c      	beq.n	b995a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9940:	42b5      	cmp	r5, r6
   b9942:	d00a      	beq.n	b995a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9944:	b11c      	cbz	r4, b994e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9946:	4629      	mov	r1, r5
   b9948:	4620      	mov	r0, r4
   b994a:	f7fe ffc9 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b994e:	1d28      	adds	r0, r5, #4
   b9950:	f7fb fbe0 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9954:	3508      	adds	r5, #8
   b9956:	3408      	adds	r4, #8
   b9958:	e7f2      	b.n	b9940 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b995a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b995c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b995c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b995e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9960:	4605      	mov	r5, r0
        if (n > 0) {
   b9962:	dd11      	ble.n	b9988 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9964:	00f0      	lsls	r0, r6, #3
   b9966:	f7fd fedf 	bl	b7728 <malloc>
            if (!d) {
   b996a:	4604      	mov	r4, r0
   b996c:	b158      	cbz	r0, b9986 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b996e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9972:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9976:	f7ff ffc7 	bl	b9908 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b997a:	6828      	ldr	r0, [r5, #0]
   b997c:	f7fd fedc 	bl	b7738 <free>
        data_ = d;
   b9980:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9982:	60ae      	str	r6, [r5, #8]
        return true;
   b9984:	2001      	movs	r0, #1
    }
   b9986:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9988:	2400      	movs	r4, #0
   b998a:	e7f6      	b.n	b997a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b998c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b9990:	2300      	movs	r3, #0
   b9992:	e9c0 3300 	strd	r3, r3, [r0]
   b9996:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9998:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b999a:	6849      	ldr	r1, [r1, #4]
   b999c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b999e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b99a0:	dd13      	ble.n	b99ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b99a2:	f7ff ffdb 	bl	b995c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b99a6:	b180      	cbz	r0, b99ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b99a8:	e9d5 6300 	ldrd	r6, r3, [r5]
   b99ac:	6827      	ldr	r7, [r4, #0]
   b99ae:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b99b2:	45b0      	cmp	r8, r6
   b99b4:	d007      	beq.n	b99c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b99b6:	b11f      	cbz	r7, b99c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b99b8:	4631      	mov	r1, r6
   b99ba:	4638      	mov	r0, r7
   b99bc:	f7fe ff90 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b99c0:	3608      	adds	r6, #8
   b99c2:	3708      	adds	r7, #8
   b99c4:	e7f5      	b.n	b99b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b99c6:	686b      	ldr	r3, [r5, #4]
   b99c8:	6063      	str	r3, [r4, #4]
}
   b99ca:	4620      	mov	r0, r4
   b99cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b99d0 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b99d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b99d2:	460d      	mov	r5, r1
   b99d4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b99d6:	a801      	add	r0, sp, #4
   b99d8:	f7fe fa26 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b99dc:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b99de:	4620      	mov	r0, r4
   b99e0:	3118      	adds	r1, #24
   b99e2:	f7ff ffd3 	bl	b998c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b99e6:	a801      	add	r0, sp, #4
   b99e8:	f7fe fa2c 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b99ec:	4620      	mov	r0, r4
   b99ee:	b003      	add	sp, #12
   b99f0:	bd30      	pop	{r4, r5, pc}

000b99f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b99f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b99f4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b99f6:	6845      	ldr	r5, [r0, #4]
   b99f8:	4668      	mov	r0, sp
   b99fa:	f7fe ff71 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99fe:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9a02:	4299      	cmp	r1, r3
   b9a04:	da10      	bge.n	b9a28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9a06:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9a08:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9a0a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9a0e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9a12:	4629      	mov	r1, r5
   b9a14:	f105 0008 	add.w	r0, r5, #8
   b9a18:	f7ff ff76 	bl	b9908 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9a1c:	b98d      	cbnz	r5, b9a42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9a1e:	6863      	ldr	r3, [r4, #4]
   b9a20:	3301      	adds	r3, #1
   b9a22:	6063      	str	r3, [r4, #4]
    return true;
   b9a24:	2601      	movs	r6, #1
   b9a26:	e006      	b.n	b9a36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9a28:	3101      	adds	r1, #1
   b9a2a:	4620      	mov	r0, r4
   b9a2c:	f7ff ff96 	bl	b995c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9a30:	4606      	mov	r6, r0
   b9a32:	2800      	cmp	r0, #0
   b9a34:	d1e7      	bne.n	b9a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9a36:	a801      	add	r0, sp, #4
   b9a38:	f7fb fb6c 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a3c:	4630      	mov	r0, r6
   b9a3e:	b002      	add	sp, #8
   b9a40:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b9a42:	4669      	mov	r1, sp
   b9a44:	4628      	mov	r0, r5
   b9a46:	f7fe ff4b 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9a4a:	e7e8      	b.n	b9a1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9a4c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9a4e:	b085      	sub	sp, #20
   b9a50:	4605      	mov	r5, r0
    WiringBleLock lk;
   b9a52:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9a54:	460c      	mov	r4, r1
   b9a56:	4617      	mov	r7, r2
    WiringBleLock lk;
   b9a58:	f7fe f9e6 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b9a5c:	2300      	movs	r3, #0
   b9a5e:	e9c5 3300 	strd	r3, r3, [r5]
   b9a62:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b9a64:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b9a66:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b9a6a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b9a6e:	42b4      	cmp	r4, r6
   b9a70:	d011      	beq.n	b9a96 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b9a72:	6838      	ldr	r0, [r7, #0]
   b9a74:	4621      	mov	r1, r4
   b9a76:	f7fe fc97 	bl	b83a8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b9a7a:	b150      	cbz	r0, b9a92 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b9a7c:	4621      	mov	r1, r4
   b9a7e:	a802      	add	r0, sp, #8
   b9a80:	f7fe ff2e 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9a84:	a902      	add	r1, sp, #8
   b9a86:	4628      	mov	r0, r5
   b9a88:	f7ff ffb3 	bl	b99f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b9a8c:	a803      	add	r0, sp, #12
   b9a8e:	f7fb fb41 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b9a92:	3408      	adds	r4, #8
   b9a94:	e7eb      	b.n	b9a6e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b9a96:	a801      	add	r0, sp, #4
   b9a98:	f7fe f9d4 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9a9c:	4628      	mov	r0, r5
   b9a9e:	b005      	add	sp, #20
   b9aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9aa4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b9aa8:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9aaa:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9aac:	b091      	sub	sp, #68	; 0x44
   b9aae:	4606      	mov	r6, r0
   b9ab0:	460f      	mov	r7, r1
   b9ab2:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b9ab4:	b933      	cbnz	r3, b9ac4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b9ab6:	e9c0 3300 	strd	r3, r3, [r0]
   b9aba:	6083      	str	r3, [r0, #8]
}
   b9abc:	4630      	mov	r0, r6
   b9abe:	b011      	add	sp, #68	; 0x44
   b9ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b9ac4:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b9ac6:	7e0d      	ldrb	r5, [r1, #24]
   b9ac8:	2d00      	cmp	r5, #0
   b9aca:	d158      	bne.n	b9b7e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b9acc:	2320      	movs	r3, #32
   b9ace:	462a      	mov	r2, r5
   b9ad0:	a803      	add	r0, sp, #12
   b9ad2:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b9ad6:	f7fe fbba 	bl	b824e <_ZNK8particle7BleUuid8toStringEb>
   b9ada:	9b03      	ldr	r3, [sp, #12]
   b9adc:	9301      	str	r3, [sp, #4]
   b9ade:	4b2b      	ldr	r3, [pc, #172]	; (b9b8c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b9ae0:	492b      	ldr	r1, [pc, #172]	; (b9b90 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b9ae2:	9300      	str	r3, [sp, #0]
   b9ae4:	aa08      	add	r2, sp, #32
   b9ae6:	462b      	mov	r3, r5
   b9ae8:	2001      	movs	r0, #1
   b9aea:	f7fd fd21 	bl	b7530 <log_message>
   b9aee:	a803      	add	r0, sp, #12
   b9af0:	f7fd ff18 	bl	b7924 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b9af4:	231c      	movs	r3, #28
   b9af6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b9afa:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b9afe:	8a9a      	ldrh	r2, [r3, #20]
   b9b00:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b9b04:	8adb      	ldrh	r3, [r3, #22]
   b9b06:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b9b0a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b9b0c:	4a21      	ldr	r2, [pc, #132]	; (b9b94 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b9b0e:	8818      	ldrh	r0, [r3, #0]
   b9b10:	9500      	str	r5, [sp, #0]
   b9b12:	a908      	add	r1, sp, #32
   b9b14:	f7fd fb98 	bl	b7248 <hal_ble_gatt_client_discover_characteristics>
   b9b18:	2800      	cmp	r0, #0
   b9b1a:	db30      	blt.n	b9b7e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b9b1c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b9b1e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b9b22:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b9b26:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9b28:	f1a4 0308 	sub.w	r3, r4, #8
   b9b2c:	4599      	cmp	r9, r3
   b9b2e:	d022      	beq.n	b9b76 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b9b30:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b9b34:	89db      	ldrh	r3, [r3, #14]
   b9b36:	2b00      	cmp	r3, #0
   b9b38:	d0f5      	beq.n	b9b26 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b9b3a:	2210      	movs	r2, #16
   b9b3c:	2100      	movs	r1, #0
   b9b3e:	eb0d 0002 	add.w	r0, sp, r2
   b9b42:	9503      	str	r5, [sp, #12]
   b9b44:	f002 f94c 	bl	bbde0 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b9b48:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b9b4c:	89d9      	ldrh	r1, [r3, #14]
   b9b4e:	683b      	ldr	r3, [r7, #0]
   b9b50:	aa03      	add	r2, sp, #12
   b9b52:	8818      	ldrh	r0, [r3, #0]
   b9b54:	9500      	str	r5, [sp, #0]
   b9b56:	2313      	movs	r3, #19
   b9b58:	f7fd fb94 	bl	b7284 <hal_ble_gatt_client_read>
                if (len > 0) {
   b9b5c:	2800      	cmp	r0, #0
   b9b5e:	d0e2      	beq.n	b9b26 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b9b60:	ab10      	add	r3, sp, #64	; 0x40
   b9b62:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b9b64:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b9b66:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b9b6a:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b9b6e:	303c      	adds	r0, #60	; 0x3c
   b9b70:	f7fd ff79 	bl	b7a66 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9b74:	e7d7      	b.n	b9b26 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b9b76:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b9b7a:	2201      	movs	r2, #1
   b9b7c:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b9b7e:	4642      	mov	r2, r8
   b9b80:	4639      	mov	r1, r7
   b9b82:	4630      	mov	r0, r6
   b9b84:	f7ff ff62 	bl	b9a4c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b9b88:	e798      	b.n	b9abc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b9b8a:	bf00      	nop
   b9b8c:	000bc586 	.word	0x000bc586
   b9b90:	000bc463 	.word	0x000bc463
   b9b94:	000b9d3d 	.word	0x000b9d3d

000b9b98 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b9b98:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b9b9a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9b9c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b9b9e:	b085      	sub	sp, #20
   b9ba0:	4606      	mov	r6, r0
   b9ba2:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b9ba4:	b92b      	cbnz	r3, b9bb2 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b9ba6:	a801      	add	r0, sp, #4
   b9ba8:	f7ff fe0a 	bl	b97c0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b9bac:	a801      	add	r0, sp, #4
   b9bae:	f7fe fec7 	bl	b8940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b9bb2:	682b      	ldr	r3, [r5, #0]
   b9bb4:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b9bb8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b9bbc:	42bc      	cmp	r4, r7
   b9bbe:	d009      	beq.n	b9bd4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b9bc0:	4622      	mov	r2, r4
   b9bc2:	4629      	mov	r1, r5
   b9bc4:	a801      	add	r0, sp, #4
   b9bc6:	f7ff ff6d 	bl	b9aa4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b9bca:	a801      	add	r0, sp, #4
   b9bcc:	f7fe feca 	bl	b8964 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b9bd0:	3408      	adds	r4, #8
   b9bd2:	e7f3      	b.n	b9bbc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b9bd4:	4630      	mov	r0, r6
   b9bd6:	4629      	mov	r1, r5
   b9bd8:	f7ff fefa 	bl	b99d0 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b9bdc:	4630      	mov	r0, r6
   b9bde:	b005      	add	sp, #20
   b9be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9be4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9be8:	4605      	mov	r5, r0
   b9bea:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b9bec:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b9bee:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9bf0:	460f      	mov	r7, r1
    return address_;
   b9bf2:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9bf4:	4698      	mov	r8, r3
    return address_;
   b9bf6:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b9bf8:	4b41      	ldr	r3, [pc, #260]	; (b9d00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b9bfa:	9304      	str	r3, [sp, #16]
    return address_;
   b9bfc:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b9bfe:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b9c00:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b9c04:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b9c08:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b9c0c:	f7fe fd7e 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9c10:	4b3c      	ldr	r3, [pc, #240]	; (b9d04 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b9c12:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b9c14:	f7fe fd7a 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b9c18:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9c1a:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b9c1c:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b9c1e:	464a      	mov	r2, r9
   b9c20:	a804      	add	r0, sp, #16
   b9c22:	f7fd fb39 	bl	b7298 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b9c26:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b9c28:	4604      	mov	r4, r0
   b9c2a:	b138      	cbz	r0, b9c3c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b9c2c:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9c32:	801a      	strh	r2, [r3, #0]
}
   b9c34:	4620      	mov	r0, r4
   b9c36:	b013      	add	sp, #76	; 0x4c
   b9c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b9c3c:	4639      	mov	r1, r7
   b9c3e:	4628      	mov	r0, r5
   b9c40:	f7fe fce8 	bl	b8614 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b9c44:	a803      	add	r0, sp, #12
   b9c46:	f7fe f8ef 	bl	b7e28 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b9c4a:	f7fe fd5f 	bl	b870c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b9c4e:	6807      	ldr	r7, [r0, #0]
   b9c50:	4629      	mov	r1, r5
   b9c52:	3718      	adds	r7, #24
   b9c54:	4630      	mov	r0, r6
   b9c56:	f7fe fe5b 	bl	b8910 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b9c5a:	4631      	mov	r1, r6
   b9c5c:	4638      	mov	r0, r7
   b9c5e:	f7ff f98b 	bl	b8f78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b9c62:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b9c64:	a80b      	add	r0, sp, #44	; 0x2c
   b9c66:	f7fb fa55 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9c6a:	f04f 0920 	mov.w	r9, #32
   b9c6e:	bb1f      	cbnz	r7, b9cb8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b9c70:	4632      	mov	r2, r6
   b9c72:	4b25      	ldr	r3, [pc, #148]	; (b9d08 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b9c74:	4e25      	ldr	r6, [pc, #148]	; (b9d0c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b9c76:	4926      	ldr	r1, [pc, #152]	; (b9d10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9c78:	9300      	str	r3, [sp, #0]
   b9c7a:	2032      	movs	r0, #50	; 0x32
   b9c7c:	4623      	mov	r3, r4
   b9c7e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b9c82:	f7fd fc55 	bl	b7530 <log_message>
   b9c86:	6830      	ldr	r0, [r6, #0]
   b9c88:	f7fd fb6a 	bl	b7360 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9c8c:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b9c8e:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9c92:	4621      	mov	r1, r4
   b9c94:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9c96:	4c1f      	ldr	r4, [pc, #124]	; (b9d14 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9c98:	f7fd fab8 	bl	b720c <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b9c9c:	6830      	ldr	r0, [r6, #0]
   b9c9e:	f7fd fb57 	bl	b7350 <os_mutex_recursive_lock>
        locked_ = true;
   b9ca2:	2301      	movs	r3, #1
   b9ca4:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b9ca8:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9cae:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9cb0:	a803      	add	r0, sp, #12
   b9cb2:	f7fe f8c7 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
   b9cb6:	e7bd      	b.n	b9c34 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b9cb8:	a803      	add	r0, sp, #12
   b9cba:	f7fe f8c3 	bl	b7e44 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b9cbe:	4b16      	ldr	r3, [pc, #88]	; (b9d18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b9cc0:	9300      	str	r3, [sp, #0]
   b9cc2:	4913      	ldr	r1, [pc, #76]	; (b9d10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9cc4:	4623      	mov	r3, r4
   b9cc6:	4632      	mov	r2, r6
   b9cc8:	2001      	movs	r0, #1
   b9cca:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b9cce:	f7fd fc2f 	bl	b7530 <log_message>
    if (automatic) {
   b9cd2:	f1b8 0f00 	cmp.w	r8, #0
   b9cd6:	d0ad      	beq.n	b9c34 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9cd8:	4629      	mov	r1, r5
   b9cda:	4630      	mov	r0, r6
   b9cdc:	f7ff ff5c 	bl	b9b98 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b9ce0:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b9ce4:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b9ce8:	42bd      	cmp	r5, r7
   b9cea:	d005      	beq.n	b9cf8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b9cec:	4628      	mov	r0, r5
   b9cee:	2101      	movs	r1, #1
   b9cf0:	f7fe fc06 	bl	b8500 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b9cf4:	3508      	adds	r5, #8
   b9cf6:	e7f7      	b.n	b9ce8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9cf8:	4630      	mov	r0, r6
   b9cfa:	f7fe fe33 	bl	b8964 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9cfe:	e799      	b.n	b9c34 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b9d00:	00180003 	.word	0x00180003
   b9d04:	000b9031 	.word	0x000b9031
   b9d08:	000bc5b8 	.word	0x000bc5b8
   b9d0c:	2003e6bc 	.word	0x2003e6bc
   b9d10:	000bc463 	.word	0x000bc463
   b9d14:	fffffefc 	.word	0xfffffefc
   b9d18:	000bc5d4 	.word	0x000bc5d4

000b9d1c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b9d1c:	b513      	push	{r0, r1, r4, lr}
   b9d1e:	4604      	mov	r4, r0
   b9d20:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b9d24:	f7fe fc42 	bl	b85ac <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b9d28:	9b00      	ldr	r3, [sp, #0]
   b9d2a:	9901      	ldr	r1, [sp, #4]
   b9d2c:	2200      	movs	r2, #0
   b9d2e:	4620      	mov	r0, r4
   b9d30:	f7ff ff58 	bl	b9be4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   b9d34:	4620      	mov	r0, r4
   b9d36:	b002      	add	sp, #8
   b9d38:	bd10      	pop	{r4, pc}
	...

000b9d3c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b9d40:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9d42:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b9d44:	2600      	movs	r6, #0
   b9d46:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b9d4a:	4b66      	ldr	r3, [pc, #408]	; (b9ee4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b9d4c:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9d4e:	4605      	mov	r5, r0
   b9d50:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b9d52:	4633      	mov	r3, r6
   b9d54:	4964      	ldr	r1, [pc, #400]	; (b9ee8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9d56:	f8df 9194 	ldr.w	r9, [pc, #404]	; b9eec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b9d5a:	f8df 818c 	ldr.w	r8, [pc, #396]	; b9ee8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9d5e:	f8df a190 	ldr.w	sl, [pc, #400]	; b9ef0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b9d62:	aa0c      	add	r2, sp, #48	; 0x30
   b9d64:	2001      	movs	r0, #1
   b9d66:	f7fd fbe3 	bl	b7530 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b9d6a:	682b      	ldr	r3, [r5, #0]
   b9d6c:	42b3      	cmp	r3, r6
   b9d6e:	f240 80b5 	bls.w	b9edc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b9d72:	a803      	add	r0, sp, #12
   b9d74:	f7fe fb3e 	bl	b83f4 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b9d78:	a805      	add	r0, sp, #20
   b9d7a:	f7fe fbfb 	bl	b8574 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9d7e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9d82:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b9d84:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b9d86:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9d8a:	445b      	add	r3, fp
        this->size = halHandles.size;
   b9d8c:	8bd9      	ldrh	r1, [r3, #30]
   b9d8e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b9d90:	8c19      	ldrh	r1, [r3, #32]
   b9d92:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b9d94:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b9d96:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b9d98:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b9d9a:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b9d9c:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b9d9e:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b9da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b9da2:	8253      	strh	r3, [r2, #18]
   b9da4:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b9da8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b9dac:	429a      	cmp	r2, r3
   b9dae:	d07d      	beq.n	b9eac <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b9db0:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b9db2:	8ac4      	ldrh	r4, [r0, #22]
   b9db4:	428c      	cmp	r4, r1
   b9db6:	d377      	bcc.n	b9ea8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b9db8:	8a84      	ldrh	r4, [r0, #20]
   b9dba:	428c      	cmp	r4, r1
   b9dbc:	d874      	bhi.n	b9ea8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9dbe:	6859      	ldr	r1, [r3, #4]
   b9dc0:	9005      	str	r0, [sp, #20]
   b9dc2:	a806      	add	r0, sp, #24
   b9dc4:	f7fe f80a 	bl	b7ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b9dc8:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b9dcc:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b9dd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9dd4:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b9dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9dda:	f8dc 3000 	ldr.w	r3, [ip]
   b9dde:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b9de0:	892b      	ldrh	r3, [r5, #8]
   b9de2:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b9de6:	686b      	ldr	r3, [r5, #4]
   b9de8:	9c03      	ldr	r4, [sp, #12]
   b9dea:	445b      	add	r3, fp
   b9dec:	7e5b      	ldrb	r3, [r3, #25]
   b9dee:	f013 0f02 	tst.w	r3, #2
   b9df2:	d16e      	bne.n	b9ed2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b9df4:	686b      	ldr	r3, [r5, #4]
   b9df6:	445b      	add	r3, fp
   b9df8:	7e5b      	ldrb	r3, [r3, #25]
   b9dfa:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b9dfc:	bf42      	ittt	mi
   b9dfe:	7923      	ldrbmi	r3, [r4, #4]
   b9e00:	f043 0304 	orrmi.w	r3, r3, #4
   b9e04:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b9e06:	686b      	ldr	r3, [r5, #4]
   b9e08:	445b      	add	r3, fp
   b9e0a:	7e5b      	ldrb	r3, [r3, #25]
   b9e0c:	0719      	lsls	r1, r3, #28
   b9e0e:	bf42      	ittt	mi
   b9e10:	7923      	ldrbmi	r3, [r4, #4]
   b9e12:	f043 0308 	orrmi.w	r3, r3, #8
   b9e16:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b9e18:	686b      	ldr	r3, [r5, #4]
   b9e1a:	445b      	add	r3, fp
   b9e1c:	7e5b      	ldrb	r3, [r3, #25]
   b9e1e:	06da      	lsls	r2, r3, #27
   b9e20:	bf42      	ittt	mi
   b9e22:	7923      	ldrbmi	r3, [r4, #4]
   b9e24:	f043 0310 	orrmi.w	r3, r3, #16
   b9e28:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b9e2a:	686b      	ldr	r3, [r5, #4]
   b9e2c:	445b      	add	r3, fp
   b9e2e:	aa07      	add	r2, sp, #28
   b9e30:	7e5b      	ldrb	r3, [r3, #25]
   b9e32:	069b      	lsls	r3, r3, #26
   b9e34:	bf42      	ittt	mi
   b9e36:	7923      	ldrbmi	r3, [r4, #4]
   b9e38:	f043 0320 	orrmi.w	r3, r3, #32
   b9e3c:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b9e3e:	686b      	ldr	r3, [r5, #4]
   b9e40:	449b      	add	fp, r3
   b9e42:	f10b 0304 	add.w	r3, fp, #4
   b9e46:	4696      	mov	lr, r2
   b9e48:	f10b 0b14 	add.w	fp, fp, #20
   b9e4c:	6818      	ldr	r0, [r3, #0]
   b9e4e:	6859      	ldr	r1, [r3, #4]
   b9e50:	4694      	mov	ip, r2
   b9e52:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b9e56:	3308      	adds	r3, #8
   b9e58:	455b      	cmp	r3, fp
   b9e5a:	4662      	mov	r2, ip
   b9e5c:	d1f6      	bne.n	b9e4c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b9e5e:	6818      	ldr	r0, [r3, #0]
   b9e60:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b9e64:	4671      	mov	r1, lr
   b9e66:	a80c      	add	r0, sp, #48	; 0x30
   b9e68:	f7fe f8aa 	bl	b7fc0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9e6c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b9e70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9e74:	3414      	adds	r4, #20
   b9e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e78:	f8dc 3000 	ldr.w	r3, [ip]
   b9e7c:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b9e7e:	a903      	add	r1, sp, #12
   b9e80:	a80c      	add	r0, sp, #48	; 0x30
   b9e82:	f7fe fd2d 	bl	b88e0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9e86:	a90c      	add	r1, sp, #48	; 0x30
   b9e88:	f107 0018 	add.w	r0, r7, #24
   b9e8c:	f7ff fdb1 	bl	b99f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9e90:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9e92:	a80d      	add	r0, sp, #52	; 0x34
   b9e94:	f7fb f93e 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e98:	b99c      	cbnz	r4, b9ec2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9e9a:	2320      	movs	r3, #32
   b9e9c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b9ea0:	f8cd a000 	str.w	sl, [sp]
   b9ea4:	4623      	mov	r3, r4
   b9ea6:	e007      	b.n	b9eb8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b9ea8:	3308      	adds	r3, #8
   b9eaa:	e77f      	b.n	b9dac <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9eac:	2420      	movs	r4, #32
   b9eae:	2300      	movs	r3, #0
   b9eb0:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b9eb4:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9eb8:	aa0c      	add	r2, sp, #48	; 0x30
   b9eba:	4641      	mov	r1, r8
   b9ebc:	2032      	movs	r0, #50	; 0x32
   b9ebe:	f7fd fb37 	bl	b7530 <log_message>
   b9ec2:	a806      	add	r0, sp, #24
   b9ec4:	f7fb f926 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ec8:	a804      	add	r0, sp, #16
   b9eca:	f7fb f923 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b9ece:	3601      	adds	r6, #1
   b9ed0:	e74b      	b.n	b9d6a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b9ed2:	7923      	ldrb	r3, [r4, #4]
   b9ed4:	f043 0302 	orr.w	r3, r3, #2
   b9ed8:	7123      	strb	r3, [r4, #4]
   b9eda:	e78b      	b.n	b9df4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b9edc:	b015      	add	sp, #84	; 0x54
   b9ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9ee2:	bf00      	nop
   b9ee4:	000bc5f1 	.word	0x000bc5f1
   b9ee8:	000bc463 	.word	0x000bc463
   b9eec:	000bc60c 	.word	0x000bc60c
   b9ef0:	000bc63b 	.word	0x000bc63b

000b9ef4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b9ef6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9ef8:	4605      	mov	r5, r0
        if (n > 0) {
   b9efa:	dd13      	ble.n	b9f24 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b9efc:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b9efe:	fb07 f006 	mul.w	r0, r7, r6
   b9f02:	f7fd fc11 	bl	b7728 <malloc>
            if (!d) {
   b9f06:	4604      	mov	r4, r0
   b9f08:	b158      	cbz	r0, b9f22 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b9f0a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9f0e:	fb07 1202 	mla	r2, r7, r2, r1
   b9f12:	f7fc fabd 	bl	b6490 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9f16:	6828      	ldr	r0, [r5, #0]
   b9f18:	f7fd fc0e 	bl	b7738 <free>
        data_ = d;
   b9f1c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9f1e:	60ae      	str	r6, [r5, #8]
        return true;
   b9f20:	2001      	movs	r0, #1
    }
   b9f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9f24:	2400      	movs	r4, #0
   b9f26:	e7f6      	b.n	b9f16 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b9f28 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
   b9f28:	b538      	push	{r3, r4, r5, lr}
   b9f2a:	460c      	mov	r4, r1
   b9f2c:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
   b9f2e:	f101 0018 	add.w	r0, r1, #24
   b9f32:	f7fd fef7 	bl	b7d24 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b9f36:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9f3a:	f7fd fefe 	bl	b7d3a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
   b9f3e:	2200      	movs	r2, #0
   b9f40:	4621      	mov	r1, r4
   b9f42:	4804      	ldr	r0, [pc, #16]	; (b9f54 <_ZN8particle16BleScanDelegator5startEv+0x2c>)
   b9f44:	f7fd f950 	bl	b71e8 <hal_ble_gap_start_scan>
        return resultsVector_;
   b9f48:	4621      	mov	r1, r4
   b9f4a:	4628      	mov	r0, r5
   b9f4c:	f7fc fb3a 	bl	b65c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
   b9f50:	4628      	mov	r0, r5
   b9f52:	bd38      	pop	{r3, r4, r5, pc}
   b9f54:	000b9f79 	.word	0x000b9f79

000b9f58 <_ZNK8particle14BleLocalDevice4scanEv>:
Vector<BleScanResult> BleLocalDevice::scan() const {
   b9f58:	b510      	push	{r4, lr}
   b9f5a:	b09e      	sub	sp, #120	; 0x78
   b9f5c:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b9f5e:	a801      	add	r0, sp, #4
   b9f60:	f7fe fc25 	bl	b87ae <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
   b9f64:	a901      	add	r1, sp, #4
   b9f66:	4620      	mov	r0, r4
   b9f68:	f7ff ffde 	bl	b9f28 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
   b9f6c:	a801      	add	r0, sp, #4
   b9f6e:	f7fe fc60 	bl	b8832 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b9f72:	4620      	mov	r0, r4
   b9f74:	b01e      	add	sp, #120	; 0x78
   b9f76:	bd10      	pop	{r4, pc}

000b9f78 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b9f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9f7c:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b9f7e:	ad01      	add	r5, sp, #4
   b9f80:	4606      	mov	r6, r0
   b9f82:	4628      	mov	r0, r5
   b9f84:	460c      	mov	r4, r1
   b9f86:	f7fd ff94 	bl	b7eb2 <_ZN8particle10BleAddressC1Ev>
   b9f8a:	a803      	add	r0, sp, #12
   b9f8c:	f7fe ffb7 	bl	b8efe <_ZN8particle18BleAdvertisingDataC1Ev>
   b9f90:	a806      	add	r0, sp, #24
   b9f92:	f7fe ffb4 	bl	b8efe <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b9f96:	6930      	ldr	r0, [r6, #16]
   b9f98:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b9f9a:	89f2      	ldrh	r2, [r6, #14]
   b9f9c:	ab13      	add	r3, sp, #76	; 0x4c
   b9f9e:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b9fa0:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b9fa4:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b9fa6:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b9fa8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b9fac:	a806      	add	r0, sp, #24
   b9fae:	f7fe ff1a 	bl	b8de6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b9fb2:	89b2      	ldrh	r2, [r6, #12]
   b9fb4:	6871      	ldr	r1, [r6, #4]
   b9fb6:	a803      	add	r0, sp, #12
   b9fb8:	f7fe ff15 	bl	b8de6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b9fbc:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9fc0:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b9fc2:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9fc4:	d003      	beq.n	b9fce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b9fc6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9fca:	429a      	cmp	r2, r3
   b9fcc:	db5c      	blt.n	ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b9fce:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b9fd2:	2b7f      	cmp	r3, #127	; 0x7f
   b9fd4:	d003      	beq.n	b9fde <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b9fd6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9fda:	429a      	cmp	r2, r3
   b9fdc:	dc54      	bgt.n	ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b9fde:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b9fe2:	4638      	mov	r0, r7
   b9fe4:	f7fe fdac 	bl	b8b40 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b9fe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b9fea:	2b00      	cmp	r3, #0
   b9fec:	dd52      	ble.n	ba094 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b9fee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b9ff0:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b9ff4:	45b1      	cmp	r9, r6
   b9ff6:	d050      	beq.n	ba09a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b9ff8:	4630      	mov	r0, r6
   b9ffa:	4629      	mov	r1, r5
   b9ffc:	f7fd ff45 	bl	b7e8a <_ZNK8particle10BleAddresseqERKS0_>
   ba000:	3608      	adds	r6, #8
   ba002:	4680      	mov	r8, r0
   ba004:	2800      	cmp	r0, #0
   ba006:	d0f5      	beq.n	b9ff4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   ba008:	9813      	ldr	r0, [sp, #76]	; 0x4c
   ba00a:	f7fd fb95 	bl	b7738 <free>
        if (!delegator->filterByRssi(result) ||
   ba00e:	f1b8 0f00 	cmp.w	r8, #0
   ba012:	d039      	beq.n	ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   ba014:	4629      	mov	r1, r5
   ba016:	4620      	mov	r0, r4
   ba018:	f7fe fd55 	bl	b8ac6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   ba01c:	b3a0      	cbz	r0, ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   ba01e:	4629      	mov	r1, r5
   ba020:	4620      	mov	r0, r4
   ba022:	f7ff fa7c 	bl	b951e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   ba026:	4606      	mov	r6, r0
   ba028:	b370      	cbz	r0, ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   ba02a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   ba02e:	4638      	mov	r0, r7
   ba030:	f7fe fdd1 	bl	b8bd6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   ba034:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba036:	2b00      	cmp	r3, #0
   ba038:	dd12      	ble.n	ba060 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   ba03a:	a806      	add	r0, sp, #24
   ba03c:	f7fe f97b 	bl	b8336 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   ba040:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   ba042:	a803      	add	r0, sp, #12
   ba044:	f7fe f977 	bl	b8336 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   ba048:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   ba04c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   ba050:	429a      	cmp	r2, r3
   ba052:	d025      	beq.n	ba0a0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   ba054:	f833 1b02 	ldrh.w	r1, [r3], #2
   ba058:	4588      	cmp	r8, r1
   ba05a:	d001      	beq.n	ba060 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   ba05c:	4288      	cmp	r0, r1
   ba05e:	d1f7      	bne.n	ba050 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   ba060:	9813      	ldr	r0, [sp, #76]	; 0x4c
   ba062:	f7fd fb69 	bl	b7738 <free>
              !delegator->filterByServiceUUID(result) ||
   ba066:	b17e      	cbz	r6, ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   ba068:	4629      	mov	r1, r5
   ba06a:	4620      	mov	r0, r4
   ba06c:	f7fe fde8 	bl	b8c40 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   ba070:	b150      	cbz	r0, ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   ba072:	6a23      	ldr	r3, [r4, #32]
   ba074:	b1b3      	cbz	r3, ba0a4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   ba076:	6963      	ldr	r3, [r4, #20]
   ba078:	9513      	str	r5, [sp, #76]	; 0x4c
   ba07a:	3301      	adds	r3, #1
   ba07c:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba080:	4639      	mov	r1, r7
   ba082:	f104 0018 	add.w	r0, r4, #24
   ba086:	4798      	blx	r3
            return;
   ba088:	4628      	mov	r0, r5
   ba08a:	f7fc f910 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
    }
   ba08e:	b01d      	add	sp, #116	; 0x74
   ba090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   ba094:	f04f 0801 	mov.w	r8, #1
   ba098:	e7b6      	b.n	ba008 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   ba09a:	f04f 0800 	mov.w	r8, #0
   ba09e:	e7b3      	b.n	ba008 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   ba0a0:	2600      	movs	r6, #0
   ba0a2:	e7dd      	b.n	ba060 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   ba0a4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   ba0a8:	f1b8 0f00 	cmp.w	r8, #0
   ba0ac:	d007      	beq.n	ba0be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   ba0ae:	6963      	ldr	r3, [r4, #20]
   ba0b0:	3301      	adds	r3, #1
   ba0b2:	6163      	str	r3, [r4, #20]
   ba0b4:	4629      	mov	r1, r5
   ba0b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba0b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba0bc:	e7e3      	b.n	ba086 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   ba0be:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   ba0c2:	f1bc 0f00 	cmp.w	ip, #0
   ba0c6:	d025      	beq.n	ba114 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   ba0c8:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   ba0ca:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   ba0cc:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   ba0ce:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   ba0d0:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   ba0d2:	d8d9      	bhi.n	ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   ba0d4:	2224      	movs	r2, #36	; 0x24
   ba0d6:	4353      	muls	r3, r2
    address_ = addr.address_;
   ba0d8:	462a      	mov	r2, r5
   ba0da:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   ba0dc:	3b24      	subs	r3, #36	; 0x24
   ba0de:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   ba0e2:	f84c 0003 	str.w	r0, [ip, r3]
   ba0e6:	6071      	str	r1, [r6, #4]
class BleScanResult {
   ba0e8:	f106 0008 	add.w	r0, r6, #8
   ba0ec:	a903      	add	r1, sp, #12
   ba0ee:	f7fe fe42 	bl	b8d76 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   ba0f2:	a906      	add	r1, sp, #24
   ba0f4:	f106 0014 	add.w	r0, r6, #20
   ba0f8:	f7fe fe3d 	bl	b8d76 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   ba0fc:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   ba100:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   ba104:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   ba108:	429a      	cmp	r2, r3
   ba10a:	d3bd      	bcc.n	ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   ba10c:	4640      	mov	r0, r8
   ba10e:	f7fd f873 	bl	b71f8 <hal_ble_gap_stop_scan>
   ba112:	e7b9      	b.n	ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   ba114:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba118:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   ba11c:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   ba120:	a903      	add	r1, sp, #12
   ba122:	a80c      	add	r0, sp, #48	; 0x30
   ba124:	f7fc f8ec 	bl	b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   ba128:	a906      	add	r1, sp, #24
   ba12a:	a80f      	add	r0, sp, #60	; 0x3c
   ba12c:	f7fc f8e8 	bl	b6300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   ba130:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   ba134:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   ba138:	4641      	mov	r1, r8
   ba13a:	4638      	mov	r0, r7
   ba13c:	6866      	ldr	r6, [r4, #4]
   ba13e:	f7fc f924 	bl	b638a <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba142:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba146:	4299      	cmp	r1, r3
   ba148:	da10      	bge.n	ba16c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   ba14a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba14c:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   ba14e:	2224      	movs	r2, #36	; 0x24
   ba150:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   ba154:	f106 0024 	add.w	r0, r6, #36	; 0x24
   ba158:	fb02 3201 	mla	r2, r2, r1, r3
   ba15c:	4631      	mov	r1, r6
   ba15e:	f7fc f997 	bl	b6490 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba162:	b986      	cbnz	r6, ba186 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   ba164:	6863      	ldr	r3, [r4, #4]
   ba166:	3301      	adds	r3, #1
   ba168:	6063      	str	r3, [r4, #4]
    return true;
   ba16a:	e005      	b.n	ba178 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba16c:	3101      	adds	r1, #1
   ba16e:	4620      	mov	r0, r4
   ba170:	f7ff fec0 	bl	b9ef4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba174:	2800      	cmp	r0, #0
   ba176:	d1e8      	bne.n	ba14a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   ba178:	4638      	mov	r0, r7
   ba17a:	f7fc f898 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   ba17e:	4640      	mov	r0, r8
   ba180:	f7fc f895 	bl	b62ae <_ZN8particle13BleScanResultD1Ev>
   ba184:	e780      	b.n	ba088 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   ba186:	4639      	mov	r1, r7
   ba188:	4630      	mov	r0, r6
   ba18a:	f7fc f8fe 	bl	b638a <_ZN8particle13BleScanResultC1EOS0_>
   ba18e:	e7e9      	b.n	ba164 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000ba190 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   ba190:	4802      	ldr	r0, [pc, #8]	; (ba19c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba192:	2300      	movs	r3, #0
   ba194:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   ba196:	f7fd b8d3 	b.w	b7340 <os_mutex_recursive_create>
   ba19a:	bf00      	nop
   ba19c:	2003e6bc 	.word	0x2003e6bc

000ba1a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba1a2:	4606      	mov	r6, r0
   ba1a4:	460d      	mov	r5, r1
  size_t n = 0;
   ba1a6:	188f      	adds	r7, r1, r2
   ba1a8:	2400      	movs	r4, #0
  while (size--) {
   ba1aa:	42bd      	cmp	r5, r7
   ba1ac:	d00c      	beq.n	ba1c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba1ae:	6833      	ldr	r3, [r6, #0]
   ba1b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba1b4:	689b      	ldr	r3, [r3, #8]
   ba1b6:	4630      	mov	r0, r6
   ba1b8:	4798      	blx	r3
     if (chunk>=0)
   ba1ba:	1e03      	subs	r3, r0, #0
   ba1bc:	db01      	blt.n	ba1c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba1be:	441c      	add	r4, r3
  while (size--) {
   ba1c0:	e7f3      	b.n	ba1aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba1c2:	2c00      	cmp	r4, #0
   ba1c4:	bf08      	it	eq
   ba1c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba1c8:	4620      	mov	r0, r4
   ba1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba1cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   ba1cc:	b513      	push	{r0, r1, r4, lr}
   ba1ce:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   ba1d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba1d2:	b159      	cbz	r1, ba1ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba1d4:	9101      	str	r1, [sp, #4]
   ba1d6:	f001 fe68 	bl	bbeaa <strlen>
   ba1da:	6823      	ldr	r3, [r4, #0]
   ba1dc:	9901      	ldr	r1, [sp, #4]
   ba1de:	68db      	ldr	r3, [r3, #12]
   ba1e0:	4602      	mov	r2, r0
   ba1e2:	4620      	mov	r0, r4
    }
   ba1e4:	b002      	add	sp, #8
   ba1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba1ea:	4718      	bx	r3
    }
   ba1ec:	b002      	add	sp, #8
   ba1ee:	bd10      	pop	{r4, pc}

000ba1f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   ba1f0:	6803      	ldr	r3, [r0, #0]
   ba1f2:	689b      	ldr	r3, [r3, #8]
   ba1f4:	4718      	bx	r3

000ba1f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba1f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba1f8:	210d      	movs	r1, #13
{
   ba1fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba1fc:	f7ff fff8 	bl	ba1f0 <_ZN5Print5printEc>
  n += print('\n');
   ba200:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba202:	4604      	mov	r4, r0
  n += print('\n');
   ba204:	4628      	mov	r0, r5
   ba206:	f7ff fff3 	bl	ba1f0 <_ZN5Print5printEc>
  return n;
}
   ba20a:	4420      	add	r0, r4
   ba20c:	bd38      	pop	{r3, r4, r5, pc}

000ba20e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba20e:	b538      	push	{r3, r4, r5, lr}
   ba210:	4605      	mov	r5, r0
  return write(str);
   ba212:	f7ff ffdb 	bl	ba1cc <_ZN5Print5writeEPKc>
   ba216:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba218:	4628      	mov	r0, r5
   ba21a:	f7ff ffec 	bl	ba1f6 <_ZN5Print7printlnEv>
  return n;
}
   ba21e:	4420      	add	r0, r4
   ba220:	bd38      	pop	{r3, r4, r5, pc}

000ba222 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba222:	b530      	push	{r4, r5, lr}
   ba224:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba226:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba228:	2a01      	cmp	r2, #1
  *str = '\0';
   ba22a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba22e:	bf98      	it	ls
   ba230:	220a      	movls	r2, #10
   ba232:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba234:	460d      	mov	r5, r1
   ba236:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba23a:	fb01 5312 	mls	r3, r1, r2, r5
   ba23e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba242:	2b09      	cmp	r3, #9
   ba244:	bf94      	ite	ls
   ba246:	3330      	addls	r3, #48	; 0x30
   ba248:	3337      	addhi	r3, #55	; 0x37
   ba24a:	b2db      	uxtb	r3, r3
  } while(n);
   ba24c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba24e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba252:	d9ef      	bls.n	ba234 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba254:	4621      	mov	r1, r4
   ba256:	f7ff ffb9 	bl	ba1cc <_ZN5Print5writeEPKc>
}
   ba25a:	b00b      	add	sp, #44	; 0x2c
   ba25c:	bd30      	pop	{r4, r5, pc}

000ba25e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba262:	b086      	sub	sp, #24
   ba264:	af00      	add	r7, sp, #0
   ba266:	4605      	mov	r5, r0
   ba268:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba26a:	1d38      	adds	r0, r7, #4
   ba26c:	2114      	movs	r1, #20
{
   ba26e:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba270:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba272:	f7fd fa81 	bl	b7778 <vsnprintf>

    if (n<bufsize)
   ba276:	2813      	cmp	r0, #19
   ba278:	d80e      	bhi.n	ba298 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba27a:	1d39      	adds	r1, r7, #4
   ba27c:	4628      	mov	r0, r5
   ba27e:	f7ff ffa5 	bl	ba1cc <_ZN5Print5writeEPKc>
   ba282:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba284:	b11e      	cbz	r6, ba28e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba286:	4628      	mov	r0, r5
   ba288:	f7ff ffb5 	bl	ba1f6 <_ZN5Print7printlnEv>
   ba28c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba28e:	4620      	mov	r0, r4
   ba290:	3718      	adds	r7, #24
   ba292:	46bd      	mov	sp, r7
   ba294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba298:	f100 0308 	add.w	r3, r0, #8
   ba29c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba2a0:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba2a2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba2a6:	4622      	mov	r2, r4
   ba2a8:	1c41      	adds	r1, r0, #1
   ba2aa:	683b      	ldr	r3, [r7, #0]
   ba2ac:	4668      	mov	r0, sp
   ba2ae:	f7fd fa63 	bl	b7778 <vsnprintf>
  return write(str);
   ba2b2:	4669      	mov	r1, sp
   ba2b4:	4628      	mov	r0, r5
   ba2b6:	f7ff ff89 	bl	ba1cc <_ZN5Print5writeEPKc>
   ba2ba:	4604      	mov	r4, r0
   ba2bc:	46c5      	mov	sp, r8
   ba2be:	e7e1      	b.n	ba284 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba2c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba2c0:	4b01      	ldr	r3, [pc, #4]	; (ba2c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba2c2:	4a02      	ldr	r2, [pc, #8]	; (ba2cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba2c4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba2c6:	4770      	bx	lr
   ba2c8:	2003e6c4 	.word	0x2003e6c4
   ba2cc:	000bc6da 	.word	0x000bc6da

000ba2d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   ba2d0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba2d2:	2000      	movs	r0, #0
   ba2d4:	f7fd fa18 	bl	b7708 <spark_sync_time_pending>
   ba2d8:	b128      	cbz	r0, ba2e6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba2da:	f7fd f9fd 	bl	b76d8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba2de:	f080 0001 	eor.w	r0, r0, #1
   ba2e2:	b2c0      	uxtb	r0, r0
    }
   ba2e4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba2e6:	2001      	movs	r0, #1
   ba2e8:	e7fc      	b.n	ba2e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000ba2ec <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   ba2ec:	b530      	push	{r4, r5, lr}
   ba2ee:	b093      	sub	sp, #76	; 0x4c
   ba2f0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   ba2f4:	4b19      	ldr	r3, [pc, #100]	; (ba35c <_ZN9TimeClass7timeStrEx+0x70>)
{
   ba2f6:	4604      	mov	r4, r0
    t += time_zone_cache;
   ba2f8:	e9d3 1000 	ldrd	r1, r0, [r3]
   ba2fc:	9b01      	ldr	r3, [sp, #4]
   ba2fe:	1852      	adds	r2, r2, r1
   ba300:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   ba304:	4816      	ldr	r0, [pc, #88]	; (ba360 <_ZN9TimeClass7timeStrEx+0x74>)
   ba306:	e9d0 1000 	ldrd	r1, r0, [r0]
   ba30a:	1852      	adds	r2, r2, r1
   ba30c:	eb43 0300 	adc.w	r3, r3, r0
   ba310:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   ba314:	2224      	movs	r2, #36	; 0x24
   ba316:	eb0d 0002 	add.w	r0, sp, r2
   ba31a:	2100      	movs	r1, #0
   ba31c:	f001 fd60 	bl	bbde0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   ba320:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   ba322:	a909      	add	r1, sp, #36	; 0x24
   ba324:	4668      	mov	r0, sp
   ba326:	f7fd fa4f 	bl	b77c8 <localtime_r>
    char ascstr[26] = {};
   ba32a:	2216      	movs	r2, #22
   ba32c:	4629      	mov	r1, r5
   ba32e:	a803      	add	r0, sp, #12
   ba330:	9502      	str	r5, [sp, #8]
   ba332:	f001 fd55 	bl	bbde0 <memset>
    asctime_r(&calendar_time, ascstr);
   ba336:	a902      	add	r1, sp, #8
   ba338:	a809      	add	r0, sp, #36	; 0x24
   ba33a:	f001 fce5 	bl	bbd08 <asctime_r>
    int len = strlen(ascstr);
   ba33e:	a802      	add	r0, sp, #8
   ba340:	f001 fdb3 	bl	bbeaa <strlen>
    ascstr[len-1] = 0; // remove final newline
   ba344:	ab12      	add	r3, sp, #72	; 0x48
   ba346:	4418      	add	r0, r3
    return String(ascstr);
   ba348:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   ba34a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   ba34e:	4620      	mov	r0, r4
   ba350:	f7fd fb33 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba354:	4620      	mov	r0, r4
   ba356:	b013      	add	sp, #76	; 0x4c
   ba358:	bd30      	pop	{r4, r5, pc}
   ba35a:	bf00      	nop
   ba35c:	2003e6d8 	.word	0x2003e6d8
   ba360:	2003e6d0 	.word	0x2003e6d0

000ba364 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   ba364:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ba366:	2000      	movs	r0, #0
   ba368:	f7fc ff0e 	bl	b7188 <hal_rtc_time_is_valid>
    if (rtcstate)
   ba36c:	4604      	mov	r4, r0
   ba36e:	b9a0      	cbnz	r0, ba39a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ba370:	f7fd f8ee 	bl	b7550 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ba374:	2801      	cmp	r0, #1
   ba376:	d110      	bne.n	ba39a <_ZN9TimeClass7isValidEv+0x36>
   ba378:	4620      	mov	r0, r4
   ba37a:	f7fd f911 	bl	b75a0 <system_thread_get_state>
   ba37e:	b960      	cbnz	r0, ba39a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ba380:	f7ff ffa6 	bl	ba2d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ba384:	b910      	cbnz	r0, ba38c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ba386:	f7fd f997 	bl	b76b8 <spark_process>
        while (_while() && !_condition()) {
   ba38a:	e7f9      	b.n	ba380 <_ZN9TimeClass7isValidEv+0x1c>
   ba38c:	f7ff ffa0 	bl	ba2d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ba390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ba394:	2000      	movs	r0, #0
   ba396:	f7fc bef7 	b.w	b7188 <hal_rtc_time_is_valid>
}
   ba39a:	4620      	mov	r0, r4
   ba39c:	bd10      	pop	{r4, pc}

000ba39e <_ZN9TimeClass3nowEv>:
{
   ba39e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   ba3a0:	f7ff ffe0 	bl	ba364 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   ba3a4:	2210      	movs	r2, #16
   ba3a6:	2100      	movs	r1, #0
   ba3a8:	4668      	mov	r0, sp
   ba3aa:	f001 fd19 	bl	bbde0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   ba3ae:	2100      	movs	r1, #0
   ba3b0:	4668      	mov	r0, sp
   ba3b2:	f7fc fef9 	bl	b71a8 <hal_rtc_get_time>
}
   ba3b6:	9800      	ldr	r0, [sp, #0]
   ba3b8:	b005      	add	sp, #20
   ba3ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba3c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba3c0:	4b02      	ldr	r3, [pc, #8]	; (ba3cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba3c2:	681a      	ldr	r2, [r3, #0]
   ba3c4:	4b02      	ldr	r3, [pc, #8]	; (ba3d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba3c6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba3c8:	4770      	bx	lr
   ba3ca:	bf00      	nop
   ba3cc:	2003e5a8 	.word	0x2003e5a8
   ba3d0:	2003e6c8 	.word	0x2003e6c8

000ba3d4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba3d4:	4b01      	ldr	r3, [pc, #4]	; (ba3dc <_GLOBAL__sub_I_RGB+0x8>)
   ba3d6:	2200      	movs	r2, #0
   ba3d8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba3da:	4770      	bx	lr
   ba3dc:	2003e6e0 	.word	0x2003e6e0

000ba3e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba3e0:	4b01      	ldr	r3, [pc, #4]	; (ba3e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba3e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba3e4:	4770      	bx	lr
   ba3e6:	bf00      	nop
   ba3e8:	2003e5ac 	.word	0x2003e5ac

000ba3ec <serialEventRun>:
{
   ba3ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba3ee:	4b0b      	ldr	r3, [pc, #44]	; (ba41c <serialEventRun+0x30>)
   ba3f0:	b143      	cbz	r3, ba404 <serialEventRun+0x18>
   ba3f2:	f000 fac7 	bl	ba984 <_Z16_fetch_usbserialv>
   ba3f6:	6803      	ldr	r3, [r0, #0]
   ba3f8:	691b      	ldr	r3, [r3, #16]
   ba3fa:	4798      	blx	r3
   ba3fc:	2800      	cmp	r0, #0
   ba3fe:	dd01      	ble.n	ba404 <serialEventRun+0x18>
        serialEvent();
   ba400:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba404:	4b06      	ldr	r3, [pc, #24]	; (ba420 <serialEventRun+0x34>)
   ba406:	b143      	cbz	r3, ba41a <serialEventRun+0x2e>
   ba408:	f000 fe2e 	bl	bb068 <_Z22__fetch_global_Serial1v>
   ba40c:	6803      	ldr	r3, [r0, #0]
   ba40e:	691b      	ldr	r3, [r3, #16]
   ba410:	4798      	blx	r3
   ba412:	2800      	cmp	r0, #0
   ba414:	dd01      	ble.n	ba41a <serialEventRun+0x2e>
        serialEvent1();
   ba416:	f3af 8000 	nop.w
}
   ba41a:	bd08      	pop	{r3, pc}
	...

000ba424 <_post_loop>:
{
   ba424:	b508      	push	{r3, lr}
	serialEventRun();
   ba426:	f7ff ffe1 	bl	ba3ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba42a:	f7fc fea5 	bl	b7178 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba42e:	4b01      	ldr	r3, [pc, #4]	; (ba434 <_post_loop+0x10>)
   ba430:	6018      	str	r0, [r3, #0]
}
   ba432:	bd08      	pop	{r3, pc}
   ba434:	2003e744 	.word	0x2003e744

000ba438 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba438:	4805      	ldr	r0, [pc, #20]	; (ba450 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba43a:	4a06      	ldr	r2, [pc, #24]	; (ba454 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba43c:	4906      	ldr	r1, [pc, #24]	; (ba458 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba43e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba440:	1a12      	subs	r2, r2, r0
   ba442:	f001 fca5 	bl	bbd90 <memcpy>
    __backup_sram_signature = signature;
   ba446:	4b05      	ldr	r3, [pc, #20]	; (ba45c <_Z33system_initialize_user_backup_ramv+0x24>)
   ba448:	4a05      	ldr	r2, [pc, #20]	; (ba460 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba44a:	601a      	str	r2, [r3, #0]
}
   ba44c:	bd08      	pop	{r3, pc}
   ba44e:	bf00      	nop
   ba450:	2003f400 	.word	0x2003f400
   ba454:	2003f404 	.word	0x2003f404
   ba458:	000bcb6c 	.word	0x000bcb6c
   ba45c:	2003f400 	.word	0x2003f400
   ba460:	9a271c1e 	.word	0x9a271c1e

000ba464 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba464:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba466:	2300      	movs	r3, #0
   ba468:	9300      	str	r3, [sp, #0]
   ba46a:	461a      	mov	r2, r3
   ba46c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba470:	f7fd f8a8 	bl	b75c4 <system_ctrl_set_result>
}
   ba474:	b003      	add	sp, #12
   ba476:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba47c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba47c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba47e:	8843      	ldrh	r3, [r0, #2]
   ba480:	2b0a      	cmp	r3, #10
   ba482:	d008      	beq.n	ba496 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba484:	2b50      	cmp	r3, #80	; 0x50
   ba486:	d10b      	bne.n	ba4a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba488:	4b09      	ldr	r3, [pc, #36]	; (ba4b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba48a:	681b      	ldr	r3, [r3, #0]
   ba48c:	b14b      	cbz	r3, ba4a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba48e:	b003      	add	sp, #12
   ba490:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba494:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba496:	f7ff ffe5 	bl	ba464 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba49a:	b003      	add	sp, #12
   ba49c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba4a0:	2300      	movs	r3, #0
   ba4a2:	9300      	str	r3, [sp, #0]
   ba4a4:	461a      	mov	r2, r3
   ba4a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba4aa:	f7fd f88b 	bl	b75c4 <system_ctrl_set_result>
}
   ba4ae:	e7f4      	b.n	ba49a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba4b0:	2003e6f4 	.word	0x2003e6f4

000ba4b4 <module_user_init_hook>:
{
   ba4b4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba4b6:	4812      	ldr	r0, [pc, #72]	; (ba500 <module_user_init_hook+0x4c>)
   ba4b8:	2100      	movs	r1, #0
   ba4ba:	f7fd f97d 	bl	b77b8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba4be:	4b11      	ldr	r3, [pc, #68]	; (ba504 <module_user_init_hook+0x50>)
   ba4c0:	681a      	ldr	r2, [r3, #0]
   ba4c2:	4b11      	ldr	r3, [pc, #68]	; (ba508 <module_user_init_hook+0x54>)
   ba4c4:	429a      	cmp	r2, r3
   ba4c6:	4b11      	ldr	r3, [pc, #68]	; (ba50c <module_user_init_hook+0x58>)
   ba4c8:	bf0c      	ite	eq
   ba4ca:	2201      	moveq	r2, #1
   ba4cc:	2200      	movne	r2, #0
   ba4ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba4d0:	d001      	beq.n	ba4d6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba4d2:	f7ff ffb1 	bl	ba438 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba4d6:	f7fc fe37 	bl	b7148 <HAL_RNG_GetRandomNumber>
   ba4da:	4604      	mov	r4, r0
    srand(seed);
   ba4dc:	f001 fc88 	bl	bbdf0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba4e0:	4b0b      	ldr	r3, [pc, #44]	; (ba510 <module_user_init_hook+0x5c>)
   ba4e2:	b113      	cbz	r3, ba4ea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba4e4:	4620      	mov	r0, r4
   ba4e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba4ea:	2100      	movs	r1, #0
   ba4ec:	4808      	ldr	r0, [pc, #32]	; (ba510 <module_user_init_hook+0x5c>)
   ba4ee:	f7fd f913 	bl	b7718 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba4f6:	4807      	ldr	r0, [pc, #28]	; (ba514 <module_user_init_hook+0x60>)
   ba4f8:	2100      	movs	r1, #0
   ba4fa:	f7fd b859 	b.w	b75b0 <system_ctrl_set_app_request_handler>
   ba4fe:	bf00      	nop
   ba500:	000ba3e1 	.word	0x000ba3e1
   ba504:	2003f400 	.word	0x2003f400
   ba508:	9a271c1e 	.word	0x9a271c1e
   ba50c:	2003e6f0 	.word	0x2003e6f0
   ba510:	00000000 	.word	0x00000000
   ba514:	000ba47d 	.word	0x000ba47d

000ba518 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   ba518:	b530      	push	{r4, r5, lr}
        type_(type) {
   ba51a:	2200      	movs	r2, #0
   ba51c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   ba520:	6002      	str	r2, [r0, #0]
   ba522:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba524:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   ba526:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba528:	680c      	ldr	r4, [r1, #0]
   ba52a:	8085      	strh	r5, [r0, #4]
   ba52c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba52e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   ba530:	bd30      	pop	{r4, r5, pc}

000ba532 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   ba532:	b510      	push	{r4, lr}
   ba534:	b088      	sub	sp, #32
   ba536:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   ba538:	4668      	mov	r0, sp
   ba53a:	f7fd fa3e 	bl	b79ba <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   ba53e:	4669      	mov	r1, sp
   ba540:	a804      	add	r0, sp, #16
   ba542:	f7fd fa85 	bl	b7a50 <_ZN6StringC1ERKS_>
   ba546:	a804      	add	r0, sp, #16
   ba548:	47a0      	blx	r4
   ba54a:	4604      	mov	r4, r0
   ba54c:	a804      	add	r0, sp, #16
   ba54e:	f7fd f9e9 	bl	b7924 <_ZN6StringD1Ev>
    String p(param);
   ba552:	4668      	mov	r0, sp
   ba554:	f7fd f9e6 	bl	b7924 <_ZN6StringD1Ev>
}
   ba558:	4620      	mov	r0, r4
   ba55a:	b008      	add	sp, #32
   ba55c:	bd10      	pop	{r4, pc}

000ba55e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   ba55e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   ba560:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   ba562:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   ba566:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   ba568:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   ba56a:	461a      	mov	r2, r3
   ba56c:	4669      	mov	r1, sp
   ba56e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   ba570:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   ba574:	f8ad 4000 	strh.w	r4, [sp]
   ba578:	f7fd f896 	bl	b76a8 <spark_function>
}
   ba57c:	b004      	add	sp, #16
   ba57e:	bd10      	pop	{r4, pc}

000ba580 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba580:	680b      	ldr	r3, [r1, #0]
   ba582:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba584:	684b      	ldr	r3, [r1, #4]
   ba586:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba588:	b113      	cbz	r3, ba590 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   ba58a:	685a      	ldr	r2, [r3, #4]
   ba58c:	3201      	adds	r2, #1
   ba58e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba590:	4770      	bx	lr
	...

000ba594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   ba594:	b538      	push	{r3, r4, r5, lr}
   ba596:	2300      	movs	r3, #0
   ba598:	4604      	mov	r4, r0
   ba59a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba59c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   ba59e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba5a0:	f7f9 fd77 	bl	b4092 <_Znwj>
   ba5a4:	b128      	cbz	r0, ba5b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   ba5a6:	2301      	movs	r3, #1
   ba5a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   ba5ac:	4b02      	ldr	r3, [pc, #8]	; (ba5b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   ba5ae:	6003      	str	r3, [r0, #0]
   ba5b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba5b2:	6020      	str	r0, [r4, #0]
	}
   ba5b4:	4620      	mov	r0, r4
   ba5b6:	bd38      	pop	{r3, r4, r5, pc}
   ba5b8:	000bc258 	.word	0x000bc258

000ba5bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   ba5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba5c0:	b08b      	sub	sp, #44	; 0x2c
   ba5c2:	4605      	mov	r5, r0
   ba5c4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   ba5c8:	460f      	mov	r7, r1
   ba5ca:	4690      	mov	r8, r2
   ba5cc:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba5ce:	f7fd f883 	bl	b76d8 <spark_cloud_flag_connected>
   ba5d2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   ba5d4:	4683      	mov	fp, r0
   ba5d6:	bb38      	cbnz	r0, ba628 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   ba5d8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   ba5dc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba5de:	a905      	add	r1, sp, #20
   ba5e0:	4630      	mov	r0, r6
   ba5e2:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba5e6:	f7ff ff97 	bl	ba518 <_ZN8particle5ErrorC1EOS0_>
   ba5ea:	2014      	movs	r0, #20
   ba5ec:	f7f9 fd51 	bl	b4092 <_Znwj>
   ba5f0:	4604      	mov	r4, r0
   ba5f2:	b148      	cbz	r0, ba608 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   ba5f4:	2302      	movs	r3, #2
   ba5f6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba5f8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba5fa:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba5fe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   ba600:	4631      	mov	r1, r6
   ba602:	300c      	adds	r0, #12
   ba604:	f7ff ff88 	bl	ba518 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba608:	4628      	mov	r0, r5
	: __shared_count(__p)
   ba60a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba60c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   ba610:	f7ff ffc0 	bl	ba594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba614:	4630      	mov	r0, r6
   ba616:	f7fa fc72 	bl	b4efe <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   ba61a:	a805      	add	r0, sp, #20
   ba61c:	f7fa fc6f 	bl	b4efe <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   ba620:	4628      	mov	r0, r5
   ba622:	b00b      	add	sp, #44	; 0x2c
   ba624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   ba628:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   ba62a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   ba62c:	2014      	movs	r0, #20
   ba62e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   ba632:	9307      	str	r3, [sp, #28]
   ba634:	f7f9 fd2d 	bl	b4092 <_Znwj>
   ba638:	4601      	mov	r1, r0
   ba63a:	b118      	cbz	r0, ba644 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba640:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba642:	7044      	strb	r4, [r0, #1]
   ba644:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba646:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   ba648:	f7ff ffa4 	bl	ba594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   ba64c:	4b1e      	ldr	r3, [pc, #120]	; (ba6c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   ba64e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   ba650:	2008      	movs	r0, #8
   ba652:	f7f9 fd1e 	bl	b4092 <_Znwj>
   ba656:	4604      	mov	r4, r0
   ba658:	b110      	cbz	r0, ba660 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   ba65a:	a903      	add	r1, sp, #12
   ba65c:	f7ff ff90 	bl	ba580 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba660:	9600      	str	r6, [sp, #0]
   ba662:	fa5f f38a 	uxtb.w	r3, sl
   ba666:	464a      	mov	r2, r9
   ba668:	4641      	mov	r1, r8
   ba66a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   ba66c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba66e:	f7fd f843 	bl	b76f8 <spark_send_event>
   ba672:	b9b8      	cbnz	r0, ba6a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   ba674:	9b03      	ldr	r3, [sp, #12]
   ba676:	785b      	ldrb	r3, [r3, #1]
   ba678:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   ba67c:	b993      	cbnz	r3, ba6a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   ba67e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   ba682:	a905      	add	r1, sp, #20
   ba684:	a803      	add	r0, sp, #12
   ba686:	9205      	str	r2, [sp, #20]
   ba688:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba68c:	f7fb f922 	bl	b58d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba690:	a805      	add	r0, sp, #20
   ba692:	f7fa fc34 	bl	b4efe <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   ba696:	a805      	add	r0, sp, #20
   ba698:	9909      	ldr	r1, [sp, #36]	; 0x24
   ba69a:	f7fa fd87 	bl	b51ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   ba69e:	a806      	add	r0, sp, #24
   ba6a0:	f7fa fd38 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba6a4:	a903      	add	r1, sp, #12
   ba6a6:	a805      	add	r0, sp, #20
   ba6a8:	f7ff ff6a 	bl	ba580 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba6ac:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba6ae:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba6b0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   ba6b2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   ba6b4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba6b6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   ba6b8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   ba6ba:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   ba6bc:	f7fa fd2a 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba6c0:	a804      	add	r0, sp, #16
   ba6c2:	f7fa fd27 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   ba6c6:	e7ab      	b.n	ba620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   ba6c8:	000ba6cd 	.word	0x000ba6cd

000ba6cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   ba6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba6ce:	b089      	sub	sp, #36	; 0x24
   ba6d0:	4604      	mov	r4, r0
   ba6d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   ba6d4:	a801      	add	r0, sp, #4
   ba6d6:	4611      	mov	r1, r2
   ba6d8:	f7fa fd68 	bl	b51ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   ba6dc:	b1a4      	cbz	r4, ba708 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   ba6de:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba6e0:	b11d      	cbz	r5, ba6ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   ba6e2:	4628      	mov	r0, r5
   ba6e4:	f001 fbc4 	bl	bbe70 <strdup>
   ba6e8:	4605      	mov	r5, r0
   ba6ea:	a801      	add	r0, sp, #4
   ba6ec:	a903      	add	r1, sp, #12
        type_(type) {
   ba6ee:	9503      	str	r5, [sp, #12]
   ba6f0:	f8ad 4010 	strh.w	r4, [sp, #16]
   ba6f4:	f7fb f8ee 	bl	b58d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba6f8:	a803      	add	r0, sp, #12
   ba6fa:	f7fa fc00 	bl	b4efe <_ZN8particle5ErrorD1Ev>
   ba6fe:	a802      	add	r0, sp, #8
   ba700:	f7fa fd08 	bl	b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba704:	b009      	add	sp, #36	; 0x24
   ba706:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   ba708:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba70a:	2301      	movs	r3, #1
   ba70c:	e8d5 2f4f 	ldrexb	r2, [r5]
   ba710:	2a00      	cmp	r2, #0
   ba712:	d103      	bne.n	ba71c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   ba714:	e8c5 3f41 	strexb	r1, r3, [r5]
   ba718:	2900      	cmp	r1, #0
   ba71a:	d1f7      	bne.n	ba70c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   ba71c:	d1ef      	bne.n	ba6fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   ba71e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba720:	f3bf 8f5b 	dmb	ish
   ba724:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba726:	1d2b      	adds	r3, r5, #4
   ba728:	f3bf 8f5b 	dmb	ish
   ba72c:	e853 6f00 	ldrex	r6, [r3]
   ba730:	e843 4200 	strex	r2, r4, [r3]
   ba734:	2a00      	cmp	r2, #0
   ba736:	d1f9      	bne.n	ba72c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba738:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba73c:	2e00      	cmp	r6, #0
   ba73e:	d0de      	beq.n	ba6fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba740:	4620      	mov	r0, r4
   ba742:	f7fc ff1d 	bl	b7580 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba746:	4607      	mov	r7, r0
   ba748:	b160      	cbz	r0, ba764 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba74a:	f105 010c 	add.w	r1, r5, #12
   ba74e:	4630      	mov	r0, r6
   ba750:	f7fb f8a0 	bl	b5894 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba754:	4630      	mov	r0, r6
   ba756:	f7fa fbab 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba75a:	2110      	movs	r1, #16
   ba75c:	4630      	mov	r0, r6
   ba75e:	f7f9 fc9c 	bl	b409a <_ZdlPvj>
   ba762:	e7cc      	b.n	ba6fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba764:	4631      	mov	r1, r6
   ba766:	a803      	add	r0, sp, #12
   ba768:	f7fb f96e 	bl	b5a48 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba76c:	7b2b      	ldrb	r3, [r5, #12]
   ba76e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba772:	2010      	movs	r0, #16
   ba774:	f7f9 fc8d 	bl	b4092 <_Znwj>
   ba778:	4605      	mov	r5, r0
   ba77a:	b1d0      	cbz	r0, ba7b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba77c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba77e:	2014      	movs	r0, #20
   ba780:	f7f9 fc87 	bl	b4092 <_Znwj>
   ba784:	4604      	mov	r4, r0
   ba786:	b178      	cbz	r0, ba7a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba788:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba78a:	4601      	mov	r1, r0
   ba78c:	a803      	add	r0, sp, #12
   ba78e:	f7fa ff94 	bl	b56ba <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba792:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba794:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba796:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba798:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba79a:	9205      	str	r2, [sp, #20]
   ba79c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba79e:	60e3      	str	r3, [r4, #12]
   ba7a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba7a4:	9206      	str	r2, [sp, #24]
   ba7a6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba7a8:	4b06      	ldr	r3, [pc, #24]	; (ba7c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba7aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba7ac:	4b06      	ldr	r3, [pc, #24]	; (ba7c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba7ae:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba7b0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba7b2:	a803      	add	r0, sp, #12
   ba7b4:	f7fa fb7c 	bl	b4eb0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba7b8:	2200      	movs	r2, #0
   ba7ba:	4629      	mov	r1, r5
   ba7bc:	4803      	ldr	r0, [pc, #12]	; (ba7cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba7be:	f7fc fee7 	bl	b7590 <application_thread_invoke>
   ba7c2:	e7c7      	b.n	ba754 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba7c4:	000b58a7 	.word	0x000b58a7
   ba7c8:	000b5a67 	.word	0x000b5a67
   ba7cc:	000baa75 	.word	0x000baa75

000ba7d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba7d0:	4770      	bx	lr

000ba7d2 <_ZN9IPAddressD0Ev>:
   ba7d2:	b510      	push	{r4, lr}
   ba7d4:	2118      	movs	r1, #24
   ba7d6:	4604      	mov	r4, r0
   ba7d8:	f7f9 fc5f 	bl	b409a <_ZdlPvj>
   ba7dc:	4620      	mov	r0, r4
   ba7de:	bd10      	pop	{r4, pc}

000ba7e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba7e2:	7d03      	ldrb	r3, [r0, #20]
   ba7e4:	2b06      	cmp	r3, #6
{
   ba7e6:	b08d      	sub	sp, #52	; 0x34
   ba7e8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba7ea:	f100 0704 	add.w	r7, r0, #4
   ba7ee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba7f2:	d012      	beq.n	ba81a <_ZNK9IPAddress7printToER5Print+0x3a>
   ba7f4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba7f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba7fc:	220a      	movs	r2, #10
   ba7fe:	4630      	mov	r0, r6
   ba800:	f7ff fd0f 	bl	ba222 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba804:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba806:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba808:	d019      	beq.n	ba83e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba80a:	2c00      	cmp	r4, #0
   ba80c:	d0f4      	beq.n	ba7f8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba80e:	212e      	movs	r1, #46	; 0x2e
   ba810:	4630      	mov	r0, r6
   ba812:	f7ff fced 	bl	ba1f0 <_ZN5Print5printEc>
   ba816:	4404      	add	r4, r0
   ba818:	e7ee      	b.n	ba7f8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba81a:	232f      	movs	r3, #47	; 0x2f
   ba81c:	466a      	mov	r2, sp
   ba81e:	4639      	mov	r1, r7
   ba820:	200a      	movs	r0, #10
		buf[0] = 0;
   ba822:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba826:	f7fc fdab 	bl	b7380 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba82a:	4668      	mov	r0, sp
   ba82c:	f001 fb3d 	bl	bbeaa <strlen>
   ba830:	6833      	ldr	r3, [r6, #0]
   ba832:	4602      	mov	r2, r0
   ba834:	68db      	ldr	r3, [r3, #12]
   ba836:	4669      	mov	r1, sp
   ba838:	4630      	mov	r0, r6
   ba83a:	4798      	blx	r3
   ba83c:	4604      	mov	r4, r0
    }
    return n;
}
   ba83e:	4620      	mov	r0, r4
   ba840:	b00d      	add	sp, #52	; 0x34
   ba842:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba844 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba844:	b510      	push	{r4, lr}
   ba846:	4b05      	ldr	r3, [pc, #20]	; (ba85c <_ZN9IPAddressC1Ev+0x18>)
   ba848:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba84a:	2211      	movs	r2, #17
   ba84c:	f840 3b04 	str.w	r3, [r0], #4
   ba850:	2100      	movs	r1, #0
   ba852:	f001 fac5 	bl	bbde0 <memset>
}
   ba856:	4620      	mov	r0, r4
   ba858:	bd10      	pop	{r4, pc}
   ba85a:	bf00      	nop
   ba85c:	000bc704 	.word	0x000bc704

000ba860 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba860:	4603      	mov	r3, r0
   ba862:	4a07      	ldr	r2, [pc, #28]	; (ba880 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba864:	b510      	push	{r4, lr}
   ba866:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba86a:	f101 0210 	add.w	r2, r1, #16
   ba86e:	f851 4b04 	ldr.w	r4, [r1], #4
   ba872:	f843 4b04 	str.w	r4, [r3], #4
   ba876:	4291      	cmp	r1, r2
   ba878:	d1f9      	bne.n	ba86e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba87a:	780a      	ldrb	r2, [r1, #0]
   ba87c:	701a      	strb	r2, [r3, #0]
}
   ba87e:	bd10      	pop	{r4, pc}
   ba880:	000bc704 	.word	0x000bc704

000ba884 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba884:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba886:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba88a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba88e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba892:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba896:	2304      	movs	r3, #4
   ba898:	6041      	str	r1, [r0, #4]
   ba89a:	7503      	strb	r3, [r0, #20]
}
   ba89c:	bd10      	pop	{r4, pc}
	...

000ba8a0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba8a0:	b507      	push	{r0, r1, r2, lr}
   ba8a2:	4b06      	ldr	r3, [pc, #24]	; (ba8bc <_ZN9IPAddressC1EPKh+0x1c>)
   ba8a4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba8a6:	78cb      	ldrb	r3, [r1, #3]
   ba8a8:	9300      	str	r3, [sp, #0]
   ba8aa:	788b      	ldrb	r3, [r1, #2]
   ba8ac:	784a      	ldrb	r2, [r1, #1]
   ba8ae:	7809      	ldrb	r1, [r1, #0]
   ba8b0:	f7ff ffe8 	bl	ba884 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba8b4:	b003      	add	sp, #12
   ba8b6:	f85d fb04 	ldr.w	pc, [sp], #4
   ba8ba:	bf00      	nop
   ba8bc:	000bc704 	.word	0x000bc704

000ba8c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba8c0:	7441      	strb	r1, [r0, #17]
}
   ba8c2:	4770      	bx	lr

000ba8c4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba8c4:	4770      	bx	lr

000ba8c6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba8c6:	4770      	bx	lr

000ba8c8 <_ZN9USBSerial4readEv>:
{
   ba8c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba8ca:	2100      	movs	r1, #0
   ba8cc:	7c00      	ldrb	r0, [r0, #16]
   ba8ce:	f7fc fe07 	bl	b74e0 <HAL_USB_USART_Receive_Data>
}
   ba8d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba8d6:	bd08      	pop	{r3, pc}

000ba8d8 <_ZN9USBSerial4peekEv>:
{
   ba8d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba8da:	2101      	movs	r1, #1
   ba8dc:	7c00      	ldrb	r0, [r0, #16]
   ba8de:	f7fc fdff 	bl	b74e0 <HAL_USB_USART_Receive_Data>
}
   ba8e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba8e6:	bd08      	pop	{r3, pc}

000ba8e8 <_ZN9USBSerial17availableForWriteEv>:
{
   ba8e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba8ea:	7c00      	ldrb	r0, [r0, #16]
   ba8ec:	f7fc fdf0 	bl	b74d0 <HAL_USB_USART_Available_Data_For_Write>
}
   ba8f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba8f4:	bd08      	pop	{r3, pc}

000ba8f6 <_ZN9USBSerial9availableEv>:
{
   ba8f6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba8f8:	7c00      	ldrb	r0, [r0, #16]
   ba8fa:	f7fc fde1 	bl	b74c0 <HAL_USB_USART_Available_Data>
}
   ba8fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba902:	bd08      	pop	{r3, pc}

000ba904 <_ZN9USBSerial5writeEh>:
{
   ba904:	b513      	push	{r0, r1, r4, lr}
   ba906:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba908:	7c00      	ldrb	r0, [r0, #16]
{
   ba90a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba90c:	f7fc fde0 	bl	b74d0 <HAL_USB_USART_Available_Data_For_Write>
   ba910:	2800      	cmp	r0, #0
   ba912:	9901      	ldr	r1, [sp, #4]
   ba914:	dc01      	bgt.n	ba91a <_ZN9USBSerial5writeEh+0x16>
   ba916:	7c60      	ldrb	r0, [r4, #17]
   ba918:	b120      	cbz	r0, ba924 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba91a:	7c20      	ldrb	r0, [r4, #16]
   ba91c:	f7fc fde8 	bl	b74f0 <HAL_USB_USART_Send_Data>
   ba920:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba924:	b002      	add	sp, #8
   ba926:	bd10      	pop	{r4, pc}

000ba928 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba928:	7c00      	ldrb	r0, [r0, #16]
   ba92a:	f7fc bde9 	b.w	b7500 <HAL_USB_USART_Flush_Data>

000ba92e <_ZN9USBSerialD0Ev>:
   ba92e:	b510      	push	{r4, lr}
   ba930:	2114      	movs	r1, #20
   ba932:	4604      	mov	r4, r0
   ba934:	f7f9 fbb1 	bl	b409a <_ZdlPvj>
   ba938:	4620      	mov	r0, r4
   ba93a:	bd10      	pop	{r4, pc}

000ba93c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba93c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba93e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba942:	4604      	mov	r4, r0
   ba944:	4608      	mov	r0, r1
   ba946:	2100      	movs	r1, #0
   ba948:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba94c:	4b04      	ldr	r3, [pc, #16]	; (ba960 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba94e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba950:	2301      	movs	r3, #1
  _serial = serial;
   ba952:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba954:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba956:	4611      	mov	r1, r2
   ba958:	f7fc fda2 	bl	b74a0 <HAL_USB_USART_Init>
}
   ba95c:	4620      	mov	r0, r4
   ba95e:	bd10      	pop	{r4, pc}
   ba960:	000bc718 	.word	0x000bc718

000ba964 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba964:	7c00      	ldrb	r0, [r0, #16]
   ba966:	2200      	movs	r2, #0
   ba968:	f7fc bda2 	b.w	b74b0 <HAL_USB_USART_Begin>

000ba96c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   ba96c:	7c00      	ldrb	r0, [r0, #16]
   ba96e:	f7fc bdcf 	b.w	b7510 <HAL_USB_USART_Is_Connected>

000ba972 <_Z19acquireSerialBufferv>:
{
   ba972:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba974:	2214      	movs	r2, #20
{
   ba976:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba978:	2100      	movs	r1, #0
   ba97a:	f001 fa31 	bl	bbde0 <memset>
}
   ba97e:	4620      	mov	r0, r4
   ba980:	bd10      	pop	{r4, pc}
	...

000ba984 <_Z16_fetch_usbserialv>:
{
   ba984:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba986:	4c0f      	ldr	r4, [pc, #60]	; (ba9c4 <_Z16_fetch_usbserialv+0x40>)
{
   ba988:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba98a:	a803      	add	r0, sp, #12
   ba98c:	f7ff fff1 	bl	ba972 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba990:	7821      	ldrb	r1, [r4, #0]
   ba992:	f3bf 8f5b 	dmb	ish
   ba996:	f011 0101 	ands.w	r1, r1, #1
   ba99a:	d10f      	bne.n	ba9bc <_Z16_fetch_usbserialv+0x38>
   ba99c:	4620      	mov	r0, r4
   ba99e:	9101      	str	r1, [sp, #4]
   ba9a0:	f7f9 fb7d 	bl	b409e <__cxa_guard_acquire>
   ba9a4:	9901      	ldr	r1, [sp, #4]
   ba9a6:	b148      	cbz	r0, ba9bc <_Z16_fetch_usbserialv+0x38>
   ba9a8:	aa03      	add	r2, sp, #12
   ba9aa:	4807      	ldr	r0, [pc, #28]	; (ba9c8 <_Z16_fetch_usbserialv+0x44>)
   ba9ac:	f7ff ffc6 	bl	ba93c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba9b0:	4620      	mov	r0, r4
   ba9b2:	f7f9 fb79 	bl	b40a8 <__cxa_guard_release>
   ba9b6:	4805      	ldr	r0, [pc, #20]	; (ba9cc <_Z16_fetch_usbserialv+0x48>)
   ba9b8:	f001 f9cc 	bl	bbd54 <atexit>
	return _usbserial;
}
   ba9bc:	4802      	ldr	r0, [pc, #8]	; (ba9c8 <_Z16_fetch_usbserialv+0x44>)
   ba9be:	b008      	add	sp, #32
   ba9c0:	bd10      	pop	{r4, pc}
   ba9c2:	bf00      	nop
   ba9c4:	2003e6f8 	.word	0x2003e6f8
   ba9c8:	2003e6fc 	.word	0x2003e6fc
   ba9cc:	000ba8c5 	.word	0x000ba8c5

000ba9d0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba9d0:	4770      	bx	lr

000ba9d2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba9d2:	7441      	strb	r1, [r0, #17]
}
   ba9d4:	4770      	bx	lr

000ba9d6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba9d6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba9d8:	7c00      	ldrb	r0, [r0, #16]
   ba9da:	f7fc fd09 	bl	b73f0 <hal_usart_available_data_for_write>
}
   ba9de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba9e2:	bd08      	pop	{r3, pc}

000ba9e4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba9e4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba9e6:	7c00      	ldrb	r0, [r0, #16]
   ba9e8:	f7fc fcda 	bl	b73a0 <hal_usart_available>
}
   ba9ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba9f0:	bd08      	pop	{r3, pc}

000ba9f2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba9f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba9f4:	7c00      	ldrb	r0, [r0, #16]
   ba9f6:	f7fc fce3 	bl	b73c0 <hal_usart_peek>
}
   ba9fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba9fe:	bd08      	pop	{r3, pc}

000baa00 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   baa00:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   baa02:	7c00      	ldrb	r0, [r0, #16]
   baa04:	f7fc fcd4 	bl	b73b0 <hal_usart_read>
}
   baa08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baa0c:	bd08      	pop	{r3, pc}

000baa0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   baa0e:	7c00      	ldrb	r0, [r0, #16]
   baa10:	f7fc bcde 	b.w	b73d0 <hal_usart_flush>

000baa14 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   baa14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baa16:	7c45      	ldrb	r5, [r0, #17]
{
   baa18:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baa1a:	b12d      	cbz	r5, baa28 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   baa1c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   baa1e:	b003      	add	sp, #12
   baa20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   baa24:	f7fc bcb4 	b.w	b7390 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baa28:	7c00      	ldrb	r0, [r0, #16]
   baa2a:	9101      	str	r1, [sp, #4]
   baa2c:	f7fc fce0 	bl	b73f0 <hal_usart_available_data_for_write>
   baa30:	2800      	cmp	r0, #0
   baa32:	9901      	ldr	r1, [sp, #4]
   baa34:	dcf2      	bgt.n	baa1c <_ZN11USARTSerial5writeEh+0x8>
}
   baa36:	4628      	mov	r0, r5
   baa38:	b003      	add	sp, #12
   baa3a:	bd30      	pop	{r4, r5, pc}

000baa3c <_ZN11USARTSerialD0Ev>:
   baa3c:	b510      	push	{r4, lr}
   baa3e:	2114      	movs	r1, #20
   baa40:	4604      	mov	r4, r0
   baa42:	f7f9 fb2a 	bl	b409a <_ZdlPvj>
   baa46:	4620      	mov	r0, r4
   baa48:	bd10      	pop	{r4, pc}
	...

000baa4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baa4c:	b510      	push	{r4, lr}
   baa4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baa52:	4604      	mov	r4, r0
   baa54:	4608      	mov	r0, r1
   baa56:	4611      	mov	r1, r2
   baa58:	2200      	movs	r2, #0
   baa5a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baa5e:	4b04      	ldr	r3, [pc, #16]	; (baa70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baa60:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baa62:	2301      	movs	r3, #1
  _serial = serial;
   baa64:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baa66:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baa68:	f7fc fcca 	bl	b7400 <hal_usart_init_ex>
}
   baa6c:	4620      	mov	r0, r4
   baa6e:	bd10      	pop	{r4, pc}
   baa70:	000bc748 	.word	0x000bc748

000baa74 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   baa74:	b510      	push	{r4, lr}
      if (_M_empty())
   baa76:	6883      	ldr	r3, [r0, #8]
   baa78:	4604      	mov	r4, r0
   baa7a:	b90b      	cbnz	r3, baa80 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   baa7c:	f000 fcf1 	bl	bb462 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baa80:	68c3      	ldr	r3, [r0, #12]
   baa82:	4798      	blx	r3
      if (_M_manager)
   baa84:	68a3      	ldr	r3, [r4, #8]
   baa86:	b11b      	cbz	r3, baa90 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   baa88:	2203      	movs	r2, #3
   baa8a:	4621      	mov	r1, r4
   baa8c:	4620      	mov	r0, r4
   baa8e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   baa90:	4620      	mov	r0, r4
   baa92:	2110      	movs	r1, #16
}
   baa94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   baa98:	f7f9 baff 	b.w	b409a <_ZdlPvj>

000baa9c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   baa9c:	4770      	bx	lr

000baa9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   baa9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baaa0:	4606      	mov	r6, r0
   baaa2:	4615      	mov	r5, r2
   baaa4:	460c      	mov	r4, r1
   baaa6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   baaa8:	42bc      	cmp	r4, r7
   baaaa:	d006      	beq.n	baaba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   baaac:	6833      	ldr	r3, [r6, #0]
   baaae:	f814 1b01 	ldrb.w	r1, [r4], #1
   baab2:	689b      	ldr	r3, [r3, #8]
   baab4:	4630      	mov	r0, r6
   baab6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   baab8:	e7f6      	b.n	baaa8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   baaba:	4628      	mov	r0, r5
   baabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baabe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   baabe:	7c00      	ldrb	r0, [r0, #16]
   baac0:	2200      	movs	r2, #0
   baac2:	f7fc bca5 	b.w	b7410 <hal_i2c_write>

000baac6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   baac6:	7c00      	ldrb	r0, [r0, #16]
   baac8:	2100      	movs	r1, #0
   baaca:	f7fc bca9 	b.w	b7420 <hal_i2c_available>

000baace <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   baace:	7c00      	ldrb	r0, [r0, #16]
   baad0:	2100      	movs	r1, #0
   baad2:	f7fc bcad 	b.w	b7430 <hal_i2c_read>

000baad6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   baad6:	7c00      	ldrb	r0, [r0, #16]
   baad8:	2100      	movs	r1, #0
   baada:	f7fc bcb1 	b.w	b7440 <hal_i2c_peek>

000baade <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   baade:	7c00      	ldrb	r0, [r0, #16]
   baae0:	2100      	movs	r1, #0
   baae2:	f7fc bcb5 	b.w	b7450 <hal_i2c_flush>

000baae6 <_ZN7TwoWireD0Ev>:
   baae6:	b510      	push	{r4, lr}
   baae8:	2114      	movs	r1, #20
   baaea:	4604      	mov	r4, r0
   baaec:	f7f9 fad5 	bl	b409a <_ZdlPvj>
   baaf0:	4620      	mov	r0, r4
   baaf2:	bd10      	pop	{r4, pc}

000baaf4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   baaf4:	b510      	push	{r4, lr}
   baaf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baafa:	4604      	mov	r4, r0
   baafc:	4608      	mov	r0, r1
   baafe:	2100      	movs	r1, #0
   bab00:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bab04:	4b03      	ldr	r3, [pc, #12]	; (bab14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bab06:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bab08:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bab0a:	4611      	mov	r1, r2
   bab0c:	f7fc fcb0 	bl	b7470 <hal_i2c_init>
}
   bab10:	4620      	mov	r0, r4
   bab12:	bd10      	pop	{r4, pc}
   bab14:	000bc778 	.word	0x000bc778

000bab18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bab18:	2200      	movs	r2, #0
   bab1a:	6840      	ldr	r0, [r0, #4]
   bab1c:	4611      	mov	r1, r2
   bab1e:	f7fc bd73 	b.w	b7608 <network_ready>

000bab22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bab22:	2200      	movs	r2, #0
   bab24:	6840      	ldr	r0, [r0, #4]
   bab26:	4611      	mov	r1, r2
   bab28:	f7fc bd8e 	b.w	b7648 <network_listening>

000bab2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bab2c:	2200      	movs	r2, #0
   bab2e:	6840      	ldr	r0, [r0, #4]
   bab30:	4611      	mov	r1, r2
   bab32:	f7fc bd99 	b.w	b7668 <network_get_listen_timeout>

000bab36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bab36:	6840      	ldr	r0, [r0, #4]
   bab38:	2200      	movs	r2, #0
   bab3a:	f7fc bd8d 	b.w	b7658 <network_set_listen_timeout>

000bab3e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bab3e:	6840      	ldr	r0, [r0, #4]
   bab40:	2200      	movs	r2, #0
   bab42:	f081 0101 	eor.w	r1, r1, #1
   bab46:	f7fc bd77 	b.w	b7638 <network_listen>

000bab4a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bab4a:	2300      	movs	r3, #0
   bab4c:	6840      	ldr	r0, [r0, #4]
   bab4e:	461a      	mov	r2, r3
   bab50:	4619      	mov	r1, r3
   bab52:	f7fc bd69 	b.w	b7628 <network_off>

000bab56 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bab56:	2300      	movs	r3, #0
   bab58:	6840      	ldr	r0, [r0, #4]
   bab5a:	461a      	mov	r2, r3
   bab5c:	4619      	mov	r1, r3
   bab5e:	f7fc bd5b 	b.w	b7618 <network_on>

000bab62 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bab62:	2200      	movs	r2, #0
   bab64:	6840      	ldr	r0, [r0, #4]
   bab66:	4611      	mov	r1, r2
   bab68:	f7fc bd3e 	b.w	b75e8 <network_connecting>

000bab6c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bab6c:	6840      	ldr	r0, [r0, #4]
   bab6e:	2200      	movs	r2, #0
   bab70:	2102      	movs	r1, #2
   bab72:	f7fc bd41 	b.w	b75f8 <network_disconnect>

000bab76 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bab76:	2300      	movs	r3, #0
   bab78:	6840      	ldr	r0, [r0, #4]
   bab7a:	461a      	mov	r2, r3
   bab7c:	f7fc bd2c 	b.w	b75d8 <network_connect>

000bab80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bab80:	4b02      	ldr	r3, [pc, #8]	; (bab8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bab82:	2204      	movs	r2, #4
   bab84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bab86:	4a02      	ldr	r2, [pc, #8]	; (bab90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bab88:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bab8a:	4770      	bx	lr
   bab8c:	2003e710 	.word	0x2003e710
   bab90:	000bc7a0 	.word	0x000bc7a0

000bab94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bab94:	2300      	movs	r3, #0
   bab96:	6840      	ldr	r0, [r0, #4]
   bab98:	461a      	mov	r2, r3
   bab9a:	f7fc bd1d 	b.w	b75d8 <network_connect>

000bab9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bab9e:	6840      	ldr	r0, [r0, #4]
   baba0:	2200      	movs	r2, #0
   baba2:	2102      	movs	r1, #2
   baba4:	f7fc bd28 	b.w	b75f8 <network_disconnect>

000baba8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   baba8:	2200      	movs	r2, #0
   babaa:	6840      	ldr	r0, [r0, #4]
   babac:	4611      	mov	r1, r2
   babae:	f7fc bd1b 	b.w	b75e8 <network_connecting>

000babb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   babb2:	2200      	movs	r2, #0
   babb4:	6840      	ldr	r0, [r0, #4]
   babb6:	4611      	mov	r1, r2
   babb8:	f7fc bd26 	b.w	b7608 <network_ready>

000babbc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   babbc:	2300      	movs	r3, #0
   babbe:	6840      	ldr	r0, [r0, #4]
   babc0:	461a      	mov	r2, r3
   babc2:	4619      	mov	r1, r3
   babc4:	f7fc bd28 	b.w	b7618 <network_on>

000babc8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   babc8:	2300      	movs	r3, #0
   babca:	6840      	ldr	r0, [r0, #4]
   babcc:	461a      	mov	r2, r3
   babce:	4619      	mov	r1, r3
   babd0:	f7fc bd2a 	b.w	b7628 <network_off>

000babd4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   babd4:	6840      	ldr	r0, [r0, #4]
   babd6:	2100      	movs	r1, #0
   babd8:	f7fc bd4e 	b.w	b7678 <network_is_on>

000babdc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   babdc:	6840      	ldr	r0, [r0, #4]
   babde:	2100      	movs	r1, #0
   babe0:	f7fc bd52 	b.w	b7688 <network_is_off>

000babe4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   babe4:	6840      	ldr	r0, [r0, #4]
   babe6:	2200      	movs	r2, #0
   babe8:	f081 0101 	eor.w	r1, r1, #1
   babec:	f7fc bd24 	b.w	b7638 <network_listen>

000babf0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   babf0:	6840      	ldr	r0, [r0, #4]
   babf2:	2200      	movs	r2, #0
   babf4:	f7fc bd30 	b.w	b7658 <network_set_listen_timeout>

000babf8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   babf8:	2200      	movs	r2, #0
   babfa:	6840      	ldr	r0, [r0, #4]
   babfc:	4611      	mov	r1, r2
   babfe:	f7fc bd33 	b.w	b7668 <network_get_listen_timeout>

000bac02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bac02:	2200      	movs	r2, #0
   bac04:	6840      	ldr	r0, [r0, #4]
   bac06:	4611      	mov	r1, r2
   bac08:	f7fc bd1e 	b.w	b7648 <network_listening>

000bac0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bac0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bac10:	b095      	sub	sp, #84	; 0x54
   bac12:	4614      	mov	r4, r2
   bac14:	460d      	mov	r5, r1
   bac16:	4607      	mov	r7, r0
    IPAddress addr;
   bac18:	f7ff fe14 	bl	ba844 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bac1c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bac1e:	221c      	movs	r2, #28
   bac20:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bac22:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bac24:	f001 f8dc 	bl	bbde0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bac28:	2340      	movs	r3, #64	; 0x40
   bac2a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bac2c:	4620      	mov	r0, r4
   bac2e:	466b      	mov	r3, sp
   bac30:	aa0c      	add	r2, sp, #48	; 0x30
   bac32:	2100      	movs	r1, #0
   bac34:	f7fc fa68 	bl	b7108 <netdb_getaddrinfo>
    if (!r) {
   bac38:	4604      	mov	r4, r0
   bac3a:	2800      	cmp	r0, #0
   bac3c:	d14b      	bne.n	bacd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bac3e:	4602      	mov	r2, r0
   bac40:	2101      	movs	r1, #1
   bac42:	6868      	ldr	r0, [r5, #4]
   bac44:	f7fc fce0 	bl	b7608 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bac48:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bac4a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bac4c:	4622      	mov	r2, r4
   bac4e:	6868      	ldr	r0, [r5, #4]
   bac50:	f7fc fcda 	bl	b7608 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bac54:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bac56:	4681      	mov	r9, r0
        bool ok = false;
   bac58:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bac5a:	2e00      	cmp	r6, #0
   bac5c:	d03b      	beq.n	bacd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bac5e:	2900      	cmp	r1, #0
   bac60:	d139      	bne.n	bacd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bac62:	6873      	ldr	r3, [r6, #4]
   bac64:	2b02      	cmp	r3, #2
   bac66:	d003      	beq.n	bac70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bac68:	2b0a      	cmp	r3, #10
   bac6a:	d011      	beq.n	bac90 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bac6c:	69f6      	ldr	r6, [r6, #28]
   bac6e:	e7f4      	b.n	bac5a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bac70:	f1b8 0f00 	cmp.w	r8, #0
   bac74:	d0fa      	beq.n	bac6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bac76:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bac78:	a806      	add	r0, sp, #24
   bac7a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bac7c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bac7e:	f7ff fe0f 	bl	ba8a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bac82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bac84:	1d3c      	adds	r4, r7, #4
   bac86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bac88:	682b      	ldr	r3, [r5, #0]
   bac8a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bac8c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bac8e:	e7ed      	b.n	bac6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bac90:	f1b9 0f00 	cmp.w	r9, #0
   bac94:	d0ea      	beq.n	bac6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bac96:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bac98:	2210      	movs	r2, #16
   bac9a:	a801      	add	r0, sp, #4
   bac9c:	f001 f8a0 	bl	bbde0 <memset>
                    a.v = 6;
   baca0:	2306      	movs	r3, #6
   baca2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   baca6:	ad01      	add	r5, sp, #4
   baca8:	f104 0308 	add.w	r3, r4, #8
   bacac:	3418      	adds	r4, #24
   bacae:	6818      	ldr	r0, [r3, #0]
   bacb0:	6859      	ldr	r1, [r3, #4]
   bacb2:	462a      	mov	r2, r5
   bacb4:	c203      	stmia	r2!, {r0, r1}
   bacb6:	3308      	adds	r3, #8
   bacb8:	42a3      	cmp	r3, r4
   bacba:	4615      	mov	r5, r2
   bacbc:	d1f7      	bne.n	bacae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bacbe:	a901      	add	r1, sp, #4
   bacc0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bacc2:	ad07      	add	r5, sp, #28
   bacc4:	f7ff fdcc 	bl	ba860 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bacc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bacca:	1d3c      	adds	r4, r7, #4
   baccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bacce:	682b      	ldr	r3, [r5, #0]
   bacd0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bacd2:	4649      	mov	r1, r9
   bacd4:	e7ca      	b.n	bac6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bacd6:	9800      	ldr	r0, [sp, #0]
   bacd8:	f7fc fa0e 	bl	b70f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bacdc:	4638      	mov	r0, r7
   bacde:	b015      	add	sp, #84	; 0x54
   bace0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bace4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bace4:	4b02      	ldr	r3, [pc, #8]	; (bacf0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bace6:	4a03      	ldr	r2, [pc, #12]	; (bacf4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bace8:	601a      	str	r2, [r3, #0]
   bacea:	2200      	movs	r2, #0
   bacec:	605a      	str	r2, [r3, #4]

} // spark
   bacee:	4770      	bx	lr
   bacf0:	2003e718 	.word	0x2003e718
   bacf4:	000bc7dc 	.word	0x000bc7dc

000bacf8 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bacf8:	b40e      	push	{r1, r2, r3}
   bacfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   bacfc:	b088      	sub	sp, #32
   bacfe:	af00      	add	r7, sp, #0
   bad00:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bad04:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bad06:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bad0a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bad0c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bad0e:	462b      	mov	r3, r5
   bad10:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bad12:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bad14:	f7fc fd30 	bl	b7778 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bad18:	280f      	cmp	r0, #15
   bad1a:	687a      	ldr	r2, [r7, #4]
   bad1c:	d91a      	bls.n	bad54 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bad1e:	f100 0308 	add.w	r3, r0, #8
   bad22:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bad26:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bad28:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bad2c:	1c41      	adds	r1, r0, #1
   bad2e:	462b      	mov	r3, r5
   bad30:	4668      	mov	r0, sp
        va_start(args, fmt);
   bad32:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bad34:	f7fc fd20 	bl	b7778 <vsnprintf>
        if (n > 0) {
   bad38:	1e02      	subs	r2, r0, #0
   bad3a:	dd04      	ble.n	bad46 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bad3c:	6823      	ldr	r3, [r4, #0]
   bad3e:	4669      	mov	r1, sp
   bad40:	689b      	ldr	r3, [r3, #8]
   bad42:	4620      	mov	r0, r4
   bad44:	4798      	blx	r3
   bad46:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bad48:	3720      	adds	r7, #32
   bad4a:	46bd      	mov	sp, r7
   bad4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bad50:	b003      	add	sp, #12
   bad52:	4770      	bx	lr
    } else if (n > 0) {
   bad54:	2800      	cmp	r0, #0
   bad56:	d0f7      	beq.n	bad48 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bad58:	6823      	ldr	r3, [r4, #0]
   bad5a:	4602      	mov	r2, r0
   bad5c:	689b      	ldr	r3, [r3, #8]
   bad5e:	f107 0110 	add.w	r1, r7, #16
   bad62:	4620      	mov	r0, r4
   bad64:	4798      	blx	r3
}
   bad66:	e7ef      	b.n	bad48 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bad68 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bad68:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bad6a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bad6c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bad70:	689b      	ldr	r3, [r3, #8]
   bad72:	2201      	movs	r2, #1
   bad74:	f10d 0107 	add.w	r1, sp, #7
   bad78:	4798      	blx	r3
}
   bad7a:	b003      	add	sp, #12
   bad7c:	f85d fb04 	ldr.w	pc, [sp], #4

000bad80 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bad80:	b510      	push	{r4, lr}
    write('}');
   bad82:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bad84:	4604      	mov	r4, r0
    write('}');
   bad86:	f7ff ffef 	bl	bad68 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bad8a:	2301      	movs	r3, #1
   bad8c:	7123      	strb	r3, [r4, #4]
}
   bad8e:	4620      	mov	r0, r4
   bad90:	bd10      	pop	{r4, pc}

000bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bad92:	b508      	push	{r3, lr}
    switch (state_) {
   bad94:	7903      	ldrb	r3, [r0, #4]
   bad96:	2b01      	cmp	r3, #1
   bad98:	d002      	beq.n	bada0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bad9a:	2b02      	cmp	r3, #2
   bad9c:	d004      	beq.n	bada8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bad9e:	bd08      	pop	{r3, pc}
        write(',');
   bada0:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bada2:	f7ff ffe1 	bl	bad68 <_ZN5spark10JSONWriter5writeEc>
}
   bada6:	e7fa      	b.n	bad9e <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bada8:	213a      	movs	r1, #58	; 0x3a
   badaa:	e7fa      	b.n	bada2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000badac <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   badac:	b510      	push	{r4, lr}
   badae:	4604      	mov	r4, r0
    writeSeparator();
   badb0:	f7ff ffef 	bl	bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   badb4:	4620      	mov	r0, r4
   badb6:	217b      	movs	r1, #123	; 0x7b
   badb8:	f7ff ffd6 	bl	bad68 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   badbc:	2300      	movs	r3, #0
   badbe:	7123      	strb	r3, [r4, #4]
}
   badc0:	4620      	mov	r0, r4
   badc2:	bd10      	pop	{r4, pc}

000badc4 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   badc4:	b538      	push	{r3, r4, r5, lr}
   badc6:	4604      	mov	r4, r0
   badc8:	460d      	mov	r5, r1
    writeSeparator();
   badca:	f7ff ffe2 	bl	bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   badce:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   badd0:	689b      	ldr	r3, [r3, #8]
    if (val) {
   badd2:	b13d      	cbz	r5, bade4 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   badd4:	4905      	ldr	r1, [pc, #20]	; (badec <_ZN5spark10JSONWriter5valueEb+0x28>)
   badd6:	2204      	movs	r2, #4
        write("false", 5);
   badd8:	4620      	mov	r0, r4
   badda:	4798      	blx	r3
    state_ = NEXT;
   baddc:	2301      	movs	r3, #1
   badde:	7123      	strb	r3, [r4, #4]
}
   bade0:	4620      	mov	r0, r4
   bade2:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   bade4:	4902      	ldr	r1, [pc, #8]	; (badf0 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   bade6:	2205      	movs	r2, #5
   bade8:	e7f6      	b.n	badd8 <_ZN5spark10JSONWriter5valueEb+0x14>
   badea:	bf00      	nop
   badec:	000bc814 	.word	0x000bc814
   badf0:	000bc45d 	.word	0x000bc45d

000badf4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   badf4:	b513      	push	{r0, r1, r4, lr}
   badf6:	4604      	mov	r4, r0
   badf8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   badfa:	f7ff ffca 	bl	bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   badfe:	6823      	ldr	r3, [r4, #0]
   bae00:	9a01      	ldr	r2, [sp, #4]
   bae02:	68db      	ldr	r3, [r3, #12]
   bae04:	4903      	ldr	r1, [pc, #12]	; (bae14 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bae06:	4620      	mov	r0, r4
   bae08:	4798      	blx	r3
    state_ = NEXT;
   bae0a:	2301      	movs	r3, #1
}
   bae0c:	4620      	mov	r0, r4
    state_ = NEXT;
   bae0e:	7123      	strb	r3, [r4, #4]
}
   bae10:	b002      	add	sp, #8
   bae12:	bd10      	pop	{r4, pc}
   bae14:	000bc234 	.word	0x000bc234

000bae18 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bae18:	b513      	push	{r0, r1, r4, lr}
   bae1a:	4604      	mov	r4, r0
   bae1c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bae1e:	f7ff ffb8 	bl	bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bae22:	6823      	ldr	r3, [r4, #0]
   bae24:	9a01      	ldr	r2, [sp, #4]
   bae26:	68db      	ldr	r3, [r3, #12]
   bae28:	4903      	ldr	r1, [pc, #12]	; (bae38 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bae2a:	4620      	mov	r0, r4
   bae2c:	4798      	blx	r3
    state_ = NEXT;
   bae2e:	2301      	movs	r3, #1
}
   bae30:	4620      	mov	r0, r4
    state_ = NEXT;
   bae32:	7123      	strb	r3, [r4, #4]
}
   bae34:	b002      	add	sp, #8
   bae36:	bd10      	pop	{r4, pc}
   bae38:	000bc819 	.word	0x000bc819

000bae3c <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   bae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bae3e:	4604      	mov	r4, r0
   bae40:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   bae44:	f7ff ffa5 	bl	bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   bae48:	6823      	ldr	r3, [r4, #0]
   bae4a:	4905      	ldr	r1, [pc, #20]	; (bae60 <_ZN5spark10JSONWriter5valueEd+0x24>)
   bae4c:	68dd      	ldr	r5, [r3, #12]
   bae4e:	4620      	mov	r0, r4
   bae50:	463b      	mov	r3, r7
   bae52:	4632      	mov	r2, r6
   bae54:	47a8      	blx	r5
    state_ = NEXT;
   bae56:	2301      	movs	r3, #1
   bae58:	7123      	strb	r3, [r4, #4]
}
   bae5a:	4620      	mov	r0, r4
   bae5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bae5e:	bf00      	nop
   bae60:	000bc81c 	.word	0x000bc81c

000bae64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bae68:	460d      	mov	r5, r1
    write('"');
   bae6a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bae6c:	4690      	mov	r8, r2
   bae6e:	4604      	mov	r4, r0
    write('"');
   bae70:	f7ff ff7a 	bl	bad68 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bae74:	f8df 90a4 	ldr.w	r9, [pc, #164]	; baf1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bae78:	44a8      	add	r8, r5
    const char *s = str;
   bae7a:	462f      	mov	r7, r5
    while (s != end) {
   bae7c:	4547      	cmp	r7, r8
   bae7e:	46ba      	mov	sl, r7
   bae80:	d03d      	beq.n	baefe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bae82:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bae86:	2e22      	cmp	r6, #34	; 0x22
   bae88:	d006      	beq.n	bae98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bae8a:	2e5c      	cmp	r6, #92	; 0x5c
   bae8c:	d004      	beq.n	bae98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bae8e:	4630      	mov	r0, r6
   bae90:	f000 ff66 	bl	bbd60 <isprint>
   bae94:	2800      	cmp	r0, #0
   bae96:	d1f1      	bne.n	bae7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bae98:	6823      	ldr	r3, [r4, #0]
   bae9a:	ebaa 0205 	sub.w	r2, sl, r5
   bae9e:	689b      	ldr	r3, [r3, #8]
   baea0:	4629      	mov	r1, r5
   baea2:	4620      	mov	r0, r4
   baea4:	4798      	blx	r3
            write('\\');
   baea6:	215c      	movs	r1, #92	; 0x5c
   baea8:	4620      	mov	r0, r4
   baeaa:	f7ff ff5d 	bl	bad68 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   baeae:	2e0d      	cmp	r6, #13
   baeb0:	d80a      	bhi.n	baec8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   baeb2:	2e07      	cmp	r6, #7
   baeb4:	d91c      	bls.n	baef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   baeb6:	f1a6 0308 	sub.w	r3, r6, #8
   baeba:	2b05      	cmp	r3, #5
   baebc:	d818      	bhi.n	baef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   baebe:	e8df f003 	tbb	[pc, r3]
   baec2:	0f0d      	.short	0x0f0d
   baec4:	15131711 	.word	0x15131711
   baec8:	2e22      	cmp	r6, #34	; 0x22
   baeca:	d001      	beq.n	baed0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   baecc:	2e5c      	cmp	r6, #92	; 0x5c
   baece:	d10f      	bne.n	baef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   baed0:	4631      	mov	r1, r6
                write('b');
   baed2:	4620      	mov	r0, r4
   baed4:	f7ff ff48 	bl	bad68 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   baed8:	463d      	mov	r5, r7
    while (s != end) {
   baeda:	e7cf      	b.n	bae7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   baedc:	2162      	movs	r1, #98	; 0x62
   baede:	e7f8      	b.n	baed2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   baee0:	2174      	movs	r1, #116	; 0x74
   baee2:	e7f6      	b.n	baed2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   baee4:	216e      	movs	r1, #110	; 0x6e
   baee6:	e7f4      	b.n	baed2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   baee8:	2166      	movs	r1, #102	; 0x66
   baeea:	e7f2      	b.n	baed2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   baeec:	2172      	movs	r1, #114	; 0x72
   baeee:	e7f0      	b.n	baed2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   baef0:	6823      	ldr	r3, [r4, #0]
   baef2:	4632      	mov	r2, r6
   baef4:	68db      	ldr	r3, [r3, #12]
   baef6:	4649      	mov	r1, r9
   baef8:	4620      	mov	r0, r4
   baefa:	4798      	blx	r3
                break;
   baefc:	e7ec      	b.n	baed8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   baefe:	42bd      	cmp	r5, r7
   baf00:	d005      	beq.n	baf0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   baf02:	6823      	ldr	r3, [r4, #0]
   baf04:	1b7a      	subs	r2, r7, r5
   baf06:	689b      	ldr	r3, [r3, #8]
   baf08:	4629      	mov	r1, r5
   baf0a:	4620      	mov	r0, r4
   baf0c:	4798      	blx	r3
    }
    write('"');
   baf0e:	2122      	movs	r1, #34	; 0x22
   baf10:	4620      	mov	r0, r4
   baf12:	f7ff ff29 	bl	bad68 <_ZN5spark10JSONWriter5writeEc>
}
   baf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baf1a:	bf00      	nop
   baf1c:	000bc81f 	.word	0x000bc81f

000baf20 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   baf20:	b513      	push	{r0, r1, r4, lr}
   baf22:	4604      	mov	r4, r0
   baf24:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   baf28:	f7ff ff33 	bl	bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   baf2c:	4620      	mov	r0, r4
   baf2e:	e9dd 2100 	ldrd	r2, r1, [sp]
   baf32:	f7ff ff97 	bl	bae64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   baf36:	2302      	movs	r3, #2
}
   baf38:	4620      	mov	r0, r4
    state_ = VALUE;
   baf3a:	7123      	strb	r3, [r4, #4]
}
   baf3c:	b002      	add	sp, #8
   baf3e:	bd10      	pop	{r4, pc}

000baf40 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   baf40:	b513      	push	{r0, r1, r4, lr}
   baf42:	4604      	mov	r4, r0
   baf44:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   baf48:	f7ff ff23 	bl	bad92 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   baf4c:	4620      	mov	r0, r4
   baf4e:	e9dd 2100 	ldrd	r2, r1, [sp]
   baf52:	f7ff ff87 	bl	bae64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   baf56:	2301      	movs	r3, #1
}
   baf58:	4620      	mov	r0, r4
    state_ = NEXT;
   baf5a:	7123      	strb	r3, [r4, #4]
}
   baf5c:	b002      	add	sp, #8
   baf5e:	bd10      	pop	{r4, pc}

000baf60 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   baf60:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   baf62:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   baf64:	d902      	bls.n	baf6c <pinAvailable+0xc>
    return false;
   baf66:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   baf68:	b002      	add	sp, #8
   baf6a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   baf6c:	f1a0 030b 	sub.w	r3, r0, #11
   baf70:	2b02      	cmp	r3, #2
   baf72:	d81a      	bhi.n	bafaa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   baf74:	4c17      	ldr	r4, [pc, #92]	; (bafd4 <pinAvailable+0x74>)
   baf76:	7821      	ldrb	r1, [r4, #0]
   baf78:	f3bf 8f5b 	dmb	ish
   baf7c:	f011 0101 	ands.w	r1, r1, #1
   baf80:	d10b      	bne.n	baf9a <pinAvailable+0x3a>
   baf82:	4620      	mov	r0, r4
   baf84:	9101      	str	r1, [sp, #4]
   baf86:	f7f9 f88a 	bl	b409e <__cxa_guard_acquire>
   baf8a:	9901      	ldr	r1, [sp, #4]
   baf8c:	b128      	cbz	r0, baf9a <pinAvailable+0x3a>
   baf8e:	4812      	ldr	r0, [pc, #72]	; (bafd8 <pinAvailable+0x78>)
   baf90:	f7fc fc60 	bl	b7854 <_ZN8SPIClassC1E19hal_spi_interface_t>
   baf94:	4620      	mov	r0, r4
   baf96:	f7f9 f887 	bl	b40a8 <__cxa_guard_release>
   baf9a:	4b0f      	ldr	r3, [pc, #60]	; (bafd8 <pinAvailable+0x78>)
   baf9c:	7818      	ldrb	r0, [r3, #0]
   baf9e:	f7fc fa77 	bl	b7490 <hal_spi_is_enabled>
   bafa2:	2800      	cmp	r0, #0
   bafa4:	d1df      	bne.n	baf66 <pinAvailable+0x6>
  return true; // 'pin' is available
   bafa6:	2001      	movs	r0, #1
   bafa8:	e7de      	b.n	baf68 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bafaa:	2801      	cmp	r0, #1
   bafac:	d809      	bhi.n	bafc2 <pinAvailable+0x62>
   bafae:	f000 f897 	bl	bb0e0 <_Z19__fetch_global_Wirev>
   bafb2:	2100      	movs	r1, #0
   bafb4:	7c00      	ldrb	r0, [r0, #16]
   bafb6:	f7fc fa53 	bl	b7460 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bafba:	f080 0001 	eor.w	r0, r0, #1
   bafbe:	b2c0      	uxtb	r0, r0
   bafc0:	e7d2      	b.n	baf68 <pinAvailable+0x8>
   bafc2:	3809      	subs	r0, #9
   bafc4:	2801      	cmp	r0, #1
   bafc6:	d8ee      	bhi.n	bafa6 <pinAvailable+0x46>
   bafc8:	f000 f84e 	bl	bb068 <_Z22__fetch_global_Serial1v>
   bafcc:	7c00      	ldrb	r0, [r0, #16]
   bafce:	f7fc fa07 	bl	b73e0 <hal_usart_is_enabled>
   bafd2:	e7f2      	b.n	bafba <pinAvailable+0x5a>
   bafd4:	2003e720 	.word	0x2003e720
   bafd8:	2003e724 	.word	0x2003e724

000bafdc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bafdc:	2823      	cmp	r0, #35	; 0x23
{
   bafde:	b538      	push	{r3, r4, r5, lr}
   bafe0:	4604      	mov	r4, r0
   bafe2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bafe4:	d80a      	bhi.n	baffc <pinMode+0x20>
   bafe6:	29ff      	cmp	r1, #255	; 0xff
   bafe8:	d008      	beq.n	baffc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bafea:	f7ff ffb9 	bl	baf60 <pinAvailable>
   bafee:	b128      	cbz	r0, baffc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   baff0:	4629      	mov	r1, r5
   baff2:	4620      	mov	r0, r4
}
   baff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   baff8:	f7fc b88e 	b.w	b7118 <HAL_Pin_Mode>
}
   baffc:	bd38      	pop	{r3, r4, r5, pc}

000baffe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   baffe:	b538      	push	{r3, r4, r5, lr}
   bb000:	4604      	mov	r4, r0
   bb002:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb004:	f7fc f890 	bl	b7128 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb008:	28ff      	cmp	r0, #255	; 0xff
   bb00a:	d010      	beq.n	bb02e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb00c:	2806      	cmp	r0, #6
   bb00e:	d804      	bhi.n	bb01a <digitalWrite+0x1c>
   bb010:	234d      	movs	r3, #77	; 0x4d
   bb012:	fa23 f000 	lsr.w	r0, r3, r0
   bb016:	07c3      	lsls	r3, r0, #31
   bb018:	d409      	bmi.n	bb02e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb01a:	4620      	mov	r0, r4
   bb01c:	f7ff ffa0 	bl	baf60 <pinAvailable>
   bb020:	b128      	cbz	r0, bb02e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb022:	4629      	mov	r1, r5
   bb024:	4620      	mov	r0, r4
}
   bb026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb02a:	f7fc b885 	b.w	b7138 <HAL_GPIO_Write>
}
   bb02e:	bd38      	pop	{r3, r4, r5, pc}

000bb030 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb030:	4770      	bx	lr
	...

000bb034 <_Z20acquireSerial1Bufferv>:
{
   bb034:	b538      	push	{r3, r4, r5, lr}
   bb036:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb038:	2514      	movs	r5, #20
   bb03a:	462a      	mov	r2, r5
   bb03c:	2100      	movs	r1, #0
   bb03e:	f000 fecf 	bl	bbde0 <memset>
   bb042:	8025      	strh	r5, [r4, #0]
   bb044:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb046:	4907      	ldr	r1, [pc, #28]	; (bb064 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb048:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb04a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb04c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb04e:	f000 f86d 	bl	bb12c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb052:	4904      	ldr	r1, [pc, #16]	; (bb064 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb054:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb056:	4628      	mov	r0, r5
   bb058:	f000 f868 	bl	bb12c <_ZnajRKSt9nothrow_t>
    };
   bb05c:	60e0      	str	r0, [r4, #12]
}
   bb05e:	4620      	mov	r0, r4
   bb060:	bd38      	pop	{r3, r4, r5, pc}
   bb062:	bf00      	nop
   bb064:	000bc825 	.word	0x000bc825

000bb068 <_Z22__fetch_global_Serial1v>:
{
   bb068:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb06a:	4d0e      	ldr	r5, [pc, #56]	; (bb0a4 <_Z22__fetch_global_Serial1v+0x3c>)
   bb06c:	7829      	ldrb	r1, [r5, #0]
   bb06e:	f3bf 8f5b 	dmb	ish
   bb072:	f011 0401 	ands.w	r4, r1, #1
{
   bb076:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb078:	d111      	bne.n	bb09e <_Z22__fetch_global_Serial1v+0x36>
   bb07a:	4628      	mov	r0, r5
   bb07c:	f7f9 f80f 	bl	b409e <__cxa_guard_acquire>
   bb080:	b168      	cbz	r0, bb09e <_Z22__fetch_global_Serial1v+0x36>
   bb082:	a801      	add	r0, sp, #4
   bb084:	f7ff ffd6 	bl	bb034 <_Z20acquireSerial1Bufferv>
   bb088:	aa01      	add	r2, sp, #4
   bb08a:	4621      	mov	r1, r4
   bb08c:	4806      	ldr	r0, [pc, #24]	; (bb0a8 <_Z22__fetch_global_Serial1v+0x40>)
   bb08e:	f7ff fcdd 	bl	baa4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb092:	4628      	mov	r0, r5
   bb094:	f7f9 f808 	bl	b40a8 <__cxa_guard_release>
   bb098:	4804      	ldr	r0, [pc, #16]	; (bb0ac <_Z22__fetch_global_Serial1v+0x44>)
   bb09a:	f000 fe5b 	bl	bbd54 <atexit>
    return serial1;
}
   bb09e:	4802      	ldr	r0, [pc, #8]	; (bb0a8 <_Z22__fetch_global_Serial1v+0x40>)
   bb0a0:	b007      	add	sp, #28
   bb0a2:	bd30      	pop	{r4, r5, pc}
   bb0a4:	2003e72c 	.word	0x2003e72c
   bb0a8:	2003e730 	.word	0x2003e730
   bb0ac:	000bb031 	.word	0x000bb031

000bb0b0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb0b0:	4770      	bx	lr
	...

000bb0b4 <_Z17acquireWireBufferv>:
{
   bb0b4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb0b6:	2520      	movs	r5, #32
   bb0b8:	2314      	movs	r3, #20
{
   bb0ba:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb0bc:	6003      	str	r3, [r0, #0]
   bb0be:	6085      	str	r5, [r0, #8]
   bb0c0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb0c2:	4906      	ldr	r1, [pc, #24]	; (bb0dc <_Z17acquireWireBufferv+0x28>)
   bb0c4:	4628      	mov	r0, r5
   bb0c6:	f000 f831 	bl	bb12c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb0ca:	4904      	ldr	r1, [pc, #16]	; (bb0dc <_Z17acquireWireBufferv+0x28>)
	};
   bb0cc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb0ce:	4628      	mov	r0, r5
   bb0d0:	f000 f82c 	bl	bb12c <_ZnajRKSt9nothrow_t>
	};
   bb0d4:	60e0      	str	r0, [r4, #12]
}
   bb0d6:	4620      	mov	r0, r4
   bb0d8:	bd38      	pop	{r3, r4, r5, pc}
   bb0da:	bf00      	nop
   bb0dc:	000bc825 	.word	0x000bc825

000bb0e0 <_Z19__fetch_global_Wirev>:
{
   bb0e0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb0e2:	4d0e      	ldr	r5, [pc, #56]	; (bb11c <_Z19__fetch_global_Wirev+0x3c>)
   bb0e4:	7829      	ldrb	r1, [r5, #0]
   bb0e6:	f3bf 8f5b 	dmb	ish
   bb0ea:	f011 0401 	ands.w	r4, r1, #1
{
   bb0ee:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb0f0:	d111      	bne.n	bb116 <_Z19__fetch_global_Wirev+0x36>
   bb0f2:	4628      	mov	r0, r5
   bb0f4:	f7f8 ffd3 	bl	b409e <__cxa_guard_acquire>
   bb0f8:	b168      	cbz	r0, bb116 <_Z19__fetch_global_Wirev+0x36>
   bb0fa:	a801      	add	r0, sp, #4
   bb0fc:	f7ff ffda 	bl	bb0b4 <_Z17acquireWireBufferv>
   bb100:	aa01      	add	r2, sp, #4
   bb102:	4621      	mov	r1, r4
   bb104:	4806      	ldr	r0, [pc, #24]	; (bb120 <_Z19__fetch_global_Wirev+0x40>)
   bb106:	f7ff fcf5 	bl	baaf4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb10a:	4628      	mov	r0, r5
   bb10c:	f7f8 ffcc 	bl	b40a8 <__cxa_guard_release>
   bb110:	4804      	ldr	r0, [pc, #16]	; (bb124 <_Z19__fetch_global_Wirev+0x44>)
   bb112:	f000 fe1f 	bl	bbd54 <atexit>
	return wire;
}
   bb116:	4802      	ldr	r0, [pc, #8]	; (bb120 <_Z19__fetch_global_Wirev+0x40>)
   bb118:	b007      	add	sp, #28
   bb11a:	bd30      	pop	{r4, r5, pc}
   bb11c:	2003e748 	.word	0x2003e748
   bb120:	2003e74c 	.word	0x2003e74c
   bb124:	000bb0b1 	.word	0x000bb0b1

000bb128 <_ZnwjRKSt9nothrow_t>:
   bb128:	f7f8 bfb3 	b.w	b4092 <_Znwj>

000bb12c <_ZnajRKSt9nothrow_t>:
   bb12c:	f7f8 bfb3 	b.w	b4096 <_Znaj>

000bb130 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   bb130:	68c3      	ldr	r3, [r0, #12]
   bb132:	689a      	ldr	r2, [r3, #8]
   bb134:	60c2      	str	r2, [r0, #12]
   bb136:	b510      	push	{r4, lr}
   bb138:	b102      	cbz	r2, bb13c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   bb13a:	6050      	str	r0, [r2, #4]
   bb13c:	6842      	ldr	r2, [r0, #4]
   bb13e:	605a      	str	r2, [r3, #4]
   bb140:	680c      	ldr	r4, [r1, #0]
   bb142:	4284      	cmp	r4, r0
   bb144:	d103      	bne.n	bb14e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   bb146:	600b      	str	r3, [r1, #0]
   bb148:	6098      	str	r0, [r3, #8]
   bb14a:	6043      	str	r3, [r0, #4]
   bb14c:	bd10      	pop	{r4, pc}
   bb14e:	6891      	ldr	r1, [r2, #8]
   bb150:	4281      	cmp	r1, r0
   bb152:	bf0c      	ite	eq
   bb154:	6093      	streq	r3, [r2, #8]
   bb156:	60d3      	strne	r3, [r2, #12]
   bb158:	e7f6      	b.n	bb148 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000bb15a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   bb15a:	6883      	ldr	r3, [r0, #8]
   bb15c:	68da      	ldr	r2, [r3, #12]
   bb15e:	6082      	str	r2, [r0, #8]
   bb160:	b510      	push	{r4, lr}
   bb162:	b102      	cbz	r2, bb166 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   bb164:	6050      	str	r0, [r2, #4]
   bb166:	6842      	ldr	r2, [r0, #4]
   bb168:	605a      	str	r2, [r3, #4]
   bb16a:	680c      	ldr	r4, [r1, #0]
   bb16c:	4284      	cmp	r4, r0
   bb16e:	d103      	bne.n	bb178 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   bb170:	600b      	str	r3, [r1, #0]
   bb172:	60d8      	str	r0, [r3, #12]
   bb174:	6043      	str	r3, [r0, #4]
   bb176:	bd10      	pop	{r4, pc}
   bb178:	68d1      	ldr	r1, [r2, #12]
   bb17a:	4281      	cmp	r1, r0
   bb17c:	bf0c      	ite	eq
   bb17e:	60d3      	streq	r3, [r2, #12]
   bb180:	6093      	strne	r3, [r2, #8]
   bb182:	e7f6      	b.n	bb172 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000bb184 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   bb184:	68c3      	ldr	r3, [r0, #12]
   bb186:	b123      	cbz	r3, bb192 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   bb188:	4618      	mov	r0, r3
   bb18a:	689b      	ldr	r3, [r3, #8]
   bb18c:	2b00      	cmp	r3, #0
   bb18e:	d1fb      	bne.n	bb188 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   bb190:	4770      	bx	lr
   bb192:	6843      	ldr	r3, [r0, #4]
   bb194:	68da      	ldr	r2, [r3, #12]
   bb196:	4282      	cmp	r2, r0
   bb198:	d102      	bne.n	bb1a0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   bb19a:	4618      	mov	r0, r3
   bb19c:	685b      	ldr	r3, [r3, #4]
   bb19e:	e7f9      	b.n	bb194 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   bb1a0:	68c2      	ldr	r2, [r0, #12]
   bb1a2:	4293      	cmp	r3, r2
   bb1a4:	bf18      	it	ne
   bb1a6:	4618      	movne	r0, r3
   bb1a8:	4770      	bx	lr

000bb1aa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   bb1aa:	7803      	ldrb	r3, [r0, #0]
   bb1ac:	b933      	cbnz	r3, bb1bc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bb1ae:	6843      	ldr	r3, [r0, #4]
   bb1b0:	685b      	ldr	r3, [r3, #4]
   bb1b2:	4283      	cmp	r3, r0
   bb1b4:	d102      	bne.n	bb1bc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bb1b6:	68db      	ldr	r3, [r3, #12]
   bb1b8:	4618      	mov	r0, r3
   bb1ba:	4770      	bx	lr
   bb1bc:	6882      	ldr	r2, [r0, #8]
   bb1be:	b122      	cbz	r2, bb1ca <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   bb1c0:	4613      	mov	r3, r2
   bb1c2:	68d2      	ldr	r2, [r2, #12]
   bb1c4:	2a00      	cmp	r2, #0
   bb1c6:	d1fb      	bne.n	bb1c0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   bb1c8:	e7f6      	b.n	bb1b8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bb1ca:	6843      	ldr	r3, [r0, #4]
   bb1cc:	689a      	ldr	r2, [r3, #8]
   bb1ce:	4282      	cmp	r2, r0
   bb1d0:	d1f2      	bne.n	bb1b8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bb1d2:	4618      	mov	r0, r3
   bb1d4:	685b      	ldr	r3, [r3, #4]
   bb1d6:	e7f9      	b.n	bb1cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000bb1d8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   bb1d8:	f7ff bfd4 	b.w	bb184 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000bb1dc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   bb1dc:	f7ff bfd2 	b.w	bb184 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000bb1e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   bb1e0:	f7ff bfe3 	b.w	bb1aa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000bb1e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   bb1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb1e8:	461e      	mov	r6, r3
   bb1ea:	f103 0804 	add.w	r8, r3, #4
   bb1ee:	2300      	movs	r3, #0
   bb1f0:	e9c1 3302 	strd	r3, r3, [r1, #8]
   bb1f4:	460c      	mov	r4, r1
   bb1f6:	604a      	str	r2, [r1, #4]
   bb1f8:	700b      	strb	r3, [r1, #0]
   bb1fa:	b300      	cbz	r0, bb23e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   bb1fc:	4296      	cmp	r6, r2
   bb1fe:	6091      	str	r1, [r2, #8]
   bb200:	d118      	bne.n	bb234 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   bb202:	6071      	str	r1, [r6, #4]
   bb204:	60f4      	str	r4, [r6, #12]
   bb206:	2701      	movs	r7, #1
   bb208:	f04f 0900 	mov.w	r9, #0
   bb20c:	6873      	ldr	r3, [r6, #4]
   bb20e:	42a3      	cmp	r3, r4
   bb210:	d03f      	beq.n	bb292 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   bb212:	6860      	ldr	r0, [r4, #4]
   bb214:	7802      	ldrb	r2, [r0, #0]
   bb216:	2a00      	cmp	r2, #0
   bb218:	d13b      	bne.n	bb292 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   bb21a:	6845      	ldr	r5, [r0, #4]
   bb21c:	68ab      	ldr	r3, [r5, #8]
   bb21e:	4298      	cmp	r0, r3
   bb220:	d123      	bne.n	bb26a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   bb222:	68eb      	ldr	r3, [r5, #12]
   bb224:	b183      	cbz	r3, bb248 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   bb226:	781a      	ldrb	r2, [r3, #0]
   bb228:	b972      	cbnz	r2, bb248 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   bb22a:	7007      	strb	r7, [r0, #0]
   bb22c:	701f      	strb	r7, [r3, #0]
   bb22e:	702a      	strb	r2, [r5, #0]
   bb230:	462c      	mov	r4, r5
   bb232:	e7eb      	b.n	bb20c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   bb234:	68b3      	ldr	r3, [r6, #8]
   bb236:	4293      	cmp	r3, r2
   bb238:	d1e5      	bne.n	bb206 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   bb23a:	60b1      	str	r1, [r6, #8]
   bb23c:	e7e3      	b.n	bb206 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   bb23e:	60d1      	str	r1, [r2, #12]
   bb240:	68f3      	ldr	r3, [r6, #12]
   bb242:	4293      	cmp	r3, r2
   bb244:	d1df      	bne.n	bb206 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   bb246:	e7dd      	b.n	bb204 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   bb248:	68c3      	ldr	r3, [r0, #12]
   bb24a:	42a3      	cmp	r3, r4
   bb24c:	d103      	bne.n	bb256 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   bb24e:	4641      	mov	r1, r8
   bb250:	f7ff ff6e 	bl	bb130 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb254:	4604      	mov	r4, r0
   bb256:	6863      	ldr	r3, [r4, #4]
   bb258:	4641      	mov	r1, r8
   bb25a:	701f      	strb	r7, [r3, #0]
   bb25c:	4628      	mov	r0, r5
   bb25e:	f885 9000 	strb.w	r9, [r5]
   bb262:	f7ff ff7a 	bl	bb15a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb266:	4625      	mov	r5, r4
   bb268:	e7e2      	b.n	bb230 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   bb26a:	b113      	cbz	r3, bb272 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   bb26c:	781a      	ldrb	r2, [r3, #0]
   bb26e:	2a00      	cmp	r2, #0
   bb270:	d0db      	beq.n	bb22a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   bb272:	6883      	ldr	r3, [r0, #8]
   bb274:	42a3      	cmp	r3, r4
   bb276:	d103      	bne.n	bb280 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   bb278:	4641      	mov	r1, r8
   bb27a:	f7ff ff6e 	bl	bb15a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb27e:	4604      	mov	r4, r0
   bb280:	6863      	ldr	r3, [r4, #4]
   bb282:	4641      	mov	r1, r8
   bb284:	701f      	strb	r7, [r3, #0]
   bb286:	4628      	mov	r0, r5
   bb288:	f885 9000 	strb.w	r9, [r5]
   bb28c:	f7ff ff50 	bl	bb130 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb290:	e7e9      	b.n	bb266 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   bb292:	2201      	movs	r2, #1
   bb294:	701a      	strb	r2, [r3, #0]
   bb296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bb29a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   bb29a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb29e:	460f      	mov	r7, r1
   bb2a0:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
   bb2a4:	4604      	mov	r4, r0
   bb2a6:	2e00      	cmp	r6, #0
   bb2a8:	d03e      	beq.n	bb328 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
   bb2aa:	2900      	cmp	r1, #0
   bb2ac:	d03d      	beq.n	bb32a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   bb2ae:	460a      	mov	r2, r1
   bb2b0:	4613      	mov	r3, r2
   bb2b2:	6892      	ldr	r2, [r2, #8]
   bb2b4:	2a00      	cmp	r2, #0
   bb2b6:	d1fb      	bne.n	bb2b0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
   bb2b8:	42a3      	cmp	r3, r4
   bb2ba:	68da      	ldr	r2, [r3, #12]
   bb2bc:	d04b      	beq.n	bb356 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
   bb2be:	4299      	cmp	r1, r3
   bb2c0:	6073      	str	r3, [r6, #4]
   bb2c2:	609e      	str	r6, [r3, #8]
   bb2c4:	d027      	beq.n	bb316 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
   bb2c6:	685d      	ldr	r5, [r3, #4]
   bb2c8:	b102      	cbz	r2, bb2cc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
   bb2ca:	6055      	str	r5, [r2, #4]
   bb2cc:	6858      	ldr	r0, [r3, #4]
   bb2ce:	6082      	str	r2, [r0, #8]
   bb2d0:	60d9      	str	r1, [r3, #12]
   bb2d2:	68e1      	ldr	r1, [r4, #12]
   bb2d4:	604b      	str	r3, [r1, #4]
   bb2d6:	6879      	ldr	r1, [r7, #4]
   bb2d8:	42a1      	cmp	r1, r4
   bb2da:	d11e      	bne.n	bb31a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
   bb2dc:	607b      	str	r3, [r7, #4]
   bb2de:	6861      	ldr	r1, [r4, #4]
   bb2e0:	7820      	ldrb	r0, [r4, #0]
   bb2e2:	6059      	str	r1, [r3, #4]
   bb2e4:	7819      	ldrb	r1, [r3, #0]
   bb2e6:	7018      	strb	r0, [r3, #0]
   bb2e8:	4616      	mov	r6, r2
   bb2ea:	7021      	strb	r1, [r4, #0]
   bb2ec:	7823      	ldrb	r3, [r4, #0]
   bb2ee:	b173      	cbz	r3, bb30e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   bb2f0:	1d39      	adds	r1, r7, #4
   bb2f2:	f04f 0800 	mov.w	r8, #0
   bb2f6:	f04f 0901 	mov.w	r9, #1
   bb2fa:	687b      	ldr	r3, [r7, #4]
   bb2fc:	42b3      	cmp	r3, r6
   bb2fe:	d07b      	beq.n	bb3f8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
   bb300:	2e00      	cmp	r6, #0
   bb302:	d03f      	beq.n	bb384 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   bb304:	7833      	ldrb	r3, [r6, #0]
   bb306:	2b01      	cmp	r3, #1
   bb308:	d03c      	beq.n	bb384 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   bb30a:	2301      	movs	r3, #1
   bb30c:	7033      	strb	r3, [r6, #0]
   bb30e:	4620      	mov	r0, r4
   bb310:	b003      	add	sp, #12
   bb312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb316:	461d      	mov	r5, r3
   bb318:	e7dd      	b.n	bb2d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
   bb31a:	6861      	ldr	r1, [r4, #4]
   bb31c:	6888      	ldr	r0, [r1, #8]
   bb31e:	42a0      	cmp	r0, r4
   bb320:	bf0c      	ite	eq
   bb322:	608b      	streq	r3, [r1, #8]
   bb324:	60cb      	strne	r3, [r1, #12]
   bb326:	e7da      	b.n	bb2de <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
   bb328:	460e      	mov	r6, r1
   bb32a:	6865      	ldr	r5, [r4, #4]
   bb32c:	b106      	cbz	r6, bb330 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
   bb32e:	6075      	str	r5, [r6, #4]
   bb330:	687b      	ldr	r3, [r7, #4]
   bb332:	42a3      	cmp	r3, r4
   bb334:	d111      	bne.n	bb35a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
   bb336:	607e      	str	r6, [r7, #4]
   bb338:	68bb      	ldr	r3, [r7, #8]
   bb33a:	42a3      	cmp	r3, r4
   bb33c:	d103      	bne.n	bb346 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   bb33e:	68e3      	ldr	r3, [r4, #12]
   bb340:	b993      	cbnz	r3, bb368 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
   bb342:	6863      	ldr	r3, [r4, #4]
   bb344:	60bb      	str	r3, [r7, #8]
   bb346:	68fb      	ldr	r3, [r7, #12]
   bb348:	42a3      	cmp	r3, r4
   bb34a:	d1cf      	bne.n	bb2ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   bb34c:	68a3      	ldr	r3, [r4, #8]
   bb34e:	b993      	cbnz	r3, bb376 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   bb350:	6863      	ldr	r3, [r4, #4]
   bb352:	60fb      	str	r3, [r7, #12]
   bb354:	e7ca      	b.n	bb2ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   bb356:	4616      	mov	r6, r2
   bb358:	e7e7      	b.n	bb32a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   bb35a:	6863      	ldr	r3, [r4, #4]
   bb35c:	689a      	ldr	r2, [r3, #8]
   bb35e:	42a2      	cmp	r2, r4
   bb360:	bf0c      	ite	eq
   bb362:	609e      	streq	r6, [r3, #8]
   bb364:	60de      	strne	r6, [r3, #12]
   bb366:	e7e7      	b.n	bb338 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
   bb368:	4633      	mov	r3, r6
   bb36a:	461a      	mov	r2, r3
   bb36c:	689b      	ldr	r3, [r3, #8]
   bb36e:	2b00      	cmp	r3, #0
   bb370:	d1fb      	bne.n	bb36a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
   bb372:	60ba      	str	r2, [r7, #8]
   bb374:	e7e7      	b.n	bb346 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   bb376:	4633      	mov	r3, r6
   bb378:	461a      	mov	r2, r3
   bb37a:	68db      	ldr	r3, [r3, #12]
   bb37c:	2b00      	cmp	r3, #0
   bb37e:	d1fb      	bne.n	bb378 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
   bb380:	60fa      	str	r2, [r7, #12]
   bb382:	e7b3      	b.n	bb2ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   bb384:	68a8      	ldr	r0, [r5, #8]
   bb386:	42b0      	cmp	r0, r6
   bb388:	d139      	bne.n	bb3fe <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   bb38a:	68e8      	ldr	r0, [r5, #12]
   bb38c:	7803      	ldrb	r3, [r0, #0]
   bb38e:	b943      	cbnz	r3, bb3a2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x108>
   bb390:	f880 9000 	strb.w	r9, [r0]
   bb394:	4628      	mov	r0, r5
   bb396:	702b      	strb	r3, [r5, #0]
   bb398:	9101      	str	r1, [sp, #4]
   bb39a:	f7ff fec9 	bl	bb130 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb39e:	68e8      	ldr	r0, [r5, #12]
   bb3a0:	9901      	ldr	r1, [sp, #4]
   bb3a2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   bb3a6:	b122      	cbz	r2, bb3b2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x118>
   bb3a8:	f892 c000 	ldrb.w	ip, [r2]
   bb3ac:	f1bc 0f01 	cmp.w	ip, #1
   bb3b0:	d10b      	bne.n	bb3ca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   bb3b2:	b123      	cbz	r3, bb3be <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   bb3b4:	f893 c000 	ldrb.w	ip, [r3]
   bb3b8:	f1bc 0f01 	cmp.w	ip, #1
   bb3bc:	d105      	bne.n	bb3ca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   bb3be:	686b      	ldr	r3, [r5, #4]
   bb3c0:	f880 8000 	strb.w	r8, [r0]
   bb3c4:	462e      	mov	r6, r5
   bb3c6:	461d      	mov	r5, r3
   bb3c8:	e797      	b.n	bb2fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x60>
   bb3ca:	b113      	cbz	r3, bb3d2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x138>
   bb3cc:	781b      	ldrb	r3, [r3, #0]
   bb3ce:	2b01      	cmp	r3, #1
   bb3d0:	d108      	bne.n	bb3e4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14a>
   bb3d2:	2301      	movs	r3, #1
   bb3d4:	7013      	strb	r3, [r2, #0]
   bb3d6:	2300      	movs	r3, #0
   bb3d8:	7003      	strb	r3, [r0, #0]
   bb3da:	9101      	str	r1, [sp, #4]
   bb3dc:	f7ff febd 	bl	bb15a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb3e0:	68e8      	ldr	r0, [r5, #12]
   bb3e2:	9901      	ldr	r1, [sp, #4]
   bb3e4:	782b      	ldrb	r3, [r5, #0]
   bb3e6:	7003      	strb	r3, [r0, #0]
   bb3e8:	68c3      	ldr	r3, [r0, #12]
   bb3ea:	2201      	movs	r2, #1
   bb3ec:	702a      	strb	r2, [r5, #0]
   bb3ee:	b103      	cbz	r3, bb3f2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x158>
   bb3f0:	701a      	strb	r2, [r3, #0]
   bb3f2:	4628      	mov	r0, r5
   bb3f4:	f7ff fe9c 	bl	bb130 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb3f8:	2e00      	cmp	r6, #0
   bb3fa:	d186      	bne.n	bb30a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x70>
   bb3fc:	e787      	b.n	bb30e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   bb3fe:	7803      	ldrb	r3, [r0, #0]
   bb400:	b943      	cbnz	r3, bb414 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
   bb402:	f880 9000 	strb.w	r9, [r0]
   bb406:	4628      	mov	r0, r5
   bb408:	702b      	strb	r3, [r5, #0]
   bb40a:	9101      	str	r1, [sp, #4]
   bb40c:	f7ff fea5 	bl	bb15a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb410:	68a8      	ldr	r0, [r5, #8]
   bb412:	9901      	ldr	r1, [sp, #4]
   bb414:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   bb418:	b122      	cbz	r2, bb424 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18a>
   bb41a:	f892 c000 	ldrb.w	ip, [r2]
   bb41e:	f1bc 0f01 	cmp.w	ip, #1
   bb422:	d106      	bne.n	bb432 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x198>
   bb424:	2b00      	cmp	r3, #0
   bb426:	d0ca      	beq.n	bb3be <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   bb428:	f893 c000 	ldrb.w	ip, [r3]
   bb42c:	f1bc 0f01 	cmp.w	ip, #1
   bb430:	d0c5      	beq.n	bb3be <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   bb432:	b113      	cbz	r3, bb43a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a0>
   bb434:	781b      	ldrb	r3, [r3, #0]
   bb436:	2b01      	cmp	r3, #1
   bb438:	d108      	bne.n	bb44c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1b2>
   bb43a:	2301      	movs	r3, #1
   bb43c:	7013      	strb	r3, [r2, #0]
   bb43e:	2300      	movs	r3, #0
   bb440:	7003      	strb	r3, [r0, #0]
   bb442:	9101      	str	r1, [sp, #4]
   bb444:	f7ff fe74 	bl	bb130 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb448:	68a8      	ldr	r0, [r5, #8]
   bb44a:	9901      	ldr	r1, [sp, #4]
   bb44c:	782b      	ldrb	r3, [r5, #0]
   bb44e:	7003      	strb	r3, [r0, #0]
   bb450:	6883      	ldr	r3, [r0, #8]
   bb452:	2201      	movs	r2, #1
   bb454:	702a      	strb	r2, [r5, #0]
   bb456:	b103      	cbz	r3, bb45a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c0>
   bb458:	701a      	strb	r2, [r3, #0]
   bb45a:	4628      	mov	r0, r5
   bb45c:	f7ff fe7d 	bl	bb15a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb460:	e7ca      	b.n	bb3f8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>

000bb462 <_ZSt25__throw_bad_function_callv>:
   bb462:	b508      	push	{r3, lr}
   bb464:	f7fc f990 	bl	b7788 <abort>

000bb468 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb468:	4901      	ldr	r1, [pc, #4]	; (bb470 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb46a:	f000 b8f9 	b.w	bb660 <_ZNKSt9type_infoeqERKS_>
   bb46e:	bf00      	nop
   bb470:	000bc840 	.word	0x000bc840

000bb474 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb476:	2400      	movs	r4, #0
   bb478:	2310      	movs	r3, #16
   bb47a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb47e:	6803      	ldr	r3, [r0, #0]
   bb480:	4615      	mov	r5, r2
   bb482:	699e      	ldr	r6, [r3, #24]
   bb484:	6812      	ldr	r2, [r2, #0]
   bb486:	466b      	mov	r3, sp
   bb488:	e9cd 4400 	strd	r4, r4, [sp]
   bb48c:	47b0      	blx	r6
   bb48e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb492:	f003 0306 	and.w	r3, r3, #6
   bb496:	2b06      	cmp	r3, #6
   bb498:	bf03      	ittte	eq
   bb49a:	9b00      	ldreq	r3, [sp, #0]
   bb49c:	602b      	streq	r3, [r5, #0]
   bb49e:	2001      	moveq	r0, #1
   bb4a0:	4620      	movne	r0, r4
   bb4a2:	b004      	add	sp, #16
   bb4a4:	bd70      	pop	{r4, r5, r6, pc}

000bb4a6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb4a6:	9800      	ldr	r0, [sp, #0]
   bb4a8:	4290      	cmp	r0, r2
   bb4aa:	bf14      	ite	ne
   bb4ac:	2001      	movne	r0, #1
   bb4ae:	2006      	moveq	r0, #6
   bb4b0:	4770      	bx	lr
	...

000bb4b4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb4b4:	b510      	push	{r4, lr}
   bb4b6:	4b03      	ldr	r3, [pc, #12]	; (bb4c4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb4b8:	6003      	str	r3, [r0, #0]
   bb4ba:	4604      	mov	r4, r0
   bb4bc:	f000 f8cd 	bl	bb65a <_ZNSt9type_infoD1Ev>
   bb4c0:	4620      	mov	r0, r4
   bb4c2:	bd10      	pop	{r4, pc}
   bb4c4:	000bc880 	.word	0x000bc880

000bb4c8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb4c8:	b510      	push	{r4, lr}
   bb4ca:	4604      	mov	r4, r0
   bb4cc:	f7ff fff2 	bl	bb4b4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb4d0:	4620      	mov	r0, r4
   bb4d2:	2108      	movs	r1, #8
   bb4d4:	f7f8 fde1 	bl	b409a <_ZdlPvj>
   bb4d8:	4620      	mov	r0, r4
   bb4da:	bd10      	pop	{r4, pc}

000bb4dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb4e0:	461f      	mov	r7, r3
   bb4e2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb4e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb4ea:	4598      	cmp	r8, r3
   bb4ec:	4606      	mov	r6, r0
   bb4ee:	4615      	mov	r5, r2
   bb4f0:	d107      	bne.n	bb502 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb4f2:	9907      	ldr	r1, [sp, #28]
   bb4f4:	f000 f8b4 	bl	bb660 <_ZNKSt9type_infoeqERKS_>
   bb4f8:	b118      	cbz	r0, bb502 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb4fa:	7165      	strb	r5, [r4, #5]
   bb4fc:	2000      	movs	r0, #0
   bb4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb502:	4639      	mov	r1, r7
   bb504:	4630      	mov	r0, r6
   bb506:	f000 f8ab 	bl	bb660 <_ZNKSt9type_infoeqERKS_>
   bb50a:	2800      	cmp	r0, #0
   bb50c:	d0f6      	beq.n	bb4fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb50e:	2301      	movs	r3, #1
   bb510:	f8c4 8000 	str.w	r8, [r4]
   bb514:	7125      	strb	r5, [r4, #4]
   bb516:	71a3      	strb	r3, [r4, #6]
   bb518:	e7f0      	b.n	bb4fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb51a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb51a:	b538      	push	{r3, r4, r5, lr}
   bb51c:	4615      	mov	r5, r2
   bb51e:	461c      	mov	r4, r3
   bb520:	f000 f89e 	bl	bb660 <_ZNKSt9type_infoeqERKS_>
   bb524:	b120      	cbz	r0, bb530 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb526:	2308      	movs	r3, #8
   bb528:	60e3      	str	r3, [r4, #12]
   bb52a:	2306      	movs	r3, #6
   bb52c:	6025      	str	r5, [r4, #0]
   bb52e:	7123      	strb	r3, [r4, #4]
   bb530:	bd38      	pop	{r3, r4, r5, pc}

000bb532 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb532:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb534:	4605      	mov	r5, r0
   bb536:	460c      	mov	r4, r1
   bb538:	9201      	str	r2, [sp, #4]
   bb53a:	461e      	mov	r6, r3
   bb53c:	f000 f890 	bl	bb660 <_ZNKSt9type_infoeqERKS_>
   bb540:	b950      	cbnz	r0, bb558 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb542:	2e03      	cmp	r6, #3
   bb544:	d808      	bhi.n	bb558 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb546:	6823      	ldr	r3, [r4, #0]
   bb548:	9a01      	ldr	r2, [sp, #4]
   bb54a:	695b      	ldr	r3, [r3, #20]
   bb54c:	4629      	mov	r1, r5
   bb54e:	4620      	mov	r0, r4
   bb550:	b002      	add	sp, #8
   bb552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb556:	4718      	bx	r3
   bb558:	b002      	add	sp, #8
   bb55a:	bd70      	pop	{r4, r5, r6, pc}

000bb55c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb55c:	b510      	push	{r4, lr}
   bb55e:	4b03      	ldr	r3, [pc, #12]	; (bb56c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb560:	6003      	str	r3, [r0, #0]
   bb562:	4604      	mov	r4, r0
   bb564:	f7ff ffa6 	bl	bb4b4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb568:	4620      	mov	r0, r4
   bb56a:	bd10      	pop	{r4, pc}
   bb56c:	000bc8e0 	.word	0x000bc8e0

000bb570 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb570:	b510      	push	{r4, lr}
   bb572:	4604      	mov	r4, r0
   bb574:	f7ff fff2 	bl	bb55c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb578:	4620      	mov	r0, r4
   bb57a:	210c      	movs	r1, #12
   bb57c:	f7f8 fd8d 	bl	b409a <_ZdlPvj>
   bb580:	4620      	mov	r0, r4
   bb582:	bd10      	pop	{r4, pc}

000bb584 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb586:	9f08      	ldr	r7, [sp, #32]
   bb588:	4297      	cmp	r7, r2
   bb58a:	4605      	mov	r5, r0
   bb58c:	460e      	mov	r6, r1
   bb58e:	4614      	mov	r4, r2
   bb590:	d00a      	beq.n	bb5a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb592:	68a8      	ldr	r0, [r5, #8]
   bb594:	6802      	ldr	r2, [r0, #0]
   bb596:	9708      	str	r7, [sp, #32]
   bb598:	6a15      	ldr	r5, [r2, #32]
   bb59a:	4631      	mov	r1, r6
   bb59c:	4622      	mov	r2, r4
   bb59e:	46ac      	mov	ip, r5
   bb5a0:	b003      	add	sp, #12
   bb5a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb5a6:	4760      	bx	ip
   bb5a8:	4619      	mov	r1, r3
   bb5aa:	9301      	str	r3, [sp, #4]
   bb5ac:	f000 f858 	bl	bb660 <_ZNKSt9type_infoeqERKS_>
   bb5b0:	9b01      	ldr	r3, [sp, #4]
   bb5b2:	2800      	cmp	r0, #0
   bb5b4:	d0ed      	beq.n	bb592 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb5b6:	2006      	movs	r0, #6
   bb5b8:	b003      	add	sp, #12
   bb5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb5bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb5bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb5c0:	460d      	mov	r5, r1
   bb5c2:	4619      	mov	r1, r3
   bb5c4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb5c8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb5cc:	4681      	mov	r9, r0
   bb5ce:	4617      	mov	r7, r2
   bb5d0:	4698      	mov	r8, r3
   bb5d2:	f000 f845 	bl	bb660 <_ZNKSt9type_infoeqERKS_>
   bb5d6:	b190      	cbz	r0, bb5fe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb5d8:	2d00      	cmp	r5, #0
   bb5da:	6034      	str	r4, [r6, #0]
   bb5dc:	7137      	strb	r7, [r6, #4]
   bb5de:	db09      	blt.n	bb5f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb5e0:	1961      	adds	r1, r4, r5
   bb5e2:	458a      	cmp	sl, r1
   bb5e4:	bf0c      	ite	eq
   bb5e6:	2106      	moveq	r1, #6
   bb5e8:	2101      	movne	r1, #1
   bb5ea:	71b1      	strb	r1, [r6, #6]
   bb5ec:	2000      	movs	r0, #0
   bb5ee:	b001      	add	sp, #4
   bb5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb5f4:	3502      	adds	r5, #2
   bb5f6:	d1f9      	bne.n	bb5ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb5f8:	2301      	movs	r3, #1
   bb5fa:	71b3      	strb	r3, [r6, #6]
   bb5fc:	e7f6      	b.n	bb5ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb5fe:	4554      	cmp	r4, sl
   bb600:	d106      	bne.n	bb610 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb602:	4659      	mov	r1, fp
   bb604:	4648      	mov	r0, r9
   bb606:	f000 f82b 	bl	bb660 <_ZNKSt9type_infoeqERKS_>
   bb60a:	b108      	cbz	r0, bb610 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb60c:	7177      	strb	r7, [r6, #5]
   bb60e:	e7ed      	b.n	bb5ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb610:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb614:	6803      	ldr	r3, [r0, #0]
   bb616:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb61a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb61e:	69dc      	ldr	r4, [r3, #28]
   bb620:	463a      	mov	r2, r7
   bb622:	4643      	mov	r3, r8
   bb624:	4629      	mov	r1, r5
   bb626:	46a4      	mov	ip, r4
   bb628:	b001      	add	sp, #4
   bb62a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb62e:	4760      	bx	ip

000bb630 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb634:	4607      	mov	r7, r0
   bb636:	460c      	mov	r4, r1
   bb638:	4615      	mov	r5, r2
   bb63a:	461e      	mov	r6, r3
   bb63c:	f7ff ff6d 	bl	bb51a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb640:	b948      	cbnz	r0, bb656 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb642:	68b8      	ldr	r0, [r7, #8]
   bb644:	6803      	ldr	r3, [r0, #0]
   bb646:	699f      	ldr	r7, [r3, #24]
   bb648:	462a      	mov	r2, r5
   bb64a:	4633      	mov	r3, r6
   bb64c:	4621      	mov	r1, r4
   bb64e:	46bc      	mov	ip, r7
   bb650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb654:	4760      	bx	ip
   bb656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb65a <_ZNSt9type_infoD1Ev>:
   bb65a:	4770      	bx	lr

000bb65c <_ZNKSt9type_info14__is_pointer_pEv>:
   bb65c:	2000      	movs	r0, #0
   bb65e:	4770      	bx	lr

000bb660 <_ZNKSt9type_infoeqERKS_>:
   bb660:	4281      	cmp	r1, r0
   bb662:	b508      	push	{r3, lr}
   bb664:	d00e      	beq.n	bb684 <_ZNKSt9type_infoeqERKS_+0x24>
   bb666:	6840      	ldr	r0, [r0, #4]
   bb668:	7803      	ldrb	r3, [r0, #0]
   bb66a:	2b2a      	cmp	r3, #42	; 0x2a
   bb66c:	d00c      	beq.n	bb688 <_ZNKSt9type_infoeqERKS_+0x28>
   bb66e:	6849      	ldr	r1, [r1, #4]
   bb670:	780b      	ldrb	r3, [r1, #0]
   bb672:	2b2a      	cmp	r3, #42	; 0x2a
   bb674:	bf08      	it	eq
   bb676:	3101      	addeq	r1, #1
   bb678:	f000 fbe8 	bl	bbe4c <strcmp>
   bb67c:	fab0 f080 	clz	r0, r0
   bb680:	0940      	lsrs	r0, r0, #5
   bb682:	bd08      	pop	{r3, pc}
   bb684:	2001      	movs	r0, #1
   bb686:	e7fc      	b.n	bb682 <_ZNKSt9type_infoeqERKS_+0x22>
   bb688:	2000      	movs	r0, #0
   bb68a:	e7fa      	b.n	bb682 <_ZNKSt9type_infoeqERKS_+0x22>

000bb68c <__aeabi_drsub>:
   bb68c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb690:	e002      	b.n	bb698 <__adddf3>
   bb692:	bf00      	nop

000bb694 <__aeabi_dsub>:
   bb694:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb698 <__adddf3>:
   bb698:	b530      	push	{r4, r5, lr}
   bb69a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb69e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb6a2:	ea94 0f05 	teq	r4, r5
   bb6a6:	bf08      	it	eq
   bb6a8:	ea90 0f02 	teqeq	r0, r2
   bb6ac:	bf1f      	itttt	ne
   bb6ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb6b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb6b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb6ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb6be:	f000 80e2 	beq.w	bb886 <__adddf3+0x1ee>
   bb6c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb6c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb6ca:	bfb8      	it	lt
   bb6cc:	426d      	neglt	r5, r5
   bb6ce:	dd0c      	ble.n	bb6ea <__adddf3+0x52>
   bb6d0:	442c      	add	r4, r5
   bb6d2:	ea80 0202 	eor.w	r2, r0, r2
   bb6d6:	ea81 0303 	eor.w	r3, r1, r3
   bb6da:	ea82 0000 	eor.w	r0, r2, r0
   bb6de:	ea83 0101 	eor.w	r1, r3, r1
   bb6e2:	ea80 0202 	eor.w	r2, r0, r2
   bb6e6:	ea81 0303 	eor.w	r3, r1, r3
   bb6ea:	2d36      	cmp	r5, #54	; 0x36
   bb6ec:	bf88      	it	hi
   bb6ee:	bd30      	pophi	{r4, r5, pc}
   bb6f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb6f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb6f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb6fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb700:	d002      	beq.n	bb708 <__adddf3+0x70>
   bb702:	4240      	negs	r0, r0
   bb704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb708:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb70c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb710:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb714:	d002      	beq.n	bb71c <__adddf3+0x84>
   bb716:	4252      	negs	r2, r2
   bb718:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb71c:	ea94 0f05 	teq	r4, r5
   bb720:	f000 80a7 	beq.w	bb872 <__adddf3+0x1da>
   bb724:	f1a4 0401 	sub.w	r4, r4, #1
   bb728:	f1d5 0e20 	rsbs	lr, r5, #32
   bb72c:	db0d      	blt.n	bb74a <__adddf3+0xb2>
   bb72e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb732:	fa22 f205 	lsr.w	r2, r2, r5
   bb736:	1880      	adds	r0, r0, r2
   bb738:	f141 0100 	adc.w	r1, r1, #0
   bb73c:	fa03 f20e 	lsl.w	r2, r3, lr
   bb740:	1880      	adds	r0, r0, r2
   bb742:	fa43 f305 	asr.w	r3, r3, r5
   bb746:	4159      	adcs	r1, r3
   bb748:	e00e      	b.n	bb768 <__adddf3+0xd0>
   bb74a:	f1a5 0520 	sub.w	r5, r5, #32
   bb74e:	f10e 0e20 	add.w	lr, lr, #32
   bb752:	2a01      	cmp	r2, #1
   bb754:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb758:	bf28      	it	cs
   bb75a:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb75e:	fa43 f305 	asr.w	r3, r3, r5
   bb762:	18c0      	adds	r0, r0, r3
   bb764:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb76c:	d507      	bpl.n	bb77e <__adddf3+0xe6>
   bb76e:	f04f 0e00 	mov.w	lr, #0
   bb772:	f1dc 0c00 	rsbs	ip, ip, #0
   bb776:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb77a:	eb6e 0101 	sbc.w	r1, lr, r1
   bb77e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb782:	d31b      	bcc.n	bb7bc <__adddf3+0x124>
   bb784:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb788:	d30c      	bcc.n	bb7a4 <__adddf3+0x10c>
   bb78a:	0849      	lsrs	r1, r1, #1
   bb78c:	ea5f 0030 	movs.w	r0, r0, rrx
   bb790:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb794:	f104 0401 	add.w	r4, r4, #1
   bb798:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb79c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb7a0:	f080 809a 	bcs.w	bb8d8 <__adddf3+0x240>
   bb7a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb7a8:	bf08      	it	eq
   bb7aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb7ae:	f150 0000 	adcs.w	r0, r0, #0
   bb7b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb7b6:	ea41 0105 	orr.w	r1, r1, r5
   bb7ba:	bd30      	pop	{r4, r5, pc}
   bb7bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb7c0:	4140      	adcs	r0, r0
   bb7c2:	eb41 0101 	adc.w	r1, r1, r1
   bb7c6:	3c01      	subs	r4, #1
   bb7c8:	bf28      	it	cs
   bb7ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb7ce:	d2e9      	bcs.n	bb7a4 <__adddf3+0x10c>
   bb7d0:	f091 0f00 	teq	r1, #0
   bb7d4:	bf04      	itt	eq
   bb7d6:	4601      	moveq	r1, r0
   bb7d8:	2000      	moveq	r0, #0
   bb7da:	fab1 f381 	clz	r3, r1
   bb7de:	bf08      	it	eq
   bb7e0:	3320      	addeq	r3, #32
   bb7e2:	f1a3 030b 	sub.w	r3, r3, #11
   bb7e6:	f1b3 0220 	subs.w	r2, r3, #32
   bb7ea:	da0c      	bge.n	bb806 <__adddf3+0x16e>
   bb7ec:	320c      	adds	r2, #12
   bb7ee:	dd08      	ble.n	bb802 <__adddf3+0x16a>
   bb7f0:	f102 0c14 	add.w	ip, r2, #20
   bb7f4:	f1c2 020c 	rsb	r2, r2, #12
   bb7f8:	fa01 f00c 	lsl.w	r0, r1, ip
   bb7fc:	fa21 f102 	lsr.w	r1, r1, r2
   bb800:	e00c      	b.n	bb81c <__adddf3+0x184>
   bb802:	f102 0214 	add.w	r2, r2, #20
   bb806:	bfd8      	it	le
   bb808:	f1c2 0c20 	rsble	ip, r2, #32
   bb80c:	fa01 f102 	lsl.w	r1, r1, r2
   bb810:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb814:	bfdc      	itt	le
   bb816:	ea41 010c 	orrle.w	r1, r1, ip
   bb81a:	4090      	lslle	r0, r2
   bb81c:	1ae4      	subs	r4, r4, r3
   bb81e:	bfa2      	ittt	ge
   bb820:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb824:	4329      	orrge	r1, r5
   bb826:	bd30      	popge	{r4, r5, pc}
   bb828:	ea6f 0404 	mvn.w	r4, r4
   bb82c:	3c1f      	subs	r4, #31
   bb82e:	da1c      	bge.n	bb86a <__adddf3+0x1d2>
   bb830:	340c      	adds	r4, #12
   bb832:	dc0e      	bgt.n	bb852 <__adddf3+0x1ba>
   bb834:	f104 0414 	add.w	r4, r4, #20
   bb838:	f1c4 0220 	rsb	r2, r4, #32
   bb83c:	fa20 f004 	lsr.w	r0, r0, r4
   bb840:	fa01 f302 	lsl.w	r3, r1, r2
   bb844:	ea40 0003 	orr.w	r0, r0, r3
   bb848:	fa21 f304 	lsr.w	r3, r1, r4
   bb84c:	ea45 0103 	orr.w	r1, r5, r3
   bb850:	bd30      	pop	{r4, r5, pc}
   bb852:	f1c4 040c 	rsb	r4, r4, #12
   bb856:	f1c4 0220 	rsb	r2, r4, #32
   bb85a:	fa20 f002 	lsr.w	r0, r0, r2
   bb85e:	fa01 f304 	lsl.w	r3, r1, r4
   bb862:	ea40 0003 	orr.w	r0, r0, r3
   bb866:	4629      	mov	r1, r5
   bb868:	bd30      	pop	{r4, r5, pc}
   bb86a:	fa21 f004 	lsr.w	r0, r1, r4
   bb86e:	4629      	mov	r1, r5
   bb870:	bd30      	pop	{r4, r5, pc}
   bb872:	f094 0f00 	teq	r4, #0
   bb876:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb87a:	bf06      	itte	eq
   bb87c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb880:	3401      	addeq	r4, #1
   bb882:	3d01      	subne	r5, #1
   bb884:	e74e      	b.n	bb724 <__adddf3+0x8c>
   bb886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb88a:	bf18      	it	ne
   bb88c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb890:	d029      	beq.n	bb8e6 <__adddf3+0x24e>
   bb892:	ea94 0f05 	teq	r4, r5
   bb896:	bf08      	it	eq
   bb898:	ea90 0f02 	teqeq	r0, r2
   bb89c:	d005      	beq.n	bb8aa <__adddf3+0x212>
   bb89e:	ea54 0c00 	orrs.w	ip, r4, r0
   bb8a2:	bf04      	itt	eq
   bb8a4:	4619      	moveq	r1, r3
   bb8a6:	4610      	moveq	r0, r2
   bb8a8:	bd30      	pop	{r4, r5, pc}
   bb8aa:	ea91 0f03 	teq	r1, r3
   bb8ae:	bf1e      	ittt	ne
   bb8b0:	2100      	movne	r1, #0
   bb8b2:	2000      	movne	r0, #0
   bb8b4:	bd30      	popne	{r4, r5, pc}
   bb8b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb8ba:	d105      	bne.n	bb8c8 <__adddf3+0x230>
   bb8bc:	0040      	lsls	r0, r0, #1
   bb8be:	4149      	adcs	r1, r1
   bb8c0:	bf28      	it	cs
   bb8c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb8c6:	bd30      	pop	{r4, r5, pc}
   bb8c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb8cc:	bf3c      	itt	cc
   bb8ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb8d2:	bd30      	popcc	{r4, r5, pc}
   bb8d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb8d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb8dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb8e0:	f04f 0000 	mov.w	r0, #0
   bb8e4:	bd30      	pop	{r4, r5, pc}
   bb8e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb8ea:	bf1a      	itte	ne
   bb8ec:	4619      	movne	r1, r3
   bb8ee:	4610      	movne	r0, r2
   bb8f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb8f4:	bf1c      	itt	ne
   bb8f6:	460b      	movne	r3, r1
   bb8f8:	4602      	movne	r2, r0
   bb8fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb8fe:	bf06      	itte	eq
   bb900:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb904:	ea91 0f03 	teqeq	r1, r3
   bb908:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb90c:	bd30      	pop	{r4, r5, pc}
   bb90e:	bf00      	nop

000bb910 <__aeabi_ui2d>:
   bb910:	f090 0f00 	teq	r0, #0
   bb914:	bf04      	itt	eq
   bb916:	2100      	moveq	r1, #0
   bb918:	4770      	bxeq	lr
   bb91a:	b530      	push	{r4, r5, lr}
   bb91c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb920:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb924:	f04f 0500 	mov.w	r5, #0
   bb928:	f04f 0100 	mov.w	r1, #0
   bb92c:	e750      	b.n	bb7d0 <__adddf3+0x138>
   bb92e:	bf00      	nop

000bb930 <__aeabi_i2d>:
   bb930:	f090 0f00 	teq	r0, #0
   bb934:	bf04      	itt	eq
   bb936:	2100      	moveq	r1, #0
   bb938:	4770      	bxeq	lr
   bb93a:	b530      	push	{r4, r5, lr}
   bb93c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb940:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb944:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb948:	bf48      	it	mi
   bb94a:	4240      	negmi	r0, r0
   bb94c:	f04f 0100 	mov.w	r1, #0
   bb950:	e73e      	b.n	bb7d0 <__adddf3+0x138>
   bb952:	bf00      	nop

000bb954 <__aeabi_f2d>:
   bb954:	0042      	lsls	r2, r0, #1
   bb956:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb95a:	ea4f 0131 	mov.w	r1, r1, rrx
   bb95e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb962:	bf1f      	itttt	ne
   bb964:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb968:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb96c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb970:	4770      	bxne	lr
   bb972:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb976:	bf08      	it	eq
   bb978:	4770      	bxeq	lr
   bb97a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb97e:	bf04      	itt	eq
   bb980:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb984:	4770      	bxeq	lr
   bb986:	b530      	push	{r4, r5, lr}
   bb988:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb98c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb994:	e71c      	b.n	bb7d0 <__adddf3+0x138>
   bb996:	bf00      	nop

000bb998 <__aeabi_ul2d>:
   bb998:	ea50 0201 	orrs.w	r2, r0, r1
   bb99c:	bf08      	it	eq
   bb99e:	4770      	bxeq	lr
   bb9a0:	b530      	push	{r4, r5, lr}
   bb9a2:	f04f 0500 	mov.w	r5, #0
   bb9a6:	e00a      	b.n	bb9be <__aeabi_l2d+0x16>

000bb9a8 <__aeabi_l2d>:
   bb9a8:	ea50 0201 	orrs.w	r2, r0, r1
   bb9ac:	bf08      	it	eq
   bb9ae:	4770      	bxeq	lr
   bb9b0:	b530      	push	{r4, r5, lr}
   bb9b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb9b6:	d502      	bpl.n	bb9be <__aeabi_l2d+0x16>
   bb9b8:	4240      	negs	r0, r0
   bb9ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb9be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb9c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb9c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb9ca:	f43f aed8 	beq.w	bb77e <__adddf3+0xe6>
   bb9ce:	f04f 0203 	mov.w	r2, #3
   bb9d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb9d6:	bf18      	it	ne
   bb9d8:	3203      	addne	r2, #3
   bb9da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb9de:	bf18      	it	ne
   bb9e0:	3203      	addne	r2, #3
   bb9e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb9e6:	f1c2 0320 	rsb	r3, r2, #32
   bb9ea:	fa00 fc03 	lsl.w	ip, r0, r3
   bb9ee:	fa20 f002 	lsr.w	r0, r0, r2
   bb9f2:	fa01 fe03 	lsl.w	lr, r1, r3
   bb9f6:	ea40 000e 	orr.w	r0, r0, lr
   bb9fa:	fa21 f102 	lsr.w	r1, r1, r2
   bb9fe:	4414      	add	r4, r2
   bba00:	e6bd      	b.n	bb77e <__adddf3+0xe6>
   bba02:	bf00      	nop

000bba04 <__aeabi_uldivmod>:
   bba04:	b953      	cbnz	r3, bba1c <__aeabi_uldivmod+0x18>
   bba06:	b94a      	cbnz	r2, bba1c <__aeabi_uldivmod+0x18>
   bba08:	2900      	cmp	r1, #0
   bba0a:	bf08      	it	eq
   bba0c:	2800      	cmpeq	r0, #0
   bba0e:	bf1c      	itt	ne
   bba10:	f04f 31ff 	movne.w	r1, #4294967295
   bba14:	f04f 30ff 	movne.w	r0, #4294967295
   bba18:	f000 b974 	b.w	bbd04 <__aeabi_idiv0>
   bba1c:	f1ad 0c08 	sub.w	ip, sp, #8
   bba20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   bba24:	f000 f806 	bl	bba34 <__udivmoddi4>
   bba28:	f8dd e004 	ldr.w	lr, [sp, #4]
   bba2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bba30:	b004      	add	sp, #16
   bba32:	4770      	bx	lr

000bba34 <__udivmoddi4>:
   bba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bba38:	9d08      	ldr	r5, [sp, #32]
   bba3a:	4604      	mov	r4, r0
   bba3c:	468e      	mov	lr, r1
   bba3e:	2b00      	cmp	r3, #0
   bba40:	d14d      	bne.n	bbade <__udivmoddi4+0xaa>
   bba42:	428a      	cmp	r2, r1
   bba44:	4694      	mov	ip, r2
   bba46:	d969      	bls.n	bbb1c <__udivmoddi4+0xe8>
   bba48:	fab2 f282 	clz	r2, r2
   bba4c:	b152      	cbz	r2, bba64 <__udivmoddi4+0x30>
   bba4e:	fa01 f302 	lsl.w	r3, r1, r2
   bba52:	f1c2 0120 	rsb	r1, r2, #32
   bba56:	fa20 f101 	lsr.w	r1, r0, r1
   bba5a:	fa0c fc02 	lsl.w	ip, ip, r2
   bba5e:	ea41 0e03 	orr.w	lr, r1, r3
   bba62:	4094      	lsls	r4, r2
   bba64:	ea4f 481c 	mov.w	r8, ip, lsr #16
   bba68:	0c21      	lsrs	r1, r4, #16
   bba6a:	fbbe f6f8 	udiv	r6, lr, r8
   bba6e:	fa1f f78c 	uxth.w	r7, ip
   bba72:	fb08 e316 	mls	r3, r8, r6, lr
   bba76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   bba7a:	fb06 f107 	mul.w	r1, r6, r7
   bba7e:	4299      	cmp	r1, r3
   bba80:	d90a      	bls.n	bba98 <__udivmoddi4+0x64>
   bba82:	eb1c 0303 	adds.w	r3, ip, r3
   bba86:	f106 30ff 	add.w	r0, r6, #4294967295
   bba8a:	f080 811f 	bcs.w	bbccc <__udivmoddi4+0x298>
   bba8e:	4299      	cmp	r1, r3
   bba90:	f240 811c 	bls.w	bbccc <__udivmoddi4+0x298>
   bba94:	3e02      	subs	r6, #2
   bba96:	4463      	add	r3, ip
   bba98:	1a5b      	subs	r3, r3, r1
   bba9a:	b2a4      	uxth	r4, r4
   bba9c:	fbb3 f0f8 	udiv	r0, r3, r8
   bbaa0:	fb08 3310 	mls	r3, r8, r0, r3
   bbaa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   bbaa8:	fb00 f707 	mul.w	r7, r0, r7
   bbaac:	42a7      	cmp	r7, r4
   bbaae:	d90a      	bls.n	bbac6 <__udivmoddi4+0x92>
   bbab0:	eb1c 0404 	adds.w	r4, ip, r4
   bbab4:	f100 33ff 	add.w	r3, r0, #4294967295
   bbab8:	f080 810a 	bcs.w	bbcd0 <__udivmoddi4+0x29c>
   bbabc:	42a7      	cmp	r7, r4
   bbabe:	f240 8107 	bls.w	bbcd0 <__udivmoddi4+0x29c>
   bbac2:	4464      	add	r4, ip
   bbac4:	3802      	subs	r0, #2
   bbac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   bbaca:	1be4      	subs	r4, r4, r7
   bbacc:	2600      	movs	r6, #0
   bbace:	b11d      	cbz	r5, bbad8 <__udivmoddi4+0xa4>
   bbad0:	40d4      	lsrs	r4, r2
   bbad2:	2300      	movs	r3, #0
   bbad4:	e9c5 4300 	strd	r4, r3, [r5]
   bbad8:	4631      	mov	r1, r6
   bbada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbade:	428b      	cmp	r3, r1
   bbae0:	d909      	bls.n	bbaf6 <__udivmoddi4+0xc2>
   bbae2:	2d00      	cmp	r5, #0
   bbae4:	f000 80ef 	beq.w	bbcc6 <__udivmoddi4+0x292>
   bbae8:	2600      	movs	r6, #0
   bbaea:	e9c5 0100 	strd	r0, r1, [r5]
   bbaee:	4630      	mov	r0, r6
   bbaf0:	4631      	mov	r1, r6
   bbaf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbaf6:	fab3 f683 	clz	r6, r3
   bbafa:	2e00      	cmp	r6, #0
   bbafc:	d14a      	bne.n	bbb94 <__udivmoddi4+0x160>
   bbafe:	428b      	cmp	r3, r1
   bbb00:	d302      	bcc.n	bbb08 <__udivmoddi4+0xd4>
   bbb02:	4282      	cmp	r2, r0
   bbb04:	f200 80f9 	bhi.w	bbcfa <__udivmoddi4+0x2c6>
   bbb08:	1a84      	subs	r4, r0, r2
   bbb0a:	eb61 0303 	sbc.w	r3, r1, r3
   bbb0e:	2001      	movs	r0, #1
   bbb10:	469e      	mov	lr, r3
   bbb12:	2d00      	cmp	r5, #0
   bbb14:	d0e0      	beq.n	bbad8 <__udivmoddi4+0xa4>
   bbb16:	e9c5 4e00 	strd	r4, lr, [r5]
   bbb1a:	e7dd      	b.n	bbad8 <__udivmoddi4+0xa4>
   bbb1c:	b902      	cbnz	r2, bbb20 <__udivmoddi4+0xec>
   bbb1e:	deff      	udf	#255	; 0xff
   bbb20:	fab2 f282 	clz	r2, r2
   bbb24:	2a00      	cmp	r2, #0
   bbb26:	f040 8092 	bne.w	bbc4e <__udivmoddi4+0x21a>
   bbb2a:	eba1 010c 	sub.w	r1, r1, ip
   bbb2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bbb32:	fa1f fe8c 	uxth.w	lr, ip
   bbb36:	2601      	movs	r6, #1
   bbb38:	0c20      	lsrs	r0, r4, #16
   bbb3a:	fbb1 f3f7 	udiv	r3, r1, r7
   bbb3e:	fb07 1113 	mls	r1, r7, r3, r1
   bbb42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bbb46:	fb0e f003 	mul.w	r0, lr, r3
   bbb4a:	4288      	cmp	r0, r1
   bbb4c:	d908      	bls.n	bbb60 <__udivmoddi4+0x12c>
   bbb4e:	eb1c 0101 	adds.w	r1, ip, r1
   bbb52:	f103 38ff 	add.w	r8, r3, #4294967295
   bbb56:	d202      	bcs.n	bbb5e <__udivmoddi4+0x12a>
   bbb58:	4288      	cmp	r0, r1
   bbb5a:	f200 80cb 	bhi.w	bbcf4 <__udivmoddi4+0x2c0>
   bbb5e:	4643      	mov	r3, r8
   bbb60:	1a09      	subs	r1, r1, r0
   bbb62:	b2a4      	uxth	r4, r4
   bbb64:	fbb1 f0f7 	udiv	r0, r1, r7
   bbb68:	fb07 1110 	mls	r1, r7, r0, r1
   bbb6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   bbb70:	fb0e fe00 	mul.w	lr, lr, r0
   bbb74:	45a6      	cmp	lr, r4
   bbb76:	d908      	bls.n	bbb8a <__udivmoddi4+0x156>
   bbb78:	eb1c 0404 	adds.w	r4, ip, r4
   bbb7c:	f100 31ff 	add.w	r1, r0, #4294967295
   bbb80:	d202      	bcs.n	bbb88 <__udivmoddi4+0x154>
   bbb82:	45a6      	cmp	lr, r4
   bbb84:	f200 80bb 	bhi.w	bbcfe <__udivmoddi4+0x2ca>
   bbb88:	4608      	mov	r0, r1
   bbb8a:	eba4 040e 	sub.w	r4, r4, lr
   bbb8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   bbb92:	e79c      	b.n	bbace <__udivmoddi4+0x9a>
   bbb94:	f1c6 0720 	rsb	r7, r6, #32
   bbb98:	40b3      	lsls	r3, r6
   bbb9a:	fa22 fc07 	lsr.w	ip, r2, r7
   bbb9e:	ea4c 0c03 	orr.w	ip, ip, r3
   bbba2:	fa20 f407 	lsr.w	r4, r0, r7
   bbba6:	fa01 f306 	lsl.w	r3, r1, r6
   bbbaa:	431c      	orrs	r4, r3
   bbbac:	40f9      	lsrs	r1, r7
   bbbae:	ea4f 491c 	mov.w	r9, ip, lsr #16
   bbbb2:	fa00 f306 	lsl.w	r3, r0, r6
   bbbb6:	fbb1 f8f9 	udiv	r8, r1, r9
   bbbba:	0c20      	lsrs	r0, r4, #16
   bbbbc:	fa1f fe8c 	uxth.w	lr, ip
   bbbc0:	fb09 1118 	mls	r1, r9, r8, r1
   bbbc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bbbc8:	fb08 f00e 	mul.w	r0, r8, lr
   bbbcc:	4288      	cmp	r0, r1
   bbbce:	fa02 f206 	lsl.w	r2, r2, r6
   bbbd2:	d90b      	bls.n	bbbec <__udivmoddi4+0x1b8>
   bbbd4:	eb1c 0101 	adds.w	r1, ip, r1
   bbbd8:	f108 3aff 	add.w	sl, r8, #4294967295
   bbbdc:	f080 8088 	bcs.w	bbcf0 <__udivmoddi4+0x2bc>
   bbbe0:	4288      	cmp	r0, r1
   bbbe2:	f240 8085 	bls.w	bbcf0 <__udivmoddi4+0x2bc>
   bbbe6:	f1a8 0802 	sub.w	r8, r8, #2
   bbbea:	4461      	add	r1, ip
   bbbec:	1a09      	subs	r1, r1, r0
   bbbee:	b2a4      	uxth	r4, r4
   bbbf0:	fbb1 f0f9 	udiv	r0, r1, r9
   bbbf4:	fb09 1110 	mls	r1, r9, r0, r1
   bbbf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   bbbfc:	fb00 fe0e 	mul.w	lr, r0, lr
   bbc00:	458e      	cmp	lr, r1
   bbc02:	d908      	bls.n	bbc16 <__udivmoddi4+0x1e2>
   bbc04:	eb1c 0101 	adds.w	r1, ip, r1
   bbc08:	f100 34ff 	add.w	r4, r0, #4294967295
   bbc0c:	d26c      	bcs.n	bbce8 <__udivmoddi4+0x2b4>
   bbc0e:	458e      	cmp	lr, r1
   bbc10:	d96a      	bls.n	bbce8 <__udivmoddi4+0x2b4>
   bbc12:	3802      	subs	r0, #2
   bbc14:	4461      	add	r1, ip
   bbc16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   bbc1a:	fba0 9402 	umull	r9, r4, r0, r2
   bbc1e:	eba1 010e 	sub.w	r1, r1, lr
   bbc22:	42a1      	cmp	r1, r4
   bbc24:	46c8      	mov	r8, r9
   bbc26:	46a6      	mov	lr, r4
   bbc28:	d356      	bcc.n	bbcd8 <__udivmoddi4+0x2a4>
   bbc2a:	d053      	beq.n	bbcd4 <__udivmoddi4+0x2a0>
   bbc2c:	b15d      	cbz	r5, bbc46 <__udivmoddi4+0x212>
   bbc2e:	ebb3 0208 	subs.w	r2, r3, r8
   bbc32:	eb61 010e 	sbc.w	r1, r1, lr
   bbc36:	fa01 f707 	lsl.w	r7, r1, r7
   bbc3a:	fa22 f306 	lsr.w	r3, r2, r6
   bbc3e:	40f1      	lsrs	r1, r6
   bbc40:	431f      	orrs	r7, r3
   bbc42:	e9c5 7100 	strd	r7, r1, [r5]
   bbc46:	2600      	movs	r6, #0
   bbc48:	4631      	mov	r1, r6
   bbc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbc4e:	f1c2 0320 	rsb	r3, r2, #32
   bbc52:	40d8      	lsrs	r0, r3
   bbc54:	fa0c fc02 	lsl.w	ip, ip, r2
   bbc58:	fa21 f303 	lsr.w	r3, r1, r3
   bbc5c:	4091      	lsls	r1, r2
   bbc5e:	4301      	orrs	r1, r0
   bbc60:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bbc64:	fa1f fe8c 	uxth.w	lr, ip
   bbc68:	fbb3 f0f7 	udiv	r0, r3, r7
   bbc6c:	fb07 3610 	mls	r6, r7, r0, r3
   bbc70:	0c0b      	lsrs	r3, r1, #16
   bbc72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   bbc76:	fb00 f60e 	mul.w	r6, r0, lr
   bbc7a:	429e      	cmp	r6, r3
   bbc7c:	fa04 f402 	lsl.w	r4, r4, r2
   bbc80:	d908      	bls.n	bbc94 <__udivmoddi4+0x260>
   bbc82:	eb1c 0303 	adds.w	r3, ip, r3
   bbc86:	f100 38ff 	add.w	r8, r0, #4294967295
   bbc8a:	d22f      	bcs.n	bbcec <__udivmoddi4+0x2b8>
   bbc8c:	429e      	cmp	r6, r3
   bbc8e:	d92d      	bls.n	bbcec <__udivmoddi4+0x2b8>
   bbc90:	3802      	subs	r0, #2
   bbc92:	4463      	add	r3, ip
   bbc94:	1b9b      	subs	r3, r3, r6
   bbc96:	b289      	uxth	r1, r1
   bbc98:	fbb3 f6f7 	udiv	r6, r3, r7
   bbc9c:	fb07 3316 	mls	r3, r7, r6, r3
   bbca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   bbca4:	fb06 f30e 	mul.w	r3, r6, lr
   bbca8:	428b      	cmp	r3, r1
   bbcaa:	d908      	bls.n	bbcbe <__udivmoddi4+0x28a>
   bbcac:	eb1c 0101 	adds.w	r1, ip, r1
   bbcb0:	f106 38ff 	add.w	r8, r6, #4294967295
   bbcb4:	d216      	bcs.n	bbce4 <__udivmoddi4+0x2b0>
   bbcb6:	428b      	cmp	r3, r1
   bbcb8:	d914      	bls.n	bbce4 <__udivmoddi4+0x2b0>
   bbcba:	3e02      	subs	r6, #2
   bbcbc:	4461      	add	r1, ip
   bbcbe:	1ac9      	subs	r1, r1, r3
   bbcc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   bbcc4:	e738      	b.n	bbb38 <__udivmoddi4+0x104>
   bbcc6:	462e      	mov	r6, r5
   bbcc8:	4628      	mov	r0, r5
   bbcca:	e705      	b.n	bbad8 <__udivmoddi4+0xa4>
   bbccc:	4606      	mov	r6, r0
   bbcce:	e6e3      	b.n	bba98 <__udivmoddi4+0x64>
   bbcd0:	4618      	mov	r0, r3
   bbcd2:	e6f8      	b.n	bbac6 <__udivmoddi4+0x92>
   bbcd4:	454b      	cmp	r3, r9
   bbcd6:	d2a9      	bcs.n	bbc2c <__udivmoddi4+0x1f8>
   bbcd8:	ebb9 0802 	subs.w	r8, r9, r2
   bbcdc:	eb64 0e0c 	sbc.w	lr, r4, ip
   bbce0:	3801      	subs	r0, #1
   bbce2:	e7a3      	b.n	bbc2c <__udivmoddi4+0x1f8>
   bbce4:	4646      	mov	r6, r8
   bbce6:	e7ea      	b.n	bbcbe <__udivmoddi4+0x28a>
   bbce8:	4620      	mov	r0, r4
   bbcea:	e794      	b.n	bbc16 <__udivmoddi4+0x1e2>
   bbcec:	4640      	mov	r0, r8
   bbcee:	e7d1      	b.n	bbc94 <__udivmoddi4+0x260>
   bbcf0:	46d0      	mov	r8, sl
   bbcf2:	e77b      	b.n	bbbec <__udivmoddi4+0x1b8>
   bbcf4:	3b02      	subs	r3, #2
   bbcf6:	4461      	add	r1, ip
   bbcf8:	e732      	b.n	bbb60 <__udivmoddi4+0x12c>
   bbcfa:	4630      	mov	r0, r6
   bbcfc:	e709      	b.n	bbb12 <__udivmoddi4+0xde>
   bbcfe:	4464      	add	r4, ip
   bbd00:	3802      	subs	r0, #2
   bbd02:	e742      	b.n	bbb8a <__udivmoddi4+0x156>

000bbd04 <__aeabi_idiv0>:
   bbd04:	4770      	bx	lr
   bbd06:	bf00      	nop

000bbd08 <asctime_r>:
   bbd08:	b510      	push	{r4, lr}
   bbd0a:	460c      	mov	r4, r1
   bbd0c:	6941      	ldr	r1, [r0, #20]
   bbd0e:	6903      	ldr	r3, [r0, #16]
   bbd10:	6982      	ldr	r2, [r0, #24]
   bbd12:	b086      	sub	sp, #24
   bbd14:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bbd18:	9104      	str	r1, [sp, #16]
   bbd1a:	6801      	ldr	r1, [r0, #0]
   bbd1c:	9103      	str	r1, [sp, #12]
   bbd1e:	6841      	ldr	r1, [r0, #4]
   bbd20:	9102      	str	r1, [sp, #8]
   bbd22:	6881      	ldr	r1, [r0, #8]
   bbd24:	9101      	str	r1, [sp, #4]
   bbd26:	68c1      	ldr	r1, [r0, #12]
   bbd28:	9100      	str	r1, [sp, #0]
   bbd2a:	4907      	ldr	r1, [pc, #28]	; (bbd48 <asctime_r+0x40>)
   bbd2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bbd30:	440b      	add	r3, r1
   bbd32:	4906      	ldr	r1, [pc, #24]	; (bbd4c <asctime_r+0x44>)
   bbd34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bbd38:	440a      	add	r2, r1
   bbd3a:	4620      	mov	r0, r4
   bbd3c:	4904      	ldr	r1, [pc, #16]	; (bbd50 <asctime_r+0x48>)
   bbd3e:	f7fb fd0b 	bl	b7758 <siprintf>
   bbd42:	4620      	mov	r0, r4
   bbd44:	b006      	add	sp, #24
   bbd46:	bd10      	pop	{r4, pc}
   bbd48:	000bc94e 	.word	0x000bc94e
   bbd4c:	000bc939 	.word	0x000bc939
   bbd50:	000bc919 	.word	0x000bc919

000bbd54 <atexit>:
   bbd54:	2300      	movs	r3, #0
   bbd56:	4601      	mov	r1, r0
   bbd58:	461a      	mov	r2, r3
   bbd5a:	4618      	mov	r0, r3
   bbd5c:	f000 b8ba 	b.w	bbed4 <__register_exitproc>

000bbd60 <isprint>:
   bbd60:	4b02      	ldr	r3, [pc, #8]	; (bbd6c <isprint+0xc>)
   bbd62:	4418      	add	r0, r3
   bbd64:	7840      	ldrb	r0, [r0, #1]
   bbd66:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbd6a:	4770      	bx	lr
   bbd6c:	000bca06 	.word	0x000bca06

000bbd70 <memcmp>:
   bbd70:	b510      	push	{r4, lr}
   bbd72:	3901      	subs	r1, #1
   bbd74:	4402      	add	r2, r0
   bbd76:	4290      	cmp	r0, r2
   bbd78:	d101      	bne.n	bbd7e <memcmp+0xe>
   bbd7a:	2000      	movs	r0, #0
   bbd7c:	e005      	b.n	bbd8a <memcmp+0x1a>
   bbd7e:	7803      	ldrb	r3, [r0, #0]
   bbd80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbd84:	42a3      	cmp	r3, r4
   bbd86:	d001      	beq.n	bbd8c <memcmp+0x1c>
   bbd88:	1b18      	subs	r0, r3, r4
   bbd8a:	bd10      	pop	{r4, pc}
   bbd8c:	3001      	adds	r0, #1
   bbd8e:	e7f2      	b.n	bbd76 <memcmp+0x6>

000bbd90 <memcpy>:
   bbd90:	440a      	add	r2, r1
   bbd92:	4291      	cmp	r1, r2
   bbd94:	f100 33ff 	add.w	r3, r0, #4294967295
   bbd98:	d100      	bne.n	bbd9c <memcpy+0xc>
   bbd9a:	4770      	bx	lr
   bbd9c:	b510      	push	{r4, lr}
   bbd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbda2:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbda6:	4291      	cmp	r1, r2
   bbda8:	d1f9      	bne.n	bbd9e <memcpy+0xe>
   bbdaa:	bd10      	pop	{r4, pc}

000bbdac <memmove>:
   bbdac:	4288      	cmp	r0, r1
   bbdae:	b510      	push	{r4, lr}
   bbdb0:	eb01 0402 	add.w	r4, r1, r2
   bbdb4:	d902      	bls.n	bbdbc <memmove+0x10>
   bbdb6:	4284      	cmp	r4, r0
   bbdb8:	4623      	mov	r3, r4
   bbdba:	d807      	bhi.n	bbdcc <memmove+0x20>
   bbdbc:	1e43      	subs	r3, r0, #1
   bbdbe:	42a1      	cmp	r1, r4
   bbdc0:	d008      	beq.n	bbdd4 <memmove+0x28>
   bbdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbdca:	e7f8      	b.n	bbdbe <memmove+0x12>
   bbdcc:	4402      	add	r2, r0
   bbdce:	4601      	mov	r1, r0
   bbdd0:	428a      	cmp	r2, r1
   bbdd2:	d100      	bne.n	bbdd6 <memmove+0x2a>
   bbdd4:	bd10      	pop	{r4, pc}
   bbdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbdde:	e7f7      	b.n	bbdd0 <memmove+0x24>

000bbde0 <memset>:
   bbde0:	4402      	add	r2, r0
   bbde2:	4603      	mov	r3, r0
   bbde4:	4293      	cmp	r3, r2
   bbde6:	d100      	bne.n	bbdea <memset+0xa>
   bbde8:	4770      	bx	lr
   bbdea:	f803 1b01 	strb.w	r1, [r3], #1
   bbdee:	e7f9      	b.n	bbde4 <memset+0x4>

000bbdf0 <srand>:
   bbdf0:	b538      	push	{r3, r4, r5, lr}
   bbdf2:	4b10      	ldr	r3, [pc, #64]	; (bbe34 <srand+0x44>)
   bbdf4:	681d      	ldr	r5, [r3, #0]
   bbdf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbdf8:	4604      	mov	r4, r0
   bbdfa:	b9b3      	cbnz	r3, bbe2a <srand+0x3a>
   bbdfc:	2018      	movs	r0, #24
   bbdfe:	f7fb fc93 	bl	b7728 <malloc>
   bbe02:	4602      	mov	r2, r0
   bbe04:	63a8      	str	r0, [r5, #56]	; 0x38
   bbe06:	b920      	cbnz	r0, bbe12 <srand+0x22>
   bbe08:	4b0b      	ldr	r3, [pc, #44]	; (bbe38 <srand+0x48>)
   bbe0a:	480c      	ldr	r0, [pc, #48]	; (bbe3c <srand+0x4c>)
   bbe0c:	2142      	movs	r1, #66	; 0x42
   bbe0e:	f7fb fccb 	bl	b77a8 <__assert_func>
   bbe12:	490b      	ldr	r1, [pc, #44]	; (bbe40 <srand+0x50>)
   bbe14:	4b0b      	ldr	r3, [pc, #44]	; (bbe44 <srand+0x54>)
   bbe16:	e9c0 1300 	strd	r1, r3, [r0]
   bbe1a:	4b0b      	ldr	r3, [pc, #44]	; (bbe48 <srand+0x58>)
   bbe1c:	6083      	str	r3, [r0, #8]
   bbe1e:	230b      	movs	r3, #11
   bbe20:	8183      	strh	r3, [r0, #12]
   bbe22:	2100      	movs	r1, #0
   bbe24:	2001      	movs	r0, #1
   bbe26:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbe2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbe2c:	2200      	movs	r2, #0
   bbe2e:	611c      	str	r4, [r3, #16]
   bbe30:	615a      	str	r2, [r3, #20]
   bbe32:	bd38      	pop	{r3, r4, r5, pc}
   bbe34:	2003e5ac 	.word	0x2003e5ac
   bbe38:	000bc972 	.word	0x000bc972
   bbe3c:	000bc989 	.word	0x000bc989
   bbe40:	abcd330e 	.word	0xabcd330e
   bbe44:	e66d1234 	.word	0xe66d1234
   bbe48:	0005deec 	.word	0x0005deec

000bbe4c <strcmp>:
   bbe4c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbe50:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbe54:	2a01      	cmp	r2, #1
   bbe56:	bf28      	it	cs
   bbe58:	429a      	cmpcs	r2, r3
   bbe5a:	d0f7      	beq.n	bbe4c <strcmp>
   bbe5c:	1ad0      	subs	r0, r2, r3
   bbe5e:	4770      	bx	lr

000bbe60 <strcpy>:
   bbe60:	4603      	mov	r3, r0
   bbe62:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbe66:	f803 2b01 	strb.w	r2, [r3], #1
   bbe6a:	2a00      	cmp	r2, #0
   bbe6c:	d1f9      	bne.n	bbe62 <strcpy+0x2>
   bbe6e:	4770      	bx	lr

000bbe70 <strdup>:
   bbe70:	4b02      	ldr	r3, [pc, #8]	; (bbe7c <strdup+0xc>)
   bbe72:	4601      	mov	r1, r0
   bbe74:	6818      	ldr	r0, [r3, #0]
   bbe76:	f000 b803 	b.w	bbe80 <_strdup_r>
   bbe7a:	bf00      	nop
   bbe7c:	2003e5ac 	.word	0x2003e5ac

000bbe80 <_strdup_r>:
   bbe80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbe82:	4604      	mov	r4, r0
   bbe84:	4608      	mov	r0, r1
   bbe86:	460d      	mov	r5, r1
   bbe88:	f000 f80f 	bl	bbeaa <strlen>
   bbe8c:	1c42      	adds	r2, r0, #1
   bbe8e:	4611      	mov	r1, r2
   bbe90:	4620      	mov	r0, r4
   bbe92:	9201      	str	r2, [sp, #4]
   bbe94:	f7fb fc80 	bl	b7798 <_malloc_r>
   bbe98:	4604      	mov	r4, r0
   bbe9a:	b118      	cbz	r0, bbea4 <_strdup_r+0x24>
   bbe9c:	9a01      	ldr	r2, [sp, #4]
   bbe9e:	4629      	mov	r1, r5
   bbea0:	f7ff ff76 	bl	bbd90 <memcpy>
   bbea4:	4620      	mov	r0, r4
   bbea6:	b003      	add	sp, #12
   bbea8:	bd30      	pop	{r4, r5, pc}

000bbeaa <strlen>:
   bbeaa:	4603      	mov	r3, r0
   bbeac:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbeb0:	2a00      	cmp	r2, #0
   bbeb2:	d1fb      	bne.n	bbeac <strlen+0x2>
   bbeb4:	1a18      	subs	r0, r3, r0
   bbeb6:	3801      	subs	r0, #1
   bbeb8:	4770      	bx	lr

000bbeba <strnlen>:
   bbeba:	b510      	push	{r4, lr}
   bbebc:	4602      	mov	r2, r0
   bbebe:	4401      	add	r1, r0
   bbec0:	428a      	cmp	r2, r1
   bbec2:	4613      	mov	r3, r2
   bbec4:	d003      	beq.n	bbece <strnlen+0x14>
   bbec6:	781c      	ldrb	r4, [r3, #0]
   bbec8:	3201      	adds	r2, #1
   bbeca:	2c00      	cmp	r4, #0
   bbecc:	d1f8      	bne.n	bbec0 <strnlen+0x6>
   bbece:	1a18      	subs	r0, r3, r0
   bbed0:	bd10      	pop	{r4, pc}
	...

000bbed4 <__register_exitproc>:
   bbed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbed8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbf94 <__register_exitproc+0xc0>
   bbedc:	4606      	mov	r6, r0
   bbede:	f8d8 0000 	ldr.w	r0, [r8]
   bbee2:	461f      	mov	r7, r3
   bbee4:	460d      	mov	r5, r1
   bbee6:	4691      	mov	r9, r2
   bbee8:	f000 f856 	bl	bbf98 <__retarget_lock_acquire_recursive>
   bbeec:	4b25      	ldr	r3, [pc, #148]	; (bbf84 <__register_exitproc+0xb0>)
   bbeee:	681c      	ldr	r4, [r3, #0]
   bbef0:	b934      	cbnz	r4, bbf00 <__register_exitproc+0x2c>
   bbef2:	4c25      	ldr	r4, [pc, #148]	; (bbf88 <__register_exitproc+0xb4>)
   bbef4:	601c      	str	r4, [r3, #0]
   bbef6:	4b25      	ldr	r3, [pc, #148]	; (bbf8c <__register_exitproc+0xb8>)
   bbef8:	b113      	cbz	r3, bbf00 <__register_exitproc+0x2c>
   bbefa:	681b      	ldr	r3, [r3, #0]
   bbefc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbf00:	6863      	ldr	r3, [r4, #4]
   bbf02:	2b1f      	cmp	r3, #31
   bbf04:	dd07      	ble.n	bbf16 <__register_exitproc+0x42>
   bbf06:	f8d8 0000 	ldr.w	r0, [r8]
   bbf0a:	f000 f847 	bl	bbf9c <__retarget_lock_release_recursive>
   bbf0e:	f04f 30ff 	mov.w	r0, #4294967295
   bbf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbf16:	b34e      	cbz	r6, bbf6c <__register_exitproc+0x98>
   bbf18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbf1c:	b988      	cbnz	r0, bbf42 <__register_exitproc+0x6e>
   bbf1e:	4b1c      	ldr	r3, [pc, #112]	; (bbf90 <__register_exitproc+0xbc>)
   bbf20:	b923      	cbnz	r3, bbf2c <__register_exitproc+0x58>
   bbf22:	f8d8 0000 	ldr.w	r0, [r8]
   bbf26:	f000 f838 	bl	bbf9a <__retarget_lock_release>
   bbf2a:	e7f0      	b.n	bbf0e <__register_exitproc+0x3a>
   bbf2c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbf30:	f7fb fbfa 	bl	b7728 <malloc>
   bbf34:	2800      	cmp	r0, #0
   bbf36:	d0f4      	beq.n	bbf22 <__register_exitproc+0x4e>
   bbf38:	2300      	movs	r3, #0
   bbf3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbf3e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbf42:	6863      	ldr	r3, [r4, #4]
   bbf44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbf48:	2201      	movs	r2, #1
   bbf4a:	409a      	lsls	r2, r3
   bbf4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbf50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbf54:	4313      	orrs	r3, r2
   bbf56:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbf5a:	2e02      	cmp	r6, #2
   bbf5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbf60:	bf02      	ittt	eq
   bbf62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbf66:	4313      	orreq	r3, r2
   bbf68:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbf6c:	6863      	ldr	r3, [r4, #4]
   bbf6e:	f8d8 0000 	ldr.w	r0, [r8]
   bbf72:	1c5a      	adds	r2, r3, #1
   bbf74:	3302      	adds	r3, #2
   bbf76:	6062      	str	r2, [r4, #4]
   bbf78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbf7c:	f000 f80e 	bl	bbf9c <__retarget_lock_release_recursive>
   bbf80:	2000      	movs	r0, #0
   bbf82:	e7c6      	b.n	bbf12 <__register_exitproc+0x3e>
   bbf84:	2003e7ec 	.word	0x2003e7ec
   bbf88:	2003e760 	.word	0x2003e760
   bbf8c:	00000000 	.word	0x00000000
   bbf90:	000b7729 	.word	0x000b7729
   bbf94:	2003e610 	.word	0x2003e610

000bbf98 <__retarget_lock_acquire_recursive>:
   bbf98:	4770      	bx	lr

000bbf9a <__retarget_lock_release>:
   bbf9a:	4770      	bx	lr

000bbf9c <__retarget_lock_release_recursive>:
   bbf9c:	4770      	bx	lr

000bbf9e <link_code_end>:
	...

000bbfa0 <dynalib_user>:
   bbfa0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   bbfb0:	0000 0000 7773 7469 6863 654c 0064 654c     ....switchLed.Le
   bbfc0:	5364 6174 7574 0073 7453 7261 2074 6373     dStatus.Start sc
   bbfd0:	6e61 696e 676e 5000 4552 4553 544e 4100     anning.PRESENT.A
   bbfe0:	5342 4e45 0054 0a0a 6e45 6574 6972 676e     BSENT...Entering
   bbff0:	4320 6c61 626c 6361 006b 227b 7575 6469      Callback.{"uuid
   bc000:	3a22 0022 2c22 6922 736e 6469 2265 223a     ":".","inside":"
   bc010:	2200 222c 6974 656d 3a22 0022 7d22 5000     .","time":"."}.P
   bc020:	4255 494c 4853 4445 2500 2073 7369 2520     UBLISHED.%s is %
   bc030:	2073 3a3a 2520 0a73 0000 0000               s :: %s.....

000bc03c <_ZTV6Beacon>:
	...
   bc044:	40d5 000b 40af 000b 6574 706d 6200 7475     .@...@..temp.but
   bc054:	6f74 006e 5f78 7861 7369 7900 615f 6978     ton.x_axis.y_axi
   bc064:	0073 5f7a 7861 7369 7200 7373 0069 0000     s.z_axis.rssi...

000bc074 <_ZTV10KontaktTag>:
	...
   bc07c:	49fd 000b 4b05 000b 616d 6e67 7465 6e5f     .I...K..magnet_n
   bc08c:	6165 0072 6572 6f63 6472 5200 6365 6965     ear.record.Recei
   bc09c:	6576 2064 6425 6220 7479 7365 6a00 6f73     ved %d bytes.jso
   bc0ac:	726e 6370 3200 302e 6d00 7465 6f68 0064     nrpc.2.0.method.
   bc0bc:	6573 0074 6170 6172 736d 7300 6e65 6f73     set.params.senso
   bc0cc:	4e72 6d61 0065 6574 706d 7265 7461 7275     rName.temperatur
   bc0dc:	5365 6e65 6573 6e49 6574 7672 6c61 6200     eSenseInterval.b
   bc0ec:	7461 6574 7972 6553 736e 4965 746e 7265     atterySenseInter
   bc0fc:	6176 006c 6968 6867 6554 706d 7265 7461     val.highTemperat
   bc10c:	7275 4165 616c 6d72 6854 6572 6873 6c6f     ureAlarmThreshol
   bc11c:	3164 6800 6769 5468 6d65 6570 6172 7574     d1.highTemperatu
   bc12c:	6572 6c41 7261 546d 7268 7365 6f68 646c     reAlarmThreshold
   bc13c:	0032 6f6c 5477 6d65 6570 6172 7574 6572     2.lowTemperature
   bc14c:	6c41 7261 546d 7268 7365 6f68 646c 0031     AlarmThreshold1.
   bc15c:	6f6c 5477 6d65 6570 6172 7574 6572 6c41     lowTemperatureAl
   bc16c:	7261 546d 7268 7365 6f68 646c 0032 6564     armThreshold2.de
   bc17c:	746c 5461 6d65 6570 6172 7574 6572 6c41     ltaTemperatureAl
   bc18c:	7261 546d 7268 7365 6f68 646c 7000 7361     armThreshold.pas
   bc19c:	6b73 7965 7500 6573 6f43 6564 5064 7968     skey.useCodedPhy
   bc1ac:	4e00 7765 6420 7665 6369 2065 616e 656d     .New device name
   bc1bc:	203a 7325 5000 6961 6972 676e 3500 3936     : %s.Pairing.569
   bc1cc:	3261 3030 2d31 3862 6637 342d 3039 2d63     a2001-b87f-490c-
   bc1dc:	3239 6263 312d 6231 3561 6165 3135 3736     92cb-11ba5ea5167
   bc1ec:	0063 3635 6139 3032 3030 622d 3738 2d66     c.569a2000-b87f-
   bc1fc:	3934 6330 392d 6332 2d62 3131 6162 6535     490c-92cb-11ba5e
   bc20c:	3561 3631 6337 5300 6e65 2064 6176 756c     a5167c.Send valu
   bc21c:	3a65 2520 0073 6573 2074 6176 756c 2065     e: %s.set value 
   bc22c:	6572 7574 6e72 203a 6425 0000               return: %d..

000bc238 <_ZTV16JSONVectorWriter>:
	...
   bc240:	5181 000b 5199 000b 56b1 000b acf9 000b     .Q...Q...V......

000bc250 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc258:	4e79 000b 4e7f 000b 4f0d 000b 4e8d 000b     yN...N...O...N..
   bc268:	4e7b 000b 3231 3433 3635 0000               {N..123456..

000bc274 <_ZTV10LairdBt510>:
	...
   bc27c:	4f55 000b 5529 000b 3025 5832 3025 5832     UO..)U..%02X%02X
   bc28c:	3025 5832 3025 5832 252d 3230 2558 3230     %02X%02X-%02X%02
   bc29c:	2d58 3025 5832 3025 5832 252d 3230 2558     X-%02X%02X-%02X%
   bc2ac:	3230 2d58 3025 5832 3025 5832 3025 5832     02X-%02X%02X%02X
   bc2bc:	3025 5832 3025 5832 3025 5832 7500 6975     %02X%02X%02X.uui
   bc2cc:	0064 616d 6f6a 0072 696d 6f6e 0072 6f70     d.major.minor.po
   bc2dc:	6577 0072                                   wer.

000bc2e0 <_ZTV11iBeaconScan>:
	...
   bc2e8:	5ef5 000b 5e3d 000b 6373 6e61 745f 7268     .^..=^..scan_thr
   bc2f8:	6165 0064 6445 7964 7473 6e6f 2065 6f66     ead.Eddystone fo
   bc308:	6d72 7461 6e20 746f 7320 7075 6f70 7472     rmat not support
   bc318:	6465 203a 3025 5832 6800 7474 3a70 2f2f     ed: %02X.http://
   bc328:	7777 2e77 6800 7474 7370 2f3a 772f 7777     www..https://www
   bc338:	002e 7468 7074 2f3a 002f 7468 7074 3a73     ..http://.https:
   bc348:	2f2f 2e00 6f63 2f6d 2e00 726f 2f67 2e00     //..com/..org/..
   bc358:	6465 2f75 2e00 656e 2f74 2e00 6e69 6f66     edu/..net/..info
   bc368:	002f 622e 7a69 002f 672e 766f 002f 632e     /..biz/..gov/..c
   bc378:	6d6f 2e00 726f 0067 652e 7564 2e00 656e     om..org..edu..ne
   bc388:	0074 692e 666e 006f 622e 7a69 2e00 6f67     t..info..biz..go
   bc398:	0076 2e25 732a 6e00 6d61 7365 6170 6563     v.%.*s.namespace
   bc3a8:	2500 3230 2558 3230 2558 3230 2558 3230     .%02X%02X%02X%02
   bc3b8:	2558 3230 2558 3230 2558 3230 2558 3230     X%02X%02X%02X%02
   bc3c8:	2558 3230 2558 3230 0058 6e69 7473 6e61     X%02X%02X.instan
   bc3d8:	6563 7500 6c72 7400 6d6c 7600 6162 7474     ce.url.tlm.vbatt
   bc3e8:	6100 7664 635f 746e 7300 6365 635f 746e     .adv_cnt.sec_cnt
   bc3f8:	6b00 6d6b 0000 0000                         .kkm....

000bc400 <_ZTV9Eddystone>:
	...
   bc408:	6cd5 000b 6ae1 000b                         .l...j..

000bc410 <_ZTVN5spark13EthernetClassE>:
	...
   bc418:	7837 000b 782d 000b 7823 000b 7819 000b     7x..-x..#x...x..
   bc428:	780d 000b 7801 000b abd5 000b abdd 000b     .x...x..........
   bc438:	77f5 000b 77ed 000b 77e3 000b 77d9 000b     .w...w...w...w..
   bc448:	ac0d 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bc458:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   bc468:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   bc478:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   bc488:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   bc498:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   bc4a8:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   bc4b8:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   bc4c8:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   bc4d8:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   bc4e8:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   bc4f8:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   bc508:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   bc518:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   bc528:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   bc538:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   bc548:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   bc558:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   bc568:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   bc578:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   bc588:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   bc598:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   bc5a8:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   bc5b8:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   bc5c8:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   bc5d8:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   bc5e8:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   bc5f8:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   bc608:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   bc618:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   bc628:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   bc638:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   bc648:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   bc658:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000bc668 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc670:	7bef 000b 7c51 000b 7dc7 000b 7c7b 000b     .{..Q|...}..{|..
   bc680:	7bf1 000b                                   .{..

000bc684 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc68c:	7beb 000b 7c5f 000b 7bed 000b 7c81 000b     .{.._|...{...|..
   bc69c:	7c11 000b                                   .|..

000bc6a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc6a8:	7be9 000b 7c6d 000b 8989 000b 7c87 000b     .{..m|.......|..
   bc6b8:	7c31 000b                                   1|..

000bc6bc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc6c8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   bc6d8:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   bc6e8:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   bc6f8:	0065 0000                                   e...

000bc6fc <_ZTV9IPAddress>:
	...
   bc704:	a7e1 000b a7d1 000b a7d3 000b               ............

000bc710 <_ZTV9USBSerial>:
	...
   bc718:	a8c7 000b a92f 000b a905 000b a1a1 000b     ..../...........
   bc728:	a8f7 000b a8c9 000b a8d9 000b a929 000b     ............)...
   bc738:	a8e9 000b a8c1 000b                         ........

000bc740 <_ZTV11USARTSerial>:
	...
   bc748:	a9d1 000b aa3d 000b aa15 000b a1a1 000b     ....=...........
   bc758:	a9e5 000b aa01 000b a9f3 000b aa0f 000b     ................
   bc768:	a9d3 000b a9d7 000b                         ........

000bc770 <_ZTV7TwoWire>:
	...
   bc778:	aa9d 000b aae7 000b aabf 000b aa9f 000b     ................
   bc788:	aac7 000b aacf 000b aad7 000b aadf 000b     ................

000bc798 <_ZTVN5spark9WiFiClassE>:
	...
   bc7a0:	ab77 000b ab6d 000b ab63 000b ab19 000b     w...m...c.......
   bc7b0:	ab57 000b ab4b 000b abd5 000b abdd 000b     W...K...........
   bc7c0:	ab3f 000b ab37 000b ab2d 000b ab23 000b     ?...7...-...#...
   bc7d0:	ac0d 000b                                   ....

000bc7d4 <_ZTVN5spark12NetworkClassE>:
	...
   bc7dc:	ab95 000b ab9f 000b aba9 000b abb3 000b     ................
   bc7ec:	abbd 000b abc9 000b abd5 000b abdd 000b     ................
   bc7fc:	abe5 000b abf1 000b abf9 000b ac03 000b     ................
   bc80c:	ac0d 000b 2e30 0030 7274 6575 2500 0075     ....0.0.true.%u.
   bc81c:	6725 7500 3025 7834                          %g.u%04x.

000bc825 <_ZSt7nothrow>:
	...

000bc826 <_ZTSSt19_Sp_make_shared_tag>:
   bc826:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bc836:	6572 5f64 6174 0067 0000                    red_tag...

000bc840 <_ZTISt19_Sp_make_shared_tag>:
   bc840:	c880 000b c826 000b                         ....&...

000bc848 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bc848:	c8e0 000b c854 000b c904 000b               ....T.......

000bc854 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bc854:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bc864:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bc874:	0045 0000                                   E...

000bc878 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bc878:	0000 0000 c848 000b b4b5 000b b4c9 000b     ....H...........
   bc888:	b65d 000b b65d 000b b533 000b b475 000b     ]...]...3...u...
   bc898:	b51b 000b b4dd 000b b4a7 000b               ............

000bc8a4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bc8a4:	c8e0 000b c8b0 000b c848 000b               ........H...

000bc8b0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bc8b0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bc8c0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bc8d0:	666e 456f 0000 0000                         nfoE....

000bc8d8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bc8d8:	0000 0000 c8a4 000b b55d 000b b571 000b     ........]...q...
   bc8e8:	b65d 000b b65d 000b b533 000b b475 000b     ]...]...3...u...
   bc8f8:	b631 000b b5bd 000b b585 000b               1...........

000bc904 <_ZTISt9type_info>:
   bc904:	c880 000b c90c 000b                         ........

000bc90c <_ZTSSt9type_info>:
   bc90c:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
   bc91c:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
   bc92c:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

000bc939 <day_name.1>:
   bc939:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bc949:	6972 6153                                    riSat

000bc94e <mon_name.0>:
   bc94e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bc95e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bc96e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bc97e:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   bc98e:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   bc99e:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   bc9ae:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   bc9be:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   bc9ce:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   bc9de:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   bc9ee:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   bc9fe:	722f 6e61 2e64 0063                         /rand.c.

000bca06 <_ctype_>:
   bca06:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bca16:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bca26:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bca36:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bca46:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bca56:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bca66:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bca76:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bca86:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bcb07 <link_const_variable_data_end>:
	...

000bcb08 <link_constructors_location>:
   bcb08:	000b4995 	.word	0x000b4995
   bcb0c:	000b4e69 	.word	0x000b4e69
   bcb10:	000b5e2d 	.word	0x000b5e2d
   bcb14:	000b6179 	.word	0x000b6179
   bcb18:	000b70e9 	.word	0x000b70e9
   bcb1c:	000b7841 	.word	0x000b7841
   bcb20:	000b7869 	.word	0x000b7869
   bcb24:	000ba191 	.word	0x000ba191
   bcb28:	000ba2c1 	.word	0x000ba2c1
   bcb2c:	000ba3c1 	.word	0x000ba3c1
   bcb30:	000ba3d5 	.word	0x000ba3d5
   bcb34:	000bab81 	.word	0x000bab81
   bcb38:	000bace5 	.word	0x000bace5

000bcb3c <link_constructors_end>:
   bcb3c:	00000000 	.word	0x00000000
