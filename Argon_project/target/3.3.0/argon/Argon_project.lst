
c:/Users/viann/Desktop/UdeS/S6/APP_5/IoT_microservices/Argon_project/target/3.3.0/argon/Argon_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000087b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc7d0  000bc7d0  0000c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000bc7f4  000bc7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000bc7fc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e5d4  000bc800  0001e5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b0  2003e640  2003e640  0002e640  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000bc86c  000bc86c  0002c86c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc894  000bc894  0002c894  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0018f634  00000000  00000000  0002c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016088  00000000  00000000  001bbecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000487f4  00000000  00000000  001d1f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002f40  00000000  00000000  0021a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000d0b0  00000000  00000000  0021d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a023  00000000  00000000  0022a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00048666  00000000  00000000  0026475b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014bf62  00000000  00000000  002acdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008d60  00000000  00000000  003f8d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f007 fd13 	bl	bba58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f007 fd35 	bl	bbaa8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5d4 	.word	0x2003e5d4
   b4048:	000bc800 	.word	0x000bc800
   b404c:	2003e640 	.word	0x2003e640
   b4050:	2003e640 	.word	0x2003e640
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f006 f997 	bl	ba390 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bc794 	.word	0x000bc794
   b407c:	000bc7c8 	.word	0x000bc7c8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8b0 	b.w	b41e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8ff 	bl	b4288 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f006 b937 	b.w	ba300 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f003 bac1 	b.w	b7618 <malloc>

000b4096 <_Znaj>:
   b4096:	f003 babf 	b.w	b7618 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f003 bac5 	b.w	b7628 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>:
protected:
    BleAddress address;
    int16_t rssi;
    uint8_t rssi_count;
    virtual void populateData(const BleScanResult *scanResult) {
        rssi += RSSI(scanResult);
   b40ae:	f991 3020 	ldrsb.w	r3, [r1, #32]
   b40b2:	8a02      	ldrh	r2, [r0, #16]
   b40b4:	4413      	add	r3, r2
        rssi_count++;
   b40b6:	7c82      	ldrb	r2, [r0, #18]
   b40b8:	3201      	adds	r2, #1
   b40ba:	b2d2      	uxtb	r2, r2
        rssi += RSSI(scanResult);
   b40bc:	b21b      	sxth	r3, r3
        if (rssi_count > 5) {
   b40be:	2a05      	cmp	r2, #5
        rssi += RSSI(scanResult);
   b40c0:	8203      	strh	r3, [r0, #16]
            rssi = rssi/rssi_count;
   b40c2:	bf82      	ittt	hi
   b40c4:	fb93 f3f2 	sdivhi	r3, r3, r2
   b40c8:	8203      	strhhi	r3, [r0, #16]
            rssi_count = 1;
   b40ca:	2301      	movhi	r3, #1
        rssi_count++;
   b40cc:	7482      	strb	r2, [r0, #18]
            rssi_count = 1;
   b40ce:	bf88      	it	hi
   b40d0:	7483      	strbhi	r3, [r0, #18]
        }
    };
   b40d2:	4770      	bx	lr

000b40d4 <_ZNK6Beacon6toJsonEPN5spark10JSONWriterE>:
    virtual void toJson(JSONWriter *writer) const {
   b40d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b40d6:	460c      	mov	r4, r1
        writer->name(address.toString()).beginObject();
   b40d8:	2200      	movs	r2, #0
   b40da:	1dc1      	adds	r1, r0, #7
   b40dc:	4668      	mov	r0, sp
   b40de:	f003 febd 	bl	b7e5c <_ZNK8particle10BleAddress8toStringEb>
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
}

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
   b40e2:	9a02      	ldr	r2, [sp, #8]
   b40e4:	9900      	ldr	r1, [sp, #0]
   b40e6:	4620      	mov	r0, r4
   b40e8:	f006 fe22 	bl	bad30 <_ZN5spark10JSONWriter4nameEPKcj>
   b40ec:	f006 fd66 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
   b40f0:	4668      	mov	r0, sp
   b40f2:	f003 fb85 	bl	b7800 <_ZN6StringD1Ev>
        writer->endObject();
   b40f6:	4620      	mov	r0, r4
    };
   b40f8:	b004      	add	sp, #16
   b40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        writer->endObject();
   b40fe:	f006 bd47 	b.w	bab90 <_ZN5spark10JSONWriter9endObjectEv>

000b4102 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>:
	__p->~_Rb_tree_node<_Val>();
#endif
      }

      void
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   b4102:	b538      	push	{r3, r4, r5, lr}
   b4104:	4604      	mov	r4, r0
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
   b4106:	f100 0510 	add.w	r5, r0, #16
   b410a:	3020      	adds	r0, #32
   b410c:	f003 fb78 	bl	b7800 <_ZN6StringD1Ev>
   b4110:	4628      	mov	r0, r5
   b4112:	f003 fb75 	bl	b7800 <_ZN6StringD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4116:	4620      	mov	r0, r4
   b4118:	2130      	movs	r1, #48	; 0x30
      {
	_M_destroy_node(__p);
	_M_put_node(__p);
      }
   b411a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b411e:	f7ff bfbc 	b.w	b409a <_ZdlPvj>

000b4122 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4122:	b538      	push	{r3, r4, r5, lr}
   b4124:	4604      	mov	r4, r0
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   b4126:	b144      	cbz	r4, b413a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0+0x18>
	{
	  _M_erase(_S_right(__x));
   b4128:	68e0      	ldr	r0, [r4, #12]
   b412a:	f7ff fffa 	bl	b4122 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b412e:	68a5      	ldr	r5, [r4, #8]
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
   b4130:	4620      	mov	r0, r4
   b4132:	f7ff ffe6 	bl	b4102 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>
	  __x = __y;
   b4136:	462c      	mov	r4, r5
      while (__x != 0)
   b4138:	e7f5      	b.n	b4126 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0+0x4>
	}
    }
   b413a:	bd38      	pop	{r3, r4, r5, pc}

000b413c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b413c:	b40e      	push	{r1, r2, r3}
   b413e:	b503      	push	{r0, r1, lr}
   b4140:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4142:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4144:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4148:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b414a:	f005 fff6 	bl	ba13a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b414e:	b002      	add	sp, #8
   b4150:	f85d eb04 	ldr.w	lr, [sp], #4
   b4154:	b003      	add	sp, #12
   b4156:	4770      	bx	lr

000b4158 <_ZN13Beaconscanner8instanceEv>:
  /**
   * @brief Singleton class instance access for Beaconscanner.
   *
   * @return Beaconscanner&
   */
  static Beaconscanner& instance() {
   b4158:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b415a:	4d10      	ldr	r5, [pc, #64]	; (b419c <_ZN13Beaconscanner8instanceEv+0x44>)
   b415c:	682c      	ldr	r4, [r5, #0]
   b415e:	b9d4      	cbnz	r4, b4196 <_ZN13Beaconscanner8instanceEv+0x3e>
      _instance = new Beaconscanner();
   b4160:	2058      	movs	r0, #88	; 0x58
   b4162:	f7ff ff96 	bl	b4092 <_Znwj>
   b4166:	b1a8      	cbz	r0, b4194 <_ZN13Beaconscanner8instanceEv+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b4168:	e9c0 4407 	strd	r4, r4, [r0, #28]
   b416c:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
   b4170:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
   b4174:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
   b4178:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
   b417c:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
      _clear_missed(1),
      _scan_period(10),
      _last_publish(0),
      _thread(nullptr),
      _callback(nullptr),
      _customCallback(nullptr) {};
   b4180:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
   b4184:	f640 2301 	movw	r3, #2561	; 0xa01
   b4188:	7144      	strb	r4, [r0, #5]
   b418a:	80c4      	strh	r4, [r0, #6]
   b418c:	8183      	strh	r3, [r0, #12]
   b418e:	6104      	str	r4, [r0, #16]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b4190:	7504      	strb	r4, [r0, #20]
   b4192:	6544      	str	r4, [r0, #84]	; 0x54
      _instance = new Beaconscanner();
   b4194:	6028      	str	r0, [r5, #0]
  }
   b4196:	6828      	ldr	r0, [r5, #0]
   b4198:	bd38      	pop	{r3, r4, r5, pc}
   b419a:	bf00      	nop
   b419c:	2003e6b4 	.word	0x2003e6b4

000b41a0 <_Z10setupBadgev>:
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
    Serial.printf("%s is %s :: %s\n", uuid.c_str(), pres.c_str(), Time.timeStr().c_str());
  }
}

void setupBadge(){
   b41a0:	b510      	push	{r4, lr}
  BLE.on();
   b41a2:	f004 fa21 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41a6:	f004 fa69 	bl	b867c <_ZNK8particle14BleLocalDevice2onEv>
  Scanner.setScanPeriod(5);
   b41aa:	f7ff ffd5 	bl	b4158 <_ZN13Beaconscanner8instanceEv>
    if (seconds > 0) _scan_period = seconds;
   b41ae:	2305      	movs	r3, #5
   b41b0:	7343      	strb	r3, [r0, #13]
  Scanner.setMissedCount(1);
   b41b2:	f7ff ffd1 	bl	b4158 <_ZN13Beaconscanner8instanceEv>
    if (count > 0) _clear_missed = count;
   b41b6:	2401      	movs	r4, #1
   b41b8:	7304      	strb	r4, [r0, #12]
  Scanner.setCallback(onCallBack);
   b41ba:	f7ff ffcd 	bl	b4158 <_ZN13Beaconscanner8instanceEv>
  Beaconscanner& setCallback(BeaconScanCallback callback) { _callback = callback; return *this; };
   b41be:	4b04      	ldr	r3, [pc, #16]	; (b41d0 <_Z10setupBadgev+0x30>)
   b41c0:	6503      	str	r3, [r0, #80]	; 0x50
  Scanner.startContinuous(SCAN_IBEACON);
   b41c2:	f7ff ffc9 	bl	b4158 <_ZN13Beaconscanner8instanceEv>
   b41c6:	4621      	mov	r1, r4
}
   b41c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Scanner.startContinuous(SCAN_IBEACON);
   b41cc:	f002 b86a 	b.w	b62a4 <_ZN13Beaconscanner15startContinuousEi>
   b41d0:	000b43e5 	.word	0x000b43e5

000b41d4 <_Z12executeBadgev>:

void executeBadge(){
   b41d4:	b508      	push	{r3, lr}
  Scanner.loop();
   b41d6:	f7ff ffbf 	bl	b4158 <_ZN13Beaconscanner8instanceEv>
}
   b41da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Scanner.loop();
   b41de:	f002 ba59 	b.w	b6694 <_ZN13Beaconscanner4loopEv>
	...

000b41e4 <setup>:

void setup() {
   b41e4:	b570      	push	{r4, r5, r6, lr}
  Serial.begin(9600);
   b41e6:	f006 fb13 	bl	ba810 <_Z16_fetch_usbserialv>
   b41ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41ee:	f006 faff 	bl	ba7f0 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b41f2:	2000      	movs	r0, #0
   b41f4:	f002 ffa8 	bl	b7148 <hal_timer_millis>
        while (_while() && !_condition()) {
   b41f8:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b41fc:	4604      	mov	r4, r0
   b41fe:	2000      	movs	r0, #0
   b4200:	f002 ffa2 	bl	b7148 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4204:	1b00      	subs	r0, r0, r4
   b4206:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b420a:	42a8      	cmp	r0, r5
   b420c:	f171 0300 	sbcs.w	r3, r1, #0
   b4210:	d207      	bcs.n	b4222 <setup+0x3e>
	waitFor(Serial.isConnected, 30000);
   b4212:	f006 fafd 	bl	ba810 <_Z16_fetch_usbserialv>
   b4216:	f006 faef 	bl	ba7f8 <_ZN9USBSerial11isConnectedEv>
   b421a:	b910      	cbnz	r0, b4222 <setup+0x3e>
            spark_process();
   b421c:	f003 f9c4 	bl	b75a8 <spark_process>
        while (_while() && !_condition()) {
   b4220:	e7ed      	b.n	b41fe <setup+0x1a>
   b4222:	f006 faf5 	bl	ba810 <_Z16_fetch_usbserialv>
   b4226:	f006 fae7 	bl	ba7f8 <_ZN9USBSerial11isConnectedEv>
  setupBadge();
   b422a:	f7ff ffb9 	bl	b41a0 <_Z10setupBadgev>
        return hal_timer_millis(nullptr);
   b422e:	2000      	movs	r0, #0
   b4230:	f002 ff8a 	bl	b7148 <hal_timer_millis>
   b4234:	4d12      	ldr	r5, [pc, #72]	; (b4280 <setup+0x9c>)
   b4236:	4604      	mov	r4, r0
        while (_while() && !_condition()) {
   b4238:	f247 5630 	movw	r6, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b423c:	2000      	movs	r0, #0
   b423e:	f002 ff83 	bl	b7148 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4242:	1b00      	subs	r0, r0, r4
   b4244:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4248:	42b0      	cmp	r0, r6
   b424a:	f171 0300 	sbcs.w	r3, r1, #0
   b424e:	d208      	bcs.n	b4262 <setup+0x7e>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4250:	2200      	movs	r2, #0
   b4252:	6868      	ldr	r0, [r5, #4]
   b4254:	4611      	mov	r1, r2
   b4256:	f003 f95f 	bl	b7518 <network_ready>
   b425a:	b910      	cbnz	r0, b4262 <setup+0x7e>
            spark_process();
   b425c:	f003 f9a4 	bl	b75a8 <spark_process>
        while (_while() && !_condition()) {
   b4260:	e7ec      	b.n	b423c <setup+0x58>
   b4262:	2200      	movs	r2, #0
   b4264:	4611      	mov	r1, r2
   b4266:	6868      	ldr	r0, [r5, #4]
   b4268:	f003 f956 	bl	b7518 <network_ready>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b426c:	f003 f9a4 	bl	b75b8 <spark_cloud_flag_connect>
  waitFor(WiFi.ready, 30000);
  Particle.connect();
  Serial.println("Start scanning");
   b4270:	f006 face 	bl	ba810 <_Z16_fetch_usbserialv>
}
   b4274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Serial.println("Start scanning");
   b4278:	4902      	ldr	r1, [pc, #8]	; (b4284 <setup+0xa0>)
   b427a:	f005 bf36 	b.w	ba0ea <_ZN5Print7printlnEPKc>
   b427e:	bf00      	nop
   b4280:	2003e730 	.word	0x2003e730
   b4284:	000bbc7c 	.word	0x000bbc7c

000b4288 <loop>:

void loop() {
  executeBadge();
   b4288:	f7ff bfa4 	b.w	b41d4 <_Z12executeBadgev>

000b428c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b4290:	f8d1 8008 	ldr.w	r8, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4294:	4607      	mov	r7, r0
   b4296:	4691      	mov	r9, r2
      { return &this->_M_impl._M_header; }
   b4298:	1d0c      	adds	r4, r1, #4
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
   b429a:	f1b8 0f00 	cmp.w	r8, #0
   b429e:	d038      	beq.n	b4312 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x86>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b42a0:	f108 0510 	add.w	r5, r8, #16
      { return __x < __y; }
   b42a4:	4649      	mov	r1, r9
   b42a6:	4628      	mov	r0, r5
   b42a8:	f003 fbdf 	bl	b7a6a <_ZNK6StringltERKS_>
	{
	  if (_M_impl._M_key_compare(_S_key(__x), __k))
   b42ac:	b128      	cbz	r0, b42ba <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x2e>
      { return static_cast<_Link_type>(__x->_M_right); }
   b42ae:	f8d8 500c 	ldr.w	r5, [r8, #12]
   b42b2:	46a0      	mov	r8, r4
   b42b4:	4644      	mov	r4, r8
   b42b6:	46a8      	mov	r8, r5
   b42b8:	e7ef      	b.n	b429a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0xe>
   b42ba:	4629      	mov	r1, r5
   b42bc:	4648      	mov	r0, r9
   b42be:	f003 fbd4 	bl	b7a6a <_ZNK6StringltERKS_>
   b42c2:	f8d8 5008 	ldr.w	r5, [r8, #8]
	    __x = _S_right(__x);
	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
   b42c6:	2800      	cmp	r0, #0
   b42c8:	d1f4      	bne.n	b42b4 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x28>
      { return static_cast<_Link_type>(__x->_M_right); }
   b42ca:	f8d8 600c 	ldr.w	r6, [r8, #12]
      while (__x != 0)
   b42ce:	b165      	cbz	r5, b42ea <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x5e>
   b42d0:	f105 0010 	add.w	r0, r5, #16
   b42d4:	4649      	mov	r1, r9
   b42d6:	f003 fbc8 	bl	b7a6a <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b42da:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b42de:	2800      	cmp	r0, #0
   b42e0:	bf0a      	itet	eq
   b42e2:	46a8      	moveq	r8, r5
   b42e4:	4615      	movne	r5, r2
   b42e6:	461d      	moveq	r5, r3
   b42e8:	e7f1      	b.n	b42ce <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x42>
      while (__x != 0)
   b42ea:	b166      	cbz	r6, b4306 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x7a>
   b42ec:	f106 0110 	add.w	r1, r6, #16
   b42f0:	4648      	mov	r0, r9
   b42f2:	f003 fbba 	bl	b7a6a <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b42f6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	if (_M_impl._M_key_compare(__k, _S_key(__x)))
   b42fa:	2800      	cmp	r0, #0
   b42fc:	bf16      	itet	ne
   b42fe:	4634      	movne	r4, r6
   b4300:	4616      	moveq	r6, r2
   b4302:	461e      	movne	r6, r3
   b4304:	e7f1      	b.n	b42ea <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x5e>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4306:	f8c7 8000 	str.w	r8, [r7]
   b430a:	607c      	str	r4, [r7, #4]
				    _M_upper_bound(__xu, __yu, __k));
	    }
	}
      return pair<iterator, iterator>(iterator(__y),
				      iterator(__y));
    }
   b430c:	4638      	mov	r0, r7
   b430e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4312:	603c      	str	r4, [r7, #0]
   b4314:	e7f9      	b.n	b430a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_+0x7e>

000b4316 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b431a:	688d      	ldr	r5, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b431c:	4604      	mov	r4, r0
   b431e:	460f      	mov	r7, r1
   b4320:	4690      	mov	r8, r2
      { return &this->_M_impl._M_header; }
   b4322:	1d0e      	adds	r6, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
   b4324:	2301      	movs	r3, #1
      while (__x != 0)
   b4326:	b175      	cbz	r5, b4346 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x30>
   b4328:	f105 0110 	add.w	r1, r5, #16
   b432c:	4640      	mov	r0, r8
   b432e:	f003 fb9c 	bl	b7a6a <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4332:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   b4336:	2800      	cmp	r0, #0
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b4338:	462e      	mov	r6, r5
   b433a:	bf15      	itete	ne
   b433c:	2301      	movne	r3, #1
   b433e:	2300      	moveq	r3, #0
   b4340:	460d      	movne	r5, r1
   b4342:	4615      	moveq	r5, r2
   b4344:	e7ef      	b.n	b4326 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x10>
	}
      iterator __j = iterator(__y);
      if (__comp)
   b4346:	b1a3      	cbz	r3, b4372 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x5c>
	{
	  if (__j == begin())
   b4348:	68fb      	ldr	r3, [r7, #12]
   b434a:	42b3      	cmp	r3, r6
   b434c:	d104      	bne.n	b4358 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x42>
   b434e:	6025      	str	r5, [r4, #0]
   b4350:	6066      	str	r6, [r4, #4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   b4352:	4620      	mov	r0, r4
   b4354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b4358:	4630      	mov	r0, r6
   b435a:	f006 fda5 	bl	baea8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b435e:	4605      	mov	r5, r0
   b4360:	4641      	mov	r1, r8
   b4362:	f105 0010 	add.w	r0, r5, #16
   b4366:	f003 fb80 	bl	b7a6a <_ZNK6StringltERKS_>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b436a:	b120      	cbz	r0, b4376 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
   b436c:	2300      	movs	r3, #0
   b436e:	6023      	str	r3, [r4, #0]
   b4370:	e7ee      	b.n	b4350 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3a>
   b4372:	4635      	mov	r5, r6
   b4374:	e7f4      	b.n	b4360 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x4a>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b4376:	e9c4 5000 	strd	r5, r0, [r4]
   b437a:	e7ea      	b.n	b4352 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3c>

000b437c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b4380:	688d      	ldr	r5, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b4382:	4604      	mov	r4, r0
   b4384:	460f      	mov	r7, r1
   b4386:	4690      	mov	r8, r2
      { return &this->_M_impl._M_header; }
   b4388:	1d0e      	adds	r6, r1, #4
      bool __comp = true;
   b438a:	2301      	movs	r3, #1
      while (__x != 0)
   b438c:	b175      	cbz	r5, b43ac <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x30>
   b438e:	f105 0110 	add.w	r1, r5, #16
   b4392:	4640      	mov	r0, r8
   b4394:	f003 fb69 	bl	b7a6a <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4398:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   b439c:	2800      	cmp	r0, #0
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b439e:	462e      	mov	r6, r5
   b43a0:	bf15      	itete	ne
   b43a2:	2301      	movne	r3, #1
   b43a4:	2300      	moveq	r3, #0
   b43a6:	460d      	movne	r5, r1
   b43a8:	4615      	moveq	r5, r2
   b43aa:	e7ef      	b.n	b438c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x10>
      if (__comp)
   b43ac:	b1a3      	cbz	r3, b43d8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x5c>
	  if (__j == begin())
   b43ae:	68fb      	ldr	r3, [r7, #12]
   b43b0:	42b3      	cmp	r3, r6
   b43b2:	d104      	bne.n	b43be <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x42>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b43b4:	6025      	str	r5, [r4, #0]
   b43b6:	6066      	str	r6, [r4, #4]
    }
   b43b8:	4620      	mov	r0, r4
   b43ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b43be:	4630      	mov	r0, r6
   b43c0:	f006 fd72 	bl	baea8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b43c4:	4605      	mov	r5, r0
   b43c6:	4641      	mov	r1, r8
   b43c8:	f105 0010 	add.w	r0, r5, #16
   b43cc:	f003 fb4d 	bl	b7a6a <_ZNK6StringltERKS_>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b43d0:	b120      	cbz	r0, b43dc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
   b43d2:	2300      	movs	r3, #0
   b43d4:	6023      	str	r3, [r4, #0]
   b43d6:	e7ee      	b.n	b43b6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3a>
   b43d8:	4635      	mov	r5, r6
   b43da:	e7f4      	b.n	b43c6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x4a>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b43dc:	e9c4 5000 	strd	r5, r0, [r4]
   b43e0:	e7ea      	b.n	b43b8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x3c>
	...

000b43e4 <_Z10onCallBackR6Beacon13callback_type>:
void onCallBack(Beacon& beacon, callback_type type){
   b43e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b43e8:	b0ab      	sub	sp, #172	; 0xac
   b43ea:	4604      	mov	r4, r0
   b43ec:	460f      	mov	r7, r1
  Serial.println("\n\nEntering Callback");
   b43ee:	f006 fa0f 	bl	ba810 <_Z16_fetch_usbserialv>
   b43f2:	49ab      	ldr	r1, [pc, #684]	; (b46a0 <_Z10onCallBackR6Beacon13callback_type+0x2bc>)
class Beacon {
   b43f4:	f8df 82bc 	ldr.w	r8, [pc, #700]	; b46b4 <_Z10onCallBackR6Beacon13callback_type+0x2d0>
#ifndef IBEACON_SCAN_H
#define IBEACON_SCAN_H

#include "beacon.h"

class iBeaconScan : public Beacon
   b43f8:	f8df 92bc 	ldr.w	r9, [pc, #700]	; b46b8 <_Z10onCallBackR6Beacon13callback_type+0x2d4>
   b43fc:	f005 fe75 	bl	ba0ea <_ZN5Print7printlnEPKc>
    BleAddress getAddress() const { return address;}
   b4400:	1de1      	adds	r1, r4, #7
   b4402:	a81a      	add	r0, sp, #104	; 0x68
   b4404:	f003 fc98 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
  String addr = beacon.getAddress().toString();
   b4408:	2200      	movs	r2, #0
   b440a:	a91a      	add	r1, sp, #104	; 0x68
   b440c:	a806      	add	r0, sp, #24
   b440e:	f003 fd25 	bl	b7e5c <_ZNK8particle10BleAddress8toStringEb>
  String jsonString;
   b4412:	49a4      	ldr	r1, [pc, #656]	; (b46a4 <_Z10onCallBackR6Beacon13callback_type+0x2c0>)
   b4414:	a80a      	add	r0, sp, #40	; 0x28
   b4416:	f003 fa3e 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
  for(iBeaconScan beacon: Scanner.getiBeacons()){
   b441a:	f7ff fe9d 	bl	b4158 <_ZN13Beaconscanner8instanceEv>
    return data_;
}

template<typename T, typename AllocatorT>
inline T* spark::Vector<T, AllocatorT>::begin() {
    return data_;
   b441e:	4ba2      	ldr	r3, [pc, #648]	; (b46a8 <_Z10onCallBackR6Beacon13callback_type+0x2c4>)
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b4420:	e9d3 4600 	ldrd	r4, r6, [r3]
   b4424:	eb04 1686 	add.w	r6, r4, r6, lsl #6
   b4428:	42a6      	cmp	r6, r4
   b442a:	f000 81b2 	beq.w	b4792 <_Z10onCallBackR6Beacon13callback_type+0x3ae>
class Beacon {
   b442e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   b4432:	f994 3004 	ldrsb.w	r3, [r4, #4]
   b4436:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   b443a:	7963      	ldrb	r3, [r4, #5]
   b443c:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
   b4440:	79a3      	ldrb	r3, [r4, #6]
   b4442:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
   b4446:	1de1      	adds	r1, r4, #7
   b4448:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
   b444c:	f003 fc74 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
   b4450:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   b4454:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
   b4458:	7ca3      	ldrb	r3, [r4, #18]
   b445a:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
   b445e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
   b4462:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   b4466:	f104 0213 	add.w	r2, r4, #19
   b446a:	f104 0137 	add.w	r1, r4, #55	; 0x37
   b446e:	469a      	mov	sl, r3
   b4470:	f852 0b04 	ldr.w	r0, [r2], #4
   b4474:	f843 0b04 	str.w	r0, [r3], #4
   b4478:	428a      	cmp	r2, r1
   b447a:	d1f9      	bne.n	b4470 <_Z10onCallBackR6Beacon13callback_type+0x8c>
   b447c:	7812      	ldrb	r2, [r2, #0]
   b447e:	701a      	strb	r2, [r3, #0]
   b4480:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   b4482:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
   b4486:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   b4488:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
   b448c:	f994 303c 	ldrsb.w	r3, [r4, #60]	; 0x3c
   b4490:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    BleAddress getAddress() const { return address;}
   b4494:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   b4498:	a812      	add	r0, sp, #72	; 0x48
   b449a:	f003 fc4d 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
    if(beacon.getAddress().toString() == addr){
   b449e:	2200      	movs	r2, #0
   b44a0:	a912      	add	r1, sp, #72	; 0x48
   b44a2:	a816      	add	r0, sp, #88	; 0x58
   b44a4:	f003 fcda 	bl	b7e5c <_ZNK8particle10BleAddress8toStringEb>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b44a8:	a906      	add	r1, sp, #24
   b44aa:	a816      	add	r0, sp, #88	; 0x58
   b44ac:	f003 fad0 	bl	b7a50 <_ZNK6String6equalsERKS_>
   b44b0:	4605      	mov	r5, r0
   b44b2:	a816      	add	r0, sp, #88	; 0x58
   b44b4:	f003 f9a4 	bl	b7800 <_ZN6StringD1Ev>
   b44b8:	3440      	adds	r4, #64	; 0x40
   b44ba:	2d00      	cmp	r5, #0
   b44bc:	d0b4      	beq.n	b4428 <_Z10onCallBackR6Beacon13callback_type+0x44>
      String uuid = beacon.getUuid();
   b44be:	4651      	mov	r1, sl
   b44c0:	a80e      	add	r0, sp, #56	; 0x38
   b44c2:	f003 f9e8 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
      if(inside){
   b44c6:	2f01      	cmp	r7, #1
   b44c8:	4e78      	ldr	r6, [pc, #480]	; (b46ac <_Z10onCallBackR6Beacon13callback_type+0x2c8>)
   b44ca:	f040 80bf 	bne.w	b464c <_Z10onCallBackR6Beacon13callback_type+0x268>
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b44ce:	1d34      	adds	r4, r6, #4
   b44d0:	68b5      	ldr	r5, [r6, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b44d2:	46a0      	mov	r8, r4
      while (__x != 0)
   b44d4:	b165      	cbz	r5, b44f0 <_Z10onCallBackR6Beacon13callback_type+0x10c>
   b44d6:	f105 0010 	add.w	r0, r5, #16
   b44da:	a906      	add	r1, sp, #24
   b44dc:	f003 fac5 	bl	b7a6a <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b44e0:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b44e4:	2800      	cmp	r0, #0
   b44e6:	bf0a      	itet	eq
   b44e8:	462c      	moveq	r4, r5
   b44ea:	4615      	movne	r5, r2
   b44ec:	461d      	moveq	r5, r3
   b44ee:	e7f1      	b.n	b44d4 <_Z10onCallBackR6Beacon13callback_type+0xf0>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b44f0:	4544      	cmp	r4, r8
   b44f2:	d122      	bne.n	b453a <_Z10onCallBackR6Beacon13callback_type+0x156>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b44f4:	2030      	movs	r0, #48	; 0x30
   b44f6:	f7ff fdcc 	bl	b4092 <_Znwj>
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   b44fa:	f100 0810 	add.w	r8, r0, #16
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b44fe:	a906      	add	r1, sp, #24
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   b4500:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b46b0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>
   b4504:	4681      	mov	r9, r0
   b4506:	4640      	mov	r0, r8
   b4508:	f003 fa10 	bl	b792c <_ZN6StringC1ERKS_>
   b450c:	4965      	ldr	r1, [pc, #404]	; (b46a4 <_Z10onCallBackR6Beacon13callback_type+0x2c0>)
   b450e:	f108 0010 	add.w	r0, r8, #16
   b4512:	f003 f9c0 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
   b4516:	4554      	cmp	r4, sl
   b4518:	d13a      	bne.n	b4590 <_Z10onCallBackR6Beacon13callback_type+0x1ac>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b451a:	6973      	ldr	r3, [r6, #20]
   b451c:	b383      	cbz	r3, b4580 <_Z10onCallBackR6Beacon13callback_type+0x19c>
      { return __x.first; }
   b451e:	6930      	ldr	r0, [r6, #16]
      { return __x < __y; }
   b4520:	4641      	mov	r1, r8
   b4522:	3010      	adds	r0, #16
   b4524:	f003 faa1 	bl	b7a6a <_ZNK6StringltERKS_>
   b4528:	b350      	cbz	r0, b4580 <_Z10onCallBackR6Beacon13callback_type+0x19c>
       : first(__x), second(std::forward<_U2>(__y)) { }
   b452a:	6934      	ldr	r4, [r6, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   b452c:	2c00      	cmp	r4, #0
   b452e:	d14a      	bne.n	b45c6 <_Z10onCallBackR6Beacon13callback_type+0x1e2>
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
   b4530:	4648      	mov	r0, r9
   b4532:	f7ff fde6 	bl	b4102 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>
   b4536:	46a1      	mov	r9, r4
   b4538:	e058      	b.n	b45ec <_Z10onCallBackR6Beacon13callback_type+0x208>
   b453a:	f104 0110 	add.w	r1, r4, #16
   b453e:	a806      	add	r0, sp, #24
   b4540:	f003 fa93 	bl	b7a6a <_ZNK6StringltERKS_>
   b4544:	2800      	cmp	r0, #0
   b4546:	d1d5      	bne.n	b44f4 <_Z10onCallBackR6Beacon13callback_type+0x110>
        players[addr] = uuid;
   b4548:	a90e      	add	r1, sp, #56	; 0x38
   b454a:	f104 0020 	add.w	r0, r4, #32
   b454e:	f003 f9de 	bl	b790e <_ZN6StringaSERKS_>
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b4552:	f8df 8168 	ldr.w	r8, [pc, #360]	; b46bc <_Z10onCallBackR6Beacon13callback_type+0x2d8>
   b4556:	f108 0404 	add.w	r4, r8, #4
   b455a:	f8d8 5008 	ldr.w	r5, [r8, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b455e:	4626      	mov	r6, r4
      while (__x != 0)
   b4560:	2d00      	cmp	r5, #0
   b4562:	f000 80ad 	beq.w	b46c0 <_Z10onCallBackR6Beacon13callback_type+0x2dc>
   b4566:	f105 0010 	add.w	r0, r5, #16
   b456a:	a90e      	add	r1, sp, #56	; 0x38
   b456c:	f003 fa7d 	bl	b7a6a <_ZNK6StringltERKS_>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4570:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b4574:	2800      	cmp	r0, #0
   b4576:	bf0a      	itet	eq
   b4578:	462c      	moveq	r4, r5
   b457a:	4615      	movne	r5, r2
   b457c:	461d      	moveq	r5, r3
   b457e:	e7ef      	b.n	b4560 <_Z10onCallBackR6Beacon13callback_type+0x17c>
	    return _M_get_insert_unique_pos(__k);
   b4580:	494a      	ldr	r1, [pc, #296]	; (b46ac <_Z10onCallBackR6Beacon13callback_type+0x2c8>)
   b4582:	4642      	mov	r2, r8
	    return _M_get_insert_unique_pos(__k);
   b4584:	a802      	add	r0, sp, #8
   b4586:	f7ff fec6 	bl	b4316 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b458a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
   b458e:	e016      	b.n	b45be <_Z10onCallBackR6Beacon13callback_type+0x1da>
      { return __x.first; }
   b4590:	f104 0b10 	add.w	fp, r4, #16
      { return __x < __y; }
   b4594:	4659      	mov	r1, fp
   b4596:	4640      	mov	r0, r8
   b4598:	f003 fa67 	bl	b7a6a <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b459c:	b370      	cbz	r0, b45fc <_Z10onCallBackR6Beacon13callback_type+0x218>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b459e:	68f5      	ldr	r5, [r6, #12]
   b45a0:	42ac      	cmp	r4, r5
   b45a2:	d00c      	beq.n	b45be <_Z10onCallBackR6Beacon13callback_type+0x1da>
	_M_node = _Rb_tree_decrement(_M_node);
   b45a4:	4620      	mov	r0, r4
   b45a6:	f006 fc7f 	bl	baea8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b45aa:	4641      	mov	r1, r8
   b45ac:	4683      	mov	fp, r0
   b45ae:	3010      	adds	r0, #16
   b45b0:	f003 fa5b 	bl	b7a6a <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b45b4:	b1e0      	cbz	r0, b45f0 <_Z10onCallBackR6Beacon13callback_type+0x20c>
      { return static_cast<_Link_type>(__x->_M_right); }
   b45b6:	f8db 500c 	ldr.w	r5, [fp, #12]
	      if (_S_right(__before._M_node) == 0)
   b45ba:	b9ed      	cbnz	r5, b45f8 <_Z10onCallBackR6Beacon13callback_type+0x214>
   b45bc:	465c      	mov	r4, fp
	    if (__res.second)
   b45be:	2c00      	cmp	r4, #0
   b45c0:	d042      	beq.n	b4648 <_Z10onCallBackR6Beacon13callback_type+0x264>
			    || _M_impl._M_key_compare(_S_key(__z),
   b45c2:	2d00      	cmp	r5, #0
   b45c4:	d13e      	bne.n	b4644 <_Z10onCallBackR6Beacon13callback_type+0x260>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b45c6:	4b3a      	ldr	r3, [pc, #232]	; (b46b0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>)
   b45c8:	429c      	cmp	r4, r3
   b45ca:	d03b      	beq.n	b4644 <_Z10onCallBackR6Beacon13callback_type+0x260>
   b45cc:	f104 0110 	add.w	r1, r4, #16
   b45d0:	4640      	mov	r0, r8
   b45d2:	f003 fa4a 	bl	b7a6a <_ZNK6StringltERKS_>
			    || _M_impl._M_key_compare(_S_key(__z),
   b45d6:	3800      	subs	r0, #0
   b45d8:	bf18      	it	ne
   b45da:	2001      	movne	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b45dc:	4b34      	ldr	r3, [pc, #208]	; (b46b0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>)
   b45de:	4622      	mov	r2, r4
   b45e0:	4649      	mov	r1, r9
   b45e2:	f006 fc63 	bl	baeac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b45e6:	6973      	ldr	r3, [r6, #20]
   b45e8:	3301      	adds	r3, #1
   b45ea:	6173      	str	r3, [r6, #20]
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b45ec:	464c      	mov	r4, r9
   b45ee:	e7ab      	b.n	b4548 <_Z10onCallBackR6Beacon13callback_type+0x164>
	    return _M_get_insert_unique_pos(__k);
   b45f0:	4642      	mov	r2, r8
   b45f2:	f1aa 0104 	sub.w	r1, sl, #4
   b45f6:	e7c5      	b.n	b4584 <_Z10onCallBackR6Beacon13callback_type+0x1a0>
   b45f8:	4625      	mov	r5, r4
   b45fa:	e7e0      	b.n	b45be <_Z10onCallBackR6Beacon13callback_type+0x1da>
   b45fc:	4641      	mov	r1, r8
   b45fe:	4658      	mov	r0, fp
   b4600:	f003 fa33 	bl	b7a6a <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b4604:	2800      	cmp	r0, #0
   b4606:	d093      	beq.n	b4530 <_Z10onCallBackR6Beacon13callback_type+0x14c>
	  if (__pos._M_node == _M_rightmost())
   b4608:	6933      	ldr	r3, [r6, #16]
   b460a:	429c      	cmp	r4, r3
   b460c:	d00d      	beq.n	b462a <_Z10onCallBackR6Beacon13callback_type+0x246>
	_M_node = _Rb_tree_increment(_M_node);
   b460e:	4620      	mov	r0, r4
   b4610:	f006 fc46 	bl	baea0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b4614:	4605      	mov	r5, r0
   b4616:	f100 0110 	add.w	r1, r0, #16
   b461a:	4640      	mov	r0, r8
   b461c:	f003 fa25 	bl	b7a6a <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b4620:	b128      	cbz	r0, b462e <_Z10onCallBackR6Beacon13callback_type+0x24a>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4622:	68e2      	ldr	r2, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b4624:	b962      	cbnz	r2, b4640 <_Z10onCallBackR6Beacon13callback_type+0x25c>
   b4626:	4623      	mov	r3, r4
   b4628:	4615      	mov	r5, r2
   b462a:	461c      	mov	r4, r3
   b462c:	e7c7      	b.n	b45be <_Z10onCallBackR6Beacon13callback_type+0x1da>
	    return _M_get_insert_unique_pos(__k);
   b462e:	4642      	mov	r2, r8
   b4630:	f1aa 0104 	sub.w	r1, sl, #4
   b4634:	a802      	add	r0, sp, #8
   b4636:	f7ff fe6e 	bl	b4316 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b463a:	e9dd 5302 	ldrd	r5, r3, [sp, #8]
   b463e:	e7f4      	b.n	b462a <_Z10onCallBackR6Beacon13callback_type+0x246>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4640:	462b      	mov	r3, r5
   b4642:	e7f2      	b.n	b462a <_Z10onCallBackR6Beacon13callback_type+0x246>
			    || _M_impl._M_key_compare(_S_key(__z),
   b4644:	2001      	movs	r0, #1
   b4646:	e7c9      	b.n	b45dc <_Z10onCallBackR6Beacon13callback_type+0x1f8>
   b4648:	462c      	mov	r4, r5
   b464a:	e771      	b.n	b4530 <_Z10onCallBackR6Beacon13callback_type+0x14c>
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
   b464c:	aa06      	add	r2, sp, #24
   b464e:	4631      	mov	r1, r6
   b4650:	a816      	add	r0, sp, #88	; 0x58
   b4652:	f7ff fe1b 	bl	b428c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11equal_rangeERS2_>
      : _M_node(__it._M_node) { }
   b4656:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
      if (__first == begin() && __last == end())
   b465a:	68f3      	ldr	r3, [r6, #12]
   b465c:	429c      	cmp	r4, r3
   b465e:	d10b      	bne.n	b4678 <_Z10onCallBackR6Beacon13callback_type+0x294>
   b4660:	1d33      	adds	r3, r6, #4
   b4662:	429d      	cmp	r5, r3
   b4664:	d108      	bne.n	b4678 <_Z10onCallBackR6Beacon13callback_type+0x294>
	_M_erase(_M_begin());
   b4666:	68b0      	ldr	r0, [r6, #8]
   b4668:	f7ff fd5b 	bl	b4122 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0>
      _M_header._M_parent = 0;
   b466c:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b466e:	e9c6 3502 	strd	r3, r5, [r6, #8]
      _M_node_count = 0;
   b4672:	e9c6 5304 	strd	r5, r3, [r6, #16]
      }
   b4676:	e76c      	b.n	b4552 <_Z10onCallBackR6Beacon13callback_type+0x16e>
				(const_cast<_Base_ptr>(__position._M_node),
   b4678:	f8df 9034 	ldr.w	r9, [pc, #52]	; b46b0 <_Z10onCallBackR6Beacon13callback_type+0x2cc>
	while (__first != __last)
   b467c:	42a5      	cmp	r5, r4
   b467e:	f43f af68 	beq.w	b4552 <_Z10onCallBackR6Beacon13callback_type+0x16e>
	_M_node = _Rb_tree_increment(_M_node);
   b4682:	4620      	mov	r0, r4
   b4684:	f006 fc0e 	bl	baea4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
				(const_cast<_Base_ptr>(__position._M_node),
   b4688:	4649      	mov	r1, r9
	_M_node = _Rb_tree_increment(_M_node);
   b468a:	4680      	mov	r8, r0
				(const_cast<_Base_ptr>(__position._M_node),
   b468c:	4620      	mov	r0, r4
   b468e:	f006 fc68 	bl	baf62 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
      _M_drop_node(__y);
   b4692:	f7ff fd36 	bl	b4102 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E.isra.0>
      --_M_impl._M_node_count;
   b4696:	6973      	ldr	r3, [r6, #20]
   b4698:	3b01      	subs	r3, #1
   b469a:	6173      	str	r3, [r6, #20]
	_M_node = _Rb_tree_increment(_M_node);
   b469c:	4644      	mov	r4, r8
	while (__first != __last)
   b469e:	e7ed      	b.n	b467c <_Z10onCallBackR6Beacon13callback_type+0x298>
   b46a0:	000bbc9a 	.word	0x000bbc9a
   b46a4:	000bc5c4 	.word	0x000bc5c4
   b46a8:	2003e6a8 	.word	0x2003e6a8
   b46ac:	2003e64c 	.word	0x2003e64c
   b46b0:	2003e650 	.word	0x2003e650
   b46b4:	000bbcf8 	.word	0x000bbcf8
   b46b8:	000bbf9c 	.word	0x000bbf9c
   b46bc:	2003e664 	.word	0x2003e664
	if (__i == end() || key_comp()(__k, (*__i).first))
   b46c0:	42b4      	cmp	r4, r6
   b46c2:	d12d      	bne.n	b4720 <_Z10onCallBackR6Beacon13callback_type+0x33c>
   b46c4:	2024      	movs	r0, #36	; 0x24
   b46c6:	f7ff fce4 	bl	b4092 <_Znwj>
      if (__pos._M_node == _M_end())
   b46ca:	f8df a2a0 	ldr.w	sl, [pc, #672]	; b496c <_Z10onCallBackR6Beacon13callback_type+0x588>
   b46ce:	f100 0610 	add.w	r6, r0, #16
   b46d2:	4681      	mov	r9, r0
   b46d4:	a90e      	add	r1, sp, #56	; 0x38
   b46d6:	4630      	mov	r0, r6
   b46d8:	f003 f928 	bl	b792c <_ZN6StringC1ERKS_>
   b46dc:	2300      	movs	r3, #0
   b46de:	4554      	cmp	r4, sl
   b46e0:	f889 3020 	strb.w	r3, [r9, #32]
   b46e4:	f040 80c2 	bne.w	b486c <_Z10onCallBackR6Beacon13callback_type+0x488>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b46e8:	f8d8 3014 	ldr.w	r3, [r8, #20]
   b46ec:	2b00      	cmp	r3, #0
   b46ee:	f000 80b5 	beq.w	b485c <_Z10onCallBackR6Beacon13callback_type+0x478>
      { return __x.first; }
   b46f2:	f8d8 0010 	ldr.w	r0, [r8, #16]
      { return __x < __y; }
   b46f6:	4631      	mov	r1, r6
   b46f8:	3010      	adds	r0, #16
   b46fa:	f003 f9b6 	bl	b7a6a <_ZNK6StringltERKS_>
   b46fe:	2800      	cmp	r0, #0
   b4700:	f000 80ac 	beq.w	b485c <_Z10onCallBackR6Beacon13callback_type+0x478>
       : first(__x), second(std::forward<_U2>(__y)) { }
   b4704:	f8d8 4010 	ldr.w	r4, [r8, #16]
	    if (__res.second)
   b4708:	2c00      	cmp	r4, #0
   b470a:	f040 80cb 	bne.w	b48a4 <_Z10onCallBackR6Beacon13callback_type+0x4c0>
    struct pair
   b470e:	4630      	mov	r0, r6
   b4710:	f003 f876 	bl	b7800 <_ZN6StringD1Ev>
	::operator delete(__p
   b4714:	4648      	mov	r0, r9
   b4716:	2124      	movs	r1, #36	; 0x24
   b4718:	f7ff fcbf 	bl	b409a <_ZdlPvj>
   b471c:	46a1      	mov	r9, r4
   b471e:	e0d6      	b.n	b48ce <_Z10onCallBackR6Beacon13callback_type+0x4ea>
   b4720:	f104 0110 	add.w	r1, r4, #16
   b4724:	a80e      	add	r0, sp, #56	; 0x38
   b4726:	f003 f9a0 	bl	b7a6a <_ZNK6StringltERKS_>
   b472a:	2800      	cmp	r0, #0
   b472c:	d1ca      	bne.n	b46c4 <_Z10onCallBackR6Beacon13callback_type+0x2e0>
  bool inside = (type==NEW) ? true : false;
   b472e:	1e7b      	subs	r3, r7, #1
   b4730:	425f      	negs	r7, r3
   b4732:	415f      	adcs	r7, r3

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4734:	4983      	ldr	r1, [pc, #524]	; (b4944 <_Z10onCallBackR6Beacon13callback_type+0x560>)
      presence[uuid] = inside;
   b4736:	f884 7020 	strb.w	r7, [r4, #32]
   b473a:	a812      	add	r0, sp, #72	; 0x48
   b473c:	f003 f8ab 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
      jsonString = "{\"uuid\":\"" + uuid + 
   b4740:	a90e      	add	r1, sp, #56	; 0x38
   b4742:	a812      	add	r0, sp, #72	; 0x48
   b4744:	f003 f944 	bl	b79d0 <_ZplRK15StringSumHelperRK6String>
        "\",\"inside\":\"" + inside + 
   b4748:	497f      	ldr	r1, [pc, #508]	; (b4948 <_Z10onCallBackR6Beacon13callback_type+0x564>)
   b474a:	f003 f94d 	bl	b79e8 <_ZplRK15StringSumHelperPKc>
   b474e:	4639      	mov	r1, r7
   b4750:	f003 f95f 	bl	b7a12 <_ZplRK15StringSumHelperi>
        "\",\"time\":\"" + Time.timeStr().c_str() +
   b4754:	497d      	ldr	r1, [pc, #500]	; (b494c <_Z10onCallBackR6Beacon13callback_type+0x568>)
   b4756:	f003 f947 	bl	b79e8 <_ZplRK15StringSumHelperPKc>
   b475a:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b475c:	f005 fd8d 	bl	ba27a <_ZN9TimeClass3nowEv>
   b4760:	4602      	mov	r2, r0
   b4762:	17c3      	asrs	r3, r0, #31
   b4764:	a816      	add	r0, sp, #88	; 0x58
   b4766:	f005 fd2f 	bl	ba1c8 <_ZN9TimeClass7timeStrEx>
   b476a:	9916      	ldr	r1, [sp, #88]	; 0x58
   b476c:	4620      	mov	r0, r4
   b476e:	f003 f93b 	bl	b79e8 <_ZplRK15StringSumHelperPKc>
        "\"}";
   b4772:	4977      	ldr	r1, [pc, #476]	; (b4950 <_Z10onCallBackR6Beacon13callback_type+0x56c>)
   b4774:	f003 f938 	bl	b79e8 <_ZplRK15StringSumHelperPKc>
   b4778:	4601      	mov	r1, r0
   b477a:	a80a      	add	r0, sp, #40	; 0x28
   b477c:	f003 f8c7 	bl	b790e <_ZN6StringaSERKS_>
        "\",\"time\":\"" + Time.timeStr().c_str() +
   b4780:	a816      	add	r0, sp, #88	; 0x58
   b4782:	f003 f83d 	bl	b7800 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4786:	a812      	add	r0, sp, #72	; 0x48
   b4788:	f003 f83a 	bl	b7800 <_ZN6StringD1Ev>
      String uuid = beacon.getUuid();
   b478c:	a80e      	add	r0, sp, #56	; 0x38
   b478e:	f003 f837 	bl	b7800 <_ZN6StringD1Ev>
        return spark_deviceID();
   b4792:	a81a      	add	r0, sp, #104	; 0x68
   b4794:	f002 ff20 	bl	b75d8 <spark_deviceID>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4798:	4b6e      	ldr	r3, [pc, #440]	; (b4954 <_Z10onCallBackR6Beacon13callback_type+0x570>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b479a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b479c:	781b      	ldrb	r3, [r3, #0]
   b479e:	f88d 3000 	strb.w	r3, [sp]
   b47a2:	991a      	ldr	r1, [sp, #104]	; 0x68
   b47a4:	233c      	movs	r3, #60	; 0x3c
   b47a6:	a816      	add	r0, sp, #88	; 0x58
   b47a8:	f005 fe4e 	bl	ba448 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b47ac:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   b47ae:	b17c      	cbz	r4, b47d0 <_Z10onCallBackR6Beacon13callback_type+0x3ec>
      if (--_M_use_count == 0)
   b47b0:	6863      	ldr	r3, [r4, #4]
   b47b2:	3b01      	subs	r3, #1
   b47b4:	6063      	str	r3, [r4, #4]
   b47b6:	b95b      	cbnz	r3, b47d0 <_Z10onCallBackR6Beacon13callback_type+0x3ec>
          _M_dispose();
   b47b8:	6823      	ldr	r3, [r4, #0]
   b47ba:	4620      	mov	r0, r4
   b47bc:	689b      	ldr	r3, [r3, #8]
   b47be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47c0:	68a3      	ldr	r3, [r4, #8]
   b47c2:	3b01      	subs	r3, #1
   b47c4:	60a3      	str	r3, [r4, #8]
   b47c6:	b91b      	cbnz	r3, b47d0 <_Z10onCallBackR6Beacon13callback_type+0x3ec>
            _M_destroy();
   b47c8:	6823      	ldr	r3, [r4, #0]
   b47ca:	4620      	mov	r0, r4
   b47cc:	68db      	ldr	r3, [r3, #12]
   b47ce:	4798      	blx	r3
      { return iterator(this->_M_impl._M_header._M_left); }
   b47d0:	4e61      	ldr	r6, [pc, #388]	; (b4958 <_Z10onCallBackR6Beacon13callback_type+0x574>)
  for(itPresence = presence.begin(); itPresence != presence.end(); itPresence++){
   b47d2:	4c62      	ldr	r4, [pc, #392]	; (b495c <_Z10onCallBackR6Beacon13callback_type+0x578>)
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
   b47d4:	f8df 8198 	ldr.w	r8, [pc, #408]	; b4970 <_Z10onCallBackR6Beacon13callback_type+0x58c>
   b47d8:	4f61      	ldr	r7, [pc, #388]	; (b4960 <_Z10onCallBackR6Beacon13callback_type+0x57c>)
  Particle.publish(Particle.deviceID().c_str(), jsonString.c_str());
   b47da:	a81a      	add	r0, sp, #104	; 0x68
   b47dc:	f003 f810 	bl	b7800 <_ZN6StringD1Ev>
  Serial.println("PUBLISHED");
   b47e0:	f006 f816 	bl	ba810 <_Z16_fetch_usbserialv>
   b47e4:	495f      	ldr	r1, [pc, #380]	; (b4964 <_Z10onCallBackR6Beacon13callback_type+0x580>)
   b47e6:	f005 fc80 	bl	ba0ea <_ZN5Print7printlnEPKc>
  for(itPresence = presence.begin(); itPresence != presence.end(); itPresence++){
   b47ea:	68f2      	ldr	r2, [r6, #12]
   b47ec:	6022      	str	r2, [r4, #0]
   b47ee:	3604      	adds	r6, #4
      { return __x._M_node != __y._M_node; }
   b47f0:	6821      	ldr	r1, [r4, #0]
   b47f2:	42b1      	cmp	r1, r6
   b47f4:	f000 809d 	beq.w	b4932 <_Z10onCallBackR6Beacon13callback_type+0x54e>
    String uuid = itPresence->first;
   b47f8:	3110      	adds	r1, #16
   b47fa:	a812      	add	r0, sp, #72	; 0x48
   b47fc:	f003 f896 	bl	b792c <_ZN6StringC1ERKS_>
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
   b4800:	6823      	ldr	r3, [r4, #0]
   b4802:	f893 1020 	ldrb.w	r1, [r3, #32]
   b4806:	a816      	add	r0, sp, #88	; 0x58
   b4808:	2900      	cmp	r1, #0
   b480a:	bf14      	ite	ne
   b480c:	4641      	movne	r1, r8
   b480e:	4639      	moveq	r1, r7
   b4810:	f003 f841 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.printf("%s is %s :: %s\n", uuid.c_str(), pres.c_str(), Time.timeStr().c_str());
   b4814:	f005 fffc 	bl	ba810 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4818:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   b481c:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   b4820:	4605      	mov	r5, r0
   b4822:	f005 fd2a 	bl	ba27a <_ZN9TimeClass3nowEv>
   b4826:	4602      	mov	r2, r0
   b4828:	17c3      	asrs	r3, r0, #31
   b482a:	a81a      	add	r0, sp, #104	; 0x68
   b482c:	f005 fccc 	bl	ba1c8 <_ZN9TimeClass7timeStrEx>
   b4830:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b4832:	494d      	ldr	r1, [pc, #308]	; (b4968 <_Z10onCallBackR6Beacon13callback_type+0x584>)
   b4834:	9300      	str	r3, [sp, #0]
   b4836:	464a      	mov	r2, r9
   b4838:	4653      	mov	r3, sl
   b483a:	4628      	mov	r0, r5
   b483c:	f7ff fc7e 	bl	b413c <_ZN5Print6printfEPKcz>
   b4840:	a81a      	add	r0, sp, #104	; 0x68
   b4842:	f002 ffdd 	bl	b7800 <_ZN6StringD1Ev>
    String pres =  itPresence->second ? "PRESENT":"ABSENT";
   b4846:	a816      	add	r0, sp, #88	; 0x58
   b4848:	f002 ffda 	bl	b7800 <_ZN6StringD1Ev>
    String uuid = itPresence->first;
   b484c:	a812      	add	r0, sp, #72	; 0x48
   b484e:	f002 ffd7 	bl	b7800 <_ZN6StringD1Ev>
	_M_node = _Rb_tree_increment(_M_node);
   b4852:	6820      	ldr	r0, [r4, #0]
   b4854:	f006 fb24 	bl	baea0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b4858:	6020      	str	r0, [r4, #0]
	return __tmp;
   b485a:	e7c9      	b.n	b47f0 <_Z10onCallBackR6Beacon13callback_type+0x40c>
	    return _M_get_insert_unique_pos(__k);
   b485c:	493e      	ldr	r1, [pc, #248]	; (b4958 <_Z10onCallBackR6Beacon13callback_type+0x574>)
   b485e:	4632      	mov	r2, r6
	    return _M_get_insert_unique_pos(__k);
   b4860:	a804      	add	r0, sp, #16
   b4862:	f7ff fd8b 	bl	b437c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b4866:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
   b486a:	e017      	b.n	b489c <_Z10onCallBackR6Beacon13callback_type+0x4b8>
      { return __x.first; }
   b486c:	f104 0b10 	add.w	fp, r4, #16
      { return __x < __y; }
   b4870:	4659      	mov	r1, fp
   b4872:	4630      	mov	r0, r6
   b4874:	f003 f8f9 	bl	b7a6a <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b4878:	b388      	cbz	r0, b48de <_Z10onCallBackR6Beacon13callback_type+0x4fa>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b487a:	f8d8 500c 	ldr.w	r5, [r8, #12]
   b487e:	42ac      	cmp	r4, r5
   b4880:	d00c      	beq.n	b489c <_Z10onCallBackR6Beacon13callback_type+0x4b8>
	_M_node = _Rb_tree_decrement(_M_node);
   b4882:	4620      	mov	r0, r4
   b4884:	f006 fb10 	bl	baea8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b4888:	4631      	mov	r1, r6
   b488a:	4683      	mov	fp, r0
   b488c:	3010      	adds	r0, #16
   b488e:	f003 f8ec 	bl	b7a6a <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b4892:	b1f0      	cbz	r0, b48d2 <_Z10onCallBackR6Beacon13callback_type+0x4ee>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4894:	f8db 500c 	ldr.w	r5, [fp, #12]
	      if (_S_right(__before._M_node) == 0)
   b4898:	b9fd      	cbnz	r5, b48da <_Z10onCallBackR6Beacon13callback_type+0x4f6>
   b489a:	465c      	mov	r4, fp
	    if (__res.second)
   b489c:	2c00      	cmp	r4, #0
   b489e:	d046      	beq.n	b492e <_Z10onCallBackR6Beacon13callback_type+0x54a>
			    || _M_impl._M_key_compare(_S_key(__z),
   b48a0:	2d00      	cmp	r5, #0
   b48a2:	d142      	bne.n	b492a <_Z10onCallBackR6Beacon13callback_type+0x546>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b48a4:	4b31      	ldr	r3, [pc, #196]	; (b496c <_Z10onCallBackR6Beacon13callback_type+0x588>)
   b48a6:	429c      	cmp	r4, r3
   b48a8:	d03f      	beq.n	b492a <_Z10onCallBackR6Beacon13callback_type+0x546>
   b48aa:	f104 0110 	add.w	r1, r4, #16
   b48ae:	4630      	mov	r0, r6
   b48b0:	f003 f8db 	bl	b7a6a <_ZNK6StringltERKS_>
			    || _M_impl._M_key_compare(_S_key(__z),
   b48b4:	3800      	subs	r0, #0
   b48b6:	bf18      	it	ne
   b48b8:	2001      	movne	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b48ba:	4b2c      	ldr	r3, [pc, #176]	; (b496c <_Z10onCallBackR6Beacon13callback_type+0x588>)
   b48bc:	4622      	mov	r2, r4
   b48be:	4649      	mov	r1, r9
   b48c0:	f006 faf4 	bl	baeac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b48c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
   b48c8:	3301      	adds	r3, #1
   b48ca:	f8c8 3014 	str.w	r3, [r8, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b48ce:	464c      	mov	r4, r9
   b48d0:	e72d      	b.n	b472e <_Z10onCallBackR6Beacon13callback_type+0x34a>
	    return _M_get_insert_unique_pos(__k);
   b48d2:	4632      	mov	r2, r6
   b48d4:	f1aa 0104 	sub.w	r1, sl, #4
   b48d8:	e7c2      	b.n	b4860 <_Z10onCallBackR6Beacon13callback_type+0x47c>
   b48da:	4625      	mov	r5, r4
   b48dc:	e7de      	b.n	b489c <_Z10onCallBackR6Beacon13callback_type+0x4b8>
   b48de:	4631      	mov	r1, r6
   b48e0:	4658      	mov	r0, fp
   b48e2:	f003 f8c2 	bl	b7a6a <_ZNK6StringltERKS_>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b48e6:	2800      	cmp	r0, #0
   b48e8:	f43f af11 	beq.w	b470e <_Z10onCallBackR6Beacon13callback_type+0x32a>
	  if (__pos._M_node == _M_rightmost())
   b48ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b48f0:	429c      	cmp	r4, r3
   b48f2:	d00d      	beq.n	b4910 <_Z10onCallBackR6Beacon13callback_type+0x52c>
	_M_node = _Rb_tree_increment(_M_node);
   b48f4:	4620      	mov	r0, r4
   b48f6:	f006 fad3 	bl	baea0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   b48fa:	4605      	mov	r5, r0
   b48fc:	f100 0110 	add.w	r1, r0, #16
   b4900:	4630      	mov	r0, r6
   b4902:	f003 f8b2 	bl	b7a6a <_ZNK6StringltERKS_>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b4906:	b128      	cbz	r0, b4914 <_Z10onCallBackR6Beacon13callback_type+0x530>
      { return static_cast<_Link_type>(__x->_M_right); }
   b4908:	68e2      	ldr	r2, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b490a:	b962      	cbnz	r2, b4926 <_Z10onCallBackR6Beacon13callback_type+0x542>
   b490c:	4623      	mov	r3, r4
       : first(__x), second(std::forward<_U2>(__y)) { }
   b490e:	4615      	mov	r5, r2
   b4910:	461c      	mov	r4, r3
   b4912:	e7c3      	b.n	b489c <_Z10onCallBackR6Beacon13callback_type+0x4b8>
	    return _M_get_insert_unique_pos(__k);
   b4914:	4632      	mov	r2, r6
   b4916:	f1aa 0104 	sub.w	r1, sl, #4
   b491a:	a804      	add	r0, sp, #16
   b491c:	f7ff fd2e 	bl	b437c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_bESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   b4920:	e9dd 5304 	ldrd	r5, r3, [sp, #16]
   b4924:	e7f4      	b.n	b4910 <_Z10onCallBackR6Beacon13callback_type+0x52c>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b4926:	462b      	mov	r3, r5
   b4928:	e7f2      	b.n	b4910 <_Z10onCallBackR6Beacon13callback_type+0x52c>
			    || _M_impl._M_key_compare(_S_key(__z),
   b492a:	2001      	movs	r0, #1
   b492c:	e7c5      	b.n	b48ba <_Z10onCallBackR6Beacon13callback_type+0x4d6>
   b492e:	462c      	mov	r4, r5
   b4930:	e6ed      	b.n	b470e <_Z10onCallBackR6Beacon13callback_type+0x32a>
  String jsonString;
   b4932:	a80a      	add	r0, sp, #40	; 0x28
   b4934:	f002 ff64 	bl	b7800 <_ZN6StringD1Ev>
  String addr = beacon.getAddress().toString();
   b4938:	a806      	add	r0, sp, #24
   b493a:	f002 ff61 	bl	b7800 <_ZN6StringD1Ev>
}
   b493e:	b02b      	add	sp, #172	; 0xac
   b4940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4944:	000bbcae 	.word	0x000bbcae
   b4948:	000bbcb8 	.word	0x000bbcb8
   b494c:	000bbcc5 	.word	0x000bbcc5
   b4950:	000bbcd0 	.word	0x000bbcd0
   b4954:	2003e640 	.word	0x2003e640
   b4958:	2003e664 	.word	0x2003e664
   b495c:	2003e648 	.word	0x2003e648
   b4960:	000bbc93 	.word	0x000bbc93
   b4964:	000bbcd3 	.word	0x000bbcd3
   b4968:	000bbcdd 	.word	0x000bbcdd
   b496c:	2003e668 	.word	0x2003e668
   b4970:	000bbc8b 	.word	0x000bbc8b

000b4974 <_GLOBAL__sub_I_players>:
        val_(val) {
   b4974:	4b0d      	ldr	r3, [pc, #52]	; (b49ac <_GLOBAL__sub_I_players+0x38>)
   b4976:	b510      	push	{r4, lr}
   b4978:	2400      	movs	r4, #0
   b497a:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b497c:	4621      	mov	r1, r4
   b497e:	2001      	movs	r0, #1
   b4980:	f002 fd7e 	bl	b7480 <system_thread_set_state>
      _M_header._M_color = _S_red;
   b4984:	4b0a      	ldr	r3, [pc, #40]	; (b49b0 <_GLOBAL__sub_I_players+0x3c>)
      _M_header._M_left = &_M_header;
   b4986:	1d1a      	adds	r2, r3, #4
      _M_header._M_right = &_M_header;
   b4988:	e9c3 2203 	strd	r2, r2, [r3, #12]
      _M_header._M_color = _S_red;
   b498c:	711c      	strb	r4, [r3, #4]
      _M_header._M_parent = 0;
   b498e:	609c      	str	r4, [r3, #8]
      _M_node_count = 0;
   b4990:	615c      	str	r4, [r3, #20]
      _M_header._M_color = _S_red;
   b4992:	4b08      	ldr	r3, [pc, #32]	; (b49b4 <_GLOBAL__sub_I_players+0x40>)
      _M_header._M_left = &_M_header;
   b4994:	1d1a      	adds	r2, r3, #4
      _M_header._M_right = &_M_header;
   b4996:	e9c3 2203 	strd	r2, r2, [r3, #12]
      _M_header._M_color = _S_red;
   b499a:	711c      	strb	r4, [r3, #4]
      _M_header._M_parent = 0;
   b499c:	609c      	str	r4, [r3, #8]
      _M_node_count = 0;
   b499e:	615c      	str	r4, [r3, #20]
      : _M_node() { }
   b49a0:	4b05      	ldr	r3, [pc, #20]	; (b49b8 <_GLOBAL__sub_I_players+0x44>)
   b49a2:	601c      	str	r4, [r3, #0]
   b49a4:	4b05      	ldr	r3, [pc, #20]	; (b49bc <_GLOBAL__sub_I_players+0x48>)
   b49a6:	601c      	str	r4, [r3, #0]
   b49a8:	bd10      	pop	{r4, pc}
   b49aa:	bf00      	nop
   b49ac:	2003e640 	.word	0x2003e640
   b49b0:	2003e64c 	.word	0x2003e64c
   b49b4:	2003e664 	.word	0x2003e664
   b49b8:	2003e644 	.word	0x2003e644
   b49bc:	2003e648 	.word	0x2003e648

000b49c0 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b49c0:	b513      	push	{r0, r1, r4, lr}
   b49c2:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b49c4:	4608      	mov	r0, r1
   b49c6:	9101      	str	r1, [sp, #4]
   b49c8:	f007 f8d3 	bl	bbb72 <strlen>
   b49cc:	9901      	ldr	r1, [sp, #4]
   b49ce:	4602      	mov	r2, r0
   b49d0:	4620      	mov	r0, r4
}
   b49d2:	b002      	add	sp, #8
   b49d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b49d8:	f006 b9aa 	b.w	bad30 <_ZN5spark10JSONWriter4nameEPKcj>

000b49dc <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE>:
    }
    return false;
}

void KontaktTag::toJson(JSONWriter *writer) const
{
   b49dc:	b530      	push	{r4, r5, lr}
   b49de:	b085      	sub	sp, #20
   b49e0:	4604      	mov	r4, r0
   b49e2:	460d      	mov	r5, r1
        writer->name(address.toString()).beginObject();
   b49e4:	2200      	movs	r2, #0
   b49e6:	1dc1      	adds	r1, r0, #7
   b49e8:	4668      	mov	r0, sp
   b49ea:	f003 fa37 	bl	b7e5c <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b49ee:	9a02      	ldr	r2, [sp, #8]
   b49f0:	9900      	ldr	r1, [sp, #0]
   b49f2:	4628      	mov	r0, r5
   b49f4:	f006 f99c 	bl	bad30 <_ZN5spark10JSONWriter4nameEPKcj>
   b49f8:	f006 f8e0 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
   b49fc:	4668      	mov	r0, sp
   b49fe:	f002 feff 	bl	b7800 <_ZN6StringD1Ev>
        if (battery != 0xFF)
   b4a02:	7ce3      	ldrb	r3, [r4, #19]
   b4a04:	2bff      	cmp	r3, #255	; 0xff
   b4a06:	d006      	beq.n	b4a16 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x3a>
            writer->name("batt").value(battery);
   b4a08:	4923      	ldr	r1, [pc, #140]	; (b4a98 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xbc>)
   b4a0a:	4628      	mov	r0, r5
   b4a0c:	f7ff ffd8 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a10:	7ce1      	ldrb	r1, [r4, #19]
   b4a12:	f006 f8f7 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        if (temperature != 0xFF)
            writer->name("temp").value(temperature);
   b4a16:	4921      	ldr	r1, [pc, #132]	; (b4a9c <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc0>)
   b4a18:	4628      	mov	r0, r5
   b4a1a:	f7ff ffd1 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a1e:	f994 101f 	ldrsb.w	r1, [r4, #31]
   b4a22:	f006 f8ef 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        if (button_time != 0xFFFF)
   b4a26:	8ae2      	ldrh	r2, [r4, #22]
   b4a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4a2c:	429a      	cmp	r2, r3
   b4a2e:	d006      	beq.n	b4a3e <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x62>
            writer->name("button").value(button_time);
   b4a30:	491b      	ldr	r1, [pc, #108]	; (b4aa0 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc4>)
   b4a32:	4628      	mov	r0, r5
   b4a34:	f7ff ffc4 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a38:	8ae1      	ldrh	r1, [r4, #22]
   b4a3a:	f006 f8e3 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        if (accel_data)
   b4a3e:	f894 3020 	ldrb.w	r3, [r4, #32]
   b4a42:	b1bb      	cbz	r3, b4a74 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0x98>
        {
            writer->name("x_axis").value(x_axis);
   b4a44:	4917      	ldr	r1, [pc, #92]	; (b4aa4 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xc8>)
   b4a46:	4628      	mov	r0, r5
   b4a48:	f7ff ffba 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a4c:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b4a50:	f006 f8d8 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->name("y_axis").value(y_axis);
   b4a54:	4914      	ldr	r1, [pc, #80]	; (b4aa8 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xcc>)
   b4a56:	4628      	mov	r0, r5
   b4a58:	f7ff ffb2 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a5c:	f994 101d 	ldrsb.w	r1, [r4, #29]
   b4a60:	f006 f8d0 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->name("z_axis").value(z_axis);
   b4a64:	4911      	ldr	r1, [pc, #68]	; (b4aac <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xd0>)
   b4a66:	4628      	mov	r0, r5
   b4a68:	f7ff ffaa 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4a6c:	f994 101e 	ldrsb.w	r1, [r4, #30]
   b4a70:	f006 f8c8 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        }
        writer->name("rssi").value(getRssi());
   b4a74:	490e      	ldr	r1, [pc, #56]	; (b4ab0 <_ZNK10KontaktTag6toJsonEPN5spark10JSONWriterE+0xd4>)
   b4a76:	4628      	mov	r0, r5
   b4a78:	f7ff ffa2 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b4a7c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a80:	7ca3      	ldrb	r3, [r4, #18]
   b4a82:	fb91 f1f3 	sdiv	r1, r1, r3
   b4a86:	b249      	sxtb	r1, r1
   b4a88:	f006 f8bc 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b4a8c:	4628      	mov	r0, r5
}
   b4a8e:	b005      	add	sp, #20
   b4a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        writer->endObject();
   b4a94:	f006 b87c 	b.w	bab90 <_ZN5spark10JSONWriter9endObjectEv>
   b4a98:	000bc098 	.word	0x000bc098
   b4a9c:	000bbd00 	.word	0x000bbd00
   b4aa0:	000bbd05 	.word	0x000bbd05
   b4aa4:	000bbd0c 	.word	0x000bbd0c
   b4aa8:	000bbd13 	.word	0x000bbd13
   b4aac:	000bbd1a 	.word	0x000bbd1a
   b4ab0:	000bbd21 	.word	0x000bbd21

000b4ab4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4ab4:	b40e      	push	{r1, r2, r3}
   b4ab6:	b500      	push	{lr}
   b4ab8:	b08c      	sub	sp, #48	; 0x30
   b4aba:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4abc:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4ac0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4ac4:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ac6:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4aca:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4acc:	6801      	ldr	r1, [r0, #0]
   b4ace:	aa04      	add	r2, sp, #16
   b4ad0:	201e      	movs	r0, #30
    attr.flags = 0;
   b4ad2:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ad6:	f002 fcbb 	bl	b7450 <log_message_v>
}
   b4ada:	b00c      	add	sp, #48	; 0x30
   b4adc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4ae0:	b003      	add	sp, #12
   b4ae2:	4770      	bx	lr

000b4ae4 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE>:
{
   b4ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ae8:	460c      	mov	r4, r1
   b4aea:	b0a3      	sub	sp, #140	; 0x8c
   b4aec:	4605      	mov	r5, r0
    Beacon::populateData(scanResult);
   b4aee:	f7ff fade 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b4af2:	4621      	mov	r1, r4
   b4af4:	1de8      	adds	r0, r5, #7
   b4af6:	f003 f924 	bl	b7d42 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, sizeof(buf));
   b4afa:	231f      	movs	r3, #31
   b4afc:	aa01      	add	r2, sp, #4
   b4afe:	2116      	movs	r1, #22
   b4b00:	f104 0008 	add.w	r0, r4, #8
   b4b04:	f003 fb2f 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b4b08:	b2c6      	uxtb	r6, r0
    if (count > 3 && buf[0] == 0x6A && buf[1] == 0xFE) // Kontakt UUID
   b4b0a:	2e03      	cmp	r6, #3
   b4b0c:	d94f      	bls.n	b4bae <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
   b4b0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4b12:	2b6a      	cmp	r3, #106	; 0x6a
   b4b14:	d14b      	bne.n	b4bae <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
   b4b16:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4b1a:	2bfe      	cmp	r3, #254	; 0xfe
   b4b1c:	d147      	bne.n	b4bae <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
        if (buf[cursor] == 0x03) // Telemetry v1 packet
   b4b1e:	f89d 4006 	ldrb.w	r4, [sp, #6]
   b4b22:	2c03      	cmp	r4, #3
   b4b24:	d143      	bne.n	b4bae <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xca>
                cursor++;
   b4b26:	1c62      	adds	r2, r4, #1
                switch (buf[cursor++])
   b4b28:	a922      	add	r1, sp, #136	; 0x88
                cursor++;
   b4b2a:	fa5f f982 	uxtb.w	r9, r2
                switch (buf[cursor++])
   b4b2e:	fa51 f282 	uxtab	r2, r1, r2
   b4b32:	1ca3      	adds	r3, r4, #2
   b4b34:	f812 2c84 	ldrb.w	r2, [r2, #-132]
   b4b38:	2a05      	cmp	r2, #5
   b4b3a:	b2db      	uxtb	r3, r3
   b4b3c:	d06d      	beq.n	b4c1a <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x136>
   b4b3e:	d81d      	bhi.n	b4b7c <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x98>
   b4b40:	2a01      	cmp	r2, #1
   b4b42:	d029      	beq.n	b4b98 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xb4>
   b4b44:	2a02      	cmp	r2, #2
   b4b46:	d035      	beq.n	b4bb4 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xd0>
                uint8_t size = buf[cursor];
   b4b48:	ab22      	add	r3, sp, #136	; 0x88
   b4b4a:	441c      	add	r4, r3
   b4b4c:	af09      	add	r7, sp, #36	; 0x24
   b4b4e:	ab01      	add	r3, sp, #4
   b4b50:	f814 4c84 	ldrb.w	r4, [r4, #-132]
   b4b54:	eb03 0a09 	add.w	sl, r3, r9
   b4b58:	f04f 0800 	mov.w	r8, #0
   b4b5c:	46bb      	mov	fp, r7
                    for (uint8_t i = 0; i < size; i++)
   b4b5e:	fa5f f388 	uxtb.w	r3, r8
   b4b62:	429c      	cmp	r4, r3
   b4b64:	d963      	bls.n	b4c2e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x14a>
                        snprintf(nbuf + i * 2, sizeof(nbuf), "%02X", buf[cursor + i]);
   b4b66:	4638      	mov	r0, r7
   b4b68:	f81a 3b01 	ldrb.w	r3, [sl], #1
   b4b6c:	4a36      	ldr	r2, [pc, #216]	; (b4c48 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x164>)
   b4b6e:	2164      	movs	r1, #100	; 0x64
   b4b70:	f002 fd72 	bl	b7658 <snprintf>
                    for (uint8_t i = 0; i < size; i++)
   b4b74:	f108 0801 	add.w	r8, r8, #1
   b4b78:	3702      	adds	r7, #2
   b4b7a:	e7f0      	b.n	b4b5e <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x7a>
                switch (buf[cursor++])
   b4b7c:	2a0d      	cmp	r2, #13
   b4b7e:	d1e3      	bne.n	b4b48 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x64>
                    button_time = buf[cursor] + buf[cursor + 1] * 256;
   b4b80:	aa22      	add	r2, sp, #136	; 0x88
   b4b82:	4413      	add	r3, r2
                    cursor += 2;
   b4b84:	3404      	adds	r4, #4
                    button_time = buf[cursor] + buf[cursor + 1] * 256;
   b4b86:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b4b8a:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4b8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4b92:	82eb      	strh	r3, [r5, #22]
                    cursor += size;
   b4b94:	b2e4      	uxtb	r4, r4
   b4b96:	e008      	b.n	b4baa <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    cursor += 4; // Advance to battery level
   b4b98:	1da3      	adds	r3, r4, #6
                    battery = buf[cursor++];
   b4b9a:	aa22      	add	r2, sp, #136	; 0x88
   b4b9c:	fa52 f383 	uxtab	r3, r2, r3
   b4ba0:	3407      	adds	r4, #7
   b4ba2:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4ba6:	74eb      	strb	r3, [r5, #19]
   b4ba8:	b2e4      	uxtb	r4, r4
            while (cursor < count)
   b4baa:	42b4      	cmp	r4, r6
   b4bac:	d3bb      	bcc.n	b4b26 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x42>
}
   b4bae:	b023      	add	sp, #140	; 0x8c
   b4bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    accel_sensitivity = buf[cursor++];
   b4bb4:	aa22      	add	r2, sp, #136	; 0x88
   b4bb6:	4413      	add	r3, r2
   b4bb8:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bbc:	752b      	strb	r3, [r5, #20]
   b4bbe:	1ce3      	adds	r3, r4, #3
                    x_axis = buf[cursor++];
   b4bc0:	fa52 f383 	uxtab	r3, r2, r3
   b4bc4:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bc8:	772b      	strb	r3, [r5, #28]
   b4bca:	1d23      	adds	r3, r4, #4
                    y_axis = buf[cursor++];
   b4bcc:	fa52 f383 	uxtab	r3, r2, r3
   b4bd0:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bd4:	776b      	strb	r3, [r5, #29]
   b4bd6:	1d63      	adds	r3, r4, #5
                    z_axis = buf[cursor++];
   b4bd8:	fa52 f383 	uxtab	r3, r2, r3
   b4bdc:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4be0:	77ab      	strb	r3, [r5, #30]
   b4be2:	1da3      	adds	r3, r4, #6
                    accel_last_double_tap = buf[cursor] + buf[cursor + 1] * 256;
   b4be4:	fa52 f383 	uxtab	r3, r2, r3
   b4be8:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b4bec:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4bf0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4bf4:	832b      	strh	r3, [r5, #24]
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4bf6:	aa22      	add	r2, sp, #136	; 0x88
                    cursor += 2;
   b4bf8:	f104 0308 	add.w	r3, r4, #8
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4bfc:	fa52 f383 	uxtab	r3, r2, r3
                    cursor += 2;
   b4c00:	340a      	adds	r4, #10
                    accel_last_movement = buf[cursor] + buf[cursor + 1] * 256;
   b4c02:	f813 2c83 	ldrb.w	r2, [r3, #-131]
   b4c06:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4c0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4c0e:	836b      	strh	r3, [r5, #26]
                    accel_data = true;
   b4c10:	2301      	movs	r3, #1
                    cursor += 2;
   b4c12:	b2e4      	uxtb	r4, r4
                    accel_data = true;
   b4c14:	f885 3020 	strb.w	r3, [r5, #32]
                    break;
   b4c18:	e7c7      	b.n	b4baa <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    cursor++;
   b4c1a:	1ce3      	adds	r3, r4, #3
                    temperature = buf[cursor++];
   b4c1c:	aa22      	add	r2, sp, #136	; 0x88
   b4c1e:	fa52 f383 	uxtab	r3, r2, r3
   b4c22:	3404      	adds	r4, #4
   b4c24:	f813 3c84 	ldrb.w	r3, [r3, #-132]
   b4c28:	77eb      	strb	r3, [r5, #31]
   b4c2a:	b2e4      	uxtb	r4, r4
                    break;
   b4c2c:	e7bd      	b.n	b4baa <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xc6>
                    nbuf[size * 2] = '\0';
   b4c2e:	ab22      	add	r3, sp, #136	; 0x88
   b4c30:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   b4c34:	2200      	movs	r2, #0
   b4c36:	f803 2c64 	strb.w	r2, [r3, #-100]
                    Log.info("%s", nbuf);
   b4c3a:	4904      	ldr	r1, [pc, #16]	; (b4c4c <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x168>)
   b4c3c:	4804      	ldr	r0, [pc, #16]	; (b4c50 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0x16c>)
   b4c3e:	465a      	mov	r2, fp
   b4c40:	f7ff ff38 	bl	b4ab4 <_ZNK5spark6Logger4infoEPKcz>
                    cursor += size;
   b4c44:	444c      	add	r4, r9
   b4c46:	e7a5      	b.n	b4b94 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE+0xb0>
   b4c48:	000bbfd0 	.word	0x000bbfd0
   b4c4c:	000bbe72 	.word	0x000bbe72
   b4c50:	2003e6e8 	.word	0x2003e6e8

000b4c54 <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE>:
{
   b4c54:	b530      	push	{r4, r5, lr}
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b4c56:	f100 0508 	add.w	r5, r0, #8
   b4c5a:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).contains(BleAdvertisingDataType::SERVICE_DATA))
   b4c5c:	2116      	movs	r1, #22
   b4c5e:	4628      	mov	r0, r5
   b4c60:	f003 fae3 	bl	b822a <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>
   b4c64:	4604      	mov	r4, r0
   b4c66:	b188      	cbz	r0, b4c8c <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x38>
        uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b4c68:	231f      	movs	r3, #31
   b4c6a:	466a      	mov	r2, sp
   b4c6c:	2116      	movs	r1, #22
   b4c6e:	4628      	mov	r0, r5
   b4c70:	f003 fa79 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        if (count > 3 && buf[0] == 0x6A && buf[1] == 0xFE) // Kontakt UUID
   b4c74:	b2c0      	uxtb	r0, r0
   b4c76:	2803      	cmp	r0, #3
   b4c78:	d907      	bls.n	b4c8a <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x36>
   b4c7a:	f89d 3000 	ldrb.w	r3, [sp]
   b4c7e:	2b6a      	cmp	r3, #106	; 0x6a
   b4c80:	d103      	bne.n	b4c8a <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x36>
   b4c82:	f89d 3001 	ldrb.w	r3, [sp, #1]
   b4c86:	2bfe      	cmp	r3, #254	; 0xfe
   b4c88:	d000      	beq.n	b4c8c <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE+0x38>
    return false;
   b4c8a:	2400      	movs	r4, #0
}
   b4c8c:	4620      	mov	r0, r4
   b4c8e:	b009      	add	sp, #36	; 0x24
   b4c90:	bd30      	pop	{r4, r5, pc}
	...

000b4c94 <_ZN10KontaktTagC1ERKS_>:
#ifndef KONTAKT_TAG_H
#define KONTAKT_TAG_H

#include "beacon.h"

class KontaktTag : public Beacon
   b4c94:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b4c96:	4b11      	ldr	r3, [pc, #68]	; (b4cdc <_ZN10KontaktTagC1ERKS_+0x48>)
   b4c98:	888a      	ldrh	r2, [r1, #4]
   b4c9a:	6003      	str	r3, [r0, #0]
   b4c9c:	460d      	mov	r5, r1
   b4c9e:	798b      	ldrb	r3, [r1, #6]
   b4ca0:	8082      	strh	r2, [r0, #4]
   b4ca2:	4604      	mov	r4, r0
   b4ca4:	7183      	strb	r3, [r0, #6]
   b4ca6:	3107      	adds	r1, #7
   b4ca8:	3007      	adds	r0, #7
   b4caa:	f003 f845 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
   b4cae:	8a2b      	ldrh	r3, [r5, #16]
   b4cb0:	8223      	strh	r3, [r4, #16]
   b4cb2:	7cab      	ldrb	r3, [r5, #18]
   b4cb4:	74a3      	strb	r3, [r4, #18]
   b4cb6:	4b0a      	ldr	r3, [pc, #40]	; (b4ce0 <_ZN10KontaktTagC1ERKS_+0x4c>)
   b4cb8:	8aea      	ldrh	r2, [r5, #22]
   b4cba:	6023      	str	r3, [r4, #0]
   b4cbc:	7ceb      	ldrb	r3, [r5, #19]
   b4cbe:	74e3      	strb	r3, [r4, #19]
   b4cc0:	82e2      	strh	r2, [r4, #22]
   b4cc2:	7d2b      	ldrb	r3, [r5, #20]
   b4cc4:	69aa      	ldr	r2, [r5, #24]
   b4cc6:	7523      	strb	r3, [r4, #20]
   b4cc8:	61a2      	str	r2, [r4, #24]
   b4cca:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4cce:	69ea      	ldr	r2, [r5, #28]
   b4cd0:	61e2      	str	r2, [r4, #28]
   b4cd2:	f884 3020 	strb.w	r3, [r4, #32]
   b4cd6:	4620      	mov	r0, r4
   b4cd8:	bd38      	pop	{r3, r4, r5, pc}
   b4cda:	bf00      	nop
   b4cdc:	000bbcf8 	.word	0x000bbcf8
   b4ce0:	000bbd30 	.word	0x000bbd30

000b4ce4 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4ce4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ce8:	4604      	mov	r4, r0
   b4cea:	460d      	mov	r5, r1
   b4cec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4cee:	d911      	bls.n	b4d14 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b4cf0:	4290      	cmp	r0, r2
   b4cf2:	d210      	bcs.n	b4d16 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b4cf4:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b4cf8:	1a75      	subs	r5, r6, r1
   b4cfa:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b4cfe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4d00:	42b7      	cmp	r7, r6
   b4d02:	d012      	beq.n	b4d2a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b4d04:	b11c      	cbz	r4, b4d0e <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b4d06:	4631      	mov	r1, r6
   b4d08:	4620      	mov	r0, r4
   b4d0a:	f7ff ffc3 	bl	b4c94 <_ZN10KontaktTagC1ERKS_>
            for (; end != p; --end, --dest) {
   b4d0e:	3e24      	subs	r6, #36	; 0x24
   b4d10:	3c24      	subs	r4, #36	; 0x24
   b4d12:	e7f5      	b.n	b4d00 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4d14:	d009      	beq.n	b4d2a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b4d16:	42b5      	cmp	r5, r6
   b4d18:	d007      	beq.n	b4d2a <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b4d1a:	b11c      	cbz	r4, b4d24 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b4d1c:	4629      	mov	r1, r5
   b4d1e:	4620      	mov	r0, r4
   b4d20:	f7ff ffb8 	bl	b4c94 <_ZN10KontaktTagC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b4d24:	3524      	adds	r5, #36	; 0x24
   b4d26:	3424      	adds	r4, #36	; 0x24
   b4d28:	e7f5      	b.n	b4d16 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b4d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d2c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE>:

void KontaktTag::addOrUpdate(const BleScanResult *scanResult) {
   b4d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b4d30:	4c42      	ldr	r4, [pc, #264]	; (b4e3c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x110>)
   b4d32:	b09c      	sub	sp, #112	; 0x70
   b4d34:	4606      	mov	r6, r0
   b4d36:	2700      	movs	r7, #0
    return data_[i];
   b4d38:	f04f 0824 	mov.w	r8, #36	; 0x24
    uint8_t i;
    for (i = 0; i < beacons.size(); i++)
   b4d3c:	6863      	ldr	r3, [r4, #4]
   b4d3e:	b2fd      	uxtb	r5, r7
   b4d40:	429d      	cmp	r5, r3
   b4d42:	da0d      	bge.n	b4d60 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b4d44:	6821      	ldr	r1, [r4, #0]
   b4d46:	fb08 1105 	mla	r1, r8, r5, r1
    BleAddress getAddress() const { return address;}
   b4d4a:	3107      	adds	r1, #7
   b4d4c:	a813      	add	r0, sp, #76	; 0x4c
   b4d4e:	f002 fff3 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
    {
        if (beacons.at(i).getAddress() == ADDRESS(scanResult))
   b4d52:	4631      	mov	r1, r6
   b4d54:	a813      	add	r0, sp, #76	; 0x4c
   b4d56:	f003 f806 	bl	b7d66 <_ZNK8particle10BleAddresseqERKS0_>
   b4d5a:	3701      	adds	r7, #1
   b4d5c:	2800      	cmp	r0, #0
   b4d5e:	d0ed      	beq.n	b4d3c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x10>
        {
            break;
        }
    }
    if (i == beacons.size()) {
   b4d60:	6863      	ldr	r3, [r4, #4]
   b4d62:	429d      	cmp	r5, r3
   b4d64:	d15d      	bne.n	b4e22 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf6>
        rssi_count(0) {};
   b4d66:	4b36      	ldr	r3, [pc, #216]	; (b4e40 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x114>)
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	2301      	movs	r3, #1
   b4d6c:	f88d 3009 	strb.w	r3, [sp, #9]
   b4d70:	f10d 000b 	add.w	r0, sp, #11
   b4d74:	2302      	movs	r3, #2
   b4d76:	f88d 300a 	strb.w	r3, [sp, #10]
   b4d7a:	f003 f808 	bl	b7d8e <_ZN8particle10BleAddressC1Ev>
{
public:
    KontaktTag() : Beacon(SCAN_KONTAKT)
   b4d7e:	4b31      	ldr	r3, [pc, #196]	; (b4e44 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0x118>)
   b4d80:	9301      	str	r3, [sp, #4]
    {
        battery = temperature = 0xFF;
   b4d82:	23ff      	movs	r3, #255	; 0xff
   b4d84:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   b4d88:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   b4d8c:	9305      	str	r3, [sp, #20]
        button_time = accel_last_double_tap = accel_last_movement = 0xFFFF;
   b4d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
        KontaktTag new_beacon;
        new_beacon.populateData(scanResult);
   b4d92:	4631      	mov	r1, r6
   b4d94:	f8ad 301a 	strh.w	r3, [sp, #26]
        accel_data = false;
   b4d98:	2500      	movs	r5, #0
        button_time = accel_last_double_tap = accel_last_movement = 0xFFFF;
   b4d9a:	f04f 33ff 	mov.w	r3, #4294967295
   b4d9e:	a801      	add	r0, sp, #4
   b4da0:	9307      	str	r3, [sp, #28]
        accel_data = false;
   b4da2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   b4da6:	f7ff fe9d 	bl	b4ae4 <_ZN10KontaktTag12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b4daa:	a901      	add	r1, sp, #4
   b4dac:	a80a      	add	r0, sp, #40	; 0x28
        new_beacon.missed_scan = 0;
   b4dae:	f88d 5008 	strb.w	r5, [sp, #8]
        beacons.append(new_beacon);
   b4db2:	f7ff ff6f 	bl	b4c94 <_ZN10KontaktTagC1ERKS_>
    return insert(size_, std::move(value));
   b4db6:	a90a      	add	r1, sp, #40	; 0x28
   b4db8:	a813      	add	r0, sp, #76	; 0x4c
   b4dba:	6866      	ldr	r6, [r4, #4]
   b4dbc:	f7ff ff6a 	bl	b4c94 <_ZN10KontaktTagC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4dc0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b4dc4:	429f      	cmp	r7, r3
   b4dc6:	db15      	blt.n	b4df4 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xc8>
   b4dc8:	3701      	adds	r7, #1
        if (n > 0) {
   b4dca:	42af      	cmp	r7, r5
   b4dcc:	dd0d      	ble.n	b4dea <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xbe>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4dce:	f04f 0824 	mov.w	r8, #36	; 0x24
    return ::malloc(size);
   b4dd2:	fb08 f007 	mul.w	r0, r8, r7
   b4dd6:	f002 fc1f 	bl	b7618 <malloc>
            if (!d) {
   b4dda:	4605      	mov	r5, r0
   b4ddc:	b1f0      	cbz	r0, b4e1c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf0>
            move(d, data_, data_ + size_);
   b4dde:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4de2:	fb08 1202 	mla	r2, r8, r2, r1
   b4de6:	f7ff ff7d 	bl	b4ce4 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4dea:	6820      	ldr	r0, [r4, #0]
   b4dec:	f002 fc1c 	bl	b7628 <free>
        data_ = d;
   b4df0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4df2:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b4df4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b4df6:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b4df8:	2224      	movs	r2, #36	; 0x24
   b4dfa:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b4dfe:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b4e02:	fb02 3201 	mla	r2, r2, r1, r3
   b4e06:	4631      	mov	r1, r6
   b4e08:	f7ff ff6c 	bl	b4ce4 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b4e0c:	b11e      	cbz	r6, b4e16 <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xea>
   b4e0e:	a913      	add	r1, sp, #76	; 0x4c
   b4e10:	4630      	mov	r0, r6
   b4e12:	f7ff ff3f 	bl	b4c94 <_ZN10KontaktTagC1ERKS_>
    ++size_;
   b4e16:	6863      	ldr	r3, [r4, #4]
   b4e18:	3301      	adds	r3, #1
   b4e1a:	6063      	str	r3, [r4, #4]
        KontaktTag& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b4e1c:	b01c      	add	sp, #112	; 0x70
   b4e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b4e22:	2324      	movs	r3, #36	; 0x24
   b4e24:	435d      	muls	r5, r3
   b4e26:	6823      	ldr	r3, [r4, #0]
   b4e28:	195c      	adds	r4, r3, r5
        beacon.newly_scanned = false;
   b4e2a:	2700      	movs	r7, #0
   b4e2c:	7167      	strb	r7, [r4, #5]
        beacon.populateData(scanResult);
   b4e2e:	595b      	ldr	r3, [r3, r5]
   b4e30:	4631      	mov	r1, r6
   b4e32:	685b      	ldr	r3, [r3, #4]
   b4e34:	4620      	mov	r0, r4
   b4e36:	4798      	blx	r3
        beacon.missed_scan = 0;
   b4e38:	7127      	strb	r7, [r4, #4]
   b4e3a:	e7ef      	b.n	b4e1c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE+0xf0>
   b4e3c:	2003e67c 	.word	0x2003e67c
   b4e40:	000bbcf8 	.word	0x000bbcf8
   b4e44:	000bbd30 	.word	0x000bbd30

000b4e48 <_GLOBAL__sub_I__ZN10KontaktTag7beaconsE>:
        capacity_(0) {
   b4e48:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <_GLOBAL__sub_I__ZN10KontaktTag7beaconsE+0xc>)
   b4e4a:	2200      	movs	r2, #0
   b4e4c:	e9c3 2200 	strd	r2, r2, [r3]
   b4e50:	609a      	str	r2, [r3, #8]
   b4e52:	4770      	bx	lr
   b4e54:	2003e67c 	.word	0x2003e67c

000b4e58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4e58:	4770      	bx	lr

000b4e5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4e5a:	2000      	movs	r0, #0
   b4e5c:	4770      	bx	lr

000b4e5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4e5e:	b510      	push	{r4, lr}
   b4e60:	2110      	movs	r1, #16
   b4e62:	4604      	mov	r4, r0
   b4e64:	f7ff f919 	bl	b409a <_ZdlPvj>
   b4e68:	4620      	mov	r0, r4
   b4e6a:	bd10      	pop	{r4, pc}

000b4e6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4e6c:	b508      	push	{r3, lr}
      { delete this; }
   b4e6e:	f7ff fff6 	bl	b4e5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4e72:	bd08      	pop	{r3, pc}

000b4e74 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b4e74:	b513      	push	{r0, r1, r4, lr}
   b4e76:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b4e78:	4608      	mov	r0, r1
   b4e7a:	9101      	str	r1, [sp, #4]
   b4e7c:	f006 fe79 	bl	bbb72 <strlen>
   b4e80:	9901      	ldr	r1, [sp, #4]
   b4e82:	4602      	mov	r2, r0
   b4e84:	4620      	mov	r0, r4
}
   b4e86:	b002      	add	sp, #8
   b4e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b4e8c:	f005 bf60 	b.w	bad50 <_ZN5spark10JSONWriter5valueEPKcj>

000b4e90 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4e90:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4e92:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4e94:	4604      	mov	r4, r0
      if (_M_manager)
   b4e96:	b113      	cbz	r3, b4e9e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4e98:	2203      	movs	r2, #3
   b4e9a:	4601      	mov	r1, r0
   b4e9c:	4798      	blx	r3
    }
   b4e9e:	4620      	mov	r0, r4
   b4ea0:	bd10      	pop	{r4, pc}

000b4ea2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4ea2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4ea4:	6843      	ldr	r3, [r0, #4]
   b4ea6:	3b01      	subs	r3, #1
    {
   b4ea8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4eaa:	6043      	str	r3, [r0, #4]
   b4eac:	b963      	cbnz	r3, b4ec8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4eae:	6803      	ldr	r3, [r0, #0]
   b4eb0:	689b      	ldr	r3, [r3, #8]
   b4eb2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4eb4:	68a3      	ldr	r3, [r4, #8]
   b4eb6:	3b01      	subs	r3, #1
   b4eb8:	60a3      	str	r3, [r4, #8]
   b4eba:	b92b      	cbnz	r3, b4ec8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4ebc:	6823      	ldr	r3, [r4, #0]
   b4ebe:	4620      	mov	r0, r4
   b4ec0:	68db      	ldr	r3, [r3, #12]
    }
   b4ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4ec6:	4718      	bx	r3
    }
   b4ec8:	bd10      	pop	{r4, pc}

000b4eca <_ZN11SystemClass6uptimeEv>:
    }

    static unsigned uptime() {
   b4eca:	b508      	push	{r3, lr}
        return (hal_timer_millis(nullptr) / 1000);
   b4ecc:	2000      	movs	r0, #0
   b4ece:	f002 f93b 	bl	b7148 <hal_timer_millis>
   b4ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4ed6:	2300      	movs	r3, #0
   b4ed8:	f006 fbf8 	bl	bb6cc <__aeabi_uldivmod>
    }
   b4edc:	bd08      	pop	{r3, pc}

000b4ede <_ZN8particle5ErrorD1Ev>:
inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
   b4ede:	b510      	push	{r4, lr}
   b4ee0:	4604      	mov	r4, r0
    free((void*)msg_);
   b4ee2:	6800      	ldr	r0, [r0, #0]
   b4ee4:	f002 fba0 	bl	b7628 <free>
}
   b4ee8:	4620      	mov	r0, r4
   b4eea:	bd10      	pop	{r4, pc}

000b4eec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4eec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4eee:	68c4      	ldr	r4, [r0, #12]
   b4ef0:	b1f4      	cbz	r4, b4f30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4ef2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4ef4:	2b02      	cmp	r3, #2
   b4ef6:	d103      	bne.n	b4f00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4ef8:	f104 000c 	add.w	r0, r4, #12
   b4efc:	f7ff ffef 	bl	b4ede <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4f00:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4f02:	b135      	cbz	r5, b4f12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4f04:	4628      	mov	r0, r5
   b4f06:	f7ff ffc3 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
   b4f0a:	2110      	movs	r1, #16
   b4f0c:	4628      	mov	r0, r5
   b4f0e:	f7ff f8c4 	bl	b409a <_ZdlPvj>
   b4f12:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4f14:	b135      	cbz	r5, b4f24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4f16:	4628      	mov	r0, r5
   b4f18:	f7ff ffba 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
   b4f1c:	2110      	movs	r1, #16
   b4f1e:	4628      	mov	r0, r5
   b4f20:	f7ff f8bb 	bl	b409a <_ZdlPvj>
   b4f24:	4620      	mov	r0, r4
   b4f26:	2114      	movs	r1, #20
   b4f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4f2c:	f7ff b8b5 	b.w	b409a <_ZdlPvj>
   b4f30:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4f34 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE>:
            }
    return false;
}

void LairdBt510::toJson(JSONWriter *writer) const
{
   b4f34:	b530      	push	{r4, r5, lr}
   b4f36:	b085      	sub	sp, #20
   b4f38:	460c      	mov	r4, r1
   b4f3a:	4605      	mov	r5, r0
        writer->name(address.toString()).beginObject();
   b4f3c:	1dc1      	adds	r1, r0, #7
   b4f3e:	2200      	movs	r2, #0
   b4f40:	4668      	mov	r0, sp
   b4f42:	f002 ff8b 	bl	b7e5c <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b4f46:	9a02      	ldr	r2, [sp, #8]
   b4f48:	9900      	ldr	r1, [sp, #0]
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	f005 fef0 	bl	bad30 <_ZN5spark10JSONWriter4nameEPKcj>
   b4f50:	f005 fe34 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
   b4f54:	4668      	mov	r0, sp
   b4f56:	f002 fc53 	bl	b7800 <_ZN6StringD1Ev>
        writer->name("magnet_near").value(magnetNear());
   b4f5a:	4918      	ldr	r1, [pc, #96]	; (b4fbc <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x88>)
   b4f5c:	4620      	mov	r0, r4
   b4f5e:	f7ff fd2f 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
    static void setEventCallback(LairdBt510EventCallback callback) { LairdBt510::_eventCallback = callback; };
    static void setAlarmCallback(LairdBt510EventCallback callback) { LairdBt510::_alarmCallback = callback; };

    // Get the sensor data
    int16_t getTemperature() const { return _temp; };
    bool magnetNear() const {return !_magnet_state;};
   b4f62:	7fe9      	ldrb	r1, [r5, #31]
   b4f64:	f081 0101 	eor.w	r1, r1, #1
   b4f68:	f005 fe34 	bl	babd4 <_ZN5spark10JSONWriter5valueEb>
        writer->name("temp").value(getTemperature());
   b4f6c:	4914      	ldr	r1, [pc, #80]	; (b4fc0 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x8c>)
   b4f6e:	4620      	mov	r0, r4
   b4f70:	f7ff fd26 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4f74:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
   b4f78:	f005 fe44 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->name("record").value(getRecordNumber());
   b4f7c:	4911      	ldr	r1, [pc, #68]	; (b4fc4 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x90>)
   b4f7e:	4620      	mov	r0, r4
   b4f80:	f7ff fd1e 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4f84:	8b69      	ldrh	r1, [r5, #26]
   b4f86:	f005 fe3d 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->name("batt").value(getBattVoltage());
   b4f8a:	490f      	ldr	r1, [pc, #60]	; (b4fc8 <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x94>)
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	f7ff fd17 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b4f92:	8ba9      	ldrh	r1, [r5, #28]
   b4f94:	f005 fe36 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->name("rssi").value(getRssi());
   b4f98:	490c      	ldr	r1, [pc, #48]	; (b4fcc <_ZNK10LairdBt5106toJsonEPN5spark10JSONWriterE+0x98>)
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	f7ff fd10 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b4fa0:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   b4fa4:	7cab      	ldrb	r3, [r5, #18]
   b4fa6:	fb91 f1f3 	sdiv	r1, r1, r3
   b4faa:	b249      	sxtb	r1, r1
   b4fac:	f005 fe2a 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b4fb0:	4620      	mov	r0, r4
}
   b4fb2:	b005      	add	sp, #20
   b4fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        writer->endObject();
   b4fb8:	f005 bdea 	b.w	bab90 <_ZN5spark10JSONWriter9endObjectEv>
   b4fbc:	000bbd38 	.word	0x000bbd38
   b4fc0:	000bbd00 	.word	0x000bbd00
   b4fc4:	000bbd44 	.word	0x000bbd44
   b4fc8:	000bc098 	.word	0x000bc098
   b4fcc:	000bbd21 	.word	0x000bbd21

000b4fd0 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4fd0:	b40e      	push	{r1, r2, r3}
   b4fd2:	b500      	push	{lr}
   b4fd4:	b08c      	sub	sp, #48	; 0x30
   b4fd6:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b4fd8:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4fdc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4fe0:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4fe2:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4fe6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4fe8:	6801      	ldr	r1, [r0, #0]
   b4fea:	aa04      	add	r2, sp, #16
   b4fec:	2001      	movs	r0, #1
    attr.flags = 0;
   b4fee:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4ff2:	f002 fa2d 	bl	b7450 <log_message_v>
}
   b4ff6:	b00c      	add	sp, #48	; 0x30
   b4ff8:	f85d eb04 	ldr.w	lr, [sp], #4
   b4ffc:	b003      	add	sp, #12
   b4ffe:	4770      	bx	lr

000b5000 <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv>:

private:
    Vector<char> v_;
};

void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b5000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LairdBt510* ctx = (LairdBt510*)context;
    // TODO: Check the returned JSON to make sure it is ok
    Log.trace("Received %d bytes", size);
   b5004:	f8df 8048 	ldr.w	r8, [pc, #72]	; b5050 <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x50>
void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b5008:	af00      	add	r7, sp, #0
   b500a:	460c      	mov	r4, r1
   b500c:	4606      	mov	r6, r0
    Log.trace("Received %d bytes", size);
   b500e:	460a      	mov	r2, r1
   b5010:	4640      	mov	r0, r8
   b5012:	490e      	ldr	r1, [pc, #56]	; (b504c <_ZN10LairdBt51014onDataReceivedEPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
void LairdBt510::onDataReceived(const uint8_t* data, size_t size, const BlePeerDevice& peer, void* context) {
   b5014:	461d      	mov	r5, r3
    Log.trace("Received %d bytes", size);
   b5016:	f7ff ffdb 	bl	b4fd0 <_ZNK5spark6Logger5traceEPKcz>
    uint8_t buf[size+1];
   b501a:	f104 0308 	add.w	r3, r4, #8
   b501e:	f023 0307 	bic.w	r3, r3, #7
   b5022:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(buf, data, size);
   b5026:	4622      	mov	r2, r4
   b5028:	4631      	mov	r1, r6
   b502a:	4668      	mov	r0, sp
   b502c:	f006 fd14 	bl	bba58 <memcpy>
    buf[size] = 0;
   b5030:	2300      	movs	r3, #0
    Log.trace((char*)buf);
   b5032:	4669      	mov	r1, sp
   b5034:	4640      	mov	r0, r8
    buf[size] = 0;
   b5036:	f80d 3004 	strb.w	r3, [sp, r4]
    Log.trace((char*)buf);
   b503a:	f7ff ffc9 	bl	b4fd0 <_ZNK5spark6Logger5traceEPKcz>
    ctx->state_ = DISCONNECT;
   b503e:	2304      	movs	r3, #4
   b5040:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   b5044:	46bd      	mov	sp, r7
   b5046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b504a:	bf00      	nop
   b504c:	000bbd4b 	.word	0x000bbd4b
   b5050:	2003e6e8 	.word	0x2003e6e8

000b5054 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE>:
{
   b5054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    size_t size = ADVERTISING_DATA(scanResult).get(buf, 9);
   b5056:	2209      	movs	r2, #9
   b5058:	a901      	add	r1, sp, #4
   b505a:	3008      	adds	r0, #8
   b505c:	f003 f875 	bl	b814a <_ZNK8particle18BleAdvertisingData3getEPhj>
    if (size >= 9 && buf[0] == 0x02 && buf[1] == 0x01 && buf[2] == 0x06 && (buf[3] == 0x1b || buf[3] == 0x26) && buf[4] == 0xFF &&
   b5060:	2808      	cmp	r0, #8
   b5062:	d929      	bls.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b5064:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5068:	2b02      	cmp	r3, #2
   b506a:	d125      	bne.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b506c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5070:	2b01      	cmp	r3, #1
   b5072:	d121      	bne.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b5074:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b5078:	2b06      	cmp	r3, #6
   b507a:	d11d      	bne.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b507c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5080:	2b1b      	cmp	r3, #27
   b5082:	d001      	beq.n	b5088 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x34>
   b5084:	2b26      	cmp	r3, #38	; 0x26
   b5086:	d117      	bne.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b5088:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b508c:	2bff      	cmp	r3, #255	; 0xff
   b508e:	d113      	bne.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b5090:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b5094:	2b77      	cmp	r3, #119	; 0x77
   b5096:	d10f      	bne.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
            buf[5] == 0x77 && buf[6] == 0x00 && (buf[7] == 0x01 || buf[7] == 0x02) && buf[8] == 0x00) { 
   b5098:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b509c:	3b01      	subs	r3, #1
   b509e:	2b01      	cmp	r3, #1
   b50a0:	d80a      	bhi.n	b50b8 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x64>
   b50a2:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b50a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b50aa:	4313      	orrs	r3, r2
   b50ac:	bf0c      	ite	eq
   b50ae:	2001      	moveq	r0, #1
   b50b0:	2000      	movne	r0, #0
}
   b50b2:	b005      	add	sp, #20
   b50b4:	f85d fb04 	ldr.w	pc, [sp], #4
    return false;
   b50b8:	2000      	movs	r0, #0
   b50ba:	e7fa      	b.n	b50b2 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE+0x5e>

000b50bc <_ZN16LairdBt510ConfigC1Ev>:
   b50bc:	2200      	movs	r2, #0
   b50be:	e9c0 2200 	strd	r2, r2, [r0]
   b50c2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b50c6:	e9c0 2204 	strd	r2, r2, [r0, #16]
        advInterval_(0xFFFF),
        connTimeout_(0xFFFF),
        tempAggregationCount_(0xFF),
        configFlags_(Bt510ConfigFields::NONE),
        coded_(2),
        passkey_{0x31, 0x32, 0x33, 0x34, 0x35, 0x36}
   b50ca:	f04f 32ff 	mov.w	r2, #4294967295
   b50ce:	e9c0 2206 	strd	r2, r2, [r0, #24]
   b50d2:	6202      	str	r2, [r0, #32]
   b50d4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   b50d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b50dc:	84c2      	strh	r2, [r0, #38]	; 0x26
   b50de:	4a04      	ldr	r2, [pc, #16]	; (b50f0 <_ZN16LairdBt510ConfigC1Ev+0x34>)
LairdBt510Config::LairdBt510Config():
   b50e0:	4603      	mov	r3, r0
        passkey_{0x31, 0x32, 0x33, 0x34, 0x35, 0x36}
   b50e2:	6810      	ldr	r0, [r2, #0]
   b50e4:	8892      	ldrh	r2, [r2, #4]
   b50e6:	62d8      	str	r0, [r3, #44]	; 0x2c
   b50e8:	861a      	strh	r2, [r3, #48]	; 0x30
        {};
   b50ea:	4618      	mov	r0, r3
   b50ec:	4770      	bx	lr
   b50ee:	bf00      	nop
   b50f0:	000bbf20 	.word	0x000bbf20

000b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b50f4:	b510      	push	{r4, lr}
   b50f6:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b50f8:	6800      	ldr	r0, [r0, #0]
   b50fa:	b108      	cbz	r0, b5100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b50fc:	f7ff fed1 	bl	b4ea2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5100:	4620      	mov	r0, r4
   b5102:	bd10      	pop	{r4, pc}

000b5104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   b5104:	680b      	ldr	r3, [r1, #0]
   b5106:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   b5108:	b113      	cbz	r3, b5110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b510a:	685a      	ldr	r2, [r3, #4]
   b510c:	3201      	adds	r2, #1
   b510e:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   b5110:	4770      	bx	lr

000b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5112:	b510      	push	{r4, lr}
   b5114:	4604      	mov	r4, r0
    ::free(ptr);
   b5116:	6800      	ldr	r0, [r0, #0]
   b5118:	f002 fa86 	bl	b7628 <free>
}
   b511c:	4620      	mov	r0, r4
   b511e:	bd10      	pop	{r4, pc}

000b5120 <_ZN10LairdBt510D1Ev>:
    ~LairdBt510() = default;
   b5120:	b538      	push	{r3, r4, r5, lr}
   b5122:	4605      	mov	r5, r0
   b5124:	4b0d      	ldr	r3, [pc, #52]	; (b515c <_ZN10LairdBt510D1Ev+0x3c>)
   b5126:	f845 3b4c 	str.w	r3, [r5], #76
   b512a:	4604      	mov	r4, r0
    ~LairdBt510Config() = default;
   b512c:	3058      	adds	r0, #88	; 0x58
   b512e:	f7ff fff0 	bl	b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b5132:	4628      	mov	r0, r5
   b5134:	f7ff ffed 	bl	b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
    ~LairdBt510() = default;
   b5138:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b513c:	f003 fb60 	bl	b8800 <_ZN8particle17BleCharacteristicD1Ev>
   b5140:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5144:	f003 fb5c 	bl	b8800 <_ZN8particle17BleCharacteristicD1Ev>
   b5148:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b514c:	f003 fb5f 	bl	b880e <_ZN8particle13BlePeerDeviceD1Ev>
   b5150:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5154:	f7ff ffdd 	bl	b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b5158:	4620      	mov	r0, r4
   b515a:	bd38      	pop	{r3, r4, r5, pc}
   b515c:	000bbf30 	.word	0x000bbf30

000b5160 <_ZN16JSONVectorWriterD1Ev>:
    ~JSONVectorWriter() = default;
   b5160:	b510      	push	{r4, lr}
   b5162:	4b04      	ldr	r3, [pc, #16]	; (b5174 <_ZN16JSONVectorWriterD1Ev+0x14>)
   b5164:	4604      	mov	r4, r0
   b5166:	f840 3b08 	str.w	r3, [r0], #8
   b516a:	f7ff ffd2 	bl	b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   b516e:	4620      	mov	r0, r4
   b5170:	bd10      	pop	{r4, pc}
   b5172:	bf00      	nop
   b5174:	000bbef4 	.word	0x000bbef4

000b5178 <_ZN16JSONVectorWriterD0Ev>:
   b5178:	b510      	push	{r4, lr}
   b517a:	4604      	mov	r4, r0
   b517c:	f7ff fff0 	bl	b5160 <_ZN16JSONVectorWriterD1Ev>
   b5180:	4620      	mov	r0, r4
   b5182:	2114      	movs	r1, #20
   b5184:	f7fe ff89 	bl	b409a <_ZdlPvj>
   b5188:	4620      	mov	r0, r4
   b518a:	bd10      	pop	{r4, pc}

000b518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b518c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b518e:	460e      	mov	r6, r1
   b5190:	4604      	mov	r4, r0
   b5192:	f856 3b04 	ldr.w	r3, [r6], #4
   b5196:	9300      	str	r3, [sp, #0]
   b5198:	460d      	mov	r5, r1
   b519a:	a801      	add	r0, sp, #4
   b519c:	4631      	mov	r1, r6
   b519e:	f7ff ffb1 	bl	b5104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b51a2:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51a4:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   b51a6:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51a8:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   b51aa:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b51ac:	2300      	movs	r3, #0
   b51ae:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b51b0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b51b2:	f7ff ff9f 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b51b6:	4630      	mov	r0, r6
   b51b8:	f7ff ff9c 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b51bc:	4628      	mov	r0, r5
   b51be:	2108      	movs	r1, #8
   b51c0:	f7fe ff6b 	bl	b409a <_ZdlPvj>
        return p;
    }
   b51c4:	4620      	mov	r0, r4
   b51c6:	b002      	add	sp, #8
   b51c8:	bd70      	pop	{r4, r5, r6, pc}

000b51ca <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>:
    bool realloc(int n) {
   b51ca:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b51cc:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b51ce:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b51d0:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b51d2:	dd03      	ble.n	b51dc <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b51d4:	f002 fa30 	bl	b7638 <realloc>
            if (!d) {
   b51d8:	b918      	cbnz	r0, b51e2 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x18>
    }
   b51da:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b51dc:	f002 fa24 	bl	b7628 <free>
        T* d = nullptr;
   b51e0:	2000      	movs	r0, #0
        data_ = d;
   b51e2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b51e4:	60a5      	str	r5, [r4, #8]
        return true;
   b51e6:	2001      	movs	r0, #1
   b51e8:	e7f7      	b.n	b51da <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x10>

000b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b51ea:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b51ec:	2300      	movs	r3, #0
   b51ee:	e9c0 3300 	strd	r3, r3, [r0]
   b51f2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b51f4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b51f6:	6849      	ldr	r1, [r1, #4]
   b51f8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b51fa:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b51fc:	dd10      	ble.n	b5220 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b51fe:	f7ff ffe4 	bl	b51ca <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b5202:	b168      	cbz	r0, b5220 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5204:	e9d5 3100 	ldrd	r3, r1, [r5]
   b5208:	6822      	ldr	r2, [r4, #0]
   b520a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b520c:	4299      	cmp	r1, r3
   b520e:	d005      	beq.n	b521c <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b5210:	b10a      	cbz	r2, b5216 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b5212:	7818      	ldrb	r0, [r3, #0]
   b5214:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b5216:	3301      	adds	r3, #1
   b5218:	3201      	adds	r2, #1
   b521a:	e7f7      	b.n	b520c <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b521c:	686b      	ldr	r3, [r5, #4]
   b521e:	6063      	str	r3, [r4, #4]
}
   b5220:	4620      	mov	r0, r4
   b5222:	bd38      	pop	{r3, r4, r5, pc}

000b5224 <_ZN10LairdBt510C1ERKS_>:
class LairdBt510 : public Beacon
   b5224:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b5226:	4b30      	ldr	r3, [pc, #192]	; (b52e8 <_ZN10LairdBt510C1ERKS_+0xc4>)
   b5228:	888a      	ldrh	r2, [r1, #4]
   b522a:	6003      	str	r3, [r0, #0]
   b522c:	460d      	mov	r5, r1
   b522e:	798b      	ldrb	r3, [r1, #6]
   b5230:	8082      	strh	r2, [r0, #4]
   b5232:	4604      	mov	r4, r0
   b5234:	7183      	strb	r3, [r0, #6]
   b5236:	3107      	adds	r1, #7
   b5238:	3007      	adds	r0, #7
   b523a:	f002 fd7d 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
   b523e:	8a2b      	ldrh	r3, [r5, #16]
   b5240:	8223      	strh	r3, [r4, #16]
   b5242:	7cab      	ldrb	r3, [r5, #18]
   b5244:	74a3      	strb	r3, [r4, #18]
   b5246:	696a      	ldr	r2, [r5, #20]
   b5248:	6162      	str	r2, [r4, #20]
   b524a:	4b28      	ldr	r3, [pc, #160]	; (b52ec <_ZN10LairdBt510C1ERKS_+0xc8>)
   b524c:	69aa      	ldr	r2, [r5, #24]
   b524e:	6023      	str	r3, [r4, #0]
   b5250:	61a2      	str	r2, [r4, #24]
   b5252:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5256:	69ea      	ldr	r2, [r5, #28]
   b5258:	61e2      	str	r2, [r4, #28]
   b525a:	f884 3020 	strb.w	r3, [r4, #32]
   b525e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b5262:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5266:	f7ff ffc0 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b526a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   b526c:	8623      	strh	r3, [r4, #48]	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b526e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   b5270:	6363      	str	r3, [r4, #52]	; 0x34
   b5272:	f105 0138 	add.w	r1, r5, #56	; 0x38
   b5276:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b527a:	f7ff ff43 	bl	b5104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b527e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b5282:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5286:	f003 fa99 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
   b528a:	f105 0144 	add.w	r1, r5, #68	; 0x44
   b528e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5292:	f003 fa93 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
class LairdBt510Config {
   b5296:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b529a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b529e:	f7ff ffa4 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b52a2:	f105 0158 	add.w	r1, r5, #88	; 0x58
   b52a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b52aa:	f7ff ff9e 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
   b52ae:	e9d5 2319 	ldrd	r2, r3, [r5, #100]	; 0x64
   b52b2:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
   b52b6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   b52b8:	66e3      	str	r3, [r4, #108]	; 0x6c
   b52ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   b52bc:	6723      	str	r3, [r4, #112]	; 0x70
   b52be:	e9d5 011e 	ldrd	r0, r1, [r5, #120]	; 0x78
   b52c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   b52c4:	6763      	str	r3, [r4, #116]	; 0x74
   b52c6:	f8d5 307e 	ldr.w	r3, [r5, #126]	; 0x7e
   b52ca:	f8c4 307e 	str.w	r3, [r4, #126]	; 0x7e
   b52ce:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
   b52d2:	67a0      	str	r0, [r4, #120]	; 0x78
   b52d4:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
   b52d8:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
class LairdBt510 : public Beacon
   b52dc:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
   b52e0:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
   b52e4:	4620      	mov	r0, r4
   b52e6:	bd38      	pop	{r3, r4, r5, pc}
   b52e8:	000bbcf8 	.word	0x000bbcf8
   b52ec:	000bbf30 	.word	0x000bbf30

000b52f0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b52f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b52f2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b52f6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b52f8:	4604      	mov	r4, r0
   b52fa:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b52fc:	da0c      	bge.n	b5318 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0x28>
    T* const p = data_ + i;
   b52fe:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5300:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5302:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5304:	1b52      	subs	r2, r2, r5
   b5306:	1c48      	adds	r0, r1, #1
   b5308:	f006 fbb4 	bl	bba74 <memmove>
    new(p) T(std::move(value));
   b530c:	557e      	strb	r6, [r7, r5]
    ++size_;
   b530e:	6863      	ldr	r3, [r4, #4]
   b5310:	3301      	adds	r3, #1
   b5312:	6063      	str	r3, [r4, #4]
    return true;
   b5314:	2001      	movs	r0, #1
}
   b5316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5318:	1c69      	adds	r1, r5, #1
   b531a:	f7ff ff56 	bl	b51ca <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b531e:	2800      	cmp	r0, #0
   b5320:	d1ed      	bne.n	b52fe <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0xe>
   b5322:	e7f8      	b.n	b5316 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc+0x26>

000b5324 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt>:
void LairdBt510Config::createJson(JSONVectorWriter& writer, uint16_t& configId) const {
   b5324:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5326:	460d      	mov	r5, r1
   b5328:	b085      	sub	sp, #20
   b532a:	4604      	mov	r4, r0
    writer.beginObject();
   b532c:	4608      	mov	r0, r1
void LairdBt510Config::createJson(JSONVectorWriter& writer, uint16_t& configId) const {
   b532e:	4616      	mov	r6, r2
    writer.beginObject();
   b5330:	f005 fc44 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("jsonrpc").value("2.0");
   b5334:	4952      	ldr	r1, [pc, #328]	; (b5480 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x15c>)
   b5336:	4628      	mov	r0, r5
   b5338:	f7ff fb42 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b533c:	4951      	ldr	r1, [pc, #324]	; (b5484 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x160>)
   b533e:	f7ff fd99 	bl	b4e74 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("method").value("set");
   b5342:	4951      	ldr	r1, [pc, #324]	; (b5488 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x164>)
   b5344:	4628      	mov	r0, r5
   b5346:	f7ff fb3b 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b534a:	4950      	ldr	r1, [pc, #320]	; (b548c <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x168>)
   b534c:	f7ff fd92 	bl	b4e74 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("params").beginObject();
   b5350:	494f      	ldr	r1, [pc, #316]	; (b5490 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x16c>)
   b5352:	4628      	mov	r0, r5
   b5354:	f7ff fb34 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5358:	f005 fc30 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
    if (!name_.isEmpty()) writer.name("sensorName").value(name_.data());
   b535c:	6863      	ldr	r3, [r4, #4]
   b535e:	b133      	cbz	r3, b536e <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x4a>
   b5360:	494c      	ldr	r1, [pc, #304]	; (b5494 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x170>)
   b5362:	4628      	mov	r0, r5
   b5364:	f7ff fb2c 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5368:	6821      	ldr	r1, [r4, #0]
   b536a:	f7ff fd83 	bl	b4e74 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    if (tempSenseInterval_ <= 86400) writer.name("temperatureSenseInterval").value((unsigned int)tempSenseInterval_);
   b536e:	4f4a      	ldr	r7, [pc, #296]	; (b5498 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x174>)
   b5370:	69a3      	ldr	r3, [r4, #24]
   b5372:	42bb      	cmp	r3, r7
   b5374:	d806      	bhi.n	b5384 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x60>
   b5376:	4949      	ldr	r1, [pc, #292]	; (b549c <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x178>)
   b5378:	4628      	mov	r0, r5
   b537a:	f7ff fb21 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b537e:	69a1      	ldr	r1, [r4, #24]
   b5380:	f005 fc52 	bl	bac28 <_ZN5spark10JSONWriter5valueEj>
    if (battSenseInterval_ <= 86400) writer.name("batterySenseInterval").value((unsigned int)battSenseInterval_);
   b5384:	69e3      	ldr	r3, [r4, #28]
   b5386:	42bb      	cmp	r3, r7
   b5388:	d806      	bhi.n	b5398 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x74>
   b538a:	4945      	ldr	r1, [pc, #276]	; (b54a0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x17c>)
   b538c:	4628      	mov	r0, r5
   b538e:	f7ff fb17 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5392:	69e1      	ldr	r1, [r4, #28]
   b5394:	f005 fc48 	bl	bac28 <_ZN5spark10JSONWriter5valueEj>
    if (configFlags_ & ConfigHighTempAlarm1) writer.name("highTemperatureAlarmThreshold1").value((int)highTempAlarm1_);
   b5398:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b539c:	07db      	lsls	r3, r3, #31
   b539e:	d507      	bpl.n	b53b0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x8c>
   b53a0:	4940      	ldr	r1, [pc, #256]	; (b54a4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x180>)
   b53a2:	4628      	mov	r0, r5
   b53a4:	f7ff fb0c 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b53a8:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   b53ac:	f005 fc2a 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigHighTempAlarm2) writer.name("highTemperatureAlarmThreshold2").value((int)highTempAlarm2_);
   b53b0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b53b4:	079f      	lsls	r7, r3, #30
   b53b6:	d507      	bpl.n	b53c8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xa4>
   b53b8:	493b      	ldr	r1, [pc, #236]	; (b54a8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x184>)
   b53ba:	4628      	mov	r0, r5
   b53bc:	f7ff fb00 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b53c0:	f994 1029 	ldrsb.w	r1, [r4, #41]	; 0x29
   b53c4:	f005 fc1e 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigLowTempAlarm1) writer.name("lowTemperatureAlarmThreshold1").value((int)lowTempAlarm1_);
   b53c8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b53cc:	0758      	lsls	r0, r3, #29
   b53ce:	d507      	bpl.n	b53e0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xbc>
   b53d0:	4936      	ldr	r1, [pc, #216]	; (b54ac <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x188>)
   b53d2:	4628      	mov	r0, r5
   b53d4:	f7ff faf4 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b53d8:	f994 102a 	ldrsb.w	r1, [r4, #42]	; 0x2a
   b53dc:	f005 fc12 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigLowTempAlarm2) writer.name("lowTemperatureAlarmThreshold2").value((int)lowTempAlarm2_);
   b53e0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b53e4:	0719      	lsls	r1, r3, #28
   b53e6:	d507      	bpl.n	b53f8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xd4>
   b53e8:	4931      	ldr	r1, [pc, #196]	; (b54b0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x18c>)
   b53ea:	4628      	mov	r0, r5
   b53ec:	f7ff fae8 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b53f0:	f994 102b 	ldrsb.w	r1, [r4, #43]	; 0x2b
   b53f4:	f005 fc06 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
    if (configFlags_ & ConfigDeltaTempAlarm) writer.name("deltaTemperatureAlarmThreshold").value((unsigned)deltaTempAlarm_);
   b53f8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b53fc:	06da      	lsls	r2, r3, #27
   b53fe:	d507      	bpl.n	b5410 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0xec>
   b5400:	492c      	ldr	r1, [pc, #176]	; (b54b4 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x190>)
   b5402:	4628      	mov	r0, r5
   b5404:	f7ff fadc 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5408:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   b540c:	f005 fc0c 	bl	bac28 <_ZN5spark10JSONWriter5valueEj>
    if (configFlags_ & ConfigNewPasskey) writer.name("passkey").value((const char *)newPasskey_, 6);
   b5410:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b5414:	065b      	lsls	r3, r3, #25
   b5416:	d508      	bpl.n	b542a <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x106>
   b5418:	4927      	ldr	r1, [pc, #156]	; (b54b8 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x194>)
   b541a:	4628      	mov	r0, r5
   b541c:	f7ff fad0 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5420:	2206      	movs	r2, #6
   b5422:	f104 0132 	add.w	r1, r4, #50	; 0x32
   b5426:	f005 fc93 	bl	bad50 <_ZN5spark10JSONWriter5valueEPKcj>
    if (coded_ < 2) writer.name("useCodedPhy").value((int)coded_);
   b542a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b542e:	2b01      	cmp	r3, #1
   b5430:	d807      	bhi.n	b5442 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x11e>
   b5432:	4922      	ldr	r1, [pc, #136]	; (b54bc <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x198>)
   b5434:	4628      	mov	r0, r5
   b5436:	f7ff fac3 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b543a:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   b543e:	f005 fbe1 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
    writer.endObject();
   b5442:	4628      	mov	r0, r5
   b5444:	f005 fba4 	bl	bab90 <_ZN5spark10JSONWriter9endObjectEv>
    writer.name("id").value(++configId);
   b5448:	491d      	ldr	r1, [pc, #116]	; (b54c0 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt+0x19c>)
   b544a:	4628      	mov	r0, r5
   b544c:	f7ff fab8 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5450:	8831      	ldrh	r1, [r6, #0]
   b5452:	3101      	adds	r1, #1
   b5454:	b289      	uxth	r1, r1
   b5456:	8031      	strh	r1, [r6, #0]
   b5458:	f005 fbd4 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
    writer.endObject();
   b545c:	4628      	mov	r0, r5
   b545e:	f005 fb97 	bl	bab90 <_ZN5spark10JSONWriter9endObjectEv>
    Vector<char> vector() const {return v_;}
   b5462:	f105 0108 	add.w	r1, r5, #8
   b5466:	a801      	add	r0, sp, #4
   b5468:	f7ff febf 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
    writer.vector().append((char)0);
   b546c:	2100      	movs	r1, #0
   b546e:	a801      	add	r0, sp, #4
   b5470:	f7ff ff3e 	bl	b52f0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>
   b5474:	a801      	add	r0, sp, #4
   b5476:	f7ff fe4c 	bl	b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
}
   b547a:	b005      	add	sp, #20
   b547c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b547e:	bf00      	nop
   b5480:	000bbd5d 	.word	0x000bbd5d
   b5484:	000bbd65 	.word	0x000bbd65
   b5488:	000bbd69 	.word	0x000bbd69
   b548c:	000bbd70 	.word	0x000bbd70
   b5490:	000bbd74 	.word	0x000bbd74
   b5494:	000bbd7b 	.word	0x000bbd7b
   b5498:	00015180 	.word	0x00015180
   b549c:	000bbd86 	.word	0x000bbd86
   b54a0:	000bbd9f 	.word	0x000bbd9f
   b54a4:	000bbdb4 	.word	0x000bbdb4
   b54a8:	000bbdd3 	.word	0x000bbdd3
   b54ac:	000bbdf2 	.word	0x000bbdf2
   b54b0:	000bbe10 	.word	0x000bbe10
   b54b4:	000bbe2e 	.word	0x000bbe2e
   b54b8:	000bbe4d 	.word	0x000bbe4d
   b54bc:	000bbe55 	.word	0x000bbe55
   b54c0:	000bbf7f 	.word	0x000bbf7f

000b54c4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>:
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b54c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return insert(size_, values, n);
   b54c8:	6847      	ldr	r7, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54ca:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b54cc:	4688      	mov	r8, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54ce:	18b9      	adds	r1, r7, r2
   b54d0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const T* values, int n) {
   b54d2:	4604      	mov	r4, r0
   b54d4:	4615      	mov	r5, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54d6:	dc12      	bgt.n	b54fe <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x3a>
    T* const p = data_ + i;
   b54d8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b54da:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b54dc:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b54de:	1bd2      	subs	r2, r2, r7
   b54e0:	4631      	mov	r1, r6
   b54e2:	1970      	adds	r0, r6, r5
   b54e4:	f006 fac6 	bl	bba74 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b54e8:	462a      	mov	r2, r5
   b54ea:	4641      	mov	r1, r8
   b54ec:	4630      	mov	r0, r6
   b54ee:	f006 fab3 	bl	bba58 <memcpy>
    size_ += n;
   b54f2:	6862      	ldr	r2, [r4, #4]
   b54f4:	442a      	add	r2, r5
   b54f6:	6062      	str	r2, [r4, #4]
    return true;
   b54f8:	2001      	movs	r0, #1
}
   b54fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54fe:	f7ff fe64 	bl	b51ca <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   b5502:	2800      	cmp	r0, #0
   b5504:	d1e8      	bne.n	b54d8 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x14>
   b5506:	e7f8      	b.n	b54fa <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci+0x36>

000b5508 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE>:
{
   b5508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b550c:	4689      	mov	r9, r1
   b550e:	b08c      	sub	sp, #48	; 0x30
   b5510:	4604      	mov	r4, r0
   b5512:	f109 0a08 	add.w	sl, r9, #8
    Beacon::populateData(scanResult);
   b5516:	f7fe fdca 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b551a:	4649      	mov	r1, r9
   b551c:	1de0      	adds	r0, r4, #7
   b551e:	f002 fc10 	bl	b7d42 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, MAX_MANUFACTURER_DATA_LEN);
   b5522:	2325      	movs	r3, #37	; 0x25
   b5524:	aa02      	add	r2, sp, #8
   b5526:	21ff      	movs	r1, #255	; 0xff
   b5528:	4650      	mov	r0, sl
   b552a:	f002 fe1c 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b552e:	b2c3      	uxtb	r3, r0
    if (count > 25) {   // Advertising data is correct, either table 1 or table 3
   b5530:	2b19      	cmp	r3, #25
   b5532:	f240 8081 	bls.w	b5638 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
   b5536:	f8bd 600e 	ldrh.w	r6, [sp, #14]
        lairdbt510_event_type event = (lairdbt510_event_type)buf[14];
   b553a:	f89d 5016 	ldrb.w	r5, [sp, #22]
        bool prev_magnet = _magnet_state;
   b553e:	7fe7      	ldrb	r7, [r4, #31]
    uint16_t prev_record = _record_number;
   b5540:	f8b4 801a 	ldrh.w	r8, [r4, #26]
        _magnet_state = (flags & (uint16_t)lairdbt510_flags::MAGNET_STATE);
   b5544:	0bf2      	lsrs	r2, r6, #15
   b5546:	77e2      	strb	r2, [r4, #31]
        _record_number = buf[16] << 8 | buf[15];
   b5548:	f8bd 2017 	ldrh.w	r2, [sp, #23]
   b554c:	8362      	strh	r2, [r4, #26]
        switch (event)
   b554e:	1e6a      	subs	r2, r5, #1
   b5550:	2a0f      	cmp	r2, #15
   b5552:	d80c      	bhi.n	b556e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
   b5554:	e8df f002 	tbb	[pc, r2]
   b5558:	080b7308 	.word	0x080b7308
   b555c:	08080808 	.word	0x08080808
   b5560:	7a0b0808 	.word	0x7a0b0808
   b5564:	7a0b0b7a 	.word	0x7a0b0b7a
            _temp = buf[22] << 8 | buf[21];
   b5568:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   b556c:	8322      	strh	r2, [r4, #24]
        if (count == 37 && buf[2] == 0x02) { 
   b556e:	2b25      	cmp	r3, #37	; 0x25
   b5570:	d170      	bne.n	b5654 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x14c>
   b5572:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b5576:	2a02      	cmp	r2, #2
   b5578:	d121      	bne.n	b55be <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
            count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b557a:	aa02      	add	r2, sp, #8
   b557c:	2109      	movs	r1, #9
   b557e:	4650      	mov	r0, sl
                count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::SHORT_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5580:	f002 fdf1 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (count > 0 && memcmp(buf, _name.data(), count)) {
   b5584:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
   b5588:	d019      	beq.n	b55be <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
   b558a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b558c:	9201      	str	r2, [sp, #4]
   b558e:	a802      	add	r0, sp, #8
   b5590:	f006 fa52 	bl	bba38 <memcmp>
   b5594:	9a01      	ldr	r2, [sp, #4]
   b5596:	b190      	cbz	r0, b55be <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
    size_ = 0;
   b5598:	f04f 0a00 	mov.w	sl, #0
                _name.append((const char*)buf, count);
   b559c:	f104 0924 	add.w	r9, r4, #36	; 0x24
   b55a0:	a902      	add	r1, sp, #8
   b55a2:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
   b55a6:	4648      	mov	r0, r9
   b55a8:	f7ff ff8c 	bl	b54c4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>
                _name.append('\0');
   b55ac:	4651      	mov	r1, sl
   b55ae:	4648      	mov	r0, r9
   b55b0:	f7ff fe9e 	bl	b52f0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEc>
                Log.trace("New device name: %s", _name.data());
   b55b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b55b6:	4932      	ldr	r1, [pc, #200]	; (b5680 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x178>)
   b55b8:	4832      	ldr	r0, [pc, #200]	; (b5684 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x17c>)
   b55ba:	f7ff fd09 	bl	b4fd0 <_ZNK5spark6Logger5traceEPKcz>
        if (_eventCallback && _record_number != prev_record)
   b55be:	4b32      	ldr	r3, [pc, #200]	; (b5688 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x180>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	b12b      	cbz	r3, b55d0 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xc8>
   b55c4:	8b62      	ldrh	r2, [r4, #26]
   b55c6:	4542      	cmp	r2, r8
   b55c8:	d002      	beq.n	b55d0 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xc8>
            _eventCallback(*this, event);
   b55ca:	4629      	mov	r1, r5
   b55cc:	4620      	mov	r0, r4
   b55ce:	4798      	blx	r3
        if (_alarmCallback != nullptr) {
   b55d0:	4d2e      	ldr	r5, [pc, #184]	; (b568c <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x184>)
   b55d2:	682b      	ldr	r3, [r5, #0]
   b55d4:	2b00      	cmp	r3, #0
   b55d6:	d02f      	beq.n	b5638 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
            if (flags & (uint16_t)lairdbt510_flags::LOW_BATTERY_ALARM)
   b55d8:	0631      	lsls	r1, r6, #24
   b55da:	d502      	bpl.n	b55e2 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xda>
                _alarmCallback(*this, lairdbt510_event_type::BATTERY_BAD);
   b55dc:	2110      	movs	r1, #16
   b55de:	4620      	mov	r0, r4
   b55e0:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::HIGH_TEMP_ALARM_0)
   b55e2:	05f2      	lsls	r2, r6, #23
   b55e4:	d503      	bpl.n	b55ee <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xe6>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_HIGH_TEMP_1);
   b55e6:	682b      	ldr	r3, [r5, #0]
   b55e8:	2104      	movs	r1, #4
   b55ea:	4620      	mov	r0, r4
   b55ec:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::HIGH_TEMP_ALARM_1)
   b55ee:	05b3      	lsls	r3, r6, #22
   b55f0:	d503      	bpl.n	b55fa <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xf2>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_HIGH_TEMP_2);
   b55f2:	682b      	ldr	r3, [r5, #0]
   b55f4:	2105      	movs	r1, #5
   b55f6:	4620      	mov	r0, r4
   b55f8:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::LOW_TEMP_ALARM_0)
   b55fa:	0570      	lsls	r0, r6, #21
   b55fc:	d503      	bpl.n	b5606 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xfe>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_LOW_TEMP_1);
   b55fe:	682b      	ldr	r3, [r5, #0]
   b5600:	2107      	movs	r1, #7
   b5602:	4620      	mov	r0, r4
   b5604:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::LOW_TEMP_ALARM_1)
   b5606:	0531      	lsls	r1, r6, #20
   b5608:	d503      	bpl.n	b5612 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x10a>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_LOW_TEMP_2);
   b560a:	682b      	ldr	r3, [r5, #0]
   b560c:	2108      	movs	r1, #8
   b560e:	4620      	mov	r0, r4
   b5610:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::DELTA_TEMP_ALARM)
   b5612:	04f2      	lsls	r2, r6, #19
   b5614:	d503      	bpl.n	b561e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x116>
                _alarmCallback(*this, lairdbt510_event_type::ALARM_DELTA_TEMP);
   b5616:	682b      	ldr	r3, [r5, #0]
   b5618:	210a      	movs	r1, #10
   b561a:	4620      	mov	r0, r4
   b561c:	4798      	blx	r3
            if (flags & (uint16_t)lairdbt510_flags::MOVEMENT_ALARM)
   b561e:	0473      	lsls	r3, r6, #17
   b5620:	d503      	bpl.n	b562a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x122>
                _alarmCallback(*this, lairdbt510_event_type::MOVEMENT);
   b5622:	682b      	ldr	r3, [r5, #0]
   b5624:	2103      	movs	r1, #3
   b5626:	4620      	mov	r0, r4
   b5628:	4798      	blx	r3
            if (prev_magnet != _magnet_state)
   b562a:	7fe3      	ldrb	r3, [r4, #31]
   b562c:	42bb      	cmp	r3, r7
   b562e:	d003      	beq.n	b5638 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x130>
                _alarmCallback(*this, lairdbt510_event_type::MAGNET_PROXIMITY);
   b5630:	682b      	ldr	r3, [r5, #0]
   b5632:	2102      	movs	r1, #2
   b5634:	4620      	mov	r0, r4
   b5636:	4798      	blx	r3
}
   b5638:	b00c      	add	sp, #48	; 0x30
   b563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            _magnet_event = buf[21] == 0x01;
   b563e:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b5642:	1e50      	subs	r0, r2, #1
   b5644:	4242      	negs	r2, r0
   b5646:	4142      	adcs	r2, r0
   b5648:	77a2      	strb	r2, [r4, #30]
            break;
   b564a:	e790      	b.n	b556e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
            _batt_voltage = buf[22] << 8 | buf[21];
   b564c:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   b5650:	83a2      	strh	r2, [r4, #28]
            break;
   b5652:	e78c      	b.n	b556e <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x66>
        else if (count == 26 && buf[2] == 0x01) { // This is a 1MB PHY advertisement
   b5654:	2b1a      	cmp	r3, #26
   b5656:	d1b2      	bne.n	b55be <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
   b5658:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b565c:	2b01      	cmp	r3, #1
   b565e:	d1ae      	bne.n	b55be <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0xb6>
    }

    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
   b5660:	f109 0914 	add.w	r9, r9, #20
            count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5664:	aa02      	add	r2, sp, #8
   b5666:	2325      	movs	r3, #37	; 0x25
   b5668:	2109      	movs	r1, #9
   b566a:	4648      	mov	r0, r9
   b566c:	f002 fd7b 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (count == 0)
   b5670:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
   b5674:	d189      	bne.n	b558a <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x82>
                count = SCAN_RESPONSE(scanResult).get(BleAdvertisingDataType::SHORT_LOCAL_NAME, buf, MAX_MANUFACTURER_DATA_LEN);
   b5676:	2325      	movs	r3, #37	; 0x25
   b5678:	aa02      	add	r2, sp, #8
   b567a:	2108      	movs	r1, #8
   b567c:	4648      	mov	r0, r9
   b567e:	e77f      	b.n	b5580 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE+0x78>
   b5680:	000bbe61 	.word	0x000bbe61
   b5684:	2003e6e8 	.word	0x2003e6e8
   b5688:	2003e690 	.word	0x2003e690
   b568c:	2003e68c 	.word	0x2003e68c

000b5690 <_ZN16JSONVectorWriter5writeEPKcj>:
    virtual void write(const char *data, size_t size) override {
   b5690:	b508      	push	{r3, lr}
        v_.append(data, (int)size);
   b5692:	3008      	adds	r0, #8
   b5694:	f7ff ff16 	bl	b54c4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE6appendEPKci>
    }
   b5698:	bd08      	pop	{r3, pc}

000b569a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b569a:	b513      	push	{r0, r1, r4, lr}
   b569c:	460b      	mov	r3, r1
   b569e:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b56a0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b56a4:	466c      	mov	r4, sp
   b56a6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b56aa:	e893 0003 	ldmia.w	r3, {r0, r1}
   b56ae:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b56b2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b56b6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b56ba:	b002      	add	sp, #8
   b56bc:	bd10      	pop	{r4, pc}

000b56be <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b56be:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b56c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56c2:	4604      	mov	r4, r0
   b56c4:	460d      	mov	r5, r1
   b56c6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b56c8:	d914      	bls.n	b56f4 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b56ca:	4290      	cmp	r0, r2
   b56cc:	d213      	bcs.n	b56f6 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b56ce:	f1a2 0688 	sub.w	r6, r2, #136	; 0x88
            dest += end - p - 1;
   b56d2:	1a75      	subs	r5, r6, r1
   b56d4:	f1a1 0788 	sub.w	r7, r1, #136	; 0x88
   b56d8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b56da:	42b7      	cmp	r7, r6
   b56dc:	d018      	beq.n	b5710 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b56de:	b11c      	cbz	r4, b56e8 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b56e0:	4631      	mov	r1, r6
   b56e2:	4620      	mov	r0, r4
   b56e4:	f7ff fd9e 	bl	b5224 <_ZN10LairdBt510C1ERKS_>
                end->~T();
   b56e8:	4630      	mov	r0, r6
   b56ea:	f7ff fd19 	bl	b5120 <_ZN10LairdBt510D1Ev>
            for (; end != p; --end, --dest) {
   b56ee:	3e88      	subs	r6, #136	; 0x88
   b56f0:	3c88      	subs	r4, #136	; 0x88
   b56f2:	e7f2      	b.n	b56da <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b56f4:	d00c      	beq.n	b5710 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b56f6:	42b5      	cmp	r5, r6
   b56f8:	d00a      	beq.n	b5710 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b56fa:	b11c      	cbz	r4, b5704 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b56fc:	4629      	mov	r1, r5
   b56fe:	4620      	mov	r0, r4
   b5700:	f7ff fd90 	bl	b5224 <_ZN10LairdBt510C1ERKS_>
                p->~T();
   b5704:	4628      	mov	r0, r5
   b5706:	f7ff fd0b 	bl	b5120 <_ZN10LairdBt510D1Ev>
            for (; p != end; ++p, ++dest) {
   b570a:	3588      	adds	r5, #136	; 0x88
   b570c:	3488      	adds	r4, #136	; 0x88
   b570e:	e7f2      	b.n	b56f6 <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5714 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE>:
void LairdBt510::addOrUpdate(const BleScanResult *scanResult) {
   b5714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b5718:	4c4b      	ldr	r4, [pc, #300]	; (b5848 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x134>)
   b571a:	b0e6      	sub	sp, #408	; 0x198
   b571c:	4606      	mov	r6, r0
   b571e:	2700      	movs	r7, #0
    return data_[i];
   b5720:	f04f 0888 	mov.w	r8, #136	; 0x88
    for (i = 0; i < beacons.size(); ++i)
   b5724:	6863      	ldr	r3, [r4, #4]
   b5726:	b2fd      	uxtb	r5, r7
   b5728:	429d      	cmp	r5, r3
   b572a:	da0d      	bge.n	b5748 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b572c:	6821      	ldr	r1, [r4, #0]
   b572e:	fb08 1105 	mla	r1, r8, r5, r1
    BleAddress getAddress() const { return address;}
   b5732:	3107      	adds	r1, #7
   b5734:	a844      	add	r0, sp, #272	; 0x110
   b5736:	f002 faff 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult))
   b573a:	4631      	mov	r1, r6
   b573c:	a844      	add	r0, sp, #272	; 0x110
   b573e:	f002 fb12 	bl	b7d66 <_ZNK8particle10BleAddresseqERKS0_>
   b5742:	3701      	adds	r7, #1
   b5744:	2800      	cmp	r0, #0
   b5746:	d0ed      	beq.n	b5724 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x10>
    if(i == beacons.size()) {
   b5748:	6863      	ldr	r3, [r4, #4]
   b574a:	429d      	cmp	r5, r3
   b574c:	d16e      	bne.n	b582c <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x118>
        rssi_count(0) {};
   b574e:	4b3f      	ldr	r3, [pc, #252]	; (b584c <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x138>)
   b5750:	9300      	str	r3, [sp, #0]
   b5752:	2301      	movs	r3, #1
   b5754:	f88d 3005 	strb.w	r3, [sp, #5]
   b5758:	f10d 0007 	add.w	r0, sp, #7
   b575c:	2308      	movs	r3, #8
   b575e:	2500      	movs	r5, #0
   b5760:	f88d 3006 	strb.w	r3, [sp, #6]
   b5764:	f002 fb13 	bl	b7d8e <_ZN8particle10BleAddressC1Ev>
        configId_(0)
   b5768:	4b39      	ldr	r3, [pc, #228]	; (b5850 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x13c>)
   b576a:	9300      	str	r3, [sp, #0]
   b576c:	a80d      	add	r0, sp, #52	; 0x34
        capacity_(0) {
   b576e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5772:	f8ad 5010 	strh.w	r5, [sp, #16]
   b5776:	f88d 5012 	strb.w	r5, [sp, #18]
   b577a:	950b      	str	r5, [sp, #44]	; 0x2c
   b577c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
   b5780:	f002 fe82 	bl	b8488 <_ZN8particle13BlePeerDeviceC1Ev>
   b5784:	a80f      	add	r0, sp, #60	; 0x3c
   b5786:	f002 fda3 	bl	b82d0 <_ZN8particle17BleCharacteristicC1Ev>
   b578a:	a811      	add	r0, sp, #68	; 0x44
   b578c:	f002 fda0 	bl	b82d0 <_ZN8particle17BleCharacteristicC1Ev>
   b5790:	a813      	add	r0, sp, #76	; 0x4c
   b5792:	f7ff fc93 	bl	b50bc <_ZN16LairdBt510ConfigC1Ev>
        new_beacon.populateData(scanResult);
   b5796:	4631      	mov	r1, r6
   b5798:	4668      	mov	r0, sp
   b579a:	f8ad 5084 	strh.w	r5, [sp, #132]	; 0x84
   b579e:	f7ff feb3 	bl	b5508 <_ZN10LairdBt51012populateDataEPKN8particle13BleScanResultE>
        beacons.append(new_beacon);
   b57a2:	4669      	mov	r1, sp
   b57a4:	a822      	add	r0, sp, #136	; 0x88
        new_beacon.missed_scan = 0;
   b57a6:	f88d 5004 	strb.w	r5, [sp, #4]
        beacons.append(new_beacon);
   b57aa:	f7ff fd3b 	bl	b5224 <_ZN10LairdBt510C1ERKS_>
    return insert(size_, std::move(value));
   b57ae:	a922      	add	r1, sp, #136	; 0x88
   b57b0:	a844      	add	r0, sp, #272	; 0x110
   b57b2:	6866      	ldr	r6, [r4, #4]
   b57b4:	f7ff fd36 	bl	b5224 <_ZN10LairdBt510C1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b57b8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b57bc:	429f      	cmp	r7, r3
   b57be:	db15      	blt.n	b57ec <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xd8>
   b57c0:	3701      	adds	r7, #1
        if (n > 0) {
   b57c2:	42af      	cmp	r7, r5
   b57c4:	dd0d      	ble.n	b57e2 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xce>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b57c6:	f04f 0888 	mov.w	r8, #136	; 0x88
    return ::malloc(size);
   b57ca:	fb08 f007 	mul.w	r0, r8, r7
   b57ce:	f001 ff23 	bl	b7618 <malloc>
            if (!d) {
   b57d2:	4605      	mov	r5, r0
   b57d4:	b1f0      	cbz	r0, b5814 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x100>
            move(d, data_, data_ + size_);
   b57d6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b57da:	fb08 1202 	mla	r2, r8, r2, r1
   b57de:	f7ff ff6e 	bl	b56be <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b57e2:	6820      	ldr	r0, [r4, #0]
   b57e4:	f001 ff20 	bl	b7628 <free>
        data_ = d;
   b57e8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b57ea:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b57ec:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b57ee:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b57f0:	2288      	movs	r2, #136	; 0x88
   b57f2:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b57f6:	f106 0088 	add.w	r0, r6, #136	; 0x88
   b57fa:	fb02 3201 	mla	r2, r2, r1, r3
   b57fe:	4631      	mov	r1, r6
   b5800:	f7ff ff5d 	bl	b56be <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5804:	b11e      	cbz	r6, b580e <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0xfa>
   b5806:	a944      	add	r1, sp, #272	; 0x110
   b5808:	4630      	mov	r0, r6
   b580a:	f7ff fd0b 	bl	b5224 <_ZN10LairdBt510C1ERKS_>
    ++size_;
   b580e:	6863      	ldr	r3, [r4, #4]
   b5810:	3301      	adds	r3, #1
   b5812:	6063      	str	r3, [r4, #4]
    return insert(size_, std::move(value));
   b5814:	a844      	add	r0, sp, #272	; 0x110
   b5816:	f7ff fc83 	bl	b5120 <_ZN10LairdBt510D1Ev>
   b581a:	a822      	add	r0, sp, #136	; 0x88
   b581c:	f7ff fc80 	bl	b5120 <_ZN10LairdBt510D1Ev>
        LairdBt510 new_beacon;
   b5820:	4668      	mov	r0, sp
   b5822:	f7ff fc7d 	bl	b5120 <_ZN10LairdBt510D1Ev>
}
   b5826:	b066      	add	sp, #408	; 0x198
   b5828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b582c:	2388      	movs	r3, #136	; 0x88
   b582e:	435d      	muls	r5, r3
   b5830:	6823      	ldr	r3, [r4, #0]
   b5832:	195c      	adds	r4, r3, r5
        beacon.newly_scanned = false;
   b5834:	2700      	movs	r7, #0
   b5836:	7167      	strb	r7, [r4, #5]
        beacon.populateData(scanResult);
   b5838:	595b      	ldr	r3, [r3, r5]
   b583a:	4631      	mov	r1, r6
   b583c:	685b      	ldr	r3, [r3, #4]
   b583e:	4620      	mov	r0, r4
   b5840:	4798      	blx	r3
        beacon.missed_scan = 0;
   b5842:	7127      	strb	r7, [r4, #4]
}
   b5844:	e7ef      	b.n	b5826 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE+0x112>
   b5846:	bf00      	nop
   b5848:	2003e694 	.word	0x2003e694
   b584c:	000bbcf8 	.word	0x000bbcf8
   b5850:	000bbf30 	.word	0x000bbf30

000b5854 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5854:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5856:	b510      	push	{r4, lr}
      if (_M_empty())
   b5858:	b90a      	cbnz	r2, b585e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b585a:	f005 fc66 	bl	bb12a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b585e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5862:	68c3      	ldr	r3, [r0, #12]
   b5864:	4718      	bx	r3

000b5866 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5866:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5868:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b586a:	f100 0110 	add.w	r1, r0, #16
   b586e:	f7ff fff1 	bl	b5854 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5872:	bd08      	pop	{r3, pc}

000b5874 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5874:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5876:	b510      	push	{r4, lr}
      if (_M_empty())
   b5878:	b90a      	cbnz	r2, b587e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b587a:	f005 fc56 	bl	bb12a <_ZSt25__throw_bad_function_callv>
    }
   b587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5882:	68c3      	ldr	r3, [r0, #12]
   b5884:	4718      	bx	r3

000b5886 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5886:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5888:	6800      	ldr	r0, [r0, #0]
   b588a:	f100 0110 	add.w	r1, r0, #16
   b588e:	f7ff fff1 	bl	b5874 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5892:	bd08      	pop	{r3, pc}

000b5894 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5894:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5896:	2300      	movs	r3, #0
   b5898:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b589a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b589c:	4604      	mov	r4, r0
   b589e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b58a0:	b12b      	cbz	r3, b58ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b58a2:	2202      	movs	r2, #2
   b58a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b58a6:	68eb      	ldr	r3, [r5, #12]
   b58a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b58aa:	68ab      	ldr	r3, [r5, #8]
   b58ac:	60a3      	str	r3, [r4, #8]
    }
   b58ae:	4620      	mov	r0, r4
   b58b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b58b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58b6:	b089      	sub	sp, #36	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b58b8:	888b      	ldrh	r3, [r1, #4]
   b58ba:	680a      	ldr	r2, [r1, #0]
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b58bc:	6804      	ldr	r4, [r0, #0]
   b58be:	f8ad 3004 	strh.w	r3, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b58c2:	2000      	movs	r0, #0
   b58c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
      __a = _GLIBCXX_MOVE(__b);
   b58c8:	9200      	str	r2, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b58ca:	808b      	strh	r3, [r1, #4]
   b58cc:	6008      	str	r0, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b58ce:	f04f 0202 	mov.w	r2, #2
   b58d2:	e8d4 1f4f 	ldrexb	r1, [r4]
   b58d6:	4281      	cmp	r1, r0
   b58d8:	d103      	bne.n	b58e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   b58da:	e8c4 2f45 	strexb	r5, r2, [r4]
   b58de:	2d00      	cmp	r5, #0
   b58e0:	d1f7      	bne.n	b58d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x1e>
        if (this->changeState(State::FAILED)) {
   b58e2:	d127      	bne.n	b5934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x80>
      __a = _GLIBCXX_MOVE(__b);
   b58e4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b58e8:	f8ad 3004 	strh.w	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   b58ec:	9b00      	ldr	r3, [sp, #0]
   b58ee:	60e3      	str	r3, [r4, #12]
   b58f0:	8222      	strh	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b58f2:	9000      	str	r0, [sp, #0]
	__atomic_store_n(&_M_i, __i, int(__m));
   b58f4:	2301      	movs	r3, #1
   b58f6:	f3bf 8f5b 	dmb	ish
   b58fa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b58fc:	f104 0308 	add.w	r3, r4, #8
   b5900:	f3bf 8f5b 	dmb	ish
   b5904:	e853 6f00 	ldrex	r6, [r3]
   b5908:	e843 0200 	strex	r2, r0, [r3]
   b590c:	2a00      	cmp	r2, #0
   b590e:	d1f9      	bne.n	b5904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x50>
   b5910:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5914:	b176      	cbz	r6, b5934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x80>
        return (application_thread_current(nullptr) != 0);
   b5916:	f001 fdbb 	bl	b7490 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b591a:	b180      	cbz	r0, b593e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b591c:	f104 010c 	add.w	r1, r4, #12
   b5920:	4630      	mov	r0, r6
   b5922:	f7ff ff97 	bl	b5854 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5926:	4630      	mov	r0, r6
   b5928:	f7ff fab2 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b592c:	2110      	movs	r1, #16
   b592e:	4630      	mov	r0, r6
   b5930:	f7fe fbb3 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b5934:	4668      	mov	r0, sp
   b5936:	f7ff fad2 	bl	b4ede <_ZN8particle5ErrorD1Ev>
    }
   b593a:	b009      	add	sp, #36	; 0x24
   b593c:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b593e:	4631      	mov	r1, r6
   b5940:	a802      	add	r0, sp, #8
   b5942:	f7ff ffa7 	bl	b5894 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5946:	68e0      	ldr	r0, [r4, #12]
   b5948:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b594c:	b108      	cbz	r0, b5952 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x9e>
   b594e:	f006 f8f3 	bl	bbb38 <strdup>
        type_(type) {
   b5952:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5954:	2010      	movs	r0, #16
   b5956:	f8ad 501c 	strh.w	r5, [sp, #28]
   b595a:	f7fe fb9a 	bl	b4092 <_Znwj>
   b595e:	4605      	mov	r5, r0
   b5960:	b310      	cbz	r0, b59a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>
    _Function_base() : _M_manager(nullptr) { }
   b5962:	2700      	movs	r7, #0
   b5964:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5966:	2018      	movs	r0, #24
   b5968:	f7fe fb93 	bl	b4092 <_Znwj>
   b596c:	4604      	mov	r4, r0
   b596e:	b1b0      	cbz	r0, b599e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xea>
    _Function_base() : _M_manager(nullptr) { }
   b5970:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5972:	4601      	mov	r1, r0
   b5974:	a802      	add	r0, sp, #8
   b5976:	f7ff fe90 	bl	b569a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b597a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b597c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b597e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5980:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5982:	9204      	str	r2, [sp, #16]
   b5984:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5986:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5988:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   b598c:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b598e:	f64f 739c 	movw	r3, #65436	; 0xff9c
   b5992:	f8ad 301c 	strh.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5996:	9b06      	ldr	r3, [sp, #24]
   b5998:	9205      	str	r2, [sp, #20]
   b599a:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b599c:	9706      	str	r7, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b599e:	4b08      	ldr	r3, [pc, #32]	; (b59c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10c>)
   b59a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b59a2:	4b08      	ldr	r3, [pc, #32]	; (b59c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b59a4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b59a6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b59a8:	a806      	add	r0, sp, #24
   b59aa:	f7ff fa98 	bl	b4ede <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b59ae:	a802      	add	r0, sp, #8
   b59b0:	f7ff fa6e 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b59b4:	2200      	movs	r2, #0
   b59b6:	4629      	mov	r1, r5
   b59b8:	4803      	ldr	r0, [pc, #12]	; (b59c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x114>)
   b59ba:	f001 fd71 	bl	b74a0 <application_thread_invoke>
   b59be:	e7b2      	b.n	b5926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
   b59c0:	000b5867 	.word	0x000b5867
   b59c4:	000b59cd 	.word	0x000b59cd
   b59c8:	000ba901 	.word	0x000ba901

000b59cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b59cc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b59ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59d0:	4605      	mov	r5, r0
	switch (__op)
   b59d2:	d103      	bne.n	b59dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b59d4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b59d6:	6003      	str	r3, [r0, #0]
      }
   b59d8:	2000      	movs	r0, #0
   b59da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b59dc:	2a02      	cmp	r2, #2
   b59de:	d010      	beq.n	b5a02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b59e0:	2a03      	cmp	r2, #3
   b59e2:	d1f9      	bne.n	b59d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b59e4:	6804      	ldr	r4, [r0, #0]
   b59e6:	2c00      	cmp	r4, #0
   b59e8:	d0f6      	beq.n	b59d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b59ea:	f104 0010 	add.w	r0, r4, #16
   b59ee:	f7ff fa76 	bl	b4ede <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b59f2:	4620      	mov	r0, r4
   b59f4:	f7ff fa4c 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b59f8:	2118      	movs	r1, #24
   b59fa:	4620      	mov	r0, r4
   b59fc:	f7fe fb4d 	bl	b409a <_ZdlPvj>
   b5a00:	e7ea      	b.n	b59d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a02:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5a04:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a06:	f7fe fb44 	bl	b4092 <_Znwj>
   b5a0a:	4604      	mov	r4, r0
   b5a0c:	b150      	cbz	r0, b5a24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5a0e:	4631      	mov	r1, r6
   b5a10:	f7ff ff40 	bl	b5894 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5a14:	6930      	ldr	r0, [r6, #16]
   b5a16:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5a1a:	b108      	cbz	r0, b5a20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5a1c:	f006 f88c 	bl	bbb38 <strdup>
        type_(type) {
   b5a20:	6120      	str	r0, [r4, #16]
   b5a22:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5a24:	602c      	str	r4, [r5, #0]
	}
   b5a26:	e7d7      	b.n	b59d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5a28 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5a28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5a2a:	2300      	movs	r3, #0
   b5a2c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5a2e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5a30:	4604      	mov	r4, r0
   b5a32:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5a34:	b12b      	cbz	r3, b5a42 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5a36:	2202      	movs	r2, #2
   b5a38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5a3a:	68eb      	ldr	r3, [r5, #12]
   b5a3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5a3e:	68ab      	ldr	r3, [r5, #8]
   b5a40:	60a3      	str	r3, [r4, #8]
    }
   b5a42:	4620      	mov	r0, r4
   b5a44:	bd38      	pop	{r3, r4, r5, pc}

000b5a46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5a46:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5a48:	b570      	push	{r4, r5, r6, lr}
   b5a4a:	4604      	mov	r4, r0
	switch (__op)
   b5a4c:	d103      	bne.n	b5a56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5a4e:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5a50:	6003      	str	r3, [r0, #0]
      }
   b5a52:	2000      	movs	r0, #0
   b5a54:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5a56:	2a02      	cmp	r2, #2
   b5a58:	d00c      	beq.n	b5a74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5a5a:	2a03      	cmp	r2, #3
   b5a5c:	d1f9      	bne.n	b5a52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5a5e:	6804      	ldr	r4, [r0, #0]
   b5a60:	2c00      	cmp	r4, #0
   b5a62:	d0f6      	beq.n	b5a52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5a64:	4620      	mov	r0, r4
   b5a66:	f7ff fa13 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5a6a:	2114      	movs	r1, #20
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	f7fe fb14 	bl	b409a <_ZdlPvj>
   b5a72:	e7ee      	b.n	b5a52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a74:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5a76:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a78:	f7fe fb0b 	bl	b4092 <_Znwj>
   b5a7c:	4605      	mov	r5, r0
   b5a7e:	b120      	cbz	r0, b5a8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b5a80:	4631      	mov	r1, r6
   b5a82:	f7ff ffd1 	bl	b5a28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5a86:	7c33      	ldrb	r3, [r6, #16]
   b5a88:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5a8a:	6025      	str	r5, [r4, #0]
	}
   b5a8c:	e7e1      	b.n	b5a52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b5a90 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb>:
template<typename ResultT, typename ContextT = detail::FutureContext>
class Promise: public PromiseBase<ResultT, ContextT> {
public:
    using PromiseBase<ResultT, ContextT>::PromiseBase;

    void setResult(ResultT result) {
   b5a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5a92:	6804      	ldr	r4, [r0, #0]
   b5a94:	b087      	sub	sp, #28
   b5a96:	2301      	movs	r3, #1
   b5a98:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5a9c:	2a00      	cmp	r2, #0
   b5a9e:	d103      	bne.n	b5aa8 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x18>
   b5aa0:	e8c4 3f40 	strexb	r0, r3, [r4]
   b5aa4:	2800      	cmp	r0, #0
   b5aa6:	d1f7      	bne.n	b5a98 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x8>
        if (this->changeState(State::SUCCEEDED)) {
   b5aa8:	d154      	bne.n	b5b54 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc4>
            new(&result_) ResultT(std::move(result));
   b5aaa:	7321      	strb	r1, [r4, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5aac:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5ab0:	2000      	movs	r0, #0
	__atomic_store_n(&_M_i, __i, int(__m));
   b5ab2:	7063      	strb	r3, [r4, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5ab4:	1d23      	adds	r3, r4, #4
   b5ab6:	f3bf 8f5b 	dmb	ish
   b5aba:	e853 6f00 	ldrex	r6, [r3]
   b5abe:	e843 0200 	strex	r2, r0, [r3]
   b5ac2:	2a00      	cmp	r2, #0
   b5ac4:	d1f9      	bne.n	b5aba <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x2a>
   b5ac6:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5aca:	2e00      	cmp	r6, #0
   b5acc:	d042      	beq.n	b5b54 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc4>
        return (application_thread_current(nullptr) != 0);
   b5ace:	f001 fcdf 	bl	b7490 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5ad2:	4607      	mov	r7, r0
   b5ad4:	b170      	cbz	r0, b5af4 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x64>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5ad6:	f104 010c 	add.w	r1, r4, #12
   b5ada:	4630      	mov	r0, r6
   b5adc:	f7ff feca 	bl	b5874 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5ae0:	4630      	mov	r0, r6
   b5ae2:	f7ff f9d5 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5ae6:	2110      	movs	r1, #16
   b5ae8:	4630      	mov	r0, r6
        this->p_->setResult(std::move(result));
    }
   b5aea:	b007      	add	sp, #28
   b5aec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            delete callbackPtr;
   b5af0:	f7fe bad3 	b.w	b409a <_ZdlPvj>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5af4:	4631      	mov	r1, r6
   b5af6:	a801      	add	r0, sp, #4
   b5af8:	f7ff ff96 	bl	b5a28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5afc:	7b23      	ldrb	r3, [r4, #12]
   b5afe:	f88d 3014 	strb.w	r3, [sp, #20]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5b02:	2010      	movs	r0, #16
   b5b04:	f7fe fac5 	bl	b4092 <_Znwj>
   b5b08:	4605      	mov	r5, r0
   b5b0a:	b1d0      	cbz	r0, b5b42 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xb2>
    _Function_base() : _M_manager(nullptr) { }
   b5b0c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5b0e:	2014      	movs	r0, #20
   b5b10:	f7fe fabf 	bl	b4092 <_Znwj>
   b5b14:	4604      	mov	r4, r0
   b5b16:	b178      	cbz	r0, b5b38 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xa8>
    _Function_base() : _M_manager(nullptr) { }
   b5b18:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5b1a:	4601      	mov	r1, r0
   b5b1c:	a801      	add	r0, sp, #4
   b5b1e:	f7ff fdbc 	bl	b569a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b22:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5b24:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b26:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b28:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5b2a:	9203      	str	r2, [sp, #12]
   b5b2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b2e:	60e3      	str	r3, [r4, #12]
   b5b30:	f89d 3014 	ldrb.w	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5b34:	9204      	str	r2, [sp, #16]
   b5b36:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5b38:	4b07      	ldr	r3, [pc, #28]	; (b5b58 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xc8>)
   b5b3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5b3c:	4b07      	ldr	r3, [pc, #28]	; (b5b5c <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xcc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5b3e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5b40:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5b42:	a801      	add	r0, sp, #4
   b5b44:	f7ff f9a4 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5b48:	2200      	movs	r2, #0
   b5b4a:	4629      	mov	r1, r5
   b5b4c:	4804      	ldr	r0, [pc, #16]	; (b5b60 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0xd0>)
   b5b4e:	f001 fca7 	bl	b74a0 <application_thread_invoke>
   b5b52:	e7c5      	b.n	b5ae0 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb+0x50>
    }
   b5b54:	b007      	add	sp, #28
   b5b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5b58:	000b5887 	.word	0x000b5887
   b5b5c:	000b5a47 	.word	0x000b5a47
   b5b60:	000ba901 	.word	0x000ba901

000b5b64 <_ZN10LairdBt5104loopEv>:
void LairdBt510::loop() {
   b5b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static unsigned int timer = System.uptime();
   b5b68:	4d9d      	ldr	r5, [pc, #628]	; (b5de0 <_ZN10LairdBt5104loopEv+0x27c>)
void LairdBt510::loop() {
   b5b6a:	b089      	sub	sp, #36	; 0x24
    static unsigned int timer = System.uptime();
   b5b6c:	782b      	ldrb	r3, [r5, #0]
   b5b6e:	f3bf 8f5b 	dmb	ish
   b5b72:	07db      	lsls	r3, r3, #31
void LairdBt510::loop() {
   b5b74:	af00      	add	r7, sp, #0
   b5b76:	4604      	mov	r4, r0
    static unsigned int timer = System.uptime();
   b5b78:	d40a      	bmi.n	b5b90 <_ZN10LairdBt5104loopEv+0x2c>
   b5b7a:	4628      	mov	r0, r5
   b5b7c:	f7fe fa8f 	bl	b409e <__cxa_guard_acquire>
   b5b80:	b130      	cbz	r0, b5b90 <_ZN10LairdBt5104loopEv+0x2c>
   b5b82:	f7ff f9a2 	bl	b4eca <_ZN11SystemClass6uptimeEv>
   b5b86:	4b97      	ldr	r3, [pc, #604]	; (b5de4 <_ZN10LairdBt5104loopEv+0x280>)
   b5b88:	6018      	str	r0, [r3, #0]
   b5b8a:	4628      	mov	r0, r5
   b5b8c:	f7fe fa8c 	bl	b40a8 <__cxa_guard_release>
    if (state_ != prev_state_ || timer != System.uptime()) {
   b5b90:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   b5b94:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   b5b98:	429a      	cmp	r2, r3
   b5b9a:	d00e      	beq.n	b5bba <_ZN10LairdBt5104loopEv+0x56>
        prev_state_ = state_;
   b5b9c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b5ba0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        switch (state_)
   b5ba4:	3b01      	subs	r3, #1
   b5ba6:	2b05      	cmp	r3, #5
   b5ba8:	d846      	bhi.n	b5c38 <_ZN10LairdBt5104loopEv+0xd4>
   b5baa:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5bae:	0010      	.short	0x0010
   b5bb0:	004a003b 	.word	0x004a003b
   b5bb4:	00e500ef 	.word	0x00e500ef
   b5bb8:	0111      	.short	0x0111
    if (state_ != prev_state_ || timer != System.uptime()) {
   b5bba:	f7ff f986 	bl	b4eca <_ZN11SystemClass6uptimeEv>
   b5bbe:	4b89      	ldr	r3, [pc, #548]	; (b5de4 <_ZN10LairdBt5104loopEv+0x280>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	4298      	cmp	r0, r3
   b5bc4:	d1ea      	bne.n	b5b9c <_ZN10LairdBt5104loopEv+0x38>
}
   b5bc6:	3724      	adds	r7, #36	; 0x24
   b5bc8:	46bd      	mov	sp, r7
   b5bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            peer_ = BLE.connect(getAddress(), false);
   b5bce:	f002 fd0b 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
    BleAddress getAddress() const { return address;}
   b5bd2:	1de1      	adds	r1, r4, #7
   b5bd4:	4605      	mov	r5, r0
   b5bd6:	4638      	mov	r0, r7
   b5bd8:	f002 f8ae 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
   b5bdc:	2300      	movs	r3, #0
   b5bde:	4629      	mov	r1, r5
   b5be0:	463a      	mov	r2, r7
   b5be2:	f107 000c 	add.w	r0, r7, #12
   b5be6:	f004 f807 	bl	b9bf8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5bea:	68fb      	ldr	r3, [r7, #12]
   b5bec:	693d      	ldr	r5, [r7, #16]
   b5bee:	6363      	str	r3, [r4, #52]	; 0x34
	if (__tmp != _M_pi)
   b5bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b5bf2:	429d      	cmp	r5, r3
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5bf4:	f104 0634 	add.w	r6, r4, #52	; 0x34
   b5bf8:	d008      	beq.n	b5c0c <_ZN10LairdBt5104loopEv+0xa8>
	    if (__tmp != 0)
   b5bfa:	b115      	cbz	r5, b5c02 <_ZN10LairdBt5104loopEv+0x9e>
    { ++_M_use_count; }
   b5bfc:	686b      	ldr	r3, [r5, #4]
   b5bfe:	3301      	adds	r3, #1
   b5c00:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5c02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   b5c04:	b108      	cbz	r0, b5c0a <_ZN10LairdBt5104loopEv+0xa6>
	      _M_pi->_M_release();
   b5c06:	f7ff f94c 	bl	b4ea2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5c0a:	63a5      	str	r5, [r4, #56]	; 0x38
   b5c0c:	f107 000c 	add.w	r0, r7, #12
   b5c10:	f002 fdfd 	bl	b880e <_ZN8particle13BlePeerDeviceD1Ev>
            if (peer_.connected()) {
   b5c14:	4630      	mov	r0, r6
   b5c16:	f002 fc59 	bl	b84cc <_ZNK8particle13BlePeerDevice9connectedEv>
   b5c1a:	b168      	cbz	r0, b5c38 <_ZN10LairdBt5104loopEv+0xd4>
                state_ = PAIRING;
   b5c1c:	2302      	movs	r3, #2
                state_ = DISCONNECT;
   b5c1e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b5c22:	e009      	b.n	b5c38 <_ZN10LairdBt5104loopEv+0xd4>
            BLE.startPairing(peer_);
   b5c24:	f002 fce0 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c28:	f104 0134 	add.w	r1, r4, #52	; 0x34
   b5c2c:	f002 fd51 	bl	b86d2 <_ZNK8particle14BleLocalDevice12startPairingERKNS_13BlePeerDeviceE>
            Log.trace("Pairing");
   b5c30:	496d      	ldr	r1, [pc, #436]	; (b5de8 <_ZN10LairdBt5104loopEv+0x284>)
   b5c32:	486e      	ldr	r0, [pc, #440]	; (b5dec <_ZN10LairdBt5104loopEv+0x288>)
   b5c34:	f7ff f9cc 	bl	b4fd0 <_ZNK5spark6Logger5traceEPKcz>
        timer = System.uptime();
   b5c38:	f7ff f947 	bl	b4eca <_ZN11SystemClass6uptimeEv>
   b5c3c:	4b69      	ldr	r3, [pc, #420]	; (b5de4 <_ZN10LairdBt5104loopEv+0x280>)
   b5c3e:	6018      	str	r0, [r3, #0]
}
   b5c40:	e7c1      	b.n	b5bc6 <_ZN10LairdBt5104loopEv+0x62>
            peer_.discoverAllServices();
   b5c42:	f104 0934 	add.w	r9, r4, #52	; 0x34
   b5c46:	4649      	mov	r1, r9
   b5c48:	f107 000c 	add.w	r0, r7, #12
   b5c4c:	f003 fd26 	bl	b969c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
    destruct(data_, data_ + size_);
   b5c50:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
            break;
   b5c54:	46e8      	mov	r8, sp
   b5c56:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5c5a:	42ae      	cmp	r6, r5
   b5c5c:	d004      	beq.n	b5c68 <_ZN10LairdBt5104loopEv+0x104>
      ~__shared_ptr() = default;
   b5c5e:	1d28      	adds	r0, r5, #4
   b5c60:	f7ff fa48 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5c64:	3508      	adds	r5, #8
   b5c66:	e7f8      	b.n	b5c5a <_ZN10LairdBt5104loopEv+0xf6>
    ::free(ptr);
   b5c68:	68f8      	ldr	r0, [r7, #12]
   b5c6a:	f001 fcdd 	bl	b7628 <free>
            peer_.discoverAllCharacteristics();
   b5c6e:	4649      	mov	r1, r9
   b5c70:	f107 000c 	add.w	r0, r7, #12
   b5c74:	f003 fefe 	bl	b9a74 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
    destruct(data_, data_ + size_);
   b5c78:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
   b5c7c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5c80:	42ae      	cmp	r6, r5
   b5c82:	d004      	beq.n	b5c8e <_ZN10LairdBt5104loopEv+0x12a>
            p->~T();
   b5c84:	4628      	mov	r0, r5
   b5c86:	f002 fdbb 	bl	b8800 <_ZN8particle17BleCharacteristicD1Ev>
        for (; p != end; ++p) {
   b5c8a:	3508      	adds	r5, #8
   b5c8c:	e7f8      	b.n	b5c80 <_ZN10LairdBt5104loopEv+0x11c>
    ::free(ptr);
   b5c8e:	68f8      	ldr	r0, [r7, #12]
   b5c90:	f001 fcca 	bl	b7628 <free>
            peer_.getCharacteristicByUUID(rx, BleUuid("569a2001-b87f-490c-92cb-11ba5ea5167c"));
   b5c94:	f104 0644 	add.w	r6, r4, #68	; 0x44
   b5c98:	4955      	ldr	r1, [pc, #340]	; (b5df0 <_ZN10LairdBt5104loopEv+0x28c>)
   b5c9a:	f107 000c 	add.w	r0, r7, #12
   b5c9e:	f002 f9c7 	bl	b8030 <_ZN8particle7BleUuidC1EPKc>
   b5ca2:	f107 020c 	add.w	r2, r7, #12
   b5ca6:	4631      	mov	r1, r6
   b5ca8:	4648      	mov	r0, r9
   b5caa:	f003 fc39 	bl	b9520 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
            peer_.getCharacteristicByUUID(tx, BleUuid("569a2000-b87f-490c-92cb-11ba5ea5167c"));
   b5cae:	f104 053c 	add.w	r5, r4, #60	; 0x3c
   b5cb2:	4950      	ldr	r1, [pc, #320]	; (b5df4 <_ZN10LairdBt5104loopEv+0x290>)
   b5cb4:	f107 000c 	add.w	r0, r7, #12
   b5cb8:	f002 f9ba 	bl	b8030 <_ZN8particle7BleUuidC1EPKc>
   b5cbc:	4629      	mov	r1, r5
   b5cbe:	f107 020c 	add.w	r2, r7, #12
   b5cc2:	4648      	mov	r0, r9
   b5cc4:	f003 fc2c 	bl	b9520 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
            tx.onDataReceived(onDataReceived, this);
   b5cc8:	4622      	mov	r2, r4
   b5cca:	4628      	mov	r0, r5
   b5ccc:	494a      	ldr	r1, [pc, #296]	; (b5df8 <_ZN10LairdBt5104loopEv+0x294>)
   b5cce:	f003 fc51 	bl	b9574 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
            tx.subscribe(true);
   b5cd2:	2101      	movs	r1, #1
   b5cd4:	4628      	mov	r0, r5
   b5cd6:	f002 fb81 	bl	b83dc <_ZNK8particle17BleCharacteristic9subscribeEb>
        state_(BEGIN) {
   b5cda:	2500      	movs	r5, #0
    JSONVectorWriter(): v_(Vector<char>()) {}
   b5cdc:	4b47      	ldr	r3, [pc, #284]	; (b5dfc <_ZN10LairdBt5104loopEv+0x298>)
   b5cde:	60fb      	str	r3, [r7, #12]
            config_.createJson(writer_, configId_);
   b5ce0:	f104 0284 	add.w	r2, r4, #132	; 0x84
   b5ce4:	f107 010c 	add.w	r1, r7, #12
   b5ce8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
        capacity_(0) {
   b5cec:	e9c7 5505 	strd	r5, r5, [r7, #20]
   b5cf0:	743d      	strb	r5, [r7, #16]
   b5cf2:	61fd      	str	r5, [r7, #28]
   b5cf4:	f7ff fb16 	bl	b5324 <_ZNK16LairdBt510Config10createJsonER16JSONVectorWriterRt>
            char buf[writer_.vectorSize()];
   b5cf8:	69bb      	ldr	r3, [r7, #24]
   b5cfa:	3307      	adds	r3, #7
   b5cfc:	f023 0307 	bic.w	r3, r3, #7
   b5d00:	ebad 0d03 	sub.w	sp, sp, r3
   b5d04:	46e9      	mov	r9, sp
            for (size_t i = 0; i < writer_.vectorSize(); ++i) {
   b5d06:	69bb      	ldr	r3, [r7, #24]
   b5d08:	429d      	cmp	r5, r3
   b5d0a:	d20d      	bcs.n	b5d28 <_ZN10LairdBt5104loopEv+0x1c4>
    Vector<char> vector() const {return v_;}
   b5d0c:	f107 0114 	add.w	r1, r7, #20
   b5d10:	4638      	mov	r0, r7
   b5d12:	f7ff fa6a 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
                buf[i] = writer_.vector().at(i);
   b5d16:	683b      	ldr	r3, [r7, #0]
   b5d18:	5d5b      	ldrb	r3, [r3, r5]
   b5d1a:	f809 3005 	strb.w	r3, [r9, r5]
   b5d1e:	4638      	mov	r0, r7
   b5d20:	f7ff f9f7 	bl	b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
            for (size_t i = 0; i < writer_.vectorSize(); ++i) {
   b5d24:	3501      	adds	r5, #1
   b5d26:	e7ee      	b.n	b5d06 <_ZN10LairdBt5104loopEv+0x1a2>
            Log.trace("Send value: %s", buf);
   b5d28:	464a      	mov	r2, r9
   b5d2a:	4935      	ldr	r1, [pc, #212]	; (b5e00 <_ZN10LairdBt5104loopEv+0x29c>)
   b5d2c:	482f      	ldr	r0, [pc, #188]	; (b5dec <_ZN10LairdBt5104loopEv+0x288>)
   b5d2e:	f7ff f94f 	bl	b4fd0 <_ZNK5spark6Logger5traceEPKcz>
    Vector<char> vector() const {return v_;}
   b5d32:	f107 0114 	add.w	r1, r7, #20
   b5d36:	4638      	mov	r0, r7
   b5d38:	f7ff fa57 	bl	b51ea <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
            Log.trace("set value return: %d",rx.setValue(reinterpret_cast<const uint8_t*>(writer_.vector().data()), writer_.vectorSize(), BleTxRxType::ACK));
   b5d3c:	2301      	movs	r3, #1
   b5d3e:	69ba      	ldr	r2, [r7, #24]
   b5d40:	6839      	ldr	r1, [r7, #0]
   b5d42:	4630      	mov	r0, r6
   b5d44:	f002 faea 	bl	b831c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5d48:	492e      	ldr	r1, [pc, #184]	; (b5e04 <_ZN10LairdBt5104loopEv+0x2a0>)
   b5d4a:	4602      	mov	r2, r0
   b5d4c:	4827      	ldr	r0, [pc, #156]	; (b5dec <_ZN10LairdBt5104loopEv+0x288>)
   b5d4e:	f7ff f93f 	bl	b4fd0 <_ZNK5spark6Logger5traceEPKcz>
   b5d52:	4638      	mov	r0, r7
   b5d54:	f7ff f9dd 	bl	b5112 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
            if (state_ == SENDING) {
   b5d58:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b5d5c:	2b03      	cmp	r3, #3
   b5d5e:	d105      	bne.n	b5d6c <_ZN10LairdBt5104loopEv+0x208>
                state_ = RECEIVING;
   b5d60:	2305      	movs	r3, #5
   b5d62:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                timeout = 0;
   b5d66:	4b28      	ldr	r3, [pc, #160]	; (b5e08 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5d68:	2200      	movs	r2, #0
   b5d6a:	701a      	strb	r2, [r3, #0]
            JSONVectorWriter writer_;
   b5d6c:	f107 000c 	add.w	r0, r7, #12
   b5d70:	f7ff f9f6 	bl	b5160 <_ZN16JSONVectorWriterD1Ev>
   b5d74:	46c5      	mov	sp, r8
   b5d76:	e75f      	b.n	b5c38 <_ZN10LairdBt5104loopEv+0xd4>
            if (++timeout > RECEIVE_TIMEOUT_LOOPS) {
   b5d78:	4a23      	ldr	r2, [pc, #140]	; (b5e08 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5d7a:	7813      	ldrb	r3, [r2, #0]
   b5d7c:	3301      	adds	r3, #1
   b5d7e:	b2db      	uxtb	r3, r3
   b5d80:	2b14      	cmp	r3, #20
   b5d82:	7013      	strb	r3, [r2, #0]
   b5d84:	f67f af58 	bls.w	b5c38 <_ZN10LairdBt5104loopEv+0xd4>
                state_ = DISCONNECT;
   b5d88:	2304      	movs	r3, #4
   b5d8a:	e748      	b.n	b5c1e <_ZN10LairdBt5104loopEv+0xba>
            auto p = Promise<bool>::fromDataPtr(handler_data_);
   b5d8c:	6961      	ldr	r1, [r4, #20]
   b5d8e:	4638      	mov	r0, r7
   b5d90:	f7ff f9fc 	bl	b518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
            if (timeout > RECEIVE_TIMEOUT_LOOPS) {
   b5d94:	4b1c      	ldr	r3, [pc, #112]	; (b5e08 <_ZN10LairdBt5104loopEv+0x2a4>)
   b5d96:	781b      	ldrb	r3, [r3, #0]
   b5d98:	2b14      	cmp	r3, #20
   b5d9a:	d914      	bls.n	b5dc6 <_ZN10LairdBt5104loopEv+0x262>
        type_(type) {
   b5d9c:	2300      	movs	r3, #0
   b5d9e:	60fb      	str	r3, [r7, #12]
                p.setError(Error::TIMEOUT);
   b5da0:	4638      	mov	r0, r7
   b5da2:	f64f 7360 	movw	r3, #65376	; 0xff60
   b5da6:	f107 010c 	add.w	r1, r7, #12
   b5daa:	823b      	strh	r3, [r7, #16]
   b5dac:	f7ff fd82 	bl	b58b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5db0:	f107 000c 	add.w	r0, r7, #12
   b5db4:	f7ff f893 	bl	b4ede <_ZN8particle5ErrorD1Ev>
            state_ = CLEANUP;
   b5db8:	2306      	movs	r3, #6
   b5dba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b5dbe:	1d38      	adds	r0, r7, #4
   b5dc0:	f7ff f998 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5dc4:	e738      	b.n	b5c38 <_ZN10LairdBt5104loopEv+0xd4>
                p.setResult(true);
   b5dc6:	2101      	movs	r1, #1
   b5dc8:	4638      	mov	r0, r7
   b5dca:	f7ff fe61 	bl	b5a90 <_ZN8particle7PromiseIbNS_6detail13FutureContextEE9setResultEb>
   b5dce:	e7f3      	b.n	b5db8 <_ZN10LairdBt5104loopEv+0x254>
            state_ = IDLE;
   b5dd0:	2300      	movs	r3, #0
   b5dd2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            peer_.disconnect();
   b5dd6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5dda:	f003 f993 	bl	b9104 <_ZNK8particle13BlePeerDevice10disconnectEv>
            break;
   b5dde:	e72b      	b.n	b5c38 <_ZN10LairdBt5104loopEv+0xd4>
   b5de0:	2003e688 	.word	0x2003e688
   b5de4:	2003e6a0 	.word	0x2003e6a0
   b5de8:	000bbe75 	.word	0x000bbe75
   b5dec:	2003e6e8 	.word	0x2003e6e8
   b5df0:	000bbe7d 	.word	0x000bbe7d
   b5df4:	000bbea2 	.word	0x000bbea2
   b5df8:	000b5001 	.word	0x000b5001
   b5dfc:	000bbef4 	.word	0x000bbef4
   b5e00:	000bbec7 	.word	0x000bbec7
   b5e04:	000bbed6 	.word	0x000bbed6
   b5e08:	2003e6a4 	.word	0x2003e6a4

000b5e0c <_GLOBAL__sub_I__ZN10LairdBt51014_eventCallbackE>:
   b5e0c:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <_GLOBAL__sub_I__ZN10LairdBt51014_eventCallbackE+0xc>)
   b5e0e:	2200      	movs	r2, #0
   b5e10:	e9c3 2200 	strd	r2, r2, [r3]
   b5e14:	609a      	str	r2, [r3, #8]
        {};
   b5e16:	4770      	bx	lr
   b5e18:	2003e694 	.word	0x2003e694

000b5e1c <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE>:
#include "iBeacon-scan.h"

Vector<iBeaconScan> iBeaconScan::beacons;

void iBeaconScan::populateData(const BleScanResult *scanResult)
{
   b5e1c:	b530      	push	{r4, r5, lr}
   b5e1e:	4604      	mov	r4, r0
   b5e20:	b099      	sub	sp, #100	; 0x64
   b5e22:	460d      	mov	r5, r1
    Beacon::populateData(scanResult);
   b5e24:	f7fe f943 	bl	b40ae <_ZN6Beacon12populateDataEPKN8particle13BleScanResultE>
    address = ADDRESS(scanResult);
   b5e28:	4629      	mov	r1, r5
   b5e2a:	1de0      	adds	r0, r4, #7
   b5e2c:	f001 ff89 	bl	b7d42 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t custom_data[BLE_MAX_ADV_DATA_LEN];
    ADVERTISING_DATA(scanResult).customData(custom_data, sizeof(custom_data));
   b5e30:	a910      	add	r1, sp, #64	; 0x40
   b5e32:	221f      	movs	r2, #31
   b5e34:	f105 0008 	add.w	r0, r5, #8
   b5e38:	f002 f9e6 	bl	b8208 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
    snprintf(uuid, sizeof(uuid), "%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X",
   b5e3c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   b5e40:	930e      	str	r3, [sp, #56]	; 0x38
   b5e42:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
   b5e46:	930d      	str	r3, [sp, #52]	; 0x34
   b5e48:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   b5e4c:	930c      	str	r3, [sp, #48]	; 0x30
   b5e4e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   b5e52:	930b      	str	r3, [sp, #44]	; 0x2c
   b5e54:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   b5e58:	930a      	str	r3, [sp, #40]	; 0x28
   b5e5a:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   b5e5e:	9309      	str	r3, [sp, #36]	; 0x24
   b5e60:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
   b5e64:	9308      	str	r3, [sp, #32]
   b5e66:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   b5e6a:	9307      	str	r3, [sp, #28]
   b5e6c:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
   b5e70:	9306      	str	r3, [sp, #24]
   b5e72:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   b5e76:	9305      	str	r3, [sp, #20]
   b5e78:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   b5e7c:	9304      	str	r3, [sp, #16]
   b5e7e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   b5e82:	9303      	str	r3, [sp, #12]
   b5e84:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   b5e88:	9302      	str	r3, [sp, #8]
   b5e8a:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
   b5e8e:	9301      	str	r3, [sp, #4]
   b5e90:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   b5e94:	9300      	str	r3, [sp, #0]
   b5e96:	4a0e      	ldr	r2, [pc, #56]	; (b5ed0 <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE+0xb4>)
   b5e98:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   b5e9c:	2125      	movs	r1, #37	; 0x25
   b5e9e:	f104 0013 	add.w	r0, r4, #19
   b5ea2:	f001 fbd9 	bl	b7658 <snprintf>
                custom_data[4], custom_data[5], custom_data[6], custom_data[7], custom_data[8], custom_data[9], custom_data[10], custom_data[11], custom_data[12],
                custom_data[13], custom_data[14], custom_data[15], custom_data[16], custom_data[17], custom_data[18], custom_data[19]);
    major = custom_data[20] * 256 + custom_data[21];
   b5ea6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b5eaa:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   b5eae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b5eb2:	8723      	strh	r3, [r4, #56]	; 0x38
    minor = custom_data[22] * 256 + custom_data[23];
   b5eb4:	f89d 2056 	ldrb.w	r2, [sp, #86]	; 0x56
   b5eb8:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   b5ebc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b5ec0:	8763      	strh	r3, [r4, #58]	; 0x3a
    power = (int8_t)custom_data[24];
   b5ec2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b5ec6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
   b5eca:	b019      	add	sp, #100	; 0x64
   b5ecc:	bd30      	pop	{r4, r5, pc}
   b5ece:	bf00      	nop
   b5ed0:	000bbf38 	.word	0x000bbf38

000b5ed4 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE>:
    }
    return false;
}

void iBeaconScan::toJson(JSONWriter *writer) const
{
   b5ed4:	b570      	push	{r4, r5, r6, lr}
   b5ed6:	b086      	sub	sp, #24
   b5ed8:	460c      	mov	r4, r1
   b5eda:	4605      	mov	r5, r0
        writer->name(address.toString()).beginObject();
   b5edc:	1dc1      	adds	r1, r0, #7
   b5ede:	2200      	movs	r2, #0
   b5ee0:	a802      	add	r0, sp, #8
   b5ee2:	f001 ffbb 	bl	b7e5c <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b5ee6:	9a04      	ldr	r2, [sp, #16]
   b5ee8:	9902      	ldr	r1, [sp, #8]
   b5eea:	4620      	mov	r0, r4
   b5eec:	f004 ff20 	bl	bad30 <_ZN5spark10JSONWriter4nameEPKcj>
   b5ef0:	f004 fe64 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
   b5ef4:	a802      	add	r0, sp, #8
   b5ef6:	f001 fc83 	bl	b7800 <_ZN6StringD1Ev>
        writer->name("uuid").value(getUuid());
   b5efa:	491c      	ldr	r1, [pc, #112]	; (b5f6c <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0x98>)
   b5efc:	4620      	mov	r0, r4
   b5efe:	f7fe fd5f 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
    iBeaconScan() : Beacon(SCAN_IBEACON) {};
    ~iBeaconScan() = default;

    void toJson(JSONWriter *writer) const override;

    const char* getUuid() const {return uuid;};
   b5f02:	f105 0113 	add.w	r1, r5, #19
   b5f06:	4606      	mov	r6, r0
    return value(val, strlen(val));
   b5f08:	4608      	mov	r0, r1
   b5f0a:	9101      	str	r1, [sp, #4]
   b5f0c:	f005 fe31 	bl	bbb72 <strlen>
   b5f10:	9901      	ldr	r1, [sp, #4]
   b5f12:	4602      	mov	r2, r0
   b5f14:	4630      	mov	r0, r6
   b5f16:	f004 ff1b 	bl	bad50 <_ZN5spark10JSONWriter5valueEPKcj>
        writer->name("major").value(getMajor());
   b5f1a:	4915      	ldr	r1, [pc, #84]	; (b5f70 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0x9c>)
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	f7fe fd4f 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5f22:	8f29      	ldrh	r1, [r5, #56]	; 0x38
   b5f24:	f004 fe6e 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->name("minor").value(getMinor());
   b5f28:	4912      	ldr	r1, [pc, #72]	; (b5f74 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa0>)
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	f7fe fd48 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5f30:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
   b5f32:	f004 fe67 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->name("power").value(getPower());
   b5f36:	4910      	ldr	r1, [pc, #64]	; (b5f78 <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa4>)
   b5f38:	4620      	mov	r0, r4
   b5f3a:	f7fe fd41 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b5f3e:	f995 103c 	ldrsb.w	r1, [r5, #60]	; 0x3c
   b5f42:	f004 fe5f 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->name("rssi").value(getRssi());
   b5f46:	490d      	ldr	r1, [pc, #52]	; (b5f7c <_ZNK11iBeaconScan6toJsonEPN5spark10JSONWriterE+0xa8>)
   b5f48:	4620      	mov	r0, r4
   b5f4a:	f7fe fd39 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
    int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b5f4e:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
   b5f52:	7cab      	ldrb	r3, [r5, #18]
   b5f54:	fb91 f1f3 	sdiv	r1, r1, r3
   b5f58:	b249      	sxtb	r1, r1
   b5f5a:	f004 fe53 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
        writer->endObject();
   b5f5e:	4620      	mov	r0, r4
}
   b5f60:	b006      	add	sp, #24
   b5f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer->endObject();
   b5f66:	f004 be13 	b.w	bab90 <_ZN5spark10JSONWriter9endObjectEv>
   b5f6a:	bf00      	nop
   b5f6c:	000bbf7d 	.word	0x000bbf7d
   b5f70:	000bbf82 	.word	0x000bbf82
   b5f74:	000bbf88 	.word	0x000bbf88
   b5f78:	000bbf8e 	.word	0x000bbf8e
   b5f7c:	000bbd21 	.word	0x000bbd21

000b5f80 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE>:
{
   b5f80:	b500      	push	{lr}
   b5f82:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).customData(custom_data, sizeof(custom_data)) == 25)
   b5f84:	221f      	movs	r2, #31
   b5f86:	4669      	mov	r1, sp
   b5f88:	3008      	adds	r0, #8
   b5f8a:	f002 f93d 	bl	b8208 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
   b5f8e:	2819      	cmp	r0, #25
   b5f90:	d113      	bne.n	b5fba <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
        if (custom_data[0] == 0x4c && custom_data[1] == 0x00 && custom_data[2] == 0x02 && custom_data[3] == 0x15)
   b5f92:	f89d 3000 	ldrb.w	r3, [sp]
   b5f96:	2b4c      	cmp	r3, #76	; 0x4c
   b5f98:	d10f      	bne.n	b5fba <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
   b5f9a:	f89d 0001 	ldrb.w	r0, [sp, #1]
   b5f9e:	b960      	cbnz	r0, b5fba <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x3a>
   b5fa0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   b5fa4:	2b02      	cmp	r3, #2
   b5fa6:	d105      	bne.n	b5fb4 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x34>
   b5fa8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   b5fac:	f1a0 0315 	sub.w	r3, r0, #21
   b5fb0:	4258      	negs	r0, r3
   b5fb2:	4158      	adcs	r0, r3
}
   b5fb4:	b009      	add	sp, #36	; 0x24
   b5fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    return false;
   b5fba:	2000      	movs	r0, #0
   b5fbc:	e7fa      	b.n	b5fb4 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE+0x34>
	...

000b5fc0 <_ZN11iBeaconScanC1ERKS_>:
class iBeaconScan : public Beacon
   b5fc0:	b538      	push	{r3, r4, r5, lr}
class Beacon {
   b5fc2:	4b14      	ldr	r3, [pc, #80]	; (b6014 <_ZN11iBeaconScanC1ERKS_+0x54>)
   b5fc4:	888a      	ldrh	r2, [r1, #4]
   b5fc6:	6003      	str	r3, [r0, #0]
   b5fc8:	460d      	mov	r5, r1
   b5fca:	798b      	ldrb	r3, [r1, #6]
   b5fcc:	8082      	strh	r2, [r0, #4]
   b5fce:	4604      	mov	r4, r0
   b5fd0:	7183      	strb	r3, [r0, #6]
   b5fd2:	3107      	adds	r1, #7
   b5fd4:	3007      	adds	r0, #7
   b5fd6:	f001 feaf 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
   b5fda:	8a2b      	ldrh	r3, [r5, #16]
   b5fdc:	8223      	strh	r3, [r4, #16]
   b5fde:	7cab      	ldrb	r3, [r5, #18]
   b5fe0:	74a3      	strb	r3, [r4, #18]
   b5fe2:	4623      	mov	r3, r4
   b5fe4:	4a0c      	ldr	r2, [pc, #48]	; (b6018 <_ZN11iBeaconScanC1ERKS_+0x58>)
   b5fe6:	f843 2b13 	str.w	r2, [r3], #19
   b5fea:	f105 0137 	add.w	r1, r5, #55	; 0x37
   b5fee:	f105 0213 	add.w	r2, r5, #19
   b5ff2:	f852 0b04 	ldr.w	r0, [r2], #4
   b5ff6:	f843 0b04 	str.w	r0, [r3], #4
   b5ffa:	428a      	cmp	r2, r1
   b5ffc:	d1f9      	bne.n	b5ff2 <_ZN11iBeaconScanC1ERKS_+0x32>
   b5ffe:	7812      	ldrb	r2, [r2, #0]
   b6000:	701a      	strb	r2, [r3, #0]
   b6002:	f995 303c 	ldrsb.w	r3, [r5, #60]	; 0x3c
   b6006:	6baa      	ldr	r2, [r5, #56]	; 0x38
   b6008:	63a2      	str	r2, [r4, #56]	; 0x38
   b600a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b600e:	4620      	mov	r0, r4
   b6010:	bd38      	pop	{r3, r4, r5, pc}
   b6012:	bf00      	nop
   b6014:	000bbcf8 	.word	0x000bbcf8
   b6018:	000bbf9c 	.word	0x000bbf9c

000b601c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b601c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b601e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6020:	4604      	mov	r4, r0
   b6022:	460d      	mov	r5, r1
   b6024:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6026:	d911      	bls.n	b604c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b6028:	4290      	cmp	r0, r2
   b602a:	d210      	bcs.n	b604e <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b602c:	f1a2 0640 	sub.w	r6, r2, #64	; 0x40
            dest += end - p - 1;
   b6030:	1a75      	subs	r5, r6, r1
   b6032:	f1a1 0740 	sub.w	r7, r1, #64	; 0x40
   b6036:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6038:	42b7      	cmp	r7, r6
   b603a:	d012      	beq.n	b6062 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b603c:	b11c      	cbz	r4, b6046 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b603e:	4631      	mov	r1, r6
   b6040:	4620      	mov	r0, r4
   b6042:	f7ff ffbd 	bl	b5fc0 <_ZN11iBeaconScanC1ERKS_>
            for (; end != p; --end, --dest) {
   b6046:	3e40      	subs	r6, #64	; 0x40
   b6048:	3c40      	subs	r4, #64	; 0x40
   b604a:	e7f5      	b.n	b6038 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b604c:	d009      	beq.n	b6062 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b604e:	42b5      	cmp	r5, r6
   b6050:	d007      	beq.n	b6062 <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b6052:	b11c      	cbz	r4, b605c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b6054:	4629      	mov	r1, r5
   b6056:	4620      	mov	r0, r4
   b6058:	f7ff ffb2 	bl	b5fc0 <_ZN11iBeaconScanC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b605c:	3540      	adds	r5, #64	; 0x40
   b605e:	3440      	adds	r4, #64	; 0x40
   b6060:	e7f5      	b.n	b604e <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b6062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6064 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE>:

void iBeaconScan::addOrUpdate(const BleScanResult *scanResult)
{
   b6064:	b5f0      	push	{r4, r5, r6, r7, lr}
    return size_;
   b6066:	4c39      	ldr	r4, [pc, #228]	; (b614c <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xe8>)
   b6068:	b0b1      	sub	sp, #196	; 0xc4
   b606a:	4606      	mov	r6, r0
   b606c:	2700      	movs	r7, #0
    uint8_t i;
    for (i = 0; i < beacons.size(); ++i) {
   b606e:	6863      	ldr	r3, [r4, #4]
   b6070:	b2fd      	uxtb	r5, r7
   b6072:	429d      	cmp	r5, r3
   b6074:	da0d      	bge.n	b6092 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0x2e>
    return data_[i];
   b6076:	6821      	ldr	r1, [r4, #0]
   b6078:	eb01 1185 	add.w	r1, r1, r5, lsl #6
    BleAddress getAddress() const { return address;}
   b607c:	3107      	adds	r1, #7
   b607e:	a820      	add	r0, sp, #128	; 0x80
   b6080:	f001 fe5a 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult)) {
   b6084:	4631      	mov	r1, r6
   b6086:	a820      	add	r0, sp, #128	; 0x80
   b6088:	f001 fe6d 	bl	b7d66 <_ZNK8particle10BleAddresseqERKS0_>
   b608c:	3701      	adds	r7, #1
   b608e:	2800      	cmp	r0, #0
   b6090:	d0ed      	beq.n	b606e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xa>
            break;
        }
    }
    if (i == beacons.size()) {
   b6092:	6863      	ldr	r3, [r4, #4]
   b6094:	429d      	cmp	r5, r3
   b6096:	d14c      	bne.n	b6132 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xce>
        rssi_count(0) {};
   b6098:	4b2d      	ldr	r3, [pc, #180]	; (b6150 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xec>)
   b609a:	9300      	str	r3, [sp, #0]
   b609c:	f10d 0007 	add.w	r0, sp, #7
   b60a0:	2301      	movs	r3, #1
   b60a2:	2500      	movs	r5, #0
   b60a4:	f88d 3005 	strb.w	r3, [sp, #5]
   b60a8:	f88d 3006 	strb.w	r3, [sp, #6]
   b60ac:	f001 fe6f 	bl	b7d8e <_ZN8particle10BleAddressC1Ev>
    iBeaconScan() : Beacon(SCAN_IBEACON) {};
   b60b0:	4b28      	ldr	r3, [pc, #160]	; (b6154 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xf0>)
   b60b2:	9300      	str	r3, [sp, #0]
        iBeaconScan new_beacon;
        new_beacon.populateData(scanResult);
   b60b4:	4631      	mov	r1, r6
   b60b6:	4668      	mov	r0, sp
   b60b8:	f8ad 5010 	strh.w	r5, [sp, #16]
   b60bc:	f88d 5012 	strb.w	r5, [sp, #18]
   b60c0:	f7ff feac 	bl	b5e1c <_ZN11iBeaconScan12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b60c4:	4669      	mov	r1, sp
   b60c6:	a810      	add	r0, sp, #64	; 0x40
        new_beacon.missed_scan = 0;
   b60c8:	f88d 5004 	strb.w	r5, [sp, #4]
        beacons.append(new_beacon);
   b60cc:	f7ff ff78 	bl	b5fc0 <_ZN11iBeaconScanC1ERKS_>
    return insert(size_, std::move(value));
   b60d0:	a910      	add	r1, sp, #64	; 0x40
   b60d2:	a820      	add	r0, sp, #128	; 0x80
   b60d4:	6866      	ldr	r6, [r4, #4]
   b60d6:	f7ff ff73 	bl	b5fc0 <_ZN11iBeaconScanC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b60da:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b60de:	429f      	cmp	r7, r3
   b60e0:	db12      	blt.n	b6108 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xa4>
   b60e2:	3701      	adds	r7, #1
        if (n > 0) {
   b60e4:	42af      	cmp	r7, r5
   b60e6:	dd0a      	ble.n	b60fe <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0x9a>
    return ::malloc(size);
   b60e8:	01b8      	lsls	r0, r7, #6
   b60ea:	f001 fa95 	bl	b7618 <malloc>
            if (!d) {
   b60ee:	4605      	mov	r5, r0
   b60f0:	b1e8      	cbz	r0, b612e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xca>
            move(d, data_, data_ + size_);
   b60f2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b60f6:	eb01 1282 	add.w	r2, r1, r2, lsl #6
   b60fa:	f7ff ff8f 	bl	b601c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b60fe:	6820      	ldr	r0, [r4, #0]
   b6100:	f001 fa92 	bl	b7628 <free>
        data_ = d;
   b6104:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6106:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6108:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b610a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b610c:	eb03 1686 	add.w	r6, r3, r6, lsl #6
    move(p + 1, p, data_ + size_);
   b6110:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   b6114:	4631      	mov	r1, r6
   b6116:	f106 0040 	add.w	r0, r6, #64	; 0x40
   b611a:	f7ff ff7f 	bl	b601c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b611e:	b11e      	cbz	r6, b6128 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xc4>
   b6120:	a920      	add	r1, sp, #128	; 0x80
   b6122:	4630      	mov	r0, r6
   b6124:	f7ff ff4c 	bl	b5fc0 <_ZN11iBeaconScanC1ERKS_>
    ++size_;
   b6128:	6863      	ldr	r3, [r4, #4]
   b612a:	3301      	adds	r3, #1
   b612c:	6063      	str	r3, [r4, #4]
        iBeaconScan& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b612e:	b031      	add	sp, #196	; 0xc4
   b6130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return data_[i];
   b6132:	6823      	ldr	r3, [r4, #0]
   b6134:	01aa      	lsls	r2, r5, #6
   b6136:	eb03 1585 	add.w	r5, r3, r5, lsl #6
        beacon.newly_scanned = false;
   b613a:	2400      	movs	r4, #0
   b613c:	716c      	strb	r4, [r5, #5]
        beacon.populateData(scanResult);
   b613e:	589b      	ldr	r3, [r3, r2]
   b6140:	4631      	mov	r1, r6
   b6142:	685b      	ldr	r3, [r3, #4]
   b6144:	4628      	mov	r0, r5
   b6146:	4798      	blx	r3
        beacon.missed_scan = 0;
   b6148:	712c      	strb	r4, [r5, #4]
   b614a:	e7f0      	b.n	b612e <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE+0xca>
   b614c:	2003e6a8 	.word	0x2003e6a8
   b6150:	000bbcf8 	.word	0x000bbcf8
   b6154:	000bbf9c 	.word	0x000bbf9c

000b6158 <_GLOBAL__sub_I__ZN11iBeaconScan7beaconsE>:
        capacity_(0) {
   b6158:	4b02      	ldr	r3, [pc, #8]	; (b6164 <_GLOBAL__sub_I__ZN11iBeaconScan7beaconsE+0xc>)
   b615a:	2200      	movs	r2, #0
   b615c:	e9c3 2200 	strd	r2, r2, [r3]
   b6160:	609a      	str	r2, [r3, #8]
   b6162:	4770      	bx	lr
   b6164:	2003e6a8 	.word	0x2003e6a8

000b6168 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6168:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b616a:	2301      	movs	r3, #1
   b616c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b616e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6170:	4604      	mov	r4, r0
        if (th->func) {
   b6172:	b143      	cbz	r3, b6186 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6174:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6176:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6178:	2301      	movs	r3, #1
   b617a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b617c:	2000      	movs	r0, #0
    }
   b617e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6182:	f001 b8cd 	b.w	b7320 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6186:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6188:	2800      	cmp	r0, #0
   b618a:	d0f5      	beq.n	b6178 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b618c:	6883      	ldr	r3, [r0, #8]
   b618e:	b90b      	cbnz	r3, b6194 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6190:	f004 ffcb 	bl	bb12a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6194:	68c3      	ldr	r3, [r0, #12]
   b6196:	e7ee      	b.n	b6176 <_ZN6Thread3runEPv+0xe>

000b6198 <_ZN21SingleThreadedSectionC1Ev>:
    SingleThreadedSection() {
   b6198:	b510      	push	{r4, lr}
        os_thread_scheduling(false, NULL);
   b619a:	2100      	movs	r1, #0
    SingleThreadedSection() {
   b619c:	4604      	mov	r4, r0
        os_thread_scheduling(false, NULL);
   b619e:	4608      	mov	r0, r1
   b61a0:	f001 f89e 	bl	b72e0 <os_thread_scheduling>
    }
   b61a4:	4620      	mov	r0, r4
   b61a6:	bd10      	pop	{r4, pc}

000b61a8 <_ZN21SingleThreadedSectionD1Ev>:
    ~SingleThreadedSection() {
   b61a8:	b510      	push	{r4, lr}
        os_thread_scheduling(true, NULL);
   b61aa:	2100      	movs	r1, #0
    ~SingleThreadedSection() {
   b61ac:	4604      	mov	r4, r0
        os_thread_scheduling(true, NULL);
   b61ae:	2001      	movs	r0, #1
   b61b0:	f001 f896 	bl	b72e0 <os_thread_scheduling>
    }
   b61b4:	4620      	mov	r0, r4
   b61b6:	bd10      	pop	{r4, pc}

000b61b8 <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b61b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b61bc:	4604      	mov	r4, r0
   b61be:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b61c0:	2014      	movs	r0, #20
   b61c2:	491d      	ldr	r1, [pc, #116]	; (b6238 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b61c4:	4690      	mov	r8, r2
   b61c6:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b61c8:	f004 fe12 	bl	badf0 <_ZnwjRKSt9nothrow_t>
   b61cc:	b130      	cbz	r0, b61dc <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>
      : _M_head_impl() { }
   b61ce:	2500      	movs	r5, #0
            exited(false) {
   b61d0:	e9c0 5500 	strd	r5, r5, [r0]
   b61d4:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b61d8:	7405      	strb	r5, [r0, #16]
   b61da:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b61dc:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b61de:	b198      	cbz	r0, b6208 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b61e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b61e2:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b61e6:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b61ea:	4631      	mov	r1, r6
   b61ec:	e9cd 0300 	strd	r0, r3, [sp]
   b61f0:	4b12      	ldr	r3, [pc, #72]	; (b623c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x84>)
   b61f2:	3004      	adds	r0, #4
   b61f4:	f001 f864 	bl	b72c0 <os_thread_create>
   b61f8:	b930      	cbnz	r0, b6208 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b61fa:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b61fc:	7c1b      	ldrb	r3, [r3, #16]
   b61fe:	b9bb      	cbnz	r3, b6230 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
            HAL_Delay_Milliseconds(1);
   b6200:	2001      	movs	r0, #1
   b6202:	f000 ff81 	bl	b7108 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6206:	e7f8      	b.n	b61fa <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b6208:	6826      	ldr	r6, [r4, #0]
	_M_ptr() = __p;
   b620a:	2300      	movs	r3, #0
   b620c:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b620e:	b17e      	cbz	r6, b6230 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6210:	6835      	ldr	r5, [r6, #0]
   b6212:	b14d      	cbz	r5, b6228 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x70>
      if (_M_manager)
   b6214:	68ab      	ldr	r3, [r5, #8]
   b6216:	b11b      	cbz	r3, b6220 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6218:	2203      	movs	r2, #3
   b621a:	4629      	mov	r1, r5
   b621c:	4628      	mov	r0, r5
   b621e:	4798      	blx	r3
	delete __ptr;
   b6220:	2110      	movs	r1, #16
   b6222:	4628      	mov	r0, r5
   b6224:	f7fd ff39 	bl	b409a <_ZdlPvj>
   b6228:	2114      	movs	r1, #20
   b622a:	4630      	mov	r0, r6
   b622c:	f7fd ff35 	bl	b409a <_ZdlPvj>
    }
   b6230:	4620      	mov	r0, r4
   b6232:	b002      	add	sp, #8
   b6234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6238:	000bc4b1 	.word	0x000bc4b1
   b623c:	000b6169 	.word	0x000b6169

000b6240 <_Z18custom_scan_paramsv>:
    }
    ctx->writer->endObject();
    return String::format("%.*s", ctx->writer->dataSize(), ctx->writer->buffer());
}

void custom_scan_params() {
   b6240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     *  To be able to get all the data, we have to scan multiple times for the duration.
     * 
     *  This function makes a short scan (150ms) and runs it for the number of seconds passed in.
     */
    BleScanParams scanParams;
    scanParams.size = sizeof(BleScanParams);
   b6242:	2310      	movs	r3, #16
   b6244:	f8ad 3002 	strh.w	r3, [sp, #2]
    BLE.getScanParameters(&scanParams);
   b6248:	f002 f9ce 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b624c:	4669      	mov	r1, sp
   b624e:	f002 fa3c 	bl	b86ca <_ZNK8particle14BleLocalDevice17getScanParametersEPNS_13BleScanParamsE>
#if SYSTEM_VERSION >= SYSTEM_VERSION_RC(3, 1, 0, 1)
    if (scanParams.scan_phys != BLE_PHYS_1MBPS && 
   b6252:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b6256:	2b01      	cmp	r3, #1
   b6258:	d005      	beq.n	b6266 <_Z18custom_scan_paramsv+0x26>
   b625a:	3b04      	subs	r3, #4
   b625c:	2b01      	cmp	r3, #1
            scanParams.scan_phys != BLE_PHYS_CODED &&
            scanParams.scan_phys != (BLE_PHYS_1MBPS | BLE_PHYS_CODED))
                scanParams.scan_phys = BLE_PHYS_1MBPS;
   b625e:	bf84      	itt	hi
   b6260:	2301      	movhi	r3, #1
   b6262:	f88d 300c 	strbhi.w	r3, [sp, #12]
#endif
    scanParams.interval = 80;   // 50ms
   b6266:	2350      	movs	r3, #80	; 0x50
   b6268:	f8ad 3004 	strh.w	r3, [sp, #4]
    scanParams.window = 40;     // 25ms
   b626c:	2328      	movs	r3, #40	; 0x28
   b626e:	f8ad 3006 	strh.w	r3, [sp, #6]
    scanParams.timeout = 15;    // 150ms
   b6272:	230f      	movs	r3, #15
   b6274:	f8ad 3008 	strh.w	r3, [sp, #8]
    scanParams.active = true;
   b6278:	2301      	movs	r3, #1
   b627a:	f8ad 300a 	strh.w	r3, [sp, #10]
    scanParams.filter_policy = BLE_SCAN_FP_ACCEPT_ALL;
    BLE.setScanParameters(&scanParams); 
   b627e:	f002 f9b3 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6282:	4669      	mov	r1, sp
   b6284:	f002 fa1d 	bl	b86c2 <_ZNK8particle14BleLocalDevice17setScanParametersEPKNS_13BleScanParamsE>
}
   b6288:	b005      	add	sp, #20
   b628a:	f85d fb04 	ldr.w	pc, [sp], #4

000b628e <_ZN8particle13BleScanResultD1Ev>:
class BleScanResult {
   b628e:	b510      	push	{r4, lr}
   b6290:	4604      	mov	r4, r0
    ::free(ptr);
   b6292:	6940      	ldr	r0, [r0, #20]
   b6294:	f001 f9c8 	bl	b7628 <free>
   b6298:	68a0      	ldr	r0, [r4, #8]
   b629a:	f001 f9c5 	bl	b7628 <free>
   b629e:	4620      	mov	r0, r4
   b62a0:	bd10      	pop	{r4, pc}
	...

000b62a4 <_ZN13Beaconscanner15startContinuousEi>:
        _instance->_scan_done = true;
        os_thread_yield();
    }
}

void Beaconscanner::startContinuous(int flags) {
   b62a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    _flags = flags;
    _run = true;
    if (_thread == nullptr) 
   b62a6:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    _flags = flags;
   b62a8:	6081      	str	r1, [r0, #8]
    _run = true;
   b62aa:	2301      	movs	r3, #1
void Beaconscanner::startContinuous(int flags) {
   b62ac:	4604      	mov	r4, r0
    _run = true;
   b62ae:	7183      	strb	r3, [r0, #6]
    if (_thread == nullptr) 
   b62b0:	b97e      	cbnz	r6, b62d2 <_ZN13Beaconscanner15startContinuousEi+0x2e>
        _thread = new Thread("scan_thread", scan_thread);
   b62b2:	2004      	movs	r0, #4
   b62b4:	f7fd feed 	bl	b4092 <_Znwj>
   b62b8:	4605      	mov	r5, r0
   b62ba:	b148      	cbz	r0, b62d0 <_ZN13Beaconscanner15startContinuousEi+0x2c>
   b62bc:	2302      	movs	r3, #2
   b62be:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b62c2:	e9cd 3200 	strd	r3, r2, [sp]
   b62c6:	4904      	ldr	r1, [pc, #16]	; (b62d8 <_ZN13Beaconscanner15startContinuousEi+0x34>)
   b62c8:	4a04      	ldr	r2, [pc, #16]	; (b62dc <_ZN13Beaconscanner15startContinuousEi+0x38>)
   b62ca:	4633      	mov	r3, r6
   b62cc:	f7ff ff74 	bl	b61b8 <_ZN6ThreadC1EPKcPFvPvES2_hj>
   b62d0:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   b62d2:	b002      	add	sp, #8
   b62d4:	bd70      	pop	{r4, r5, r6, pc}
   b62d6:	bf00      	nop
   b62d8:	000bbfa4 	.word	0x000bbfa4
   b62dc:	000b6625 	.word	0x000b6625

000b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b62e0:	b570      	push	{r4, r5, r6, lr}
   b62e2:	4604      	mov	r4, r0
        capacity_(0) {
   b62e4:	2000      	movs	r0, #0
   b62e6:	e9c4 0000 	strd	r0, r0, [r4]
   b62ea:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b62ec:	684e      	ldr	r6, [r1, #4]
   b62ee:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b62f0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b62f2:	dd11      	ble.n	b6318 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x38>
    return ::realloc(ptr, size);
   b62f4:	4631      	mov	r1, r6
   b62f6:	f001 f99f 	bl	b7638 <realloc>
            if (!d) {
   b62fa:	b168      	cbz	r0, b6318 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x38>
        data_ = d;
   b62fc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b62fe:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6300:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6304:	441a      	add	r2, r3
        for (; it != end; ++it, ++dest) {
   b6306:	429a      	cmp	r2, r3
   b6308:	d004      	beq.n	b6314 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x34>
            new(dest) T(*it);
   b630a:	f813 1b01 	ldrb.w	r1, [r3], #1
   b630e:	f800 1b01 	strb.w	r1, [r0], #1
        for (; it != end; ++it, ++dest) {
   b6312:	e7f8      	b.n	b6306 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x26>
        size_ = vector.size_;
   b6314:	686b      	ldr	r3, [r5, #4]
   b6316:	6063      	str	r3, [r4, #4]
}
   b6318:	4620      	mov	r0, r4
   b631a:	bd70      	pop	{r4, r5, r6, pc}

000b631c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>:
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
   b631c:	b570      	push	{r4, r5, r6, lr}
    return find(data_, data_ + size_, value);
   b631e:	e9d0 4500 	ldrd	r4, r5, [r0]
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
   b6322:	460e      	mov	r6, r1
    return find(data_, data_ + size_, value);
   b6324:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        for (; p != end; ++p) {
   b6328:	42a5      	cmp	r5, r4
   b632a:	d006      	beq.n	b633a <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0x1e>
            if (*p == value) {
   b632c:	4631      	mov	r1, r6
   b632e:	4620      	mov	r0, r4
   b6330:	f001 fd19 	bl	b7d66 <_ZNK8particle10BleAddresseqERKS0_>
   b6334:	b910      	cbnz	r0, b633c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0x20>
        for (; p != end; ++p) {
   b6336:	3408      	adds	r4, #8
   b6338:	e7f6      	b.n	b6328 <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_+0xc>
        return nullptr;
   b633a:	2400      	movs	r4, #0
}
   b633c:	1e20      	subs	r0, r4, #0
   b633e:	bf18      	it	ne
   b6340:	2001      	movne	r0, #1
   b6342:	bd70      	pop	{r4, r5, r6, pc}

000b6344 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6344:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6346:	e9d0 5300 	ldrd	r5, r3, [r0]
   b634a:	2624      	movs	r6, #36	; 0x24
inline spark::Vector<T, AllocatorT>::~Vector() {
   b634c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b634e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6352:	42ae      	cmp	r6, r5
   b6354:	d004      	beq.n	b6360 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
   b6356:	4628      	mov	r0, r5
   b6358:	f7ff ff99 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b635c:	3524      	adds	r5, #36	; 0x24
   b635e:	e7f8      	b.n	b6352 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6360:	6820      	ldr	r0, [r4, #0]
   b6362:	f001 f961 	bl	b7628 <free>
}
   b6366:	4620      	mov	r0, r4
   b6368:	bd70      	pop	{r4, r5, r6, pc}

000b636a <_ZN8particle13BleScanResultC1EOS0_>:
   b636a:	b538      	push	{r3, r4, r5, lr}
   b636c:	4604      	mov	r4, r0
   b636e:	460d      	mov	r5, r1
   b6370:	f001 fce2 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
class BleAdvertisingData {
   b6374:	f105 0108 	add.w	r1, r5, #8
   b6378:	f104 0008 	add.w	r0, r4, #8
   b637c:	f7ff ffb0 	bl	b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6380:	f105 0114 	add.w	r1, r5, #20
   b6384:	f104 0014 	add.w	r0, r4, #20
   b6388:	f7ff ffaa 	bl	b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b638c:	f895 3020 	ldrb.w	r3, [r5, #32]
   b6390:	f884 3020 	strb.w	r3, [r4, #32]
   b6394:	4620      	mov	r0, r4
   b6396:	bd38      	pop	{r3, r4, r5, pc}

000b6398 <_ZN6BeaconC1ERKS_>:
class Beacon {
   b6398:	b538      	push	{r3, r4, r5, lr}
   b639a:	4b09      	ldr	r3, [pc, #36]	; (b63c0 <_ZN6BeaconC1ERKS_+0x28>)
   b639c:	888a      	ldrh	r2, [r1, #4]
   b639e:	6003      	str	r3, [r0, #0]
   b63a0:	460d      	mov	r5, r1
   b63a2:	798b      	ldrb	r3, [r1, #6]
   b63a4:	8082      	strh	r2, [r0, #4]
   b63a6:	4604      	mov	r4, r0
   b63a8:	7183      	strb	r3, [r0, #6]
   b63aa:	3107      	adds	r1, #7
   b63ac:	3007      	adds	r0, #7
   b63ae:	f001 fcc3 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
   b63b2:	8a2b      	ldrh	r3, [r5, #16]
   b63b4:	8223      	strh	r3, [r4, #16]
   b63b6:	7cab      	ldrb	r3, [r5, #18]
   b63b8:	74a3      	strb	r3, [r4, #18]
   b63ba:	4620      	mov	r0, r4
   b63bc:	bd38      	pop	{r3, r4, r5, pc}
   b63be:	bf00      	nop
   b63c0:	000bbcf8 	.word	0x000bbcf8

000b63c4 <_ZN9EddystoneC1ERKS_>:

#include "beacon.h"

// Eddystone specification: https://github.com/google/eddystone/blob/master/protocol-specification.md

class Eddystone : public Beacon
   b63c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63c6:	4607      	mov	r7, r0
   b63c8:	460c      	mov	r4, r1
   b63ca:	463d      	mov	r5, r7
   b63cc:	f7ff ffe4 	bl	b6398 <_ZN6BeaconC1ERKS_>
   b63d0:	f104 0614 	add.w	r6, r4, #20
   b63d4:	4b13      	ldr	r3, [pc, #76]	; (b6424 <_ZN9EddystoneC1ERKS_+0x60>)
   b63d6:	f845 3b14 	str.w	r3, [r5], #20
   b63da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b63de:	e896 0003 	ldmia.w	r6, {r0, r1}
   b63e2:	f845 0b04 	str.w	r0, [r5], #4
   b63e6:	f104 032a 	add.w	r3, r4, #42	; 0x2a
   b63ea:	8029      	strh	r1, [r5, #0]
   b63ec:	f107 022a 	add.w	r2, r7, #42	; 0x2a
   b63f0:	f104 0142 	add.w	r1, r4, #66	; 0x42
   b63f4:	f853 0b04 	ldr.w	r0, [r3], #4
   b63f8:	f842 0b04 	str.w	r0, [r2], #4
   b63fc:	428b      	cmp	r3, r1
   b63fe:	d1f9      	bne.n	b63f4 <_ZN9EddystoneC1ERKS_+0x30>
   b6400:	881b      	ldrh	r3, [r3, #0]
   b6402:	8013      	strh	r3, [r2, #0]
   b6404:	f104 0344 	add.w	r3, r4, #68	; 0x44
   b6408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b640a:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b640e:	3454      	adds	r4, #84	; 0x54
   b6410:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b6414:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b6418:	f107 0554 	add.w	r5, r7, #84	; 0x54
   b641c:	c507      	stmia	r5!, {r0, r1, r2}
   b641e:	802b      	strh	r3, [r5, #0]
   b6420:	4638      	mov	r0, r7
   b6422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6424:	000bc0bc 	.word	0x000bc0bc

000b6428 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6428:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b642c:	4604      	mov	r4, r0
   b642e:	460d      	mov	r5, r1
   b6430:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6432:	d911      	bls.n	b6458 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x30>
   b6434:	4290      	cmp	r0, r2
   b6436:	d210      	bcs.n	b645a <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
            --end;
   b6438:	f1a2 0664 	sub.w	r6, r2, #100	; 0x64
            dest += end - p - 1;
   b643c:	1a75      	subs	r5, r6, r1
   b643e:	f1a1 0764 	sub.w	r7, r1, #100	; 0x64
   b6442:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6444:	42b7      	cmp	r7, r6
   b6446:	d012      	beq.n	b646e <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*end));
   b6448:	b11c      	cbz	r4, b6452 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b644a:	4631      	mov	r1, r6
   b644c:	4620      	mov	r0, r4
   b644e:	f7ff ffb9 	bl	b63c4 <_ZN9EddystoneC1ERKS_>
            for (; end != p; --end, --dest) {
   b6452:	3e64      	subs	r6, #100	; 0x64
   b6454:	3c64      	subs	r4, #100	; 0x64
   b6456:	e7f5      	b.n	b6444 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6458:	d009      	beq.n	b646e <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
            for (; p != end; ++p, ++dest) {
   b645a:	42b5      	cmp	r5, r6
   b645c:	d007      	beq.n	b646e <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
                new(dest) T(std::move(*p));
   b645e:	b11c      	cbz	r4, b6468 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x40>
   b6460:	4629      	mov	r1, r5
   b6462:	4620      	mov	r0, r4
   b6464:	f7ff ffae 	bl	b63c4 <_ZN9EddystoneC1ERKS_>
            for (; p != end; ++p, ++dest) {
   b6468:	3564      	adds	r5, #100	; 0x64
   b646a:	3464      	adds	r4, #100	; 0x64
   b646c:	e7f5      	b.n	b645a <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x32>
    }
   b646e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6470 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6470:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6474:	4604      	mov	r4, r0
   b6476:	460d      	mov	r5, r1
   b6478:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b647a:	d914      	bls.n	b64a6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b647c:	4290      	cmp	r0, r2
   b647e:	d213      	bcs.n	b64a8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6480:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b6484:	1a75      	subs	r5, r6, r1
   b6486:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b648a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b648c:	42b7      	cmp	r7, r6
   b648e:	d018      	beq.n	b64c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6490:	b11c      	cbz	r4, b649a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6492:	4631      	mov	r1, r6
   b6494:	4620      	mov	r0, r4
   b6496:	f7ff ff68 	bl	b636a <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b649a:	4630      	mov	r0, r6
   b649c:	f7ff fef7 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b64a0:	3e24      	subs	r6, #36	; 0x24
   b64a2:	3c24      	subs	r4, #36	; 0x24
   b64a4:	e7f2      	b.n	b648c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b64a6:	d00c      	beq.n	b64c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b64a8:	42b5      	cmp	r5, r6
   b64aa:	d00a      	beq.n	b64c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b64ac:	b11c      	cbz	r4, b64b6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b64ae:	4629      	mov	r1, r5
   b64b0:	4620      	mov	r0, r4
   b64b2:	f7ff ff5a 	bl	b636a <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b64b6:	4628      	mov	r0, r5
   b64b8:	f7ff fee9 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b64bc:	3524      	adds	r5, #36	; 0x24
   b64be:	3424      	adds	r4, #36	; 0x24
   b64c0:	e7f2      	b.n	b64a8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b64c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b64c4 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE>:
void Beaconscanner::processScan(Vector<BleScanResult> scans) {
   b64c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64c8:	4604      	mov	r4, r0
   b64ca:	b08a      	sub	sp, #40	; 0x28
   b64cc:	460d      	mov	r5, r1
    move(p, p + 1, data_ + size_);
   b64ce:	2724      	movs	r7, #36	; 0x24
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b64d0:	f100 081c 	add.w	r8, r0, #28
    while(!scans.isEmpty()) {
   b64d4:	686b      	ldr	r3, [r5, #4]
   b64d6:	2b00      	cmp	r3, #0
   b64d8:	d061      	beq.n	b659e <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xda>
    T* const p = data_ + i;
   b64da:	682e      	ldr	r6, [r5, #0]
    T v(std::move(*p));
   b64dc:	a801      	add	r0, sp, #4
   b64de:	4631      	mov	r1, r6
   b64e0:	f7ff ff43 	bl	b636a <_ZN8particle13BleScanResultC1EOS0_>
    p->~T();
   b64e4:	4630      	mov	r0, r6
   b64e6:	f7ff fed2 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
    move(p, p + 1, data_ + size_);
   b64ea:	e9d5 3200 	ldrd	r3, r2, [r5]
   b64ee:	4630      	mov	r0, r6
   b64f0:	fb07 3202 	mla	r2, r7, r2, r3
   b64f4:	f106 0124 	add.w	r1, r6, #36	; 0x24
   b64f8:	f7ff ffba 	bl	b6470 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b64fc:	686b      	ldr	r3, [r5, #4]
   b64fe:	3b01      	subs	r3, #1
   b6500:	606b      	str	r3, [r5, #4]
        else if ((_flags & SCAN_IBEACON) && iBeaconScan::isBeacon(scanResult) && !iPublished.contains(ADDRESS(scanResult)))
   b6502:	68a3      	ldr	r3, [r4, #8]
   b6504:	07d8      	lsls	r0, r3, #31
   b6506:	d510      	bpl.n	b652a <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
   b6508:	a801      	add	r0, sp, #4
   b650a:	f7ff fd39 	bl	b5f80 <_ZN11iBeaconScan8isBeaconEPKN8particle13BleScanResultE>
   b650e:	b160      	cbz	r0, b652a <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
   b6510:	a901      	add	r1, sp, #4
   b6512:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6516:	f7ff ff01 	bl	b631c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b651a:	b930      	cbnz	r0, b652a <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x66>
            iBeaconScan::addOrUpdate(scanResult);
   b651c:	a801      	add	r0, sp, #4
   b651e:	f7ff fda1 	bl	b6064 <_ZN11iBeaconScan11addOrUpdateEPKN8particle13BleScanResultE>
        BleScanResult scan = scans.takeFirst();
   b6522:	a801      	add	r0, sp, #4
   b6524:	f7ff feb3 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
    while(!scans.isEmpty()) {
   b6528:	e7d4      	b.n	b64d4 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x10>
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b652a:	68a3      	ldr	r3, [r4, #8]
   b652c:	0799      	lsls	r1, r3, #30
   b652e:	d410      	bmi.n	b6552 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x8e>
        else if ((_flags & SCAN_EDDYSTONE) && Eddystone::isBeacon(scanResult) && !ePublished.contains(ADDRESS(scanResult)))
   b6530:	68a3      	ldr	r3, [r4, #8]
   b6532:	075a      	lsls	r2, r3, #29
   b6534:	d51c      	bpl.n	b6570 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
   b6536:	a801      	add	r0, sp, #4
   b6538:	f000 fa0e 	bl	b6958 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE>
   b653c:	b1c0      	cbz	r0, b6570 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
   b653e:	a901      	add	r1, sp, #4
   b6540:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6544:	f7ff feea 	bl	b631c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6548:	b990      	cbnz	r0, b6570 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xac>
            Eddystone::addOrUpdate(scanResult);
   b654a:	a801      	add	r0, sp, #4
   b654c:	f000 fd2e 	bl	b6fac <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE>
   b6550:	e7e7      	b.n	b6522 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if ((_flags & SCAN_KONTAKT) && KontaktTag::isTag(scanResult) && !kPublished.contains(ADDRESS(scanResult)))
   b6552:	a801      	add	r0, sp, #4
   b6554:	f7fe fb7e 	bl	b4c54 <_ZN10KontaktTag5isTagEPKN8particle13BleScanResultE>
   b6558:	2800      	cmp	r0, #0
   b655a:	d0e9      	beq.n	b6530 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x6c>
   b655c:	a901      	add	r1, sp, #4
   b655e:	4640      	mov	r0, r8
   b6560:	f7ff fedc 	bl	b631c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6564:	2800      	cmp	r0, #0
   b6566:	d1e3      	bne.n	b6530 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x6c>
            KontaktTag::addOrUpdate(scanResult);
   b6568:	a801      	add	r0, sp, #4
   b656a:	f7fe fbdf 	bl	b4d2c <_ZN10KontaktTag11addOrUpdateEPKN8particle13BleScanResultE>
   b656e:	e7d8      	b.n	b6522 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if ((_flags & SCAN_LAIRDBT510) && LairdBt510::isBeacon(scanResult) && !lPublished.contains(ADDRESS(scanResult)))
   b6570:	68a3      	ldr	r3, [r4, #8]
   b6572:	071b      	lsls	r3, r3, #28
   b6574:	d50d      	bpl.n	b6592 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
   b6576:	a801      	add	r0, sp, #4
   b6578:	f7fe fd6c 	bl	b5054 <_ZN10LairdBt5108isBeaconEPKN8particle13BleScanResultE>
   b657c:	b148      	cbz	r0, b6592 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
   b657e:	a901      	add	r1, sp, #4
   b6580:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b6584:	f7ff feca 	bl	b631c <_ZNK5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE8containsERKS2_>
   b6588:	b918      	cbnz	r0, b6592 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0xce>
            LairdBt510::addOrUpdate(scanResult);          
   b658a:	a801      	add	r0, sp, #4
   b658c:	f7ff f8c2 	bl	b5714 <_ZN10LairdBt51011addOrUpdateEPKN8particle13BleScanResultE>
   b6590:	e7c7      	b.n	b6522 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
        else if (_customCallback) {
   b6592:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6594:	2b00      	cmp	r3, #0
   b6596:	d0c4      	beq.n	b6522 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
            _customCallback(scanResult);
   b6598:	a801      	add	r0, sp, #4
   b659a:	4798      	blx	r3
   b659c:	e7c1      	b.n	b6522 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE+0x5e>
}
   b659e:	b00a      	add	sp, #40	; 0x28
   b65a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b65a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b65a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b65a8:	2300      	movs	r3, #0
   b65aa:	e9c0 3300 	strd	r3, r3, [r0]
   b65ae:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b65b0:	684e      	ldr	r6, [r1, #4]
   b65b2:	429e      	cmp	r6, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b65b4:	4604      	mov	r4, r0
   b65b6:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b65b8:	dd31      	ble.n	b661e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x7a>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b65ba:	f04f 0824 	mov.w	r8, #36	; 0x24
    return ::malloc(size);
   b65be:	fb08 f006 	mul.w	r0, r8, r6
   b65c2:	f001 f829 	bl	b7618 <malloc>
            if (!d) {
   b65c6:	4605      	mov	r5, r0
   b65c8:	b348      	cbz	r0, b661e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x7a>
            move(d, data_, data_ + size_);
   b65ca:	e9d4 1200 	ldrd	r1, r2, [r4]
   b65ce:	fb08 1202 	mla	r2, r8, r2, r1
   b65d2:	f7ff ff4d 	bl	b6470 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b65d6:	6820      	ldr	r0, [r4, #0]
   b65d8:	f001 f826 	bl	b7628 <free>
        data_ = d;
   b65dc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b65de:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b65e0:	e9d7 6300 	ldrd	r6, r3, [r7]
   b65e4:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   b65e8:	45b0      	cmp	r8, r6
   b65ea:	d016      	beq.n	b661a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x76>
   b65ec:	4631      	mov	r1, r6
   b65ee:	4628      	mov	r0, r5
   b65f0:	f001 fba2 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
class BleAdvertisingData {
   b65f4:	f106 0108 	add.w	r1, r6, #8
   b65f8:	f105 0008 	add.w	r0, r5, #8
   b65fc:	f7ff fe70 	bl	b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6600:	f106 0114 	add.w	r1, r6, #20
   b6604:	f105 0014 	add.w	r0, r5, #20
   b6608:	f7ff fe6a 	bl	b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b660c:	f996 3020 	ldrsb.w	r3, [r6, #32]
   b6610:	f885 3020 	strb.w	r3, [r5, #32]
   b6614:	3624      	adds	r6, #36	; 0x24
   b6616:	3524      	adds	r5, #36	; 0x24
   b6618:	e7e6      	b.n	b65e8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x44>
        size_ = vector.size_;
   b661a:	687b      	ldr	r3, [r7, #4]
   b661c:	6063      	str	r3, [r4, #4]
}
   b661e:	4620      	mov	r0, r4
   b6620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6624 <_ZN13Beaconscanner11scan_threadEPv>:
void Beaconscanner::scan_thread(void *param) {
   b6624:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (!_instance->_run) {
   b6626:	4c1a      	ldr	r4, [pc, #104]	; (b6690 <_ZN13Beaconscanner11scan_threadEPv+0x6c>)
void Beaconscanner::scan_thread(void *param) {
   b6628:	b087      	sub	sp, #28
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b662a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
        if (!_instance->_run) {
   b662e:	6823      	ldr	r3, [r4, #0]
   b6630:	799b      	ldrb	r3, [r3, #6]
   b6632:	b913      	cbnz	r3, b663a <_ZN13Beaconscanner11scan_threadEPv+0x16>
        os_thread_yield();
   b6634:	f000 fe4c 	bl	b72d0 <os_thread_yield>
   b6638:	e7f9      	b.n	b662e <_ZN13Beaconscanner11scan_threadEPv+0xa>
        custom_scan_params();
   b663a:	f7ff fe01 	bl	b6240 <_Z18custom_scan_paramsv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b663e:	f000 fd73 	bl	b7128 <HAL_Timer_Get_Milli_Seconds>
   b6642:	4605      	mov	r5, r0
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b6644:	6823      	ldr	r3, [r4, #0]
   b6646:	799b      	ldrb	r3, [r3, #6]
   b6648:	b1eb      	cbz	r3, b6686 <_ZN13Beaconscanner11scan_threadEPv+0x62>
   b664a:	f000 fd6d 	bl	b7128 <HAL_Timer_Get_Milli_Seconds>
   b664e:	6823      	ldr	r3, [r4, #0]
   b6650:	7b5b      	ldrb	r3, [r3, #13]
   b6652:	1b40      	subs	r0, r0, r5
   b6654:	4373      	muls	r3, r6
   b6656:	4298      	cmp	r0, r3
   b6658:	d215      	bcs.n	b6686 <_ZN13Beaconscanner11scan_threadEPv+0x62>
            Vector<BleScanResult> cur_responses = BLE.scan();
   b665a:	f001 ffc5 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b665e:	4601      	mov	r1, r0
   b6660:	4668      	mov	r0, sp
   b6662:	f003 fbe7 	bl	b9e34 <_ZNK8particle14BleLocalDevice4scanEv>
            _instance->processScan(cur_responses);
   b6666:	6827      	ldr	r7, [r4, #0]
   b6668:	4669      	mov	r1, sp
   b666a:	a803      	add	r0, sp, #12
   b666c:	f7ff ff9a 	bl	b65a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
   b6670:	a903      	add	r1, sp, #12
   b6672:	4638      	mov	r0, r7
   b6674:	f7ff ff26 	bl	b64c4 <_ZN13Beaconscanner11processScanEN5spark6VectorIN8particle13BleScanResultENS0_16DefaultAllocatorEEE>
   b6678:	a803      	add	r0, sp, #12
   b667a:	f7ff fe63 	bl	b6344 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>
            Vector<BleScanResult> cur_responses = BLE.scan();
   b667e:	4668      	mov	r0, sp
   b6680:	f7ff fe60 	bl	b6344 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEED1Ev>
        while(_instance->_run && millis() - elapsed < _instance->_scan_period*1000) {
   b6684:	e7de      	b.n	b6644 <_ZN13Beaconscanner11scan_threadEPv+0x20>
        _instance->_scan_done = true;
   b6686:	6823      	ldr	r3, [r4, #0]
   b6688:	2201      	movs	r2, #1
   b668a:	71da      	strb	r2, [r3, #7]
   b668c:	e7d2      	b.n	b6634 <_ZN13Beaconscanner11scan_threadEPv+0x10>
   b668e:	bf00      	nop
   b6690:	2003e6b4 	.word	0x2003e6b4

000b6694 <_ZN13Beaconscanner4loopEv>:

void Beaconscanner::stopContinuous() {
    _run = false;
}

void Beaconscanner::loop() {
   b6694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_;
   b6698:	f8df 92ac 	ldr.w	r9, [pc, #684]	; b6948 <_ZN13Beaconscanner4loopEv+0x2b4>
    return data_ + size_;
   b669c:	e9d9 5300 	ldrd	r5, r3, [r9]
   b66a0:	4604      	mov	r4, r0
   b66a2:	eb05 1683 	add.w	r6, r5, r3, lsl #6
#ifdef SUPPORT_IBEACON
    for (auto& i : iBeaconScan::beacons) {
        if (_callback && i.newly_scanned) {
            _callback(i, NEW);
            i.newly_scanned = false;
   b66a6:	2700      	movs	r7, #0
    for (auto& i : iBeaconScan::beacons) {
   b66a8:	42ae      	cmp	r6, r5
   b66aa:	d009      	beq.n	b66c0 <_ZN13Beaconscanner4loopEv+0x2c>
        if (_callback && i.newly_scanned) {
   b66ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b66ae:	b12b      	cbz	r3, b66bc <_ZN13Beaconscanner4loopEv+0x28>
   b66b0:	796a      	ldrb	r2, [r5, #5]
   b66b2:	b11a      	cbz	r2, b66bc <_ZN13Beaconscanner4loopEv+0x28>
            _callback(i, NEW);
   b66b4:	2101      	movs	r1, #1
   b66b6:	4628      	mov	r0, r5
   b66b8:	4798      	blx	r3
            i.newly_scanned = false;
   b66ba:	716f      	strb	r7, [r5, #5]
    for (auto& i : iBeaconScan::beacons) {
   b66bc:	3540      	adds	r5, #64	; 0x40
   b66be:	e7f3      	b.n	b66a8 <_ZN13Beaconscanner4loopEv+0x14>
    return data_;
   b66c0:	f8df 8288 	ldr.w	r8, [pc, #648]	; b694c <_ZN13Beaconscanner4loopEv+0x2b8>
    return data_ + size_;
   b66c4:	e9d8 5300 	ldrd	r5, r3, [r8]
   b66c8:	2664      	movs	r6, #100	; 0x64
   b66ca:	fb06 5603 	mla	r6, r6, r3, r5
#endif
#ifdef SUPPORT_EDDYSTONE
    for (auto& e : Eddystone::beacons) {
        if (_callback && e.newly_scanned) {
            _callback(e, NEW);
            e.newly_scanned = false;
   b66ce:	2700      	movs	r7, #0
    for (auto& e : Eddystone::beacons) {
   b66d0:	42ae      	cmp	r6, r5
   b66d2:	d009      	beq.n	b66e8 <_ZN13Beaconscanner4loopEv+0x54>
        if (_callback && e.newly_scanned) {
   b66d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b66d6:	b12b      	cbz	r3, b66e4 <_ZN13Beaconscanner4loopEv+0x50>
   b66d8:	796a      	ldrb	r2, [r5, #5]
   b66da:	b11a      	cbz	r2, b66e4 <_ZN13Beaconscanner4loopEv+0x50>
            _callback(e, NEW);
   b66dc:	2101      	movs	r1, #1
   b66de:	4628      	mov	r0, r5
   b66e0:	4798      	blx	r3
            e.newly_scanned = false;
   b66e2:	716f      	strb	r7, [r5, #5]
    for (auto& e : Eddystone::beacons) {
   b66e4:	3564      	adds	r5, #100	; 0x64
   b66e6:	e7f3      	b.n	b66d0 <_ZN13Beaconscanner4loopEv+0x3c>
    return data_;
   b66e8:	4f95      	ldr	r7, [pc, #596]	; (b6940 <_ZN13Beaconscanner4loopEv+0x2ac>)
    return data_ + size_;
   b66ea:	e9d7 5300 	ldrd	r5, r3, [r7]
   b66ee:	2624      	movs	r6, #36	; 0x24
   b66f0:	fb06 5603 	mla	r6, r6, r3, r5
#endif
#ifdef SUPPORT_KONTAKT
    for (KontaktTag& k : KontaktTag::beacons) {
        if (_callback && k.newly_scanned) {
            _callback(k, NEW);
            k.newly_scanned = false;
   b66f4:	f04f 0a00 	mov.w	sl, #0
    for (KontaktTag& k : KontaktTag::beacons) {
   b66f8:	42ae      	cmp	r6, r5
   b66fa:	d00a      	beq.n	b6712 <_ZN13Beaconscanner4loopEv+0x7e>
        if (_callback && k.newly_scanned) {
   b66fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b66fe:	b133      	cbz	r3, b670e <_ZN13Beaconscanner4loopEv+0x7a>
   b6700:	796a      	ldrb	r2, [r5, #5]
   b6702:	b122      	cbz	r2, b670e <_ZN13Beaconscanner4loopEv+0x7a>
            _callback(k, NEW);
   b6704:	2101      	movs	r1, #1
   b6706:	4628      	mov	r0, r5
   b6708:	4798      	blx	r3
            k.newly_scanned = false;
   b670a:	f885 a005 	strb.w	sl, [r5, #5]
    for (KontaktTag& k : KontaktTag::beacons) {
   b670e:	3524      	adds	r5, #36	; 0x24
   b6710:	e7f2      	b.n	b66f8 <_ZN13Beaconscanner4loopEv+0x64>
    return data_;
   b6712:	4e8c      	ldr	r6, [pc, #560]	; (b6944 <_ZN13Beaconscanner4loopEv+0x2b0>)
    return data_ + size_;
   b6714:	e9d6 5300 	ldrd	r5, r3, [r6]
   b6718:	f04f 0a88 	mov.w	sl, #136	; 0x88
   b671c:	fb0a 5a03 	mla	sl, sl, r3, r5
#endif
#ifdef SUPPORT_LAIRDBT510
    for (LairdBt510& l : LairdBt510::beacons) {
        if (_callback && l.newly_scanned) {
            _callback(l, NEW);
            l.newly_scanned = false;
   b6720:	f04f 0b00 	mov.w	fp, #0
    for (LairdBt510& l : LairdBt510::beacons) {
   b6724:	4555      	cmp	r5, sl
   b6726:	d00d      	beq.n	b6744 <_ZN13Beaconscanner4loopEv+0xb0>
        if (_callback && l.newly_scanned) {
   b6728:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b672a:	b133      	cbz	r3, b673a <_ZN13Beaconscanner4loopEv+0xa6>
   b672c:	796a      	ldrb	r2, [r5, #5]
   b672e:	b122      	cbz	r2, b673a <_ZN13Beaconscanner4loopEv+0xa6>
            _callback(l, NEW);
   b6730:	2101      	movs	r1, #1
   b6732:	4628      	mov	r0, r5
   b6734:	4798      	blx	r3
            l.newly_scanned = false;
   b6736:	f885 b005 	strb.w	fp, [r5, #5]
        }
        l.loop();
   b673a:	4628      	mov	r0, r5
   b673c:	f7ff fa12 	bl	b5b64 <_ZN10LairdBt5104loopEv>
    for (LairdBt510& l : LairdBt510::beacons) {
   b6740:	3588      	adds	r5, #136	; 0x88
   b6742:	e7ef      	b.n	b6724 <_ZN13Beaconscanner4loopEv+0x90>
    }
#endif

    if (_scan_done) {
   b6744:	79e3      	ldrb	r3, [r4, #7]
   b6746:	2b00      	cmp	r3, #0
   b6748:	f000 80dd 	beq.w	b6906 <_ZN13Beaconscanner4loopEv+0x272>
   b674c:	e9d9 5300 	ldrd	r5, r3, [r9]
        for (auto& i : iBeaconScan::beacons) {
            if (i.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(i, REMOVED);
                }
                i.missed_scan = -1; // Use an invalid value to mark for removal
   b6750:	f04f 0bff 	mov.w	fp, #255	; 0xff
   b6754:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
        for (auto& i : iBeaconScan::beacons) {
   b6758:	45aa      	cmp	sl, r5
   b675a:	d010      	beq.n	b677e <_ZN13Beaconscanner4loopEv+0xea>
            if (i.missed_scan >= _clear_missed) {
   b675c:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6760:	7b22      	ldrb	r2, [r4, #12]
   b6762:	4293      	cmp	r3, r2
   b6764:	db08      	blt.n	b6778 <_ZN13Beaconscanner4loopEv+0xe4>
                if (_callback) {
   b6766:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6768:	b113      	cbz	r3, b6770 <_ZN13Beaconscanner4loopEv+0xdc>
                    _callback(i, REMOVED);
   b676a:	2102      	movs	r1, #2
   b676c:	4628      	mov	r0, r5
   b676e:	4798      	blx	r3
                i.missed_scan = -1; // Use an invalid value to mark for removal
   b6770:	f885 b004 	strb.w	fp, [r5, #4]
        for (auto& i : iBeaconScan::beacons) {
   b6774:	3540      	adds	r5, #64	; 0x40
   b6776:	e7ef      	b.n	b6758 <_ZN13Beaconscanner4loopEv+0xc4>
            } else {
                i.missed_scan++;
   b6778:	3301      	adds	r3, #1
   b677a:	712b      	strb	r3, [r5, #4]
   b677c:	e7fa      	b.n	b6774 <_ZN13Beaconscanner4loopEv+0xe0>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b677e:	a801      	add	r0, sp, #4
   b6780:	f7ff fd0a 	bl	b6198 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < iBeaconScan::beacons.size(); i++) {
   b6784:	2500      	movs	r5, #0
    return size_;
   b6786:	f8d9 2004 	ldr.w	r2, [r9, #4]
   b678a:	4295      	cmp	r5, r2
   b678c:	db1a      	blt.n	b67c4 <_ZN13Beaconscanner4loopEv+0x130>
        SINGLE_THREADED_BLOCK() {
   b678e:	a801      	add	r0, sp, #4
   b6790:	f7ff fd0a 	bl	b61a8 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b6794:	e9d8 5300 	ldrd	r5, r3, [r8]
   b6798:	f04f 0964 	mov.w	r9, #100	; 0x64
   b679c:	fb09 5903 	mla	r9, r9, r3, r5
        for (auto& e : Eddystone::beacons) {
            if (e.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(e, REMOVED);
                }
                e.missed_scan = -1;
   b67a0:	f04f 0aff 	mov.w	sl, #255	; 0xff
        for (auto& e : Eddystone::beacons) {
   b67a4:	45a9      	cmp	r9, r5
   b67a6:	d026      	beq.n	b67f6 <_ZN13Beaconscanner4loopEv+0x162>
            if (e.missed_scan >= _clear_missed) {
   b67a8:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b67ac:	7b22      	ldrb	r2, [r4, #12]
   b67ae:	4293      	cmp	r3, r2
   b67b0:	db1e      	blt.n	b67f0 <_ZN13Beaconscanner4loopEv+0x15c>
                if (_callback) {
   b67b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b67b4:	b113      	cbz	r3, b67bc <_ZN13Beaconscanner4loopEv+0x128>
                    _callback(e, REMOVED);
   b67b6:	2102      	movs	r1, #2
   b67b8:	4628      	mov	r0, r5
   b67ba:	4798      	blx	r3
                e.missed_scan = -1;
   b67bc:	f885 a004 	strb.w	sl, [r5, #4]
        for (auto& e : Eddystone::beacons) {
   b67c0:	3564      	adds	r5, #100	; 0x64
   b67c2:	e7ef      	b.n	b67a4 <_ZN13Beaconscanner4loopEv+0x110>
    return data_[i];
   b67c4:	f8d9 3000 	ldr.w	r3, [r9]
   b67c8:	eb03 1085 	add.w	r0, r3, r5, lsl #6
                if (iBeaconScan::beacons.at(i).missed_scan < 0) {
   b67cc:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b67d0:	2900      	cmp	r1, #0
   b67d2:	da0b      	bge.n	b67ec <_ZN13Beaconscanner4loopEv+0x158>
    move(p, p + n, data_ + size_);
   b67d4:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   b67d8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   b67dc:	f7ff fc1e 	bl	b601c <_ZN5spark6VectorI11iBeaconScanNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b67e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   b67e4:	3b01      	subs	r3, #1
   b67e6:	f8c9 3004 	str.w	r3, [r9, #4]
                    i--;
   b67ea:	3d01      	subs	r5, #1
            for (int i = 0; i < iBeaconScan::beacons.size(); i++) {
   b67ec:	3501      	adds	r5, #1
   b67ee:	e7ca      	b.n	b6786 <_ZN13Beaconscanner4loopEv+0xf2>
            } else {
                e.missed_scan++;
   b67f0:	3301      	adds	r3, #1
   b67f2:	712b      	strb	r3, [r5, #4]
   b67f4:	e7e4      	b.n	b67c0 <_ZN13Beaconscanner4loopEv+0x12c>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b67f6:	a801      	add	r0, sp, #4
   b67f8:	f7ff fcce 	bl	b6198 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < Eddystone::beacons.size(); i++) {
   b67fc:	2500      	movs	r5, #0
    return data_[i];
   b67fe:	f04f 0964 	mov.w	r9, #100	; 0x64
    return size_;
   b6802:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b6806:	4295      	cmp	r5, r2
   b6808:	db1a      	blt.n	b6840 <_ZN13Beaconscanner4loopEv+0x1ac>
        SINGLE_THREADED_BLOCK() {
   b680a:	a801      	add	r0, sp, #4
   b680c:	f7ff fccc 	bl	b61a8 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b6810:	e9d7 5300 	ldrd	r5, r3, [r7]
   b6814:	f04f 0824 	mov.w	r8, #36	; 0x24
   b6818:	fb08 5803 	mla	r8, r8, r3, r5
        for (auto& k : KontaktTag::beacons) {
            if (k.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(k, REMOVED);
                } 
                k.missed_scan = -1;
   b681c:	f04f 09ff 	mov.w	r9, #255	; 0xff
        for (auto& k : KontaktTag::beacons) {
   b6820:	45a8      	cmp	r8, r5
   b6822:	d026      	beq.n	b6872 <_ZN13Beaconscanner4loopEv+0x1de>
            if (k.missed_scan >= _clear_missed) {
   b6824:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6828:	7b22      	ldrb	r2, [r4, #12]
   b682a:	4293      	cmp	r3, r2
   b682c:	db1e      	blt.n	b686c <_ZN13Beaconscanner4loopEv+0x1d8>
                if (_callback) {
   b682e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6830:	b113      	cbz	r3, b6838 <_ZN13Beaconscanner4loopEv+0x1a4>
                    _callback(k, REMOVED);
   b6832:	2102      	movs	r1, #2
   b6834:	4628      	mov	r0, r5
   b6836:	4798      	blx	r3
                k.missed_scan = -1;
   b6838:	f885 9004 	strb.w	r9, [r5, #4]
        for (auto& k : KontaktTag::beacons) {
   b683c:	3524      	adds	r5, #36	; 0x24
   b683e:	e7ef      	b.n	b6820 <_ZN13Beaconscanner4loopEv+0x18c>
    return data_[i];
   b6840:	f8d8 3000 	ldr.w	r3, [r8]
   b6844:	fb09 3005 	mla	r0, r9, r5, r3
                if (Eddystone::beacons.at(i).missed_scan < 0) {
   b6848:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b684c:	2900      	cmp	r1, #0
   b684e:	da0b      	bge.n	b6868 <_ZN13Beaconscanner4loopEv+0x1d4>
    move(p, p + n, data_ + size_);
   b6850:	fb09 3202 	mla	r2, r9, r2, r3
   b6854:	f100 0164 	add.w	r1, r0, #100	; 0x64
   b6858:	f7ff fde6 	bl	b6428 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b685c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6860:	3b01      	subs	r3, #1
   b6862:	f8c8 3004 	str.w	r3, [r8, #4]
                    i--;
   b6866:	3d01      	subs	r5, #1
            for (int i = 0; i < Eddystone::beacons.size(); i++) {
   b6868:	3501      	adds	r5, #1
   b686a:	e7ca      	b.n	b6802 <_ZN13Beaconscanner4loopEv+0x16e>
            } else {
                k.missed_scan++;
   b686c:	3301      	adds	r3, #1
   b686e:	712b      	strb	r3, [r5, #4]
   b6870:	e7e4      	b.n	b683c <_ZN13Beaconscanner4loopEv+0x1a8>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b6872:	a801      	add	r0, sp, #4
   b6874:	f7ff fc90 	bl	b6198 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < KontaktTag::beacons.size(); i++) {
   b6878:	2500      	movs	r5, #0
    return data_[i];
   b687a:	f04f 0824 	mov.w	r8, #36	; 0x24
    return size_;
   b687e:	687a      	ldr	r2, [r7, #4]
   b6880:	4295      	cmp	r5, r2
   b6882:	db1c      	blt.n	b68be <_ZN13Beaconscanner4loopEv+0x22a>
        SINGLE_THREADED_BLOCK() {
   b6884:	a801      	add	r0, sp, #4
   b6886:	f7ff fc8f 	bl	b61a8 <_ZN21SingleThreadedSectionD1Ev>
    return data_ + size_;
   b688a:	e9d6 5700 	ldrd	r5, r7, [r6]
   b688e:	2388      	movs	r3, #136	; 0x88
   b6890:	fb03 5707 	mla	r7, r3, r7, r5
        for (auto& l : LairdBt510::beacons) {
            if (l.state_ == LairdBt510::State::IDLE && l.missed_scan >= _clear_missed) {
                if (_callback) {
                    _callback(l, REMOVED);
                }
                l.missed_scan = -1;
   b6894:	f04f 08ff 	mov.w	r8, #255	; 0xff
        for (auto& l : LairdBt510::beacons) {
   b6898:	42af      	cmp	r7, r5
   b689a:	d026      	beq.n	b68ea <_ZN13Beaconscanner4loopEv+0x256>
            if (l.state_ == LairdBt510::State::IDLE && l.missed_scan >= _clear_missed) {
   b689c:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   b68a0:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b68a4:	b9f2      	cbnz	r2, b68e4 <_ZN13Beaconscanner4loopEv+0x250>
   b68a6:	7b22      	ldrb	r2, [r4, #12]
   b68a8:	4293      	cmp	r3, r2
   b68aa:	db1b      	blt.n	b68e4 <_ZN13Beaconscanner4loopEv+0x250>
                if (_callback) {
   b68ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b68ae:	b113      	cbz	r3, b68b6 <_ZN13Beaconscanner4loopEv+0x222>
                    _callback(l, REMOVED);
   b68b0:	2102      	movs	r1, #2
   b68b2:	4628      	mov	r0, r5
   b68b4:	4798      	blx	r3
                l.missed_scan = -1;
   b68b6:	f885 8004 	strb.w	r8, [r5, #4]
        for (auto& l : LairdBt510::beacons) {
   b68ba:	3588      	adds	r5, #136	; 0x88
   b68bc:	e7ec      	b.n	b6898 <_ZN13Beaconscanner4loopEv+0x204>
    return data_[i];
   b68be:	683b      	ldr	r3, [r7, #0]
   b68c0:	fb08 3005 	mla	r0, r8, r5, r3
                if (KontaktTag::beacons.at(i).missed_scan < 0) {
   b68c4:	f990 1004 	ldrsb.w	r1, [r0, #4]
   b68c8:	2900      	cmp	r1, #0
   b68ca:	da09      	bge.n	b68e0 <_ZN13Beaconscanner4loopEv+0x24c>
    move(p, p + n, data_ + size_);
   b68cc:	fb08 3202 	mla	r2, r8, r2, r3
   b68d0:	f100 0124 	add.w	r1, r0, #36	; 0x24
   b68d4:	f7fe fa06 	bl	b4ce4 <_ZN5spark6VectorI10KontaktTagNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b68d8:	687b      	ldr	r3, [r7, #4]
   b68da:	3b01      	subs	r3, #1
   b68dc:	607b      	str	r3, [r7, #4]
                    i--;
   b68de:	3d01      	subs	r5, #1
            for (int i = 0; i < KontaktTag::beacons.size(); i++) {
   b68e0:	3501      	adds	r5, #1
   b68e2:	e7cc      	b.n	b687e <_ZN13Beaconscanner4loopEv+0x1ea>
            } else {
                l.missed_scan++;
   b68e4:	3301      	adds	r3, #1
   b68e6:	712b      	strb	r3, [r5, #4]
   b68e8:	e7e7      	b.n	b68ba <_ZN13Beaconscanner4loopEv+0x226>
            }
        }
        SINGLE_THREADED_BLOCK() {
   b68ea:	a801      	add	r0, sp, #4
   b68ec:	f7ff fc54 	bl	b6198 <_ZN21SingleThreadedSectionC1Ev>
            for (int i = 0; i < LairdBt510::beacons.size(); i++) {
   b68f0:	2700      	movs	r7, #0
    return data_[i];
   b68f2:	f04f 0888 	mov.w	r8, #136	; 0x88
   b68f6:	6873      	ldr	r3, [r6, #4]
   b68f8:	429f      	cmp	r7, r3
   b68fa:	db07      	blt.n	b690c <_ZN13Beaconscanner4loopEv+0x278>
        SINGLE_THREADED_BLOCK() {
   b68fc:	a801      	add	r0, sp, #4
   b68fe:	f7ff fc53 	bl	b61a8 <_ZN21SingleThreadedSectionD1Ev>
                    i--;
                }
            }
        }
#endif
        _scan_done = false;
   b6902:	2300      	movs	r3, #0
   b6904:	71e3      	strb	r3, [r4, #7]
    }
}
   b6906:	b003      	add	sp, #12
   b6908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b690c:	6835      	ldr	r5, [r6, #0]
   b690e:	fb08 5507 	mla	r5, r8, r7, r5
                if (LairdBt510::beacons.at(i).missed_scan < 0) {
   b6912:	f995 3004 	ldrsb.w	r3, [r5, #4]
   b6916:	2b00      	cmp	r3, #0
   b6918:	da0f      	bge.n	b693a <_ZN13Beaconscanner4loopEv+0x2a6>
            p->~T();
   b691a:	4628      	mov	r0, r5
   b691c:	f7fe fc00 	bl	b5120 <_ZN10LairdBt510D1Ev>
    move(p, p + n, data_ + size_);
   b6920:	e9d6 3200 	ldrd	r3, r2, [r6]
   b6924:	f105 0188 	add.w	r1, r5, #136	; 0x88
   b6928:	fb08 3202 	mla	r2, r8, r2, r3
   b692c:	4628      	mov	r0, r5
   b692e:	f7fe fec6 	bl	b56be <_ZN5spark6VectorI10LairdBt510NS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    size_ -= n;
   b6932:	6873      	ldr	r3, [r6, #4]
   b6934:	3b01      	subs	r3, #1
   b6936:	6073      	str	r3, [r6, #4]
                    i--;
   b6938:	3f01      	subs	r7, #1
            for (int i = 0; i < LairdBt510::beacons.size(); i++) {
   b693a:	3701      	adds	r7, #1
   b693c:	e7db      	b.n	b68f6 <_ZN13Beaconscanner4loopEv+0x262>
   b693e:	bf00      	nop
   b6940:	2003e67c 	.word	0x2003e67c
   b6944:	2003e694 	.word	0x2003e694
   b6948:	2003e6a8 	.word	0x2003e6a8
   b694c:	2003e6b8 	.word	0x2003e6b8

000b6950 <_ZN5spark10JSONWriter5valueERK6String>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
   b6950:	688a      	ldr	r2, [r1, #8]
   b6952:	6809      	ldr	r1, [r1, #0]
   b6954:	f004 b9fc 	b.w	bad50 <_ZN5spark10JSONWriter5valueEPKcj>

000b6958 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE>:
        }
    }
}

bool Eddystone::isBeacon(const BleScanResult *scanResult)
{
   b6958:	b530      	push	{r4, r5, lr}
        return advertisingData_;
   b695a:	f100 0508 	add.w	r5, r0, #8
   b695e:	b089      	sub	sp, #36	; 0x24
    if (ADVERTISING_DATA(scanResult).contains(BleAdvertisingDataType::SERVICE_DATA))
   b6960:	2116      	movs	r1, #22
   b6962:	4628      	mov	r0, r5
   b6964:	f001 fc61 	bl	b822a <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>
   b6968:	4604      	mov	r4, r0
   b696a:	b188      	cbz	r0, b6990 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x38>
    {
        uint8_t buf[BLE_MAX_ADV_DATA_LEN];
        uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b696c:	231f      	movs	r3, #31
   b696e:	466a      	mov	r2, sp
   b6970:	2116      	movs	r1, #22
   b6972:	4628      	mov	r0, r5
   b6974:	f001 fbf7 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        if (count > 3 && buf[0] == 0xAA && buf[1] == 0xFE) // Eddystone UUID
   b6978:	b2c0      	uxtb	r0, r0
   b697a:	2803      	cmp	r0, #3
   b697c:	d907      	bls.n	b698e <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x36>
   b697e:	f89d 3000 	ldrb.w	r3, [sp]
   b6982:	2baa      	cmp	r3, #170	; 0xaa
   b6984:	d103      	bne.n	b698e <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x36>
   b6986:	f89d 3001 	ldrb.w	r3, [sp, #1]
   b698a:	2bfe      	cmp	r3, #254	; 0xfe
   b698c:	d000      	beq.n	b6990 <_ZN9Eddystone8isBeaconEPKN8particle13BleScanResultE+0x38>
            return true;
    }
    return false;
   b698e:	2400      	movs	r4, #0
}
   b6990:	4620      	mov	r0, r4
   b6992:	b009      	add	sp, #36	; 0x24
   b6994:	bd30      	pop	{r4, r5, pc}

000b6996 <_ZN9Eddystone3Uid12populateDataEPha>:
        writer->endObject();
}

void Eddystone::Uid::populateData(uint8_t *buf, int8_t rssi)
{
    found = true;
   b6996:	2301      	movs	r3, #1
   b6998:	7003      	strb	r3, [r0, #0]
    power = (int8_t)buf[3];
   b699a:	78cb      	ldrb	r3, [r1, #3]
   b699c:	7143      	strb	r3, [r0, #5]
    memcpy(name,buf+4,10);
   b699e:	684b      	ldr	r3, [r1, #4]
   b69a0:	f8c0 3006 	str.w	r3, [r0, #6]
   b69a4:	688b      	ldr	r3, [r1, #8]
   b69a6:	f8c0 300a 	str.w	r3, [r0, #10]
   b69aa:	898b      	ldrh	r3, [r1, #12]
   b69ac:	81c3      	strh	r3, [r0, #14]
    memcpy(instance, buf+14,6);
   b69ae:	f8d1 300e 	ldr.w	r3, [r1, #14]
   b69b2:	6103      	str	r3, [r0, #16]
   b69b4:	8a4b      	ldrh	r3, [r1, #18]
   b69b6:	8283      	strh	r3, [r0, #20]
    this->rssi+=rssi;
   b69b8:	8843      	ldrh	r3, [r0, #2]
   b69ba:	441a      	add	r2, r3
    rssi_count++;
   b69bc:	7903      	ldrb	r3, [r0, #4]
    this->rssi+=rssi;
   b69be:	8042      	strh	r2, [r0, #2]
    rssi_count++;
   b69c0:	3301      	adds	r3, #1
   b69c2:	7103      	strb	r3, [r0, #4]
}
   b69c4:	4770      	bx	lr

000b69c6 <_ZN9Eddystone3Url12populateDataEPhah>:

void Eddystone::Url::populateData(uint8_t *buf, int8_t rssi, uint8_t packet_size)
{
   b69c6:	b538      	push	{r3, r4, r5, lr}
   b69c8:	4615      	mov	r5, r2
    found = true;
   b69ca:	2201      	movs	r2, #1
   b69cc:	7002      	strb	r2, [r0, #0]
    power = (int8_t)buf[3];
   b69ce:	78ca      	ldrb	r2, [r1, #3]
   b69d0:	7142      	strb	r2, [r0, #5]
    scheme = (uint8_t)buf[4];
   b69d2:	790a      	ldrb	r2, [r1, #4]
   b69d4:	7182      	strb	r2, [r0, #6]
    locator_size = packet_size - 5;
   b69d6:	3b05      	subs	r3, #5
{
   b69d8:	4604      	mov	r4, r0
    locator_size = packet_size - 5;
   b69da:	b2da      	uxtb	r2, r3
   b69dc:	7602      	strb	r2, [r0, #24]
    memcpy(locator, buf+5,locator_size);
   b69de:	3105      	adds	r1, #5
   b69e0:	3007      	adds	r0, #7
   b69e2:	f005 f839 	bl	bba58 <memcpy>
    this->rssi+=rssi;
   b69e6:	8862      	ldrh	r2, [r4, #2]
    rssi_count++;
   b69e8:	7923      	ldrb	r3, [r4, #4]
    this->rssi+=rssi;
   b69ea:	4415      	add	r5, r2
    rssi_count++;
   b69ec:	3301      	adds	r3, #1
    this->rssi+=rssi;
   b69ee:	8065      	strh	r5, [r4, #2]
    rssi_count++;
   b69f0:	7123      	strb	r3, [r4, #4]
}
   b69f2:	bd38      	pop	{r3, r4, r5, pc}

000b69f4 <_ZN9Eddystone3Tlm12populateDataEPh>:

void Eddystone::Tlm::populateData(uint8_t *buf)
{
    if (buf[3] == 0x00)     // Version. Only one that exists right now
   b69f4:	78cb      	ldrb	r3, [r1, #3]
   b69f6:	b9f3      	cbnz	r3, b6a36 <_ZN9Eddystone3Tlm12populateDataEPh+0x42>
    {
        found = true;
   b69f8:	2301      	movs	r3, #1
   b69fa:	7003      	strb	r3, [r0, #0]
        vbatt = (buf[4]<<8)+buf[5];
   b69fc:	790a      	ldrb	r2, [r1, #4]
   b69fe:	794b      	ldrb	r3, [r1, #5]
   b6a00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6a04:	8043      	strh	r3, [r0, #2]
        memcpy(temp, buf+6, 2);
   b6a06:	88cb      	ldrh	r3, [r1, #6]
   b6a08:	8083      	strh	r3, [r0, #4]
        adv_cnt = (buf[8]<<24)+(buf[9]<<16)+(buf[10]<<8)+buf[11];
   b6a0a:	7a4b      	ldrb	r3, [r1, #9]
   b6a0c:	7a0a      	ldrb	r2, [r1, #8]
   b6a0e:	041b      	lsls	r3, r3, #16
   b6a10:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   b6a14:	7a8a      	ldrb	r2, [r1, #10]
   b6a16:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6a1a:	7aca      	ldrb	r2, [r1, #11]
   b6a1c:	4413      	add	r3, r2
   b6a1e:	6083      	str	r3, [r0, #8]
        sec_cnt = (buf[12]<<24)+(buf[13]<<16)+(buf[14]<<8)+buf[15];
   b6a20:	7b4b      	ldrb	r3, [r1, #13]
   b6a22:	7b0a      	ldrb	r2, [r1, #12]
   b6a24:	041b      	lsls	r3, r3, #16
   b6a26:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   b6a2a:	7b8a      	ldrb	r2, [r1, #14]
   b6a2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b6a30:	7bca      	ldrb	r2, [r1, #15]
   b6a32:	4413      	add	r3, r2
   b6a34:	60c3      	str	r3, [r0, #12]
    }
}
   b6a36:	4770      	bx	lr

000b6a38 <_ZN9Eddystone3Kkm12populateDataEPhh>:
#define KKM_SENSOR_MASK_VOLTAGE     0x1
#define KKM_SENSOR_MASK_TEMP        0x2
#define KKM_SENSOR_MASK_HUME        0x4
#define KKM_SENSOR_MASK_ACC_AIX     0x8
void Eddystone::Kkm::populateData(uint8_t *buf, uint8_t size) {
    found = true;
   b6a38:	2301      	movs	r3, #1
   b6a3a:	7003      	strb	r3, [r0, #0]
void Eddystone::Kkm::populateData(uint8_t *buf, uint8_t size) {
   b6a3c:	b570      	push	{r4, r5, r6, lr}
    uint8_t cursor = 3;
    //uint8_t version = buf[cursor++];
    cursor++;   // Currently not using version. Remove this statement if version is uncommented out.
    uint8_t sensorMask = buf[cursor++];
   b6a3e:	790c      	ldrb	r4, [r1, #4]
    if ( (sensorMask & KKM_SENSOR_MASK_VOLTAGE) != 0) {
   b6a40:	07e3      	lsls	r3, r4, #31
   b6a42:	d53a      	bpl.n	b6aba <_ZN9Eddystone3Kkm12populateDataEPhh+0x82>
        if ( cursor + 2 > size) return;
   b6a44:	2a06      	cmp	r2, #6
   b6a46:	d937      	bls.n	b6ab8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        vbatt = buf[cursor] << 8 | buf[cursor+1];
   b6a48:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   b6a4c:	ba5b      	rev16	r3, r3
   b6a4e:	8043      	strh	r3, [r0, #2]
        cursor += 2;
   b6a50:	2307      	movs	r3, #7
    }
    if ( (sensorMask & KKM_SENSOR_MASK_TEMP) != 0) {
   b6a52:	07a6      	lsls	r6, r4, #30
   b6a54:	d509      	bpl.n	b6a6a <_ZN9Eddystone3Kkm12populateDataEPhh+0x32>
        if ( cursor + 2 > size) return;
   b6a56:	1c5d      	adds	r5, r3, #1
   b6a58:	b2ed      	uxtb	r5, r5
   b6a5a:	4295      	cmp	r5, r2
   b6a5c:	d22c      	bcs.n	b6ab8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        temp_integer = buf[cursor++];
   b6a5e:	5cce      	ldrb	r6, [r1, r3]
   b6a60:	7106      	strb	r6, [r0, #4]
        temp_fraction = buf[cursor++]; 
   b6a62:	5d4d      	ldrb	r5, [r1, r5]
   b6a64:	7145      	strb	r5, [r0, #5]
   b6a66:	3302      	adds	r3, #2
   b6a68:	b2db      	uxtb	r3, r3
    }
    if ( (sensorMask & KKM_SENSOR_MASK_HUME) != 0) {
   b6a6a:	0765      	lsls	r5, r4, #29
   b6a6c:	d505      	bpl.n	b6a7a <_ZN9Eddystone3Kkm12populateDataEPhh+0x42>
        if (cursor + 2 > size) return;
   b6a6e:	1c5d      	adds	r5, r3, #1
   b6a70:	b2ed      	uxtb	r5, r5
   b6a72:	4295      	cmp	r5, r2
   b6a74:	d220      	bcs.n	b6ab8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        // TODO: Add humidity
        cursor +=2;
   b6a76:	3302      	adds	r3, #2
   b6a78:	b2db      	uxtb	r3, r3
    }
    if ( (sensorMask & KKM_SENSOR_MASK_ACC_AIX) != 0) {
   b6a7a:	0724      	lsls	r4, r4, #28
   b6a7c:	d51c      	bpl.n	b6ab8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        if (cursor + 6 > size) return;
   b6a7e:	1d5c      	adds	r4, r3, #5
   b6a80:	b2e4      	uxtb	r4, r4
   b6a82:	4294      	cmp	r4, r2
   b6a84:	d218      	bcs.n	b6ab8 <_ZN9Eddystone3Kkm12populateDataEPhh+0x80>
        accel_data = true;
   b6a86:	2201      	movs	r2, #1
        x_axis = buf[cursor] << 8 | buf[cursor+1];
   b6a88:	189d      	adds	r5, r3, r2
   b6a8a:	b2ed      	uxtb	r5, r5
        accel_data = true;
   b6a8c:	7302      	strb	r2, [r0, #12]
        x_axis = buf[cursor] << 8 | buf[cursor+1];
   b6a8e:	5cce      	ldrb	r6, [r1, r3]
   b6a90:	5d4a      	ldrb	r2, [r1, r5]
   b6a92:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   b6a96:	80c2      	strh	r2, [r0, #6]
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b6a98:	1cdd      	adds	r5, r3, #3
   b6a9a:	1c9a      	adds	r2, r3, #2
   b6a9c:	b2d2      	uxtb	r2, r2
   b6a9e:	b2ed      	uxtb	r5, r5
   b6aa0:	5c8e      	ldrb	r6, [r1, r2]
   b6aa2:	5d4a      	ldrb	r2, [r1, r5]
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b6aa4:	3304      	adds	r3, #4
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b6aa6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b6aaa:	b2db      	uxtb	r3, r3
        y_axis = buf[cursor+2] << 8 | buf[cursor+3];
   b6aac:	8102      	strh	r2, [r0, #8]
        z_axis = buf[cursor+4] << 8 | buf[cursor+5];
   b6aae:	5cca      	ldrb	r2, [r1, r3]
   b6ab0:	5d0b      	ldrb	r3, [r1, r4]
   b6ab2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   b6ab6:	8143      	strh	r3, [r0, #10]
        cursor += 6;
    }
}
   b6ab8:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t sensorMask = buf[cursor++];
   b6aba:	2305      	movs	r3, #5
   b6abc:	e7c9      	b.n	b6a52 <_ZN9Eddystone3Kkm12populateDataEPhh+0x1a>
	...

000b6ac0 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE>:
{
   b6ac0:	b530      	push	{r4, r5, lr}
   b6ac2:	460d      	mov	r5, r1
   b6ac4:	b089      	sub	sp, #36	; 0x24
   b6ac6:	4604      	mov	r4, r0
    address = ADDRESS(scanResult);
   b6ac8:	3007      	adds	r0, #7
   b6aca:	f001 f93a 	bl	b7d42 <_ZN8particle10BleAddressaSERKS0_>
    uint8_t count = ADVERTISING_DATA(scanResult).get(BleAdvertisingDataType::SERVICE_DATA, buf, sizeof(buf));
   b6ace:	231f      	movs	r3, #31
   b6ad0:	466a      	mov	r2, sp
   b6ad2:	2116      	movs	r1, #22
   b6ad4:	f105 0008 	add.w	r0, r5, #8
   b6ad8:	f001 fb45 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
   b6adc:	b2c3      	uxtb	r3, r0
    if (count > 2 && buf[0] == 0xAA && buf[1] == 0xFE) // Eddystone UUID
   b6ade:	2b02      	cmp	r3, #2
   b6ae0:	d928      	bls.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6ae2:	f89d 2000 	ldrb.w	r2, [sp]
   b6ae6:	2aaa      	cmp	r2, #170	; 0xaa
   b6ae8:	d124      	bne.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6aea:	f89d 2001 	ldrb.w	r2, [sp, #1]
   b6aee:	2afe      	cmp	r2, #254	; 0xfe
   b6af0:	d120      	bne.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
        switch (buf[2])
   b6af2:	f89d 2002 	ldrb.w	r2, [sp, #2]
   b6af6:	2a20      	cmp	r2, #32
   b6af8:	d028      	beq.n	b6b4c <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x8c>
   b6afa:	d807      	bhi.n	b6b0c <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x4c>
   b6afc:	b18a      	cbz	r2, b6b22 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x62>
   b6afe:	2a10      	cmp	r2, #16
   b6b00:	d01a      	beq.n	b6b38 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x78>
            Log.info("Eddystone format not supported: %02X", buf[2]);
   b6b02:	4916      	ldr	r1, [pc, #88]	; (b6b5c <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x9c>)
   b6b04:	4816      	ldr	r0, [pc, #88]	; (b6b60 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0xa0>)
   b6b06:	f7fd ffd5 	bl	b4ab4 <_ZNK5spark6Logger4infoEPKcz>
}
   b6b0a:	e013      	b.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
        switch (buf[2])
   b6b0c:	2a21      	cmp	r2, #33	; 0x21
   b6b0e:	d1f8      	bne.n	b6b02 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x42>
            if (count >= 5) kkm.populateData(buf, count);
   b6b10:	2b04      	cmp	r3, #4
   b6b12:	d90f      	bls.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6b14:	461a      	mov	r2, r3
   b6b16:	4669      	mov	r1, sp
   b6b18:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6b1c:	f7ff ff8c 	bl	b6a38 <_ZN9Eddystone3Kkm12populateDataEPhh>
   b6b20:	e008      	b.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
            if (count > 19)
   b6b22:	2b13      	cmp	r3, #19
   b6b24:	d906      	bls.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                uid.populateData(buf, RSSI(scanResult));
   b6b26:	f995 2020 	ldrsb.w	r2, [r5, #32]
   b6b2a:	4669      	mov	r1, sp
   b6b2c:	f104 0014 	add.w	r0, r4, #20
   b6b30:	f7ff ff31 	bl	b6996 <_ZN9Eddystone3Uid12populateDataEPha>
}
   b6b34:	b009      	add	sp, #36	; 0x24
   b6b36:	bd30      	pop	{r4, r5, pc}
            if (count > 5)
   b6b38:	2b05      	cmp	r3, #5
   b6b3a:	d9fb      	bls.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                url.populateData(buf, RSSI(scanResult), count);
   b6b3c:	f995 2020 	ldrsb.w	r2, [r5, #32]
   b6b40:	4669      	mov	r1, sp
   b6b42:	f104 002a 	add.w	r0, r4, #42	; 0x2a
   b6b46:	f7ff ff3e 	bl	b69c6 <_ZN9Eddystone3Url12populateDataEPhah>
   b6b4a:	e7f3      	b.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
            if (count == 16)      // According to the spec, packet length must be 16
   b6b4c:	2b10      	cmp	r3, #16
   b6b4e:	d1f1      	bne.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
                tlm.populateData(buf);
   b6b50:	4669      	mov	r1, sp
   b6b52:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6b56:	f7ff ff4d 	bl	b69f4 <_ZN9Eddystone3Tlm12populateDataEPh>
   b6b5a:	e7eb      	b.n	b6b34 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE+0x74>
   b6b5c:	000bbfb0 	.word	0x000bbfb0
   b6b60:	2003e6e8 	.word	0x2003e6e8

000b6b64 <_ZNK9Eddystone3Url9urlStringEv>:
#endif

String Eddystone::Url::urlString() const
{
   b6b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b68:	798b      	ldrb	r3, [r1, #6]
   b6b6a:	b08e      	sub	sp, #56	; 0x38
   b6b6c:	4606      	mov	r6, r0
   b6b6e:	460d      	mov	r5, r1
   b6b70:	2b03      	cmp	r3, #3
   b6b72:	d826      	bhi.n	b6bc2 <_ZNK9Eddystone3Url9urlStringEv+0x5e>
   b6b74:	e8df f003 	tbb	[pc, r3]
   b6b78:	2d271f02 	.word	0x2d271f02
    char buf[50];
    uint8_t cursor=0;
    switch(scheme)
    {
        case 0x00:
            cursor+=snprintf(buf,sizeof(buf),"http://www.");
   b6b7c:	493a      	ldr	r1, [pc, #232]	; (b6c68 <_ZNK9Eddystone3Url9urlStringEv+0x104>)
   b6b7e:	a801      	add	r0, sp, #4
   b6b80:	f004 ffd2 	bl	bbb28 <strcpy>
   b6b84:	240b      	movs	r4, #11
                break;
            case 0x0c:
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
                break;
            case 0x0d:
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b6b86:	f8df 8120 	ldr.w	r8, [pc, #288]	; b6ca8 <_ZNK9Eddystone3Url9urlStringEv+0x144>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
   b6b8a:	f8df 9120 	ldr.w	r9, [pc, #288]	; b6cac <_ZNK9Eddystone3Url9urlStringEv+0x148>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info");
   b6b8e:	f8df a120 	ldr.w	sl, [pc, #288]	; b6cb0 <_ZNK9Eddystone3Url9urlStringEv+0x14c>
    switch(scheme)
   b6b92:	2700      	movs	r7, #0
    for(uint8_t i=0;i<locator_size;i++)
   b6b94:	7e2a      	ldrb	r2, [r5, #24]
   b6b96:	b2fb      	uxtb	r3, r7
   b6b98:	429a      	cmp	r2, r3
   b6b9a:	d95b      	bls.n	b6c54 <_ZNK9Eddystone3Url9urlStringEv+0xf0>
        switch(locator[i])
   b6b9c:	442b      	add	r3, r5
   b6b9e:	79da      	ldrb	r2, [r3, #7]
   b6ba0:	2a0d      	cmp	r2, #13
   b6ba2:	d850      	bhi.n	b6c46 <_ZNK9Eddystone3Url9urlStringEv+0xe2>
   b6ba4:	e8df f002 	tbb	[pc, r2]
   b6ba8:	2b29271b 	.word	0x2b29271b
   b6bac:	3a38362d 	.word	0x3a38362d
   b6bb0:	49474543 	.word	0x49474543
   b6bb4:	4d4b      	.short	0x4d4b
            cursor+=snprintf(buf,sizeof(buf),"https://www.");
   b6bb6:	492d      	ldr	r1, [pc, #180]	; (b6c6c <_ZNK9Eddystone3Url9urlStringEv+0x108>)
   b6bb8:	a801      	add	r0, sp, #4
   b6bba:	f004 ffb5 	bl	bbb28 <strcpy>
   b6bbe:	240c      	movs	r4, #12
            break;
   b6bc0:	e7e1      	b.n	b6b86 <_ZNK9Eddystone3Url9urlStringEv+0x22>
    switch(scheme)
   b6bc2:	2400      	movs	r4, #0
   b6bc4:	e7df      	b.n	b6b86 <_ZNK9Eddystone3Url9urlStringEv+0x22>
            cursor+=snprintf(buf,sizeof(buf),"http://");
   b6bc6:	492a      	ldr	r1, [pc, #168]	; (b6c70 <_ZNK9Eddystone3Url9urlStringEv+0x10c>)
   b6bc8:	a801      	add	r0, sp, #4
   b6bca:	f004 ffad 	bl	bbb28 <strcpy>
   b6bce:	2407      	movs	r4, #7
            break;
   b6bd0:	e7d9      	b.n	b6b86 <_ZNK9Eddystone3Url9urlStringEv+0x22>
            cursor+=snprintf(buf,sizeof(buf),"https://");
   b6bd2:	4928      	ldr	r1, [pc, #160]	; (b6c74 <_ZNK9Eddystone3Url9urlStringEv+0x110>)
   b6bd4:	a801      	add	r0, sp, #4
   b6bd6:	f004 ffa7 	bl	bbb28 <strcpy>
   b6bda:	2408      	movs	r4, #8
            break;
   b6bdc:	e7d3      	b.n	b6b86 <_ZNK9Eddystone3Url9urlStringEv+0x22>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".com/");
   b6bde:	4a26      	ldr	r2, [pc, #152]	; (b6c78 <_ZNK9Eddystone3Url9urlStringEv+0x114>)
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org/");
   b6be0:	ab01      	add	r3, sp, #4
   b6be2:	1918      	adds	r0, r3, r4
   b6be4:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6be8:	f000 fd36 	bl	b7658 <snprintf>
   b6bec:	1d63      	adds	r3, r4, #5
   b6bee:	b2db      	uxtb	r3, r3
    for(uint8_t i=0;i<locator_size;i++)
   b6bf0:	3701      	adds	r7, #1
   b6bf2:	461c      	mov	r4, r3
   b6bf4:	e7ce      	b.n	b6b94 <_ZNK9Eddystone3Url9urlStringEv+0x30>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org/");
   b6bf6:	4a21      	ldr	r2, [pc, #132]	; (b6c7c <_ZNK9Eddystone3Url9urlStringEv+0x118>)
   b6bf8:	e7f2      	b.n	b6be0 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".edu/");
   b6bfa:	4a21      	ldr	r2, [pc, #132]	; (b6c80 <_ZNK9Eddystone3Url9urlStringEv+0x11c>)
   b6bfc:	e7f0      	b.n	b6be0 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".net/");
   b6bfe:	4a21      	ldr	r2, [pc, #132]	; (b6c84 <_ZNK9Eddystone3Url9urlStringEv+0x120>)
   b6c00:	e7ee      	b.n	b6be0 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info/");
   b6c02:	ab01      	add	r3, sp, #4
   b6c04:	1918      	adds	r0, r3, r4
   b6c06:	4a20      	ldr	r2, [pc, #128]	; (b6c88 <_ZNK9Eddystone3Url9urlStringEv+0x124>)
   b6c08:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6c0c:	f000 fd24 	bl	b7658 <snprintf>
   b6c10:	1da3      	adds	r3, r4, #6
   b6c12:	e7ec      	b.n	b6bee <_ZNK9Eddystone3Url9urlStringEv+0x8a>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz/");
   b6c14:	4a1d      	ldr	r2, [pc, #116]	; (b6c8c <_ZNK9Eddystone3Url9urlStringEv+0x128>)
   b6c16:	e7e3      	b.n	b6be0 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov/");
   b6c18:	4a1d      	ldr	r2, [pc, #116]	; (b6c90 <_ZNK9Eddystone3Url9urlStringEv+0x12c>)
   b6c1a:	e7e1      	b.n	b6be0 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".com");
   b6c1c:	4a1d      	ldr	r2, [pc, #116]	; (b6c94 <_ZNK9Eddystone3Url9urlStringEv+0x130>)
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b6c1e:	ab01      	add	r3, sp, #4
   b6c20:	1918      	adds	r0, r3, r4
   b6c22:	f1c4 0132 	rsb	r1, r4, #50	; 0x32
   b6c26:	f000 fd17 	bl	b7658 <snprintf>
   b6c2a:	1d23      	adds	r3, r4, #4
   b6c2c:	e7df      	b.n	b6bee <_ZNK9Eddystone3Url9urlStringEv+0x8a>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".org");
   b6c2e:	4a1a      	ldr	r2, [pc, #104]	; (b6c98 <_ZNK9Eddystone3Url9urlStringEv+0x134>)
   b6c30:	e7f5      	b.n	b6c1e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".edu");
   b6c32:	4a1a      	ldr	r2, [pc, #104]	; (b6c9c <_ZNK9Eddystone3Url9urlStringEv+0x138>)
   b6c34:	e7f3      	b.n	b6c1e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".net");
   b6c36:	4a1a      	ldr	r2, [pc, #104]	; (b6ca0 <_ZNK9Eddystone3Url9urlStringEv+0x13c>)
   b6c38:	e7f1      	b.n	b6c1e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".info");
   b6c3a:	4652      	mov	r2, sl
   b6c3c:	e7d0      	b.n	b6be0 <_ZNK9Eddystone3Url9urlStringEv+0x7c>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".biz");
   b6c3e:	464a      	mov	r2, r9
   b6c40:	e7ed      	b.n	b6c1e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                cursor+=snprintf(buf+cursor,sizeof(buf)-cursor,".gov");
   b6c42:	4642      	mov	r2, r8
   b6c44:	e7eb      	b.n	b6c1e <_ZNK9Eddystone3Url9urlStringEv+0xba>
                break;
            default:
                buf[cursor++] = locator[i];
   b6c46:	a90e      	add	r1, sp, #56	; 0x38
   b6c48:	1c63      	adds	r3, r4, #1
   b6c4a:	440c      	add	r4, r1
   b6c4c:	b2db      	uxtb	r3, r3
   b6c4e:	f804 2c34 	strb.w	r2, [r4, #-52]
   b6c52:	e7cd      	b.n	b6bf0 <_ZNK9Eddystone3Url9urlStringEv+0x8c>
        }
    }
    return String::format("%.*s", cursor, buf);
   b6c54:	4630      	mov	r0, r6
   b6c56:	4913      	ldr	r1, [pc, #76]	; (b6ca4 <_ZNK9Eddystone3Url9urlStringEv+0x140>)
   b6c58:	ab01      	add	r3, sp, #4
   b6c5a:	4622      	mov	r2, r4
   b6c5c:	f000 ff0a 	bl	b7a74 <_ZN6String6formatEPKcz>
}
   b6c60:	4630      	mov	r0, r6
   b6c62:	b00e      	add	sp, #56	; 0x38
   b6c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6c68:	000bbfd5 	.word	0x000bbfd5
   b6c6c:	000bbfe1 	.word	0x000bbfe1
   b6c70:	000bbfee 	.word	0x000bbfee
   b6c74:	000bbff6 	.word	0x000bbff6
   b6c78:	000bbfff 	.word	0x000bbfff
   b6c7c:	000bc005 	.word	0x000bc005
   b6c80:	000bc00b 	.word	0x000bc00b
   b6c84:	000bc011 	.word	0x000bc011
   b6c88:	000bc017 	.word	0x000bc017
   b6c8c:	000bc01e 	.word	0x000bc01e
   b6c90:	000bc024 	.word	0x000bc024
   b6c94:	000bc02a 	.word	0x000bc02a
   b6c98:	000bc02f 	.word	0x000bc02f
   b6c9c:	000bc034 	.word	0x000bc034
   b6ca0:	000bc039 	.word	0x000bc039
   b6ca4:	000bc04e 	.word	0x000bc04e
   b6ca8:	000bc049 	.word	0x000bc049
   b6cac:	000bc044 	.word	0x000bc044
   b6cb0:	000bc03e 	.word	0x000bc03e

000b6cb4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE>:
{
   b6cb4:	b570      	push	{r4, r5, r6, lr}
   b6cb6:	b08c      	sub	sp, #48	; 0x30
   b6cb8:	4604      	mov	r4, r0
   b6cba:	460d      	mov	r5, r1
        writer->name(address.toString()).beginObject();
   b6cbc:	2200      	movs	r2, #0
   b6cbe:	1dc1      	adds	r1, r0, #7
   b6cc0:	a808      	add	r0, sp, #32
   b6cc2:	f001 f8cb 	bl	b7e5c <_ZNK8particle10BleAddress8toStringEb>
    return this->name(name.c_str(), name.length());
   b6cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6cc8:	9908      	ldr	r1, [sp, #32]
   b6cca:	4628      	mov	r0, r5
   b6ccc:	f004 f830 	bl	bad30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6cd0:	f003 ff74 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
   b6cd4:	a808      	add	r0, sp, #32
   b6cd6:	f000 fd93 	bl	b7800 <_ZN6StringD1Ev>
        if (uid.found) 
   b6cda:	7d23      	ldrb	r3, [r4, #20]
   b6cdc:	2b00      	cmp	r3, #0
   b6cde:	d062      	beq.n	b6da6 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0xf2>
            writer->name("uid").beginObject();
   b6ce0:	499f      	ldr	r1, [pc, #636]	; (b6f60 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2ac>)
   b6ce2:	4628      	mov	r0, r5
   b6ce4:	f7fd fe6c 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6ce8:	f003 ff68 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("power").value(uid.getPower());
   b6cec:	499d      	ldr	r1, [pc, #628]	; (b6f64 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b0>)
   b6cee:	4628      	mov	r0, r5
   b6cf0:	f7fd fe66 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6cf4:	f994 1019 	ldrsb.w	r1, [r4, #25]
   b6cf8:	f003 ff84 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->name("namespace").value(uid.namespaceString());
   b6cfc:	499a      	ldr	r1, [pc, #616]	; (b6f68 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b4>)
   b6cfe:	4628      	mov	r0, r5
   b6d00:	f7fd fe5e 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
        uint8_t* getNamespace() {return name;}
        uint8_t* getInstance() {return instance;}
        String namespaceString() const {
            return String::format("%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
                        name[0],name[1],name[2],name[3],name[4],
                        name[5],name[6],name[7],name[8],name[9]);
   b6d04:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   b6d08:	9307      	str	r3, [sp, #28]
   b6d0a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b6d0e:	9306      	str	r3, [sp, #24]
   b6d10:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   b6d14:	9305      	str	r3, [sp, #20]
   b6d16:	f894 3020 	ldrb.w	r3, [r4, #32]
   b6d1a:	9304      	str	r3, [sp, #16]
   b6d1c:	7fe3      	ldrb	r3, [r4, #31]
   b6d1e:	9303      	str	r3, [sp, #12]
   b6d20:	7fa3      	ldrb	r3, [r4, #30]
   b6d22:	9302      	str	r3, [sp, #8]
   b6d24:	7f63      	ldrb	r3, [r4, #29]
   b6d26:	9301      	str	r3, [sp, #4]
   b6d28:	7f23      	ldrb	r3, [r4, #28]
   b6d2a:	7ea2      	ldrb	r2, [r4, #26]
   b6d2c:	498f      	ldr	r1, [pc, #572]	; (b6f6c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b8>)
   b6d2e:	9300      	str	r3, [sp, #0]
   b6d30:	4606      	mov	r6, r0
   b6d32:	7ee3      	ldrb	r3, [r4, #27]
   b6d34:	a808      	add	r0, sp, #32
   b6d36:	f000 fe9d 	bl	b7a74 <_ZN6String6formatEPKcz>
   b6d3a:	a908      	add	r1, sp, #32
   b6d3c:	4630      	mov	r0, r6
   b6d3e:	f7ff fe07 	bl	b6950 <_ZN5spark10JSONWriter5valueERK6String>
   b6d42:	a808      	add	r0, sp, #32
   b6d44:	f000 fd5c 	bl	b7800 <_ZN6StringD1Ev>
            writer->name("instance").value(uid.instanceString());
   b6d48:	4989      	ldr	r1, [pc, #548]	; (b6f70 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2bc>)
   b6d4a:	4628      	mov	r0, r5
   b6d4c:	f7fd fe38 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
        }
        String instanceString() const {
            return String::format("%02X%02X%02X%02X%02X%02X",instance[0],instance[1],instance[2],instance[3],
                        instance[4],instance[5]);
   b6d50:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   b6d54:	9303      	str	r3, [sp, #12]
   b6d56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b6d5a:	9302      	str	r3, [sp, #8]
   b6d5c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b6d66:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   b6d6a:	4982      	ldr	r1, [pc, #520]	; (b6f74 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c0>)
   b6d6c:	9300      	str	r3, [sp, #0]
   b6d6e:	4606      	mov	r6, r0
   b6d70:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   b6d74:	a808      	add	r0, sp, #32
   b6d76:	f000 fe7d 	bl	b7a74 <_ZN6String6formatEPKcz>
   b6d7a:	a908      	add	r1, sp, #32
   b6d7c:	4630      	mov	r0, r6
   b6d7e:	f7ff fde7 	bl	b6950 <_ZN5spark10JSONWriter5valueERK6String>
   b6d82:	a808      	add	r0, sp, #32
   b6d84:	f000 fd3c 	bl	b7800 <_ZN6StringD1Ev>
            writer->name("rssi").value(uid.getRssi());
   b6d88:	497b      	ldr	r1, [pc, #492]	; (b6f78 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c4>)
   b6d8a:	4628      	mov	r0, r5
   b6d8c:	f7fd fe18 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
        int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b6d90:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
   b6d94:	7e23      	ldrb	r3, [r4, #24]
   b6d96:	fb91 f1f3 	sdiv	r1, r1, r3
   b6d9a:	b249      	sxtb	r1, r1
   b6d9c:	f003 ff32 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6da0:	4628      	mov	r0, r5
   b6da2:	f003 fef5 	bl	bab90 <_ZN5spark10JSONWriter9endObjectEv>
        if (url.found)
   b6da6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   b6daa:	b373      	cbz	r3, b6e0a <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x156>
            writer->name("url").beginObject();
   b6dac:	4973      	ldr	r1, [pc, #460]	; (b6f7c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c8>)
   b6dae:	4628      	mov	r0, r5
   b6db0:	f7fd fe06 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6db4:	f003 ff02 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("url").value(url.urlString());
   b6db8:	4970      	ldr	r1, [pc, #448]	; (b6f7c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c8>)
   b6dba:	4628      	mov	r0, r5
   b6dbc:	f7fd fe00 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6dc0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   b6dc4:	4606      	mov	r6, r0
   b6dc6:	a808      	add	r0, sp, #32
   b6dc8:	f7ff fecc 	bl	b6b64 <_ZNK9Eddystone3Url9urlStringEv>
   b6dcc:	a908      	add	r1, sp, #32
   b6dce:	4630      	mov	r0, r6
   b6dd0:	f7ff fdbe 	bl	b6950 <_ZN5spark10JSONWriter5valueERK6String>
   b6dd4:	a808      	add	r0, sp, #32
   b6dd6:	f000 fd13 	bl	b7800 <_ZN6StringD1Ev>
            writer->name("power").value(url.getPower());
   b6dda:	4962      	ldr	r1, [pc, #392]	; (b6f64 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2b0>)
   b6ddc:	4628      	mov	r0, r5
   b6dde:	f7fd fdef 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6de2:	f994 102f 	ldrsb.w	r1, [r4, #47]	; 0x2f
   b6de6:	f003 ff0d 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->name("rssi").value(url.getRssi());
   b6dea:	4963      	ldr	r1, [pc, #396]	; (b6f78 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2c4>)
   b6dec:	4628      	mov	r0, r5
   b6dee:	f7fd fde7 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
        Url() {
            found=false;
            rssi=rssi_count=0;
            }
        ~Url() = default;
        int8_t getRssi() const {return (int8_t)(rssi/rssi_count);}
   b6df2:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   b6df6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   b6dfa:	fb91 f1f3 	sdiv	r1, r1, r3
   b6dfe:	b249      	sxtb	r1, r1
   b6e00:	f003 ff00 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6e04:	4628      	mov	r0, r5
   b6e06:	f003 fec3 	bl	bab90 <_ZN5spark10JSONWriter9endObjectEv>
        if (tlm.found)
   b6e0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   b6e0e:	2b00      	cmp	r3, #0
   b6e10:	d04c      	beq.n	b6eac <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x1f8>
            writer->name("tlm").beginObject();
   b6e12:	495b      	ldr	r1, [pc, #364]	; (b6f80 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2cc>)
   b6e14:	4628      	mov	r0, r5
   b6e16:	f7fd fdd3 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6e1a:	f003 fecf 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("vbatt").value(tlm.getVbatt());
   b6e1e:	4959      	ldr	r1, [pc, #356]	; (b6f84 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d0>)
   b6e20:	4628      	mov	r0, r5
   b6e22:	f7fd fdcd 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
    class Tlm {
    public:
        Tlm() {found=false;}
        ~Tlm() = default;

        float getVbatt() const {return (uint16_t)vbatt/(float)1000;}
   b6e26:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   b6e2a:	ed9f 7a57 	vldr	s14, [pc, #348]	; b6f88 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d4>
   b6e2e:	ee07 3a90 	vmov	s15, r3
   b6e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6e36:	4606      	mov	r6, r0
   b6e38:	eec7 7a87 	vdiv.f32	s15, s15, s14
   b6e3c:	ee17 0a90 	vmov	r0, s15
   b6e40:	f004 fbec 	bl	bb61c <__aeabi_f2d>
   b6e44:	ec41 0b10 	vmov	d0, r0, r1
   b6e48:	4630      	mov	r0, r6
   b6e4a:	f003 feff 	bl	bac4c <_ZN5spark10JSONWriter5valueEd>
            writer->name("temp").value(tlm.getTemp());
   b6e4e:	494f      	ldr	r1, [pc, #316]	; (b6f8c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d8>)
   b6e50:	4628      	mov	r0, r5
   b6e52:	f7fd fdb5 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
        float getTemp() const {return (float)((int8_t)temp[0]+(uint8_t)temp[1]/(float)256);}
   b6e56:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   b6e5a:	eddf 6a4d 	vldr	s13, [pc, #308]	; b6f90 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2dc>
   b6e5e:	ee07 3a10 	vmov	s14, r3
   b6e62:	f994 3048 	ldrsb.w	r3, [r4, #72]	; 0x48
   b6e66:	ee07 3a90 	vmov	s15, r3
   b6e6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   b6e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6e72:	4606      	mov	r6, r0
   b6e74:	eee7 7a26 	vfma.f32	s15, s14, s13
   b6e78:	ee17 0a90 	vmov	r0, s15
   b6e7c:	f004 fbce 	bl	bb61c <__aeabi_f2d>
   b6e80:	ec41 0b10 	vmov	d0, r0, r1
   b6e84:	4630      	mov	r0, r6
   b6e86:	f003 fee1 	bl	bac4c <_ZN5spark10JSONWriter5valueEd>
            writer->name("adv_cnt").value((unsigned int)tlm.getAdvCnt());
   b6e8a:	4942      	ldr	r1, [pc, #264]	; (b6f94 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e0>)
   b6e8c:	4628      	mov	r0, r5
   b6e8e:	f7fd fd97 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6e92:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6e94:	f003 fec8 	bl	bac28 <_ZN5spark10JSONWriter5valueEj>
            writer->name("sec_cnt").value((unsigned int)tlm.getSecCnt());
   b6e98:	493f      	ldr	r1, [pc, #252]	; (b6f98 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e4>)
   b6e9a:	4628      	mov	r0, r5
   b6e9c:	f7fd fd90 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6ea0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   b6ea2:	f003 fec1 	bl	bac28 <_ZN5spark10JSONWriter5valueEj>
            writer->endObject();
   b6ea6:	4628      	mov	r0, r5
   b6ea8:	f003 fe72 	bl	bab90 <_ZN5spark10JSONWriter9endObjectEv>
        if (kkm.found)
   b6eac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   b6eb0:	2b00      	cmp	r3, #0
   b6eb2:	d04e      	beq.n	b6f52 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x29e>
            writer->name("kkm").beginObject();
   b6eb4:	4939      	ldr	r1, [pc, #228]	; (b6f9c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2e8>)
   b6eb6:	4628      	mov	r0, r5
   b6eb8:	f7fd fd82 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6ebc:	f003 fe7e 	bl	babbc <_ZN5spark10JSONWriter11beginObjectEv>
            writer->name("vbatt").value(kkm.getVbatt());
   b6ec0:	4930      	ldr	r1, [pc, #192]	; (b6f84 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d0>)
   b6ec2:	4628      	mov	r0, r5
   b6ec4:	f7fd fd7c 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6ec8:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
   b6ecc:	f003 fe9a 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->name("temp").value(kkm.getTemp());
   b6ed0:	492e      	ldr	r1, [pc, #184]	; (b6f8c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2d8>)
   b6ed2:	4628      	mov	r0, r5
   b6ed4:	f7fd fd74 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
            accel_data = false;
        }
        ~Kkm() = default;
        uint16_t getVbatt() const { return vbatt; };
        float getTemp() const { 
            if (temp_integer > 0) {
   b6ed8:	f994 3058 	ldrsb.w	r3, [r4, #88]	; 0x58
   b6edc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
   b6ee0:	eddf 6a2b 	vldr	s13, [pc, #172]	; b6f90 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2dc>
   b6ee4:	ee07 3a90 	vmov	s15, r3
   b6ee8:	ee07 2a10 	vmov	s14, r2
   b6eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                return (float)(temp_integer+temp_fraction/(float)256); 
   b6ef0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            if (temp_integer > 0) {
   b6ef4:	2b00      	cmp	r3, #0
                return (float)(temp_integer+temp_fraction/(float)256); 
   b6ef6:	bfc8      	it	gt
   b6ef8:	eee7 7a26 	vfmagt.f32	s15, s14, s13
   b6efc:	4606      	mov	r6, r0
            }
            return (float)(temp_integer-temp_fraction/(float)256);
   b6efe:	bfd8      	it	le
   b6f00:	eee7 7a66 	vfmsle.f32	s15, s14, s13
   b6f04:	ee17 0a90 	vmov	r0, s15
   b6f08:	f004 fb88 	bl	bb61c <__aeabi_f2d>
   b6f0c:	ec41 0b10 	vmov	d0, r0, r1
   b6f10:	4630      	mov	r0, r6
   b6f12:	f003 fe9b 	bl	bac4c <_ZN5spark10JSONWriter5valueEd>
            if (kkm.hasAccelData()) {
   b6f16:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   b6f1a:	b1bb      	cbz	r3, b6f4c <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x298>
                writer->name("x_axis").value(kkm.getAccelXaxis());
   b6f1c:	4920      	ldr	r1, [pc, #128]	; (b6fa0 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2ec>)
   b6f1e:	4628      	mov	r0, r5
   b6f20:	f7fd fd4e 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6f24:	f9b4 105a 	ldrsh.w	r1, [r4, #90]	; 0x5a
   b6f28:	f003 fe6c 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
                writer->name("y_axis").value(kkm.getAccelYaxis());
   b6f2c:	491d      	ldr	r1, [pc, #116]	; (b6fa4 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2f0>)
   b6f2e:	4628      	mov	r0, r5
   b6f30:	f7fd fd46 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6f34:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
   b6f38:	f003 fe64 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
                writer->name("z_axis").value(kkm.getAccelZaxis());
   b6f3c:	491a      	ldr	r1, [pc, #104]	; (b6fa8 <_ZNK9Eddystone6toJsonEPN5spark10JSONWriterE+0x2f4>)
   b6f3e:	4628      	mov	r0, r5
   b6f40:	f7fd fd3e 	bl	b49c0 <_ZN5spark10JSONWriter4nameEPKc>
   b6f44:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
   b6f48:	f003 fe5c 	bl	bac04 <_ZN5spark10JSONWriter5valueEi>
            writer->endObject();
   b6f4c:	4628      	mov	r0, r5
   b6f4e:	f003 fe1f 	bl	bab90 <_ZN5spark10JSONWriter9endObjectEv>
        writer->endObject();
   b6f52:	4628      	mov	r0, r5
}
   b6f54:	b00c      	add	sp, #48	; 0x30
   b6f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer->endObject();
   b6f5a:	f003 be19 	b.w	bab90 <_ZN5spark10JSONWriter9endObjectEv>
   b6f5e:	bf00      	nop
   b6f60:	000bbf7e 	.word	0x000bbf7e
   b6f64:	000bbf8e 	.word	0x000bbf8e
   b6f68:	000bc053 	.word	0x000bc053
   b6f6c:	000bc05d 	.word	0x000bc05d
   b6f70:	000bc086 	.word	0x000bc086
   b6f74:	000bbf64 	.word	0x000bbf64
   b6f78:	000bbd21 	.word	0x000bbd21
   b6f7c:	000bc08f 	.word	0x000bc08f
   b6f80:	000bc093 	.word	0x000bc093
   b6f84:	000bc097 	.word	0x000bc097
   b6f88:	447a0000 	.word	0x447a0000
   b6f8c:	000bbd00 	.word	0x000bbd00
   b6f90:	3b800000 	.word	0x3b800000
   b6f94:	000bc09d 	.word	0x000bc09d
   b6f98:	000bc0a5 	.word	0x000bc0a5
   b6f9c:	000bc0ad 	.word	0x000bc0ad
   b6fa0:	000bbd0c 	.word	0x000bbd0c
   b6fa4:	000bbd13 	.word	0x000bbd13
   b6fa8:	000bbd1a 	.word	0x000bbd1a

000b6fac <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE>:

void Eddystone::addOrUpdate(const BleScanResult *scanResult)
{
   b6fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   b6fb0:	4d42      	ldr	r5, [pc, #264]	; (b70bc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x110>)
   b6fb2:	b0cc      	sub	sp, #304	; 0x130
   b6fb4:	4606      	mov	r6, r0
   b6fb6:	2700      	movs	r7, #0
    return data_[i];
   b6fb8:	f04f 0864 	mov.w	r8, #100	; 0x64
    uint8_t i;
    for (i = 0; i < beacons.size(); ++i) {
   b6fbc:	686b      	ldr	r3, [r5, #4]
   b6fbe:	b2fc      	uxtb	r4, r7
   b6fc0:	429c      	cmp	r4, r3
   b6fc2:	da0d      	bge.n	b6fe0 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x34>
   b6fc4:	6829      	ldr	r1, [r5, #0]
   b6fc6:	fb08 1104 	mla	r1, r8, r4, r1
    BleAddress getAddress() const { return address;}
   b6fca:	3107      	adds	r1, #7
   b6fcc:	a833      	add	r0, sp, #204	; 0xcc
   b6fce:	f000 feb3 	bl	b7d38 <_ZN8particle10BleAddressC1ERKS0_>
        if (beacons.at(i).getAddress() == ADDRESS(scanResult)) {
   b6fd2:	4631      	mov	r1, r6
   b6fd4:	a833      	add	r0, sp, #204	; 0xcc
   b6fd6:	f000 fec6 	bl	b7d66 <_ZNK8particle10BleAddresseqERKS0_>
   b6fda:	3701      	adds	r7, #1
   b6fdc:	2800      	cmp	r0, #0
   b6fde:	d0ed      	beq.n	b6fbc <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x10>
            break;
        }
    }
    if (i == beacons.size()) {
   b6fe0:	686b      	ldr	r3, [r5, #4]
   b6fe2:	429c      	cmp	r4, r3
   b6fe4:	d15c      	bne.n	b70a0 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xf4>
        rssi_count(0) {};
   b6fe6:	4b36      	ldr	r3, [pc, #216]	; (b70c0 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x114>)
   b6fe8:	9301      	str	r3, [sp, #4]
   b6fea:	2301      	movs	r3, #1
   b6fec:	f88d 3009 	strb.w	r3, [sp, #9]
   b6ff0:	f10d 000b 	add.w	r0, sp, #11
   b6ff4:	2304      	movs	r3, #4
   b6ff6:	2400      	movs	r4, #0
   b6ff8:	f88d 300a 	strb.w	r3, [sp, #10]
   b6ffc:	f000 fec7 	bl	b7d8e <_ZN8particle10BleAddressC1Ev>
    Eddystone() : Beacon(SCAN_EDDYSTONE) {};
   b7000:	4b30      	ldr	r3, [pc, #192]	; (b70c4 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0x118>)
   b7002:	9301      	str	r3, [sp, #4]
        Eddystone new_beacon;
        new_beacon.populateData(scanResult);
   b7004:	4631      	mov	r1, r6
   b7006:	a801      	add	r0, sp, #4
        Uid() {rssi=rssi_count=0;found=false;}
   b7008:	e9cd 4406 	strd	r4, r4, [sp, #24]
        Url() {
   b700c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
   b7010:	f8ad 4014 	strh.w	r4, [sp, #20]
   b7014:	f88d 4016 	strb.w	r4, [sp, #22]
        Tlm() {found=false;}
   b7018:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
            found = false;
   b701c:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
            accel_data = false;
   b7020:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
   b7024:	f7ff fd4c 	bl	b6ac0 <_ZN9Eddystone12populateDataEPKN8particle13BleScanResultE>
        new_beacon.missed_scan = 0;
        beacons.append(new_beacon);
   b7028:	a901      	add	r1, sp, #4
   b702a:	a81a      	add	r0, sp, #104	; 0x68
        new_beacon.missed_scan = 0;
   b702c:	f88d 4008 	strb.w	r4, [sp, #8]
        beacons.append(new_beacon);
   b7030:	f7ff f9c8 	bl	b63c4 <_ZN9EddystoneC1ERKS_>
    return insert(size_, std::move(value));
   b7034:	a91a      	add	r1, sp, #104	; 0x68
   b7036:	a833      	add	r0, sp, #204	; 0xcc
   b7038:	686e      	ldr	r6, [r5, #4]
   b703a:	f7ff f9c3 	bl	b63c4 <_ZN9EddystoneC1ERKS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b703e:	e9d5 7301 	ldrd	r7, r3, [r5, #4]
   b7042:	429f      	cmp	r7, r3
   b7044:	db15      	blt.n	b7072 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xc6>
   b7046:	3701      	adds	r7, #1
        if (n > 0) {
   b7048:	42a7      	cmp	r7, r4
   b704a:	dd0d      	ble.n	b7068 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xbc>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b704c:	f04f 0864 	mov.w	r8, #100	; 0x64
    return ::malloc(size);
   b7050:	fb08 f007 	mul.w	r0, r8, r7
   b7054:	f000 fae0 	bl	b7618 <malloc>
            if (!d) {
   b7058:	4604      	mov	r4, r0
   b705a:	b1f0      	cbz	r0, b709a <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xee>
            move(d, data_, data_ + size_);
   b705c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7060:	fb08 1202 	mla	r2, r8, r2, r1
   b7064:	f7ff f9e0 	bl	b6428 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7068:	6828      	ldr	r0, [r5, #0]
   b706a:	f000 fadd 	bl	b7628 <free>
        data_ = d;
   b706e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7070:	60af      	str	r7, [r5, #8]
    T* const p = data_ + i;
   b7072:	682b      	ldr	r3, [r5, #0]
    move(p + 1, p, data_ + size_);
   b7074:	6869      	ldr	r1, [r5, #4]
    T* const p = data_ + i;
   b7076:	2264      	movs	r2, #100	; 0x64
   b7078:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b707c:	f106 0064 	add.w	r0, r6, #100	; 0x64
   b7080:	fb02 3201 	mla	r2, r2, r1, r3
   b7084:	4631      	mov	r1, r6
   b7086:	f7ff f9cf 	bl	b6428 <_ZN5spark6VectorI9EddystoneNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b708a:	b11e      	cbz	r6, b7094 <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xe8>
   b708c:	a933      	add	r1, sp, #204	; 0xcc
   b708e:	4630      	mov	r0, r6
   b7090:	f7ff f998 	bl	b63c4 <_ZN9EddystoneC1ERKS_>
    ++size_;
   b7094:	686b      	ldr	r3, [r5, #4]
   b7096:	3301      	adds	r3, #1
   b7098:	606b      	str	r3, [r5, #4]
        Eddystone& beacon = beacons.at(i);
        beacon.newly_scanned = false;
        beacon.populateData(scanResult);
        beacon.missed_scan = 0;
    }
   b709a:	b04c      	add	sp, #304	; 0x130
   b709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_[i];
   b70a0:	2364      	movs	r3, #100	; 0x64
   b70a2:	435c      	muls	r4, r3
   b70a4:	682b      	ldr	r3, [r5, #0]
   b70a6:	191d      	adds	r5, r3, r4
        beacon.newly_scanned = false;
   b70a8:	2700      	movs	r7, #0
   b70aa:	716f      	strb	r7, [r5, #5]
        beacon.populateData(scanResult);
   b70ac:	591b      	ldr	r3, [r3, r4]
   b70ae:	4631      	mov	r1, r6
   b70b0:	685b      	ldr	r3, [r3, #4]
   b70b2:	4628      	mov	r0, r5
   b70b4:	4798      	blx	r3
        beacon.missed_scan = 0;
   b70b6:	712f      	strb	r7, [r5, #4]
   b70b8:	e7ef      	b.n	b709a <_ZN9Eddystone11addOrUpdateEPKN8particle13BleScanResultE+0xee>
   b70ba:	bf00      	nop
   b70bc:	2003e6b8 	.word	0x2003e6b8
   b70c0:	000bbcf8 	.word	0x000bbcf8
   b70c4:	000bc0bc 	.word	0x000bc0bc

000b70c8 <_GLOBAL__sub_I__ZN9Eddystone7beaconsE>:
        capacity_(0) {
   b70c8:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <_GLOBAL__sub_I__ZN9Eddystone7beaconsE+0xc>)
   b70ca:	2200      	movs	r2, #0
   b70cc:	e9c3 2200 	strd	r2, r2, [r3]
   b70d0:	609a      	str	r2, [r3, #8]
   b70d2:	4770      	bx	lr
   b70d4:	2003e6b8 	.word	0x2003e6b8

000b70d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <netdb_freeaddrinfo+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	689b      	ldr	r3, [r3, #8]
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	00030268 	.word	0x00030268

000b70e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <netdb_getaddrinfo+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	68db      	ldr	r3, [r3, #12]
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	00030268 	.word	0x00030268

000b70f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <HAL_RNG_GetRandomNumber+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	685b      	ldr	r3, [r3, #4]
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	00030218 	.word	0x00030218

000b7108 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <HAL_Delay_Milliseconds+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	689b      	ldr	r3, [r3, #8]
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	00030218 	.word	0x00030218

000b7118 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <HAL_Delay_Microseconds+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	68db      	ldr	r3, [r3, #12]
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	00030218 	.word	0x00030218

000b7128 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	695b      	ldr	r3, [r3, #20]
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	00030218 	.word	0x00030218

000b7138 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <hal_rtc_time_is_valid+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	00030218 	.word	0x00030218

000b7148 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b02      	ldr	r3, [pc, #8]	; (b7154 <hal_timer_millis+0xc>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7150:	9301      	str	r3, [sp, #4]
   b7152:	bd08      	pop	{r3, pc}
   b7154:	00030218 	.word	0x00030218

000b7158 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b7158:	b508      	push	{r3, lr}
   b715a:	4b02      	ldr	r3, [pc, #8]	; (b7164 <hal_rtc_get_time+0xc>)
   b715c:	681b      	ldr	r3, [r3, #0]
   b715e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7160:	9301      	str	r3, [sp, #4]
   b7162:	bd08      	pop	{r3, pc}
   b7164:	00030218 	.word	0x00030218

000b7168 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7168:	b508      	push	{r3, lr}
   b716a:	4b02      	ldr	r3, [pc, #8]	; (b7174 <hal_ble_stack_init+0xc>)
   b716c:	681b      	ldr	r3, [r3, #0]
   b716e:	689b      	ldr	r3, [r3, #8]
   b7170:	9301      	str	r3, [sp, #4]
   b7172:	bd08      	pop	{r3, pc}
   b7174:	00030278 	.word	0x00030278

000b7178 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b7178:	b508      	push	{r3, lr}
   b717a:	4b02      	ldr	r3, [pc, #8]	; (b7184 <hal_ble_gap_set_scan_parameters+0xc>)
   b717c:	681b      	ldr	r3, [r3, #0]
   b717e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b7180:	9301      	str	r3, [sp, #4]
   b7182:	bd08      	pop	{r3, pc}
   b7184:	00030278 	.word	0x00030278

000b7188 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b7188:	b508      	push	{r3, lr}
   b718a:	4b02      	ldr	r3, [pc, #8]	; (b7194 <hal_ble_gap_get_scan_parameters+0xc>)
   b718c:	681b      	ldr	r3, [r3, #0]
   b718e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7190:	9301      	str	r3, [sp, #4]
   b7192:	bd08      	pop	{r3, pc}
   b7194:	00030278 	.word	0x00030278

000b7198 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b7198:	b508      	push	{r3, lr}
   b719a:	4b02      	ldr	r3, [pc, #8]	; (b71a4 <hal_ble_gap_start_scan+0xc>)
   b719c:	681b      	ldr	r3, [r3, #0]
   b719e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b71a0:	9301      	str	r3, [sp, #4]
   b71a2:	bd08      	pop	{r3, pc}
   b71a4:	00030278 	.word	0x00030278

000b71a8 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b71a8:	b508      	push	{r3, lr}
   b71aa:	4b03      	ldr	r3, [pc, #12]	; (b71b8 <hal_ble_gap_stop_scan+0x10>)
   b71ac:	681b      	ldr	r3, [r3, #0]
   b71ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b71b2:	9301      	str	r3, [sp, #4]
   b71b4:	bd08      	pop	{r3, pc}
   b71b6:	0000      	.short	0x0000
   b71b8:	00030278 	.word	0x00030278

000b71bc <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b03      	ldr	r3, [pc, #12]	; (b71cc <hal_ble_gap_disconnect+0x10>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b71c6:	9301      	str	r3, [sp, #4]
   b71c8:	bd08      	pop	{r3, pc}
   b71ca:	0000      	.short	0x0000
   b71cc:	00030278 	.word	0x00030278

000b71d0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b71d0:	b508      	push	{r3, lr}
   b71d2:	4b03      	ldr	r3, [pc, #12]	; (b71e0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b71d4:	681b      	ldr	r3, [r3, #0]
   b71d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b71da:	9301      	str	r3, [sp, #4]
   b71dc:	bd08      	pop	{r3, pc}
   b71de:	0000      	.short	0x0000
   b71e0:	00030278 	.word	0x00030278

000b71e4 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b71e4:	b508      	push	{r3, lr}
   b71e6:	4b03      	ldr	r3, [pc, #12]	; (b71f4 <hal_ble_gatt_client_discover_all_services+0x10>)
   b71e8:	681b      	ldr	r3, [r3, #0]
   b71ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b71ee:	9301      	str	r3, [sp, #4]
   b71f0:	bd08      	pop	{r3, pc}
   b71f2:	0000      	.short	0x0000
   b71f4:	00030278 	.word	0x00030278

000b71f8 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b71f8:	b508      	push	{r3, lr}
   b71fa:	4b03      	ldr	r3, [pc, #12]	; (b7208 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b71fc:	681b      	ldr	r3, [r3, #0]
   b71fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b7202:	9301      	str	r3, [sp, #4]
   b7204:	bd08      	pop	{r3, pc}
   b7206:	0000      	.short	0x0000
   b7208:	00030278 	.word	0x00030278

000b720c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b720c:	b508      	push	{r3, lr}
   b720e:	4b03      	ldr	r3, [pc, #12]	; (b721c <hal_ble_gatt_client_write_with_response+0x10>)
   b7210:	681b      	ldr	r3, [r3, #0]
   b7212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b7216:	9301      	str	r3, [sp, #4]
   b7218:	bd08      	pop	{r3, pc}
   b721a:	0000      	.short	0x0000
   b721c:	00030278 	.word	0x00030278

000b7220 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b03      	ldr	r3, [pc, #12]	; (b7230 <hal_ble_gatt_client_write_without_response+0x10>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b722a:	9301      	str	r3, [sp, #4]
   b722c:	bd08      	pop	{r3, pc}
   b722e:	0000      	.short	0x0000
   b7230:	00030278 	.word	0x00030278

000b7234 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b03      	ldr	r3, [pc, #12]	; (b7244 <hal_ble_gatt_client_read+0x10>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b723e:	9301      	str	r3, [sp, #4]
   b7240:	bd08      	pop	{r3, pc}
   b7242:	0000      	.short	0x0000
   b7244:	00030278 	.word	0x00030278

000b7248 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b7248:	b508      	push	{r3, lr}
   b724a:	4b03      	ldr	r3, [pc, #12]	; (b7258 <hal_ble_gap_connect+0x10>)
   b724c:	681b      	ldr	r3, [r3, #0]
   b724e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b7252:	9301      	str	r3, [sp, #4]
   b7254:	bd08      	pop	{r3, pc}
   b7256:	0000      	.short	0x0000
   b7258:	00030278 	.word	0x00030278

000b725c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b725c:	b508      	push	{r3, lr}
   b725e:	4b03      	ldr	r3, [pc, #12]	; (b726c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7260:	681b      	ldr	r3, [r3, #0]
   b7262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7266:	9301      	str	r3, [sp, #4]
   b7268:	bd08      	pop	{r3, pc}
   b726a:	0000      	.short	0x0000
   b726c:	00030278 	.word	0x00030278

000b7270 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b03      	ldr	r3, [pc, #12]	; (b7280 <hal_ble_gatt_client_configure_cccd+0x10>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b727a:	9301      	str	r3, [sp, #4]
   b727c:	bd08      	pop	{r3, pc}
   b727e:	0000      	.short	0x0000
   b7280:	00030278 	.word	0x00030278

000b7284 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b03      	ldr	r3, [pc, #12]	; (b7294 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b728e:	9301      	str	r3, [sp, #4]
   b7290:	bd08      	pop	{r3, pc}
   b7292:	0000      	.short	0x0000
   b7294:	00030278 	.word	0x00030278

000b7298 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7298:	b508      	push	{r3, lr}
   b729a:	4b03      	ldr	r3, [pc, #12]	; (b72a8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b729c:	681b      	ldr	r3, [r3, #0]
   b729e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b72a2:	9301      	str	r3, [sp, #4]
   b72a4:	bd08      	pop	{r3, pc}
   b72a6:	0000      	.short	0x0000
   b72a8:	00030278 	.word	0x00030278

000b72ac <hal_ble_gap_start_pairing>:

DYNALIB_FN(66, hal_ble, hal_ble_gap_set_pairing_config, int(const hal_ble_pairing_config_t*, void*))
DYNALIB_FN(67, hal_ble, hal_ble_gap_start_pairing, int(hal_ble_conn_handle_t, void*))
   b72ac:	b508      	push	{r3, lr}
   b72ae:	4b03      	ldr	r3, [pc, #12]	; (b72bc <hal_ble_gap_start_pairing+0x10>)
   b72b0:	681b      	ldr	r3, [r3, #0]
   b72b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   b72b6:	9301      	str	r3, [sp, #4]
   b72b8:	bd08      	pop	{r3, pc}
   b72ba:	0000      	.short	0x0000
   b72bc:	00030278 	.word	0x00030278

000b72c0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <os_thread_create+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	685b      	ldr	r3, [r3, #4]
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	00030248 	.word	0x00030248

000b72d0 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <os_thread_yield+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	68db      	ldr	r3, [r3, #12]
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	00030248 	.word	0x00030248

000b72e0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <os_thread_scheduling+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	69db      	ldr	r3, [r3, #28]
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	00030248 	.word	0x00030248

000b72f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <os_mutex_recursive_create+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	00030248 	.word	0x00030248

000b7300 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <os_mutex_recursive_lock+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	00030248 	.word	0x00030248

000b7310 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <os_mutex_recursive_unlock+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030248 	.word	0x00030248

000b7320 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <os_thread_exit+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030248 	.word	0x00030248

000b7330 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <inet_inet_ntop+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	695b      	ldr	r3, [r3, #20]
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	00030264 	.word	0x00030264

000b7340 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <hal_usart_write+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	68db      	ldr	r3, [r3, #12]
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	0003023c 	.word	0x0003023c

000b7350 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <hal_usart_available+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	691b      	ldr	r3, [r3, #16]
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	0003023c 	.word	0x0003023c

000b7360 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <hal_usart_read+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	695b      	ldr	r3, [r3, #20]
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	0003023c 	.word	0x0003023c

000b7370 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <hal_usart_peek+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	699b      	ldr	r3, [r3, #24]
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	0003023c 	.word	0x0003023c

000b7380 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <hal_usart_flush+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	69db      	ldr	r3, [r3, #28]
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	0003023c 	.word	0x0003023c

000b7390 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <hal_usart_available_data_for_write+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	0003023c 	.word	0x0003023c

000b73a0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b02      	ldr	r3, [pc, #8]	; (b73ac <hal_usart_init_ex+0xc>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73a8:	9301      	str	r3, [sp, #4]
   b73aa:	bd08      	pop	{r3, pc}
   b73ac:	0003023c 	.word	0x0003023c

000b73b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b73b0:	b508      	push	{r3, lr}
   b73b2:	4b02      	ldr	r3, [pc, #8]	; (b73bc <HAL_USB_USART_Init+0xc>)
   b73b4:	681b      	ldr	r3, [r3, #0]
   b73b6:	681b      	ldr	r3, [r3, #0]
   b73b8:	9301      	str	r3, [sp, #4]
   b73ba:	bd08      	pop	{r3, pc}
   b73bc:	0003024c 	.word	0x0003024c

000b73c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b73c0:	b508      	push	{r3, lr}
   b73c2:	4b02      	ldr	r3, [pc, #8]	; (b73cc <HAL_USB_USART_Begin+0xc>)
   b73c4:	681b      	ldr	r3, [r3, #0]
   b73c6:	685b      	ldr	r3, [r3, #4]
   b73c8:	9301      	str	r3, [sp, #4]
   b73ca:	bd08      	pop	{r3, pc}
   b73cc:	0003024c 	.word	0x0003024c

000b73d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b73d0:	b508      	push	{r3, lr}
   b73d2:	4b02      	ldr	r3, [pc, #8]	; (b73dc <HAL_USB_USART_Available_Data+0xc>)
   b73d4:	681b      	ldr	r3, [r3, #0]
   b73d6:	691b      	ldr	r3, [r3, #16]
   b73d8:	9301      	str	r3, [sp, #4]
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	0003024c 	.word	0x0003024c

000b73e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b73e0:	b508      	push	{r3, lr}
   b73e2:	4b02      	ldr	r3, [pc, #8]	; (b73ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	695b      	ldr	r3, [r3, #20]
   b73e8:	9301      	str	r3, [sp, #4]
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	0003024c 	.word	0x0003024c

000b73f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b73f0:	b508      	push	{r3, lr}
   b73f2:	4b02      	ldr	r3, [pc, #8]	; (b73fc <HAL_USB_USART_Receive_Data+0xc>)
   b73f4:	681b      	ldr	r3, [r3, #0]
   b73f6:	699b      	ldr	r3, [r3, #24]
   b73f8:	9301      	str	r3, [sp, #4]
   b73fa:	bd08      	pop	{r3, pc}
   b73fc:	0003024c 	.word	0x0003024c

000b7400 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7400:	b508      	push	{r3, lr}
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <HAL_USB_USART_Send_Data+0xc>)
   b7404:	681b      	ldr	r3, [r3, #0]
   b7406:	69db      	ldr	r3, [r3, #28]
   b7408:	9301      	str	r3, [sp, #4]
   b740a:	bd08      	pop	{r3, pc}
   b740c:	0003024c 	.word	0x0003024c

000b7410 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7410:	b508      	push	{r3, lr}
   b7412:	4b02      	ldr	r3, [pc, #8]	; (b741c <HAL_USB_USART_Flush_Data+0xc>)
   b7414:	681b      	ldr	r3, [r3, #0]
   b7416:	6a1b      	ldr	r3, [r3, #32]
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	bd08      	pop	{r3, pc}
   b741c:	0003024c 	.word	0x0003024c

000b7420 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b7420:	b508      	push	{r3, lr}
   b7422:	4b02      	ldr	r3, [pc, #8]	; (b742c <HAL_USB_USART_Is_Connected+0xc>)
   b7424:	681b      	ldr	r3, [r3, #0]
   b7426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7428:	9301      	str	r3, [sp, #4]
   b742a:	bd08      	pop	{r3, pc}
   b742c:	0003024c 	.word	0x0003024c

000b7430 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7430:	b508      	push	{r3, lr}
   b7432:	4b02      	ldr	r3, [pc, #8]	; (b743c <panic_+0xc>)
   b7434:	681b      	ldr	r3, [r3, #0]
   b7436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7438:	9301      	str	r3, [sp, #4]
   b743a:	bd08      	pop	{r3, pc}
   b743c:	00030260 	.word	0x00030260

000b7440 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7440:	b508      	push	{r3, lr}
   b7442:	4b02      	ldr	r3, [pc, #8]	; (b744c <log_message+0xc>)
   b7444:	681b      	ldr	r3, [r3, #0]
   b7446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7448:	9301      	str	r3, [sp, #4]
   b744a:	bd08      	pop	{r3, pc}
   b744c:	00030260 	.word	0x00030260

000b7450 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7450:	b508      	push	{r3, lr}
   b7452:	4b02      	ldr	r3, [pc, #8]	; (b745c <log_message_v+0xc>)
   b7454:	681b      	ldr	r3, [r3, #0]
   b7456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7458:	9301      	str	r3, [sp, #4]
   b745a:	bd08      	pop	{r3, pc}
   b745c:	00030260 	.word	0x00030260

000b7460 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7460:	b508      	push	{r3, lr}
   b7462:	4b02      	ldr	r3, [pc, #8]	; (b746c <system_mode+0xc>)
   b7464:	681b      	ldr	r3, [r3, #0]
   b7466:	681b      	ldr	r3, [r3, #0]
   b7468:	9301      	str	r3, [sp, #4]
   b746a:	bd08      	pop	{r3, pc}
   b746c:	00030220 	.word	0x00030220

000b7470 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7470:	b508      	push	{r3, lr}
   b7472:	4b02      	ldr	r3, [pc, #8]	; (b747c <set_system_mode+0xc>)
   b7474:	681b      	ldr	r3, [r3, #0]
   b7476:	685b      	ldr	r3, [r3, #4]
   b7478:	9301      	str	r3, [sp, #4]
   b747a:	bd08      	pop	{r3, pc}
   b747c:	00030220 	.word	0x00030220

000b7480 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7480:	b508      	push	{r3, lr}
   b7482:	4b02      	ldr	r3, [pc, #8]	; (b748c <system_thread_set_state+0xc>)
   b7484:	681b      	ldr	r3, [r3, #0]
   b7486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7488:	9301      	str	r3, [sp, #4]
   b748a:	bd08      	pop	{r3, pc}
   b748c:	00030220 	.word	0x00030220

000b7490 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7490:	b508      	push	{r3, lr}
   b7492:	4b02      	ldr	r3, [pc, #8]	; (b749c <application_thread_current+0xc>)
   b7494:	681b      	ldr	r3, [r3, #0]
   b7496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7498:	9301      	str	r3, [sp, #4]
   b749a:	bd08      	pop	{r3, pc}
   b749c:	00030220 	.word	0x00030220

000b74a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b74a0:	b508      	push	{r3, lr}
   b74a2:	4b02      	ldr	r3, [pc, #8]	; (b74ac <application_thread_invoke+0xc>)
   b74a4:	681b      	ldr	r3, [r3, #0]
   b74a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b74a8:	9301      	str	r3, [sp, #4]
   b74aa:	bd08      	pop	{r3, pc}
   b74ac:	00030220 	.word	0x00030220

000b74b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b74b0:	b508      	push	{r3, lr}
   b74b2:	4b02      	ldr	r3, [pc, #8]	; (b74bc <system_thread_get_state+0xc>)
   b74b4:	681b      	ldr	r3, [r3, #0]
   b74b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b74b8:	9301      	str	r3, [sp, #4]
   b74ba:	bd08      	pop	{r3, pc}
   b74bc:	00030220 	.word	0x00030220

000b74c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b74c0:	b508      	push	{r3, lr}
   b74c2:	4b03      	ldr	r3, [pc, #12]	; (b74d0 <system_ctrl_set_app_request_handler+0x10>)
   b74c4:	681b      	ldr	r3, [r3, #0]
   b74c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b74ca:	9301      	str	r3, [sp, #4]
   b74cc:	bd08      	pop	{r3, pc}
   b74ce:	0000      	.short	0x0000
   b74d0:	00030220 	.word	0x00030220

000b74d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b74d4:	b508      	push	{r3, lr}
   b74d6:	4b03      	ldr	r3, [pc, #12]	; (b74e4 <system_ctrl_set_result+0x10>)
   b74d8:	681b      	ldr	r3, [r3, #0]
   b74da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b74de:	9301      	str	r3, [sp, #4]
   b74e0:	bd08      	pop	{r3, pc}
   b74e2:	0000      	.short	0x0000
   b74e4:	00030220 	.word	0x00030220

000b74e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <network_connect+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	685b      	ldr	r3, [r3, #4]
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	00030240 	.word	0x00030240

000b74f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b02      	ldr	r3, [pc, #8]	; (b7504 <network_connecting+0xc>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	689b      	ldr	r3, [r3, #8]
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	bd08      	pop	{r3, pc}
   b7504:	00030240 	.word	0x00030240

000b7508 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7508:	b508      	push	{r3, lr}
   b750a:	4b02      	ldr	r3, [pc, #8]	; (b7514 <network_disconnect+0xc>)
   b750c:	681b      	ldr	r3, [r3, #0]
   b750e:	68db      	ldr	r3, [r3, #12]
   b7510:	9301      	str	r3, [sp, #4]
   b7512:	bd08      	pop	{r3, pc}
   b7514:	00030240 	.word	0x00030240

000b7518 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7518:	b508      	push	{r3, lr}
   b751a:	4b02      	ldr	r3, [pc, #8]	; (b7524 <network_ready+0xc>)
   b751c:	681b      	ldr	r3, [r3, #0]
   b751e:	691b      	ldr	r3, [r3, #16]
   b7520:	9301      	str	r3, [sp, #4]
   b7522:	bd08      	pop	{r3, pc}
   b7524:	00030240 	.word	0x00030240

000b7528 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7528:	b508      	push	{r3, lr}
   b752a:	4b02      	ldr	r3, [pc, #8]	; (b7534 <network_on+0xc>)
   b752c:	681b      	ldr	r3, [r3, #0]
   b752e:	695b      	ldr	r3, [r3, #20]
   b7530:	9301      	str	r3, [sp, #4]
   b7532:	bd08      	pop	{r3, pc}
   b7534:	00030240 	.word	0x00030240

000b7538 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7538:	b508      	push	{r3, lr}
   b753a:	4b02      	ldr	r3, [pc, #8]	; (b7544 <network_off+0xc>)
   b753c:	681b      	ldr	r3, [r3, #0]
   b753e:	699b      	ldr	r3, [r3, #24]
   b7540:	9301      	str	r3, [sp, #4]
   b7542:	bd08      	pop	{r3, pc}
   b7544:	00030240 	.word	0x00030240

000b7548 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7548:	b508      	push	{r3, lr}
   b754a:	4b02      	ldr	r3, [pc, #8]	; (b7554 <network_listen+0xc>)
   b754c:	681b      	ldr	r3, [r3, #0]
   b754e:	69db      	ldr	r3, [r3, #28]
   b7550:	9301      	str	r3, [sp, #4]
   b7552:	bd08      	pop	{r3, pc}
   b7554:	00030240 	.word	0x00030240

000b7558 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7558:	b508      	push	{r3, lr}
   b755a:	4b02      	ldr	r3, [pc, #8]	; (b7564 <network_listening+0xc>)
   b755c:	681b      	ldr	r3, [r3, #0]
   b755e:	6a1b      	ldr	r3, [r3, #32]
   b7560:	9301      	str	r3, [sp, #4]
   b7562:	bd08      	pop	{r3, pc}
   b7564:	00030240 	.word	0x00030240

000b7568 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7568:	b508      	push	{r3, lr}
   b756a:	4b02      	ldr	r3, [pc, #8]	; (b7574 <network_set_listen_timeout+0xc>)
   b756c:	681b      	ldr	r3, [r3, #0]
   b756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7570:	9301      	str	r3, [sp, #4]
   b7572:	bd08      	pop	{r3, pc}
   b7574:	00030240 	.word	0x00030240

000b7578 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7578:	b508      	push	{r3, lr}
   b757a:	4b02      	ldr	r3, [pc, #8]	; (b7584 <network_get_listen_timeout+0xc>)
   b757c:	681b      	ldr	r3, [r3, #0]
   b757e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7580:	9301      	str	r3, [sp, #4]
   b7582:	bd08      	pop	{r3, pc}
   b7584:	00030240 	.word	0x00030240

000b7588 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7588:	b508      	push	{r3, lr}
   b758a:	4b02      	ldr	r3, [pc, #8]	; (b7594 <network_is_on+0xc>)
   b758c:	681b      	ldr	r3, [r3, #0]
   b758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7590:	9301      	str	r3, [sp, #4]
   b7592:	bd08      	pop	{r3, pc}
   b7594:	00030240 	.word	0x00030240

000b7598 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7598:	b508      	push	{r3, lr}
   b759a:	4b02      	ldr	r3, [pc, #8]	; (b75a4 <network_is_off+0xc>)
   b759c:	681b      	ldr	r3, [r3, #0]
   b759e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b75a0:	9301      	str	r3, [sp, #4]
   b75a2:	bd08      	pop	{r3, pc}
   b75a4:	00030240 	.word	0x00030240

000b75a8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b75a8:	b508      	push	{r3, lr}
   b75aa:	4b02      	ldr	r3, [pc, #8]	; (b75b4 <spark_process+0xc>)
   b75ac:	681b      	ldr	r3, [r3, #0]
   b75ae:	689b      	ldr	r3, [r3, #8]
   b75b0:	9301      	str	r3, [sp, #4]
   b75b2:	bd08      	pop	{r3, pc}
   b75b4:	00030244 	.word	0x00030244

000b75b8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b75b8:	b508      	push	{r3, lr}
   b75ba:	4b02      	ldr	r3, [pc, #8]	; (b75c4 <spark_cloud_flag_connect+0xc>)
   b75bc:	681b      	ldr	r3, [r3, #0]
   b75be:	68db      	ldr	r3, [r3, #12]
   b75c0:	9301      	str	r3, [sp, #4]
   b75c2:	bd08      	pop	{r3, pc}
   b75c4:	00030244 	.word	0x00030244

000b75c8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b75c8:	b508      	push	{r3, lr}
   b75ca:	4b02      	ldr	r3, [pc, #8]	; (b75d4 <spark_cloud_flag_connected+0xc>)
   b75cc:	681b      	ldr	r3, [r3, #0]
   b75ce:	695b      	ldr	r3, [r3, #20]
   b75d0:	9301      	str	r3, [sp, #4]
   b75d2:	bd08      	pop	{r3, pc}
   b75d4:	00030244 	.word	0x00030244

000b75d8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b75d8:	b508      	push	{r3, lr}
   b75da:	4b02      	ldr	r3, [pc, #8]	; (b75e4 <spark_deviceID+0xc>)
   b75dc:	681b      	ldr	r3, [r3, #0]
   b75de:	69db      	ldr	r3, [r3, #28]
   b75e0:	9301      	str	r3, [sp, #4]
   b75e2:	bd08      	pop	{r3, pc}
   b75e4:	00030244 	.word	0x00030244

000b75e8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b75e8:	b508      	push	{r3, lr}
   b75ea:	4b02      	ldr	r3, [pc, #8]	; (b75f4 <spark_send_event+0xc>)
   b75ec:	681b      	ldr	r3, [r3, #0]
   b75ee:	6a1b      	ldr	r3, [r3, #32]
   b75f0:	9301      	str	r3, [sp, #4]
   b75f2:	bd08      	pop	{r3, pc}
   b75f4:	00030244 	.word	0x00030244

000b75f8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b75f8:	b508      	push	{r3, lr}
   b75fa:	4b02      	ldr	r3, [pc, #8]	; (b7604 <spark_sync_time_pending+0xc>)
   b75fc:	681b      	ldr	r3, [r3, #0]
   b75fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7600:	9301      	str	r3, [sp, #4]
   b7602:	bd08      	pop	{r3, pc}
   b7604:	00030244 	.word	0x00030244

000b7608 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7608:	b508      	push	{r3, lr}
   b760a:	4b02      	ldr	r3, [pc, #8]	; (b7614 <spark_set_random_seed_from_cloud_handler+0xc>)
   b760c:	681b      	ldr	r3, [r3, #0]
   b760e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7610:	9301      	str	r3, [sp, #4]
   b7612:	bd08      	pop	{r3, pc}
   b7614:	00030244 	.word	0x00030244

000b7618 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7618:	b508      	push	{r3, lr}
   b761a:	4b02      	ldr	r3, [pc, #8]	; (b7624 <malloc+0xc>)
   b761c:	681b      	ldr	r3, [r3, #0]
   b761e:	681b      	ldr	r3, [r3, #0]
   b7620:	9301      	str	r3, [sp, #4]
   b7622:	bd08      	pop	{r3, pc}
   b7624:	0003021c 	.word	0x0003021c

000b7628 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7628:	b508      	push	{r3, lr}
   b762a:	4b02      	ldr	r3, [pc, #8]	; (b7634 <free+0xc>)
   b762c:	681b      	ldr	r3, [r3, #0]
   b762e:	685b      	ldr	r3, [r3, #4]
   b7630:	9301      	str	r3, [sp, #4]
   b7632:	bd08      	pop	{r3, pc}
   b7634:	0003021c 	.word	0x0003021c

000b7638 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7638:	b508      	push	{r3, lr}
   b763a:	4b02      	ldr	r3, [pc, #8]	; (b7644 <realloc+0xc>)
   b763c:	681b      	ldr	r3, [r3, #0]
   b763e:	689b      	ldr	r3, [r3, #8]
   b7640:	9301      	str	r3, [sp, #4]
   b7642:	bd08      	pop	{r3, pc}
   b7644:	0003021c 	.word	0x0003021c

000b7648 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b7648:	b508      	push	{r3, lr}
   b764a:	4b02      	ldr	r3, [pc, #8]	; (b7654 <siprintf+0xc>)
   b764c:	681b      	ldr	r3, [r3, #0]
   b764e:	691b      	ldr	r3, [r3, #16]
   b7650:	9301      	str	r3, [sp, #4]
   b7652:	bd08      	pop	{r3, pc}
   b7654:	0003021c 	.word	0x0003021c

000b7658 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7658:	b508      	push	{r3, lr}
   b765a:	4b02      	ldr	r3, [pc, #8]	; (b7664 <snprintf+0xc>)
   b765c:	681b      	ldr	r3, [r3, #0]
   b765e:	69db      	ldr	r3, [r3, #28]
   b7660:	9301      	str	r3, [sp, #4]
   b7662:	bd08      	pop	{r3, pc}
   b7664:	0003021c 	.word	0x0003021c

000b7668 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7668:	b508      	push	{r3, lr}
   b766a:	4b02      	ldr	r3, [pc, #8]	; (b7674 <vsnprintf+0xc>)
   b766c:	681b      	ldr	r3, [r3, #0]
   b766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7670:	9301      	str	r3, [sp, #4]
   b7672:	bd08      	pop	{r3, pc}
   b7674:	0003021c 	.word	0x0003021c

000b7678 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7678:	b508      	push	{r3, lr}
   b767a:	4b02      	ldr	r3, [pc, #8]	; (b7684 <abort+0xc>)
   b767c:	681b      	ldr	r3, [r3, #0]
   b767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7680:	9301      	str	r3, [sp, #4]
   b7682:	bd08      	pop	{r3, pc}
   b7684:	0003021c 	.word	0x0003021c

000b7688 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7688:	b508      	push	{r3, lr}
   b768a:	4b02      	ldr	r3, [pc, #8]	; (b7694 <_malloc_r+0xc>)
   b768c:	681b      	ldr	r3, [r3, #0]
   b768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7690:	9301      	str	r3, [sp, #4]
   b7692:	bd08      	pop	{r3, pc}
   b7694:	0003021c 	.word	0x0003021c

000b7698 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7698:	b508      	push	{r3, lr}
   b769a:	4b02      	ldr	r3, [pc, #8]	; (b76a4 <__assert_func+0xc>)
   b769c:	681b      	ldr	r3, [r3, #0]
   b769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b76a0:	9301      	str	r3, [sp, #4]
   b76a2:	bd08      	pop	{r3, pc}
   b76a4:	0003021c 	.word	0x0003021c

000b76a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b76a8:	b508      	push	{r3, lr}
   b76aa:	4b02      	ldr	r3, [pc, #8]	; (b76b4 <newlib_impure_ptr_callback+0xc>)
   b76ac:	681b      	ldr	r3, [r3, #0]
   b76ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b76b0:	9301      	str	r3, [sp, #4]
   b76b2:	bd08      	pop	{r3, pc}
   b76b4:	0003021c 	.word	0x0003021c

000b76b8 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b76b8:	b508      	push	{r3, lr}
   b76ba:	4b02      	ldr	r3, [pc, #8]	; (b76c4 <localtime_r+0xc>)
   b76bc:	681b      	ldr	r3, [r3, #0]
   b76be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b76c0:	9301      	str	r3, [sp, #4]
   b76c2:	bd08      	pop	{r3, pc}
   b76c4:	0003021c 	.word	0x0003021c

000b76c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b76c8:	2200      	movs	r2, #0
   b76ca:	6840      	ldr	r0, [r0, #4]
   b76cc:	4611      	mov	r1, r2
   b76ce:	f7ff bf43 	b.w	b7558 <network_listening>

000b76d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b76d2:	2200      	movs	r2, #0
   b76d4:	6840      	ldr	r0, [r0, #4]
   b76d6:	4611      	mov	r1, r2
   b76d8:	f7ff bf4e 	b.w	b7578 <network_get_listen_timeout>

000b76dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b76dc:	6840      	ldr	r0, [r0, #4]
   b76de:	2200      	movs	r2, #0
   b76e0:	f7ff bf42 	b.w	b7568 <network_set_listen_timeout>

000b76e4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b76e4:	6840      	ldr	r0, [r0, #4]
   b76e6:	2200      	movs	r2, #0
   b76e8:	f081 0101 	eor.w	r1, r1, #1
   b76ec:	f7ff bf2c 	b.w	b7548 <network_listen>

000b76f0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b76f0:	2300      	movs	r3, #0
   b76f2:	6840      	ldr	r0, [r0, #4]
   b76f4:	461a      	mov	r2, r3
   b76f6:	4619      	mov	r1, r3
   b76f8:	f7ff bf1e 	b.w	b7538 <network_off>

000b76fc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b76fc:	2300      	movs	r3, #0
   b76fe:	6840      	ldr	r0, [r0, #4]
   b7700:	461a      	mov	r2, r3
   b7702:	4619      	mov	r1, r3
   b7704:	f7ff bf10 	b.w	b7528 <network_on>

000b7708 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7708:	2200      	movs	r2, #0
   b770a:	6840      	ldr	r0, [r0, #4]
   b770c:	4611      	mov	r1, r2
   b770e:	f7ff bf03 	b.w	b7518 <network_ready>

000b7712 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7712:	2200      	movs	r2, #0
   b7714:	6840      	ldr	r0, [r0, #4]
   b7716:	4611      	mov	r1, r2
   b7718:	f7ff beee 	b.w	b74f8 <network_connecting>

000b771c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b771c:	6840      	ldr	r0, [r0, #4]
   b771e:	2200      	movs	r2, #0
   b7720:	2102      	movs	r1, #2
   b7722:	f7ff bef1 	b.w	b7508 <network_disconnect>

000b7726 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7726:	2300      	movs	r3, #0
   b7728:	6840      	ldr	r0, [r0, #4]
   b772a:	461a      	mov	r2, r3
   b772c:	f7ff bedc 	b.w	b74e8 <network_connect>

000b7730 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7730:	4b02      	ldr	r3, [pc, #8]	; (b773c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7732:	2203      	movs	r2, #3
   b7734:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7736:	4a02      	ldr	r2, [pc, #8]	; (b7740 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7738:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b773a:	4770      	bx	lr
   b773c:	2003e6c4 	.word	0x2003e6c4
   b7740:	000bc0cc 	.word	0x000bc0cc

000b7744 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7744:	4b05      	ldr	r3, [pc, #20]	; (b775c <_GLOBAL__sub_I_System+0x18>)
   b7746:	2202      	movs	r2, #2
   b7748:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b774a:	4b05      	ldr	r3, [pc, #20]	; (b7760 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b774c:	4a05      	ldr	r2, [pc, #20]	; (b7764 <_GLOBAL__sub_I_System+0x20>)
   b774e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7750:	2000      	movs	r0, #0
   b7752:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7756:	f7ff be8b 	b.w	b7470 <set_system_mode>
   b775a:	bf00      	nop
   b775c:	2003e6d8 	.word	0x2003e6d8
   b7760:	2003e6cc 	.word	0x2003e6cc
   b7764:	ffff0000 	.word	0xffff0000

000b7768 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7768:	b510      	push	{r4, lr}
   b776a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b776c:	f004 fa01 	bl	bbb72 <strlen>
   b7770:	3801      	subs	r0, #1
   b7772:	1823      	adds	r3, r4, r0
   b7774:	4620      	mov	r0, r4
	while(i<j){
   b7776:	4283      	cmp	r3, r0
   b7778:	d906      	bls.n	b7788 <_Z11str_reversePc+0x20>
		c = *i;
   b777a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b777c:	7819      	ldrb	r1, [r3, #0]
   b777e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7782:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7786:	e7f6      	b.n	b7776 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7788:	bd10      	pop	{r4, pc}

000b778a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b778a:	b570      	push	{r4, r5, r6, lr}
   b778c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b778e:	1e91      	subs	r1, r2, #2
   b7790:	2922      	cmp	r1, #34	; 0x22
   b7792:	d81d      	bhi.n	b77d0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7794:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7796:	b930      	cbnz	r0, b77a6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7798:	4423      	add	r3, r4
            *ptr++ = '0';
   b779a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b779c:	429d      	cmp	r5, r3
   b779e:	d210      	bcs.n	b77c2 <ultoa+0x38>
            *ptr++ = '0';
   b77a0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b77a4:	e7fa      	b.n	b779c <ultoa+0x12>
            result.quot = a/radix;
   b77a6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b77aa:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b77ae:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b77b0:	2809      	cmp	r0, #9
                *ptr += '0';
   b77b2:	bf94      	ite	ls
   b77b4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b77b6:	3157      	addhi	r1, #87	; 0x57
   b77b8:	b2c9      	uxtb	r1, r1
   b77ba:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b77be:	4630      	mov	r0, r6
	while(a){
   b77c0:	e7e9      	b.n	b7796 <ultoa+0xc>

	*ptr = '\0';
   b77c2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b77c4:	4620      	mov	r0, r4
	*ptr = '\0';
   b77c6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b77c8:	f7ff ffce 	bl	b7768 <_Z11str_reversePc>
	return buffer;
   b77cc:	4620      	mov	r0, r4
}
   b77ce:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b77d0:	2000      	movs	r0, #0
   b77d2:	e7fc      	b.n	b77ce <ultoa+0x44>

000b77d4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b77d4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b77d6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b77d8:	460c      	mov	r4, r1
   b77da:	4615      	mov	r5, r2
	if(a<0){
   b77dc:	da0e      	bge.n	b77fc <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b77de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b77e2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b77e6:	bf14      	ite	ne
   b77e8:	4258      	negne	r0, r3
   b77ea:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b77ec:	2301      	movs	r3, #1
		*buffer = '-';
   b77ee:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b77f0:	462a      	mov	r2, r5
   b77f2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b77f4:	f7ff ffc9 	bl	b778a <ultoa>
	}
	return buffer;
}
   b77f8:	4620      	mov	r0, r4
   b77fa:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b77fc:	2301      	movs	r3, #1
   b77fe:	e7f9      	b.n	b77f4 <itoa+0x20>

000b7800 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7800:	b510      	push	{r4, lr}
   b7802:	4604      	mov	r4, r0
{
	free(buffer);
   b7804:	6800      	ldr	r0, [r0, #0]
   b7806:	f7ff ff0f 	bl	b7628 <free>
}
   b780a:	4620      	mov	r0, r4
   b780c:	bd10      	pop	{r4, pc}

000b780e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b780e:	b510      	push	{r4, lr}
   b7810:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7812:	6800      	ldr	r0, [r0, #0]
   b7814:	b108      	cbz	r0, b781a <_ZN6String10invalidateEv+0xc>
   b7816:	f7ff ff07 	bl	b7628 <free>
	buffer = NULL;
   b781a:	2300      	movs	r3, #0
	capacity = len = 0;
   b781c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7820:	6023      	str	r3, [r4, #0]
}
   b7822:	bd10      	pop	{r4, pc}

000b7824 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7824:	b538      	push	{r3, r4, r5, lr}
   b7826:	4604      	mov	r4, r0
   b7828:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b782a:	6800      	ldr	r0, [r0, #0]
   b782c:	3101      	adds	r1, #1
   b782e:	f7ff ff03 	bl	b7638 <realloc>
	if (newbuffer) {
   b7832:	b110      	cbz	r0, b783a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7834:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7838:	2001      	movs	r0, #1
	}
	return 0;
}
   b783a:	bd38      	pop	{r3, r4, r5, pc}

000b783c <_ZN6String7reserveEj>:
{
   b783c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b783e:	6803      	ldr	r3, [r0, #0]
{
   b7840:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7842:	b123      	cbz	r3, b784e <_ZN6String7reserveEj+0x12>
   b7844:	6843      	ldr	r3, [r0, #4]
   b7846:	428b      	cmp	r3, r1
   b7848:	d301      	bcc.n	b784e <_ZN6String7reserveEj+0x12>
   b784a:	2001      	movs	r0, #1
}
   b784c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b784e:	4620      	mov	r0, r4
   b7850:	f7ff ffe8 	bl	b7824 <_ZN6String12changeBufferEj>
   b7854:	2800      	cmp	r0, #0
   b7856:	d0f9      	beq.n	b784c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7858:	68a3      	ldr	r3, [r4, #8]
   b785a:	2b00      	cmp	r3, #0
   b785c:	d1f5      	bne.n	b784a <_ZN6String7reserveEj+0xe>
   b785e:	6822      	ldr	r2, [r4, #0]
   b7860:	7013      	strb	r3, [r2, #0]
   b7862:	e7f2      	b.n	b784a <_ZN6String7reserveEj+0xe>

000b7864 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7864:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7866:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7868:	4611      	mov	r1, r2
   b786a:	9201      	str	r2, [sp, #4]
{
   b786c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b786e:	f7ff ffe5 	bl	b783c <_ZN6String7reserveEj>
   b7872:	9a01      	ldr	r2, [sp, #4]
   b7874:	b928      	cbnz	r0, b7882 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7876:	4620      	mov	r0, r4
   b7878:	f7ff ffc9 	bl	b780e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b787c:	4620      	mov	r0, r4
   b787e:	b003      	add	sp, #12
   b7880:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7882:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7884:	4629      	mov	r1, r5
   b7886:	6820      	ldr	r0, [r4, #0]
   b7888:	f004 f8e6 	bl	bba58 <memcpy>
	buffer[len] = 0;
   b788c:	6822      	ldr	r2, [r4, #0]
   b788e:	68a3      	ldr	r3, [r4, #8]
   b7890:	2100      	movs	r1, #0
   b7892:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7894:	e7f2      	b.n	b787c <_ZN6String4copyEPKcj+0x18>

000b7896 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7896:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7898:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b789a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b789e:	4604      	mov	r4, r0
	len = 0;
   b78a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b78a2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b78a4:	b141      	cbz	r1, b78b8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b78a6:	4608      	mov	r0, r1
   b78a8:	9101      	str	r1, [sp, #4]
   b78aa:	f004 f962 	bl	bbb72 <strlen>
   b78ae:	9901      	ldr	r1, [sp, #4]
   b78b0:	4602      	mov	r2, r0
   b78b2:	4620      	mov	r0, r4
   b78b4:	f7ff ffd6 	bl	b7864 <_ZN6String4copyEPKcj>
}
   b78b8:	4620      	mov	r0, r4
   b78ba:	b002      	add	sp, #8
   b78bc:	bd10      	pop	{r4, pc}

000b78be <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b78be:	b538      	push	{r3, r4, r5, lr}
   b78c0:	4605      	mov	r5, r0
	if (buffer) {
   b78c2:	6800      	ldr	r0, [r0, #0]
{
   b78c4:	460c      	mov	r4, r1
	if (buffer) {
   b78c6:	b168      	cbz	r0, b78e4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b78c8:	686a      	ldr	r2, [r5, #4]
   b78ca:	688b      	ldr	r3, [r1, #8]
   b78cc:	429a      	cmp	r2, r3
   b78ce:	d307      	bcc.n	b78e0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b78d0:	6809      	ldr	r1, [r1, #0]
   b78d2:	f004 f929 	bl	bbb28 <strcpy>
			len = rhs.len;
   b78d6:	68a3      	ldr	r3, [r4, #8]
   b78d8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b78da:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b78dc:	60a3      	str	r3, [r4, #8]
}
   b78de:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b78e0:	f7ff fea2 	bl	b7628 <free>
	buffer = rhs.buffer;
   b78e4:	6823      	ldr	r3, [r4, #0]
   b78e6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b78e8:	6863      	ldr	r3, [r4, #4]
   b78ea:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b78ec:	68a3      	ldr	r3, [r4, #8]
   b78ee:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b78f0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b78f2:	e9c4 3300 	strd	r3, r3, [r4]
   b78f6:	e7f1      	b.n	b78dc <_ZN6String4moveERS_+0x1e>

000b78f8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b78f8:	b510      	push	{r4, lr}
	buffer = NULL;
   b78fa:	2300      	movs	r3, #0
	capacity = 0;
   b78fc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7900:	4604      	mov	r4, r0
	len = 0;
   b7902:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7904:	7303      	strb	r3, [r0, #12]
	move(rval);
   b7906:	f7ff ffda 	bl	b78be <_ZN6String4moveERS_>
}
   b790a:	4620      	mov	r0, r4
   b790c:	bd10      	pop	{r4, pc}

000b790e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b790e:	4288      	cmp	r0, r1
{
   b7910:	b510      	push	{r4, lr}
   b7912:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7914:	d005      	beq.n	b7922 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7916:	680b      	ldr	r3, [r1, #0]
   b7918:	b12b      	cbz	r3, b7926 <_ZN6StringaSERKS_+0x18>
   b791a:	688a      	ldr	r2, [r1, #8]
   b791c:	4619      	mov	r1, r3
   b791e:	f7ff ffa1 	bl	b7864 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7922:	4620      	mov	r0, r4
   b7924:	bd10      	pop	{r4, pc}
	else invalidate();
   b7926:	f7ff ff72 	bl	b780e <_ZN6String10invalidateEv>
   b792a:	e7fa      	b.n	b7922 <_ZN6StringaSERKS_+0x14>

000b792c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b792c:	b510      	push	{r4, lr}
	buffer = NULL;
   b792e:	2300      	movs	r3, #0
String::String(const String &value)
   b7930:	4604      	mov	r4, r0
	capacity = 0;
   b7932:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7936:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7938:	7303      	strb	r3, [r0, #12]
	*this = value;
   b793a:	f7ff ffe8 	bl	b790e <_ZN6StringaSERKS_>
}
   b793e:	4620      	mov	r0, r4
   b7940:	bd10      	pop	{r4, pc}

000b7942 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7942:	b513      	push	{r0, r1, r4, lr}
   b7944:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7946:	b159      	cbz	r1, b7960 <_ZN6StringaSEPKc+0x1e>
   b7948:	4608      	mov	r0, r1
   b794a:	9101      	str	r1, [sp, #4]
   b794c:	f004 f911 	bl	bbb72 <strlen>
   b7950:	9901      	ldr	r1, [sp, #4]
   b7952:	4602      	mov	r2, r0
   b7954:	4620      	mov	r0, r4
   b7956:	f7ff ff85 	bl	b7864 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b795a:	4620      	mov	r0, r4
   b795c:	b002      	add	sp, #8
   b795e:	bd10      	pop	{r4, pc}
	else invalidate();
   b7960:	f7ff ff55 	bl	b780e <_ZN6String10invalidateEv>
   b7964:	e7f9      	b.n	b795a <_ZN6StringaSEPKc+0x18>

000b7966 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7966:	b570      	push	{r4, r5, r6, lr}
   b7968:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b796a:	460e      	mov	r6, r1
   b796c:	b909      	cbnz	r1, b7972 <_ZN6String6concatEPKcj+0xc>
   b796e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7970:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7972:	b16a      	cbz	r2, b7990 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7974:	6884      	ldr	r4, [r0, #8]
   b7976:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7978:	4621      	mov	r1, r4
   b797a:	f7ff ff5f 	bl	b783c <_ZN6String7reserveEj>
   b797e:	2800      	cmp	r0, #0
   b7980:	d0f5      	beq.n	b796e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7982:	6828      	ldr	r0, [r5, #0]
   b7984:	68ab      	ldr	r3, [r5, #8]
   b7986:	4631      	mov	r1, r6
   b7988:	4418      	add	r0, r3
   b798a:	f004 f8cd 	bl	bbb28 <strcpy>
	len = newlen;
   b798e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7990:	2001      	movs	r0, #1
   b7992:	e7ed      	b.n	b7970 <_ZN6String6concatEPKcj+0xa>

000b7994 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b7994:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b7996:	2300      	movs	r3, #0
	buf[0] = c;
   b7998:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b799c:	2201      	movs	r2, #1
   b799e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b79a0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b79a4:	f7ff ffdf 	bl	b7966 <_ZN6String6concatEPKcj>
}
   b79a8:	b003      	add	sp, #12
   b79aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b79ae <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   b79ae:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   b79b0:	220a      	movs	r2, #10
{
   b79b2:	4604      	mov	r4, r0
   b79b4:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b79b6:	4669      	mov	r1, sp
   b79b8:	f7ff ff0c 	bl	b77d4 <itoa>
	return concat(buf, strlen(buf));
   b79bc:	4668      	mov	r0, sp
   b79be:	f004 f8d8 	bl	bbb72 <strlen>
   b79c2:	4669      	mov	r1, sp
   b79c4:	4602      	mov	r2, r0
   b79c6:	4620      	mov	r0, r4
   b79c8:	f7ff ffcd 	bl	b7966 <_ZN6String6concatEPKcj>
}
   b79cc:	b002      	add	sp, #8
   b79ce:	bd10      	pop	{r4, pc}

000b79d0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b79d0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b79d2:	688a      	ldr	r2, [r1, #8]
   b79d4:	6809      	ldr	r1, [r1, #0]
{
   b79d6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b79d8:	f7ff ffc5 	bl	b7966 <_ZN6String6concatEPKcj>
   b79dc:	b910      	cbnz	r0, b79e4 <_ZplRK15StringSumHelperRK6String+0x14>
   b79de:	4620      	mov	r0, r4
   b79e0:	f7ff ff15 	bl	b780e <_ZN6String10invalidateEv>
	return a;
}
   b79e4:	4620      	mov	r0, r4
   b79e6:	bd10      	pop	{r4, pc}

000b79e8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b79e8:	b513      	push	{r0, r1, r4, lr}
   b79ea:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b79ec:	b929      	cbnz	r1, b79fa <_ZplRK15StringSumHelperPKc+0x12>
   b79ee:	4620      	mov	r0, r4
   b79f0:	f7ff ff0d 	bl	b780e <_ZN6String10invalidateEv>
	return a;
}
   b79f4:	4620      	mov	r0, r4
   b79f6:	b002      	add	sp, #8
   b79f8:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b79fa:	4608      	mov	r0, r1
   b79fc:	9101      	str	r1, [sp, #4]
   b79fe:	f004 f8b8 	bl	bbb72 <strlen>
   b7a02:	9901      	ldr	r1, [sp, #4]
   b7a04:	4602      	mov	r2, r0
   b7a06:	4620      	mov	r0, r4
   b7a08:	f7ff ffad 	bl	b7966 <_ZN6String6concatEPKcj>
   b7a0c:	2800      	cmp	r0, #0
   b7a0e:	d0ee      	beq.n	b79ee <_ZplRK15StringSumHelperPKc+0x6>
   b7a10:	e7f0      	b.n	b79f4 <_ZplRK15StringSumHelperPKc+0xc>

000b7a12 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   b7a12:	b510      	push	{r4, lr}
   b7a14:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b7a16:	f7ff ffca 	bl	b79ae <_ZN6String6concatEi>
   b7a1a:	b910      	cbnz	r0, b7a22 <_ZplRK15StringSumHelperi+0x10>
   b7a1c:	4620      	mov	r0, r4
   b7a1e:	f7ff fef6 	bl	b780e <_ZN6String10invalidateEv>
	return a;
}
   b7a22:	4620      	mov	r0, r4
   b7a24:	bd10      	pop	{r4, pc}

000b7a26 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b7a26:	6802      	ldr	r2, [r0, #0]
{
   b7a28:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b7a2a:	6809      	ldr	r1, [r1, #0]
   b7a2c:	b162      	cbz	r2, b7a48 <_ZNK6String9compareToERKS_+0x22>
   b7a2e:	b941      	cbnz	r1, b7a42 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b7a30:	6880      	ldr	r0, [r0, #8]
   b7a32:	b160      	cbz	r0, b7a4e <_ZNK6String9compareToERKS_+0x28>
   b7a34:	7810      	ldrb	r0, [r2, #0]
   b7a36:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7a38:	6898      	ldr	r0, [r3, #8]
   b7a3a:	b140      	cbz	r0, b7a4e <_ZNK6String9compareToERKS_+0x28>
   b7a3c:	7809      	ldrb	r1, [r1, #0]
   b7a3e:	4248      	negs	r0, r1
   b7a40:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b7a42:	4610      	mov	r0, r2
   b7a44:	f004 b866 	b.w	bbb14 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7a48:	2900      	cmp	r1, #0
   b7a4a:	d1f5      	bne.n	b7a38 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b7a4c:	4608      	mov	r0, r1
}
   b7a4e:	4770      	bx	lr

000b7a50 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b7a50:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b7a52:	6882      	ldr	r2, [r0, #8]
   b7a54:	688b      	ldr	r3, [r1, #8]
   b7a56:	429a      	cmp	r2, r3
   b7a58:	d105      	bne.n	b7a66 <_ZNK6String6equalsERKS_+0x16>
   b7a5a:	f7ff ffe4 	bl	b7a26 <_ZNK6String9compareToERKS_>
   b7a5e:	fab0 f080 	clz	r0, r0
   b7a62:	0940      	lsrs	r0, r0, #5
}
   b7a64:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b7a66:	2000      	movs	r0, #0
   b7a68:	e7fc      	b.n	b7a64 <_ZNK6String6equalsERKS_+0x14>

000b7a6a <_ZNK6StringltERKS_>:
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
   b7a6a:	b508      	push	{r3, lr}
	return compareTo(rhs) < 0;
   b7a6c:	f7ff ffdb 	bl	b7a26 <_ZNK6String9compareToERKS_>
}
   b7a70:	0fc0      	lsrs	r0, r0, #31
   b7a72:	bd08      	pop	{r3, pc}

000b7a74 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b7a74:	b40e      	push	{r1, r2, r3}
   b7a76:	b570      	push	{r4, r5, r6, lr}
   b7a78:	b087      	sub	sp, #28
   b7a7a:	ad0b      	add	r5, sp, #44	; 0x2c
   b7a7c:	4604      	mov	r4, r0
   b7a7e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a82:	9201      	str	r2, [sp, #4]
   b7a84:	462b      	mov	r3, r5
   b7a86:	2105      	movs	r1, #5
   b7a88:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b7a8a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a8c:	f7ff fdec 	bl	b7668 <vsnprintf>
    va_end(marker);

    String result;
   b7a90:	490b      	ldr	r1, [pc, #44]	; (b7ac0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a92:	4606      	mov	r6, r0
    String result;
   b7a94:	4620      	mov	r0, r4
   b7a96:	f7ff fefe 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b7a9a:	4631      	mov	r1, r6
   b7a9c:	4620      	mov	r0, r4
   b7a9e:	f7ff fecd 	bl	b783c <_ZN6String7reserveEj>
    if (result.buffer) {
   b7aa2:	6820      	ldr	r0, [r4, #0]
   b7aa4:	b130      	cbz	r0, b7ab4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7aa6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b7aa8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7aaa:	462b      	mov	r3, r5
   b7aac:	1c71      	adds	r1, r6, #1
   b7aae:	f7ff fddb 	bl	b7668 <vsnprintf>
        va_end(marker);
        result.len = n;
   b7ab2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	b007      	add	sp, #28
   b7ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7abc:	b003      	add	sp, #12
   b7abe:	4770      	bx	lr
   b7ac0:	000bc5c4 	.word	0x000bc5c4

000b7ac4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7ac4:	4770      	bx	lr

000b7ac6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7ac6:	4770      	bx	lr

000b7ac8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7ac8:	4770      	bx	lr

000b7aca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7aca:	4770      	bx	lr

000b7acc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7acc:	4b06      	ldr	r3, [pc, #24]	; (b7ae8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7ace:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7ad0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7ad2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7ad6:	d005      	beq.n	b7ae4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7ad8:	4608      	mov	r0, r1
   b7ada:	f003 fb29 	bl	bb130 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7ade:	2800      	cmp	r0, #0
   b7ae0:	bf08      	it	eq
   b7ae2:	2400      	moveq	r4, #0
      }
   b7ae4:	4620      	mov	r0, r4
   b7ae6:	bd10      	pop	{r4, pc}
   b7ae8:	000bc370 	.word	0x000bc370

000b7aec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7aec:	4b06      	ldr	r3, [pc, #24]	; (b7b08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7aee:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7af0:	b510      	push	{r4, lr}
   b7af2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7af6:	d005      	beq.n	b7b04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7af8:	4608      	mov	r0, r1
   b7afa:	f003 fb19 	bl	bb130 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7afe:	2800      	cmp	r0, #0
   b7b00:	bf08      	it	eq
   b7b02:	2400      	moveq	r4, #0
      }
   b7b04:	4620      	mov	r0, r4
   b7b06:	bd10      	pop	{r4, pc}
   b7b08:	000bc370 	.word	0x000bc370

000b7b0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7b0c:	4b06      	ldr	r3, [pc, #24]	; (b7b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7b0e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7b10:	b510      	push	{r4, lr}
   b7b12:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7b16:	d005      	beq.n	b7b24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7b18:	4608      	mov	r0, r1
   b7b1a:	f003 fb09 	bl	bb130 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b1e:	2800      	cmp	r0, #0
   b7b20:	bf08      	it	eq
   b7b22:	2400      	moveq	r4, #0
      }
   b7b24:	4620      	mov	r0, r4
   b7b26:	bd10      	pop	{r4, pc}
   b7b28:	000bc370 	.word	0x000bc370

000b7b2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7b2c:	b510      	push	{r4, lr}
   b7b2e:	2168      	movs	r1, #104	; 0x68
   b7b30:	4604      	mov	r4, r0
   b7b32:	f7fc fab2 	bl	b409a <_ZdlPvj>
   b7b36:	4620      	mov	r0, r4
   b7b38:	bd10      	pop	{r4, pc}

000b7b3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7b3a:	b510      	push	{r4, lr}
   b7b3c:	2128      	movs	r1, #40	; 0x28
   b7b3e:	4604      	mov	r4, r0
   b7b40:	f7fc faab 	bl	b409a <_ZdlPvj>
   b7b44:	4620      	mov	r0, r4
   b7b46:	bd10      	pop	{r4, pc}

000b7b48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7b48:	b510      	push	{r4, lr}
   b7b4a:	2130      	movs	r1, #48	; 0x30
   b7b4c:	4604      	mov	r4, r0
   b7b4e:	f7fc faa4 	bl	b409a <_ZdlPvj>
   b7b52:	4620      	mov	r0, r4
   b7b54:	bd10      	pop	{r4, pc}

000b7b56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b56:	2168      	movs	r1, #104	; 0x68
   b7b58:	f7fc ba9f 	b.w	b409a <_ZdlPvj>

000b7b5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b5c:	2128      	movs	r1, #40	; 0x28
   b7b5e:	f7fc ba9c 	b.w	b409a <_ZdlPvj>

000b7b62 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b62:	2130      	movs	r1, #48	; 0x30
   b7b64:	f7fc ba99 	b.w	b409a <_ZdlPvj>

000b7b68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7b6a:	2500      	movs	r5, #0
   b7b6c:	1cec      	adds	r4, r5, #3
   b7b6e:	428c      	cmp	r4, r1
   b7b70:	d80d      	bhi.n	b7b8e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7b72:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7b74:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7b76:	5d87      	ldrb	r7, [r0, r6]
   b7b78:	4297      	cmp	r7, r2
   b7b7a:	d105      	bne.n	b7b88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7b7c:	4426      	add	r6, r4
   b7b7e:	42b1      	cmp	r1, r6
   b7b80:	d305      	bcc.n	b7b8e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7b82:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7b84:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7b88:	3401      	adds	r4, #1
   b7b8a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7b8c:	e7ee      	b.n	b7b6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7b8e:	2000      	movs	r0, #0
   b7b90:	e7f9      	b.n	b7b86 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7b94 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7b94:	4a02      	ldr	r2, [pc, #8]	; (b7ba0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7b96:	4903      	ldr	r1, [pc, #12]	; (b7ba4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7b98:	200a      	movs	r0, #10
   b7b9a:	f7ff bc49 	b.w	b7430 <panic_>
   b7b9e:	bf00      	nop
   b7ba0:	000b7119 	.word	0x000b7119
   b7ba4:	000bc100 	.word	0x000bc100

000b7ba8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7ba8:	b430      	push	{r4, r5}
   b7baa:	460d      	mov	r5, r1
   b7bac:	4611      	mov	r1, r2
   b7bae:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7bb0:	6803      	ldr	r3, [r0, #0]
   b7bb2:	6809      	ldr	r1, [r1, #0]
   b7bb4:	6828      	ldr	r0, [r5, #0]
   b7bb6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7bba:	46a4      	mov	ip, r4
      }
   b7bbc:	bc30      	pop	{r4, r5}
   b7bbe:	4760      	bx	ip

000b7bc0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7bc0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7bc2:	b538      	push	{r3, r4, r5, lr}
   b7bc4:	4604      	mov	r4, r0
	switch (__op)
   b7bc6:	d102      	bne.n	b7bce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7bc8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7bca:	6023      	str	r3, [r4, #0]
	}
   b7bcc:	e003      	b.n	b7bd6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7bce:	2a02      	cmp	r2, #2
   b7bd0:	d003      	beq.n	b7bda <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7bd2:	2a03      	cmp	r2, #3
   b7bd4:	d00d      	beq.n	b7bf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7bd6:	2000      	movs	r0, #0
   b7bd8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7bda:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7bdc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7bde:	f7fc fa58 	bl	b4092 <_Znwj>
   b7be2:	4603      	mov	r3, r0
   b7be4:	2800      	cmp	r0, #0
   b7be6:	d0f0      	beq.n	b7bca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7be8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7bec:	e883 0003 	stmia.w	r3, {r0, r1}
   b7bf0:	e7eb      	b.n	b7bca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7bf2:	6800      	ldr	r0, [r0, #0]
   b7bf4:	2800      	cmp	r0, #0
   b7bf6:	d0ee      	beq.n	b7bd6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7bf8:	2108      	movs	r1, #8
   b7bfa:	f7fc fa4e 	bl	b409a <_ZdlPvj>
   b7bfe:	e7ea      	b.n	b7bd6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7c00 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7c00:	b510      	push	{r4, lr}
	if (_M_manager)
   b7c02:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7c04:	4604      	mov	r4, r0
	if (_M_manager)
   b7c06:	b12b      	cbz	r3, b7c14 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7c08:	2203      	movs	r2, #3
   b7c0a:	4601      	mov	r1, r0
   b7c0c:	4798      	blx	r3
	    _M_manager = nullptr;
   b7c0e:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7c10:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7c14:	bd10      	pop	{r4, pc}

000b7c16 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7c16:	b510      	push	{r4, lr}
	if (_M_manager)
   b7c18:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7c1a:	4604      	mov	r4, r0
	if (_M_manager)
   b7c1c:	b12b      	cbz	r3, b7c2a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7c1e:	2203      	movs	r2, #3
   b7c20:	4601      	mov	r1, r0
   b7c22:	4798      	blx	r3
	    _M_manager = nullptr;
   b7c24:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7c26:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7c2a:	bd10      	pop	{r4, pc}

000b7c2c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b7c2c:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b7c2e:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b7c30:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b7c32:	2220      	movs	r2, #32
   b7c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b7c38:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b7c3a:	4a08      	ldr	r2, [pc, #32]	; (b7c5c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b7c3c:	9200      	str	r2, [sp, #0]
   b7c3e:	4908      	ldr	r1, [pc, #32]	; (b7c60 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b7c40:	aa02      	add	r2, sp, #8
   b7c42:	2001      	movs	r0, #1
   b7c44:	f7ff fbfc 	bl	b7440 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7c48:	6820      	ldr	r0, [r4, #0]
   b7c4a:	4906      	ldr	r1, [pc, #24]	; (b7c64 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b7c4c:	8800      	ldrh	r0, [r0, #0]
   b7c4e:	2300      	movs	r3, #0
   b7c50:	4622      	mov	r2, r4
    }
   b7c52:	b00a      	add	sp, #40	; 0x28
   b7c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7c58:	f7ff bac4 	b.w	b71e4 <hal_ble_gatt_client_discover_all_services>
   b7c5c:	000bc122 	.word	0x000bc122
   b7c60:	000bc117 	.word	0x000bc117
   b7c64:	000b971d 	.word	0x000b971d

000b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b7c68:	b510      	push	{r4, lr}
   b7c6a:	3801      	subs	r0, #1
   b7c6c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b7c70:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b7c74:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b7c76:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b7c7a:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b7c7c:	bf88      	it	hi
   b7c7e:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b7c82:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b7c86:	7803      	ldrb	r3, [r0, #0]
   b7c88:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b7c8c:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b7c90:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b7c92:	bf88      	it	hi
   b7c94:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b7c98:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b7c9a:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b7c9e:	d1e7      	bne.n	b7c70 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b7ca0:	bd10      	pop	{r4, pc}

000b7ca2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7ca2:	b510      	push	{r4, lr}
   b7ca4:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7ca6:	3058      	adds	r0, #88	; 0x58
   b7ca8:	f7fd f8f2 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7cac:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7cb4:	f7ff bda4 	b.w	b7800 <_ZN6StringD1Ev>

000b7cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b7cb8:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b7cba:	6803      	ldr	r3, [r0, #0]
   b7cbc:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b7cbe:	4605      	mov	r5, r0
   b7cc0:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b7cc2:	d008      	beq.n	b7cd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b7cc4:	b111      	cbz	r1, b7ccc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b7cc6:	684b      	ldr	r3, [r1, #4]
   b7cc8:	3301      	adds	r3, #1
   b7cca:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b7ccc:	6828      	ldr	r0, [r5, #0]
   b7cce:	b108      	cbz	r0, b7cd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b7cd0:	f7fd f8e7 	bl	b4ea2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7cd4:	602c      	str	r4, [r5, #0]
      }
   b7cd6:	bd38      	pop	{r3, r4, r5, pc}

000b7cd8 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7cd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7cdc:	b2da      	uxtb	r2, r3
   b7cde:	2a09      	cmp	r2, #9
   b7ce0:	d801      	bhi.n	b7ce6 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7ce2:	4618      	mov	r0, r3
   b7ce4:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7ce6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7cea:	2b05      	cmp	r3, #5
   b7cec:	d801      	bhi.n	b7cf2 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7cee:	3857      	subs	r0, #87	; 0x57
   b7cf0:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7cf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7cf6:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7cf8:	bf94      	ite	ls
   b7cfa:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7cfc:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b7d00:	4770      	bx	lr
	...

000b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7d04:	b510      	push	{r4, lr}
            locked_(false) {
   b7d06:	2300      	movs	r3, #0
   b7d08:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7d0a:	4b04      	ldr	r3, [pc, #16]	; (b7d1c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7d0c:	4604      	mov	r4, r0
   b7d0e:	6818      	ldr	r0, [r3, #0]
   b7d10:	f7ff faf6 	bl	b7300 <os_mutex_recursive_lock>
        locked_ = true;
   b7d14:	2301      	movs	r3, #1
   b7d16:	7023      	strb	r3, [r4, #0]
    }
   b7d18:	4620      	mov	r0, r4
   b7d1a:	bd10      	pop	{r4, pc}
   b7d1c:	2003e6e0 	.word	0x2003e6e0

000b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7d20:	b510      	push	{r4, lr}
        if (locked_) {
   b7d22:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7d24:	4604      	mov	r4, r0
        if (locked_) {
   b7d26:	b11b      	cbz	r3, b7d30 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7d28:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7d2a:	6818      	ldr	r0, [r3, #0]
   b7d2c:	f7ff faf0 	bl	b7310 <os_mutex_recursive_unlock>
    }
   b7d30:	4620      	mov	r0, r4
   b7d32:	bd10      	pop	{r4, pc}
   b7d34:	2003e6e0 	.word	0x2003e6e0

000b7d38 <_ZN8particle10BleAddressC1ERKS0_>:
    address_ = addr.address_;
   b7d38:	680a      	ldr	r2, [r1, #0]
   b7d3a:	6002      	str	r2, [r0, #0]
   b7d3c:	684a      	ldr	r2, [r1, #4]
   b7d3e:	6042      	str	r2, [r0, #4]
}
   b7d40:	4770      	bx	lr

000b7d42 <_ZN8particle10BleAddressaSERKS0_>:
    address_ = addr.address_;
   b7d42:	680a      	ldr	r2, [r1, #0]
   b7d44:	6002      	str	r2, [r0, #0]
   b7d46:	684a      	ldr	r2, [r1, #4]
   b7d48:	6042      	str	r2, [r0, #4]
}
   b7d4a:	4770      	bx	lr

000b7d4c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7d4c:	b082      	sub	sp, #8
   b7d4e:	4603      	mov	r3, r0
    address_ = addr;
   b7d50:	6808      	ldr	r0, [r1, #0]
   b7d52:	6849      	ldr	r1, [r1, #4]
   b7d54:	466a      	mov	r2, sp
   b7d56:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7d58:	466a      	mov	r2, sp
   b7d5a:	ca03      	ldmia	r2!, {r0, r1}
   b7d5c:	6018      	str	r0, [r3, #0]
}
   b7d5e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7d60:	6059      	str	r1, [r3, #4]
}
   b7d62:	b002      	add	sp, #8
   b7d64:	4770      	bx	lr

000b7d66 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7d66:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7d68:	7982      	ldrb	r2, [r0, #6]
   b7d6a:	798b      	ldrb	r3, [r1, #6]
   b7d6c:	429a      	cmp	r2, r3
   b7d6e:	d106      	bne.n	b7d7e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7d70:	2206      	movs	r2, #6
   b7d72:	f003 fe61 	bl	bba38 <memcmp>
   b7d76:	fab0 f080 	clz	r0, r0
   b7d7a:	0940      	lsrs	r0, r0, #5
}
   b7d7c:	bd08      	pop	{r3, pc}
    return false;
   b7d7e:	2000      	movs	r0, #0
   b7d80:	e7fc      	b.n	b7d7c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7d82 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7d82:	f04f 33ff 	mov.w	r3, #4294967295
   b7d86:	6003      	str	r3, [r0, #0]
   b7d88:	8083      	strh	r3, [r0, #4]
}
   b7d8a:	2000      	movs	r0, #0
   b7d8c:	4770      	bx	lr

000b7d8e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7d8e:	b508      	push	{r3, lr}
   b7d90:	4602      	mov	r2, r0
        : address_{} {
   b7d92:	2100      	movs	r1, #0
   b7d94:	6001      	str	r1, [r0, #0]
   b7d96:	6041      	str	r1, [r0, #4]
    clear();
   b7d98:	f7ff fff3 	bl	b7d82 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7d9c:	7191      	strb	r1, [r2, #6]
}
   b7d9e:	4610      	mov	r0, r2
   b7da0:	bd08      	pop	{r3, pc}

000b7da2 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b7da2:	b510      	push	{r4, lr}
   b7da4:	1d43      	adds	r3, r0, #5
   b7da6:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b7da8:	781c      	ldrb	r4, [r3, #0]
   b7daa:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b7dae:	4283      	cmp	r3, r0
   b7db0:	f103 33ff 	add.w	r3, r3, #4294967295
   b7db4:	d1f8      	bne.n	b7da8 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b7db6:	bd10      	pop	{r4, pc}

000b7db8 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b7db8:	b570      	push	{r4, r5, r6, lr}
   b7dba:	4614      	mov	r4, r2
   b7dbc:	b088      	sub	sp, #32
   b7dbe:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b7dc0:	460d      	mov	r5, r1
   b7dc2:	2900      	cmp	r1, #0
   b7dc4:	d048      	beq.n	b7e58 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b7dc6:	b1a4      	cbz	r4, b7df2 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b7dc8:	a901      	add	r1, sp, #4
   b7dca:	f7ff ffea 	bl	b7da2 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b7dce:	b19a      	cbz	r2, b7df8 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b7dd0:	aa03      	add	r2, sp, #12
   b7dd2:	2106      	movs	r1, #6
   b7dd4:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b7dd6:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7dd8:	f7ff ff46 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b7ddc:	2e11      	cmp	r6, #17
   b7dde:	bf28      	it	cs
   b7de0:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b7de2:	4632      	mov	r2, r6
   b7de4:	a903      	add	r1, sp, #12
   b7de6:	4628      	mov	r0, r5
   b7de8:	f003 fe36 	bl	bba58 <memcpy>
    buf[len++] = '\0';
   b7dec:	2300      	movs	r3, #0
   b7dee:	55ab      	strb	r3, [r5, r6]
   b7df0:	1c74      	adds	r4, r6, #1
}
   b7df2:	4620      	mov	r0, r4
   b7df4:	b008      	add	sp, #32
   b7df6:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b7df8:	aa03      	add	r2, sp, #12
   b7dfa:	2101      	movs	r1, #1
   b7dfc:	a801      	add	r0, sp, #4
   b7dfe:	f7ff ff33 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b7e02:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b7e04:	f10d 020f 	add.w	r2, sp, #15
   b7e08:	2101      	movs	r1, #1
   b7e0a:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b7e0e:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b7e12:	f7ff ff29 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7e16:	f10d 0212 	add.w	r2, sp, #18
   b7e1a:	2101      	movs	r1, #1
   b7e1c:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b7e20:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b7e24:	f7ff ff20 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7e28:	f10d 0215 	add.w	r2, sp, #21
   b7e2c:	2101      	movs	r1, #1
   b7e2e:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b7e32:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b7e36:	f7ff ff17 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7e3a:	aa06      	add	r2, sp, #24
   b7e3c:	2101      	movs	r1, #1
   b7e3e:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b7e40:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b7e44:	f7ff ff10 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b7e48:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b7e4c:	f10d 021b 	add.w	r2, sp, #27
   b7e50:	2101      	movs	r1, #1
   b7e52:	f10d 0009 	add.w	r0, sp, #9
   b7e56:	e7be      	b.n	b7dd6 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b7e58:	460c      	mov	r4, r1
   b7e5a:	e7ca      	b.n	b7df2 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b7e5c <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b7e5c:	b510      	push	{r4, lr}
   b7e5e:	b086      	sub	sp, #24
   b7e60:	4604      	mov	r4, r0
   b7e62:	4613      	mov	r3, r2
   b7e64:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b7e66:	2212      	movs	r2, #18
   b7e68:	a901      	add	r1, sp, #4
   b7e6a:	f7ff ffa5 	bl	b7db8 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b7e6e:	a901      	add	r1, sp, #4
   b7e70:	4620      	mov	r0, r4
   b7e72:	f7ff fd10 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7e76:	4620      	mov	r0, r4
   b7e78:	b006      	add	sp, #24
   b7e7a:	bd10      	pop	{r4, pc}

000b7e7c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7e7c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7e7e:	2301      	movs	r3, #1
   b7e80:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7e82:	4b05      	ldr	r3, [pc, #20]	; (b7e98 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7e84:	4602      	mov	r2, r0
   b7e86:	f103 0110 	add.w	r1, r3, #16
   b7e8a:	f853 4b04 	ldr.w	r4, [r3], #4
   b7e8e:	f842 4b04 	str.w	r4, [r2], #4
   b7e92:	428b      	cmp	r3, r1
   b7e94:	d1f9      	bne.n	b7e8a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7e96:	bd10      	pop	{r4, pc}
   b7e98:	000bc37e 	.word	0x000bc37e

000b7e9c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7e9c:	7c0b      	ldrb	r3, [r1, #16]
   b7e9e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b7ea2:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7ea4:	d10d      	bne.n	b7ec2 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b7ea6:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7ea8:	4b0c      	ldr	r3, [pc, #48]	; (b7edc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b7eaa:	4602      	mov	r2, r0
   b7eac:	f103 0410 	add.w	r4, r3, #16
   b7eb0:	f853 5b04 	ldr.w	r5, [r3], #4
   b7eb4:	f842 5b04 	str.w	r5, [r2], #4
   b7eb8:	42a3      	cmp	r3, r4
   b7eba:	d1f9      	bne.n	b7eb0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b7ebc:	880b      	ldrh	r3, [r1, #0]
   b7ebe:	8183      	strh	r3, [r0, #12]
}
   b7ec0:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b7ec2:	2301      	movs	r3, #1
   b7ec4:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7ec6:	f101 0210 	add.w	r2, r1, #16
   b7eca:	4603      	mov	r3, r0
   b7ecc:	f851 4b04 	ldr.w	r4, [r1], #4
   b7ed0:	f843 4b04 	str.w	r4, [r3], #4
   b7ed4:	4291      	cmp	r1, r2
   b7ed6:	d1f9      	bne.n	b7ecc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b7ed8:	e7f2      	b.n	b7ec0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b7eda:	bf00      	nop
   b7edc:	000bc37e 	.word	0x000bc37e

000b7ee0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7ee0:	b510      	push	{r4, lr}
    if (uuid128) {
   b7ee2:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7ee4:	4604      	mov	r4, r0
    if (uuid128) {
   b7ee6:	b1b1      	cbz	r1, b7f16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7ee8:	2a01      	cmp	r2, #1
   b7eea:	f101 0210 	add.w	r2, r1, #16
   b7eee:	d10a      	bne.n	b7f06 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7ef0:	4601      	mov	r1, r0
   b7ef2:	f853 0b04 	ldr.w	r0, [r3], #4
   b7ef6:	f841 0b04 	str.w	r0, [r1], #4
   b7efa:	4293      	cmp	r3, r2
   b7efc:	d1f9      	bne.n	b7ef2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7efe:	2301      	movs	r3, #1
   b7f00:	6123      	str	r3, [r4, #16]
}
   b7f02:	4620      	mov	r0, r4
   b7f04:	bd10      	pop	{r4, pc}
   b7f06:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7f08:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7f0c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7f10:	429a      	cmp	r2, r3
   b7f12:	d1f9      	bne.n	b7f08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7f14:	e7f3      	b.n	b7efe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7f16:	2210      	movs	r2, #16
   b7f18:	f003 fdc6 	bl	bbaa8 <memset>
   b7f1c:	e7f1      	b.n	b7f02 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7f1e <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b7f1e:	b538      	push	{r3, r4, r5, lr}
   b7f20:	4604      	mov	r4, r0
   b7f22:	460d      	mov	r5, r1
        : BleUuid() {
   b7f24:	f7ff ffaa 	bl	b7e7c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b7f28:	2300      	movs	r3, #0
   b7f2a:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7f2c:	81a5      	strh	r5, [r4, #12]
}
   b7f2e:	4620      	mov	r0, r4
   b7f30:	bd38      	pop	{r3, r4, r5, pc}

000b7f32 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7f32:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7f34:	6902      	ldr	r2, [r0, #16]
   b7f36:	690b      	ldr	r3, [r1, #16]
   b7f38:	429a      	cmp	r2, r3
   b7f3a:	d106      	bne.n	b7f4a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7f3c:	2210      	movs	r2, #16
   b7f3e:	f003 fd7b 	bl	bba38 <memcmp>
   b7f42:	fab0 f080 	clz	r0, r0
   b7f46:	0940      	lsrs	r0, r0, #5
}
   b7f48:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7f4a:	2000      	movs	r0, #0
   b7f4c:	e7fc      	b.n	b7f48 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7f50 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7f50:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7f52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7f56:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7f58:	4b34      	ldr	r3, [pc, #208]	; (b802c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7f5a:	460c      	mov	r4, r1
   b7f5c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7f5e:	4602      	mov	r2, r0
   b7f60:	f103 0110 	add.w	r1, r3, #16
   b7f64:	f853 0b04 	ldr.w	r0, [r3], #4
   b7f68:	f842 0b04 	str.w	r0, [r2], #4
   b7f6c:	428b      	cmp	r3, r1
   b7f6e:	d1f9      	bne.n	b7f64 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7f70:	b344      	cbz	r4, b7fc4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7f72:	2124      	movs	r1, #36	; 0x24
   b7f74:	4620      	mov	r0, r4
   b7f76:	f003 fe04 	bl	bbb82 <strnlen>
   b7f7a:	2804      	cmp	r0, #4
   b7f7c:	f04f 0500 	mov.w	r5, #0
   b7f80:	d123      	bne.n	b7fca <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7f82:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7f86:	af01      	add	r7, sp, #4
   b7f88:	1ca5      	adds	r5, r4, #2
   b7f8a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7f8c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7f90:	f7ff fea2 	bl	b7cd8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7f94:	f1b0 0800 	subs.w	r8, r0, #0
   b7f98:	db12      	blt.n	b7fc0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7f9a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7f9e:	f7ff fe9b 	bl	b7cd8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7fa2:	2800      	cmp	r0, #0
   b7fa4:	db0c      	blt.n	b7fc0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7fa6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7fa8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7fac:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7fae:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7fb2:	d1eb      	bne.n	b7f8c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7fb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7fb8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7fba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7fbe:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7fc0:	2300      	movs	r3, #0
   b7fc2:	6133      	str	r3, [r6, #16]
}
   b7fc4:	b002      	add	sp, #8
   b7fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7fca:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7fce:	2124      	movs	r1, #36	; 0x24
   b7fd0:	4620      	mov	r0, r4
   b7fd2:	f003 fdd6 	bl	bbb82 <strnlen>
   b7fd6:	42a8      	cmp	r0, r5
   b7fd8:	d807      	bhi.n	b7fea <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7fda:	4642      	mov	r2, r8
   b7fdc:	2100      	movs	r1, #0
   b7fde:	4630      	mov	r0, r6
}
   b7fe0:	b002      	add	sp, #8
   b7fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7fe6:	f003 bd5f 	b.w	bbaa8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7fea:	f1b8 0f00 	cmp.w	r8, #0
   b7fee:	d0e9      	beq.n	b7fc4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7ff0:	5d60      	ldrb	r0, [r4, r5]
   b7ff2:	f7ff fe71 	bl	b7cd8 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7ff6:	0603      	lsls	r3, r0, #24
   b7ff8:	d415      	bmi.n	b8026 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7ffa:	0100      	lsls	r0, r0, #4
   b7ffc:	f108 38ff 	add.w	r8, r8, #4294967295
   b8000:	b2c7      	uxtb	r7, r0
   b8002:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8006:	2124      	movs	r1, #36	; 0x24
   b8008:	4620      	mov	r0, r4
   b800a:	f003 fdba 	bl	bbb82 <strnlen>
   b800e:	3501      	adds	r5, #1
   b8010:	42a8      	cmp	r0, r5
   b8012:	d908      	bls.n	b8026 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8014:	5d60      	ldrb	r0, [r4, r5]
   b8016:	f7ff fe5f 	bl	b7cd8 <_ZN8particle11hexToNibbleEc>
   b801a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b801c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b801e:	bfa4      	itt	ge
   b8020:	4338      	orrge	r0, r7
   b8022:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8026:	3501      	adds	r5, #1
   b8028:	e7d1      	b.n	b7fce <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b802a:	bf00      	nop
   b802c:	000bc37e 	.word	0x000bc37e

000b8030 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8030:	b513      	push	{r0, r1, r4, lr}
   b8032:	4604      	mov	r4, r0
   b8034:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8036:	f7ff ff21 	bl	b7e7c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b803a:	4620      	mov	r0, r4
   b803c:	9901      	ldr	r1, [sp, #4]
   b803e:	f7ff ff87 	bl	b7f50 <_ZN8particle7BleUuid9constructEPKc>
}
   b8042:	4620      	mov	r0, r4
   b8044:	b002      	add	sp, #8
   b8046:	bd10      	pop	{r4, pc}

000b8048 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b8048:	b510      	push	{r4, lr}
   b804a:	f100 030f 	add.w	r3, r0, #15
   b804e:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b8050:	781c      	ldrb	r4, [r3, #0]
   b8052:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8056:	4283      	cmp	r3, r0
   b8058:	f103 33ff 	add.w	r3, r3, #4294967295
   b805c:	d1f8      	bne.n	b8050 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b805e:	bd10      	pop	{r4, pc}

000b8060 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b8060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8064:	461f      	mov	r7, r3
   b8066:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b8068:	460d      	mov	r5, r1
   b806a:	2900      	cmp	r1, #0
   b806c:	d05b      	beq.n	b8126 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b806e:	b1da      	cbz	r2, b80a8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b8070:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b8074:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b8076:	f1b8 0f00 	cmp.w	r8, #0
   b807a:	d119      	bne.n	b80b0 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b807c:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b807e:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b8082:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b8084:	aa05      	add	r2, sp, #20
   b8086:	2102      	movs	r1, #2
   b8088:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b808a:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b808e:	f7ff fdeb 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b8092:	2c04      	cmp	r4, #4
   b8094:	bf28      	it	cs
   b8096:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b8098:	4622      	mov	r2, r4
   b809a:	a905      	add	r1, sp, #20
   b809c:	4628      	mov	r0, r5
   b809e:	f003 fcdb 	bl	bba58 <memcpy>
        buf[len++] = '\0';
   b80a2:	f805 8004 	strb.w	r8, [r5, r4]
   b80a6:	1c62      	adds	r2, r4, #1
}
   b80a8:	4610      	mov	r0, r2
   b80aa:	b00e      	add	sp, #56	; 0x38
   b80ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b80b0:	a901      	add	r1, sp, #4
   b80b2:	f7ff ffc9 	bl	b8048 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b80b6:	aa05      	add	r2, sp, #20
    if (stripped) {
   b80b8:	b17f      	cbz	r7, b80da <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b80ba:	2110      	movs	r1, #16
   b80bc:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b80be:	f7ff fdd3 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b80c2:	2c24      	cmp	r4, #36	; 0x24
   b80c4:	bf28      	it	cs
   b80c6:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b80c8:	4622      	mov	r2, r4
   b80ca:	a905      	add	r1, sp, #20
   b80cc:	4628      	mov	r0, r5
   b80ce:	f003 fcc3 	bl	bba58 <memcpy>
    buf[len++] = '\0';
   b80d2:	2300      	movs	r3, #0
   b80d4:	552b      	strb	r3, [r5, r4]
   b80d6:	1c62      	adds	r2, r4, #1
    return len;
   b80d8:	e7e6      	b.n	b80a8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b80da:	2104      	movs	r1, #4
   b80dc:	eb0d 0001 	add.w	r0, sp, r1
   b80e0:	f7ff fdc2 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b80e4:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b80e6:	f10d 021d 	add.w	r2, sp, #29
   b80ea:	2102      	movs	r1, #2
   b80ec:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b80ee:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b80f2:	f7ff fdb9 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b80f6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b80fa:	2102      	movs	r1, #2
   b80fc:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b8100:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b8104:	f7ff fdb0 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b8108:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b810c:	2102      	movs	r1, #2
   b810e:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b8110:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b8114:	f7ff fda8 	bl	b7c68 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b8118:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b811c:	aa0b      	add	r2, sp, #44	; 0x2c
   b811e:	2106      	movs	r1, #6
   b8120:	f10d 000e 	add.w	r0, sp, #14
   b8124:	e7cb      	b.n	b80be <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b8126:	460a      	mov	r2, r1
   b8128:	e7be      	b.n	b80a8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b812a <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b812a:	b510      	push	{r4, lr}
   b812c:	b08a      	sub	sp, #40	; 0x28
   b812e:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b8130:	2300      	movs	r3, #0
   b8132:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b8134:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b8136:	4669      	mov	r1, sp
   b8138:	f7ff ff92 	bl	b8060 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b813c:	4669      	mov	r1, sp
   b813e:	4620      	mov	r0, r4
   b8140:	f7ff fba9 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8144:	4620      	mov	r0, r4
   b8146:	b00a      	add	sp, #40	; 0x28
   b8148:	bd10      	pop	{r4, pc}

000b814a <_ZNK8particle18BleAdvertisingData3getEPhj>:
size_t BleAdvertisingData::get(uint8_t* buf, size_t len) const {
   b814a:	b510      	push	{r4, lr}
   b814c:	4603      	mov	r3, r0
        len = std::min(len, (size_t)selfData_.size());
   b814e:	6844      	ldr	r4, [r0, #4]
    if (buf != nullptr) {
   b8150:	4608      	mov	r0, r1
   b8152:	b131      	cbz	r1, b8162 <_ZNK8particle18BleAdvertisingData3getEPhj+0x18>
    }
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
   b8154:	4294      	cmp	r4, r2
   b8156:	bf28      	it	cs
   b8158:	4614      	movcs	r4, r2
        memcpy(buf, selfData_.data(), len);
   b815a:	6819      	ldr	r1, [r3, #0]
   b815c:	4622      	mov	r2, r4
   b815e:	f003 fc7b 	bl	bba58 <memcpy>
}
   b8162:	4620      	mov	r0, r4
   b8164:	bd10      	pop	{r4, pc}

000b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b8166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8168:	4605      	mov	r5, r0
   b816a:	4616      	mov	r6, r2
   b816c:	461f      	mov	r7, r3
   b816e:	460a      	mov	r2, r1
   b8170:	ab01      	add	r3, sp, #4
   b8172:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8176:	f7ff fcf7 	bl	b7b68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b817a:	f030 0402 	bics.w	r4, r0, #2
   b817e:	d00c      	beq.n	b819a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b8180:	1e84      	subs	r4, r0, #2
   b8182:	42bc      	cmp	r4, r7
   b8184:	bf28      	it	cs
   b8186:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b8188:	b13e      	cbz	r6, b819a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b818a:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b818c:	682b      	ldr	r3, [r5, #0]
   b818e:	3102      	adds	r1, #2
   b8190:	4622      	mov	r2, r4
   b8192:	4419      	add	r1, r3
   b8194:	4630      	mov	r0, r6
   b8196:	f003 fc5f 	bl	bba58 <memcpy>
}
   b819a:	4620      	mov	r0, r4
   b819c:	b003      	add	sp, #12
   b819e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b81a0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b81a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b81a2:	4613      	mov	r3, r2
   b81a4:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b81a6:	9201      	str	r2, [sp, #4]
   b81a8:	460a      	mov	r2, r1
   b81aa:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b81ac:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b81ae:	f7ff ffda 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b81b2:	b940      	cbnz	r0, b81c6 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b81b4:	9b01      	ldr	r3, [sp, #4]
   b81b6:	4622      	mov	r2, r4
   b81b8:	2109      	movs	r1, #9
   b81ba:	4628      	mov	r0, r5
}
   b81bc:	b003      	add	sp, #12
   b81be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b81c2:	f7ff bfd0 	b.w	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b81c6:	b003      	add	sp, #12
   b81c8:	bd30      	pop	{r4, r5, pc}
	...

000b81cc <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b81cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b81ce:	460c      	mov	r4, r1
   b81d0:	b089      	sub	sp, #36	; 0x24
    String name;
   b81d2:	490c      	ldr	r1, [pc, #48]	; (b8204 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b81d4:	4605      	mov	r5, r0
    String name;
   b81d6:	f7ff fb5e 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b81da:	221f      	movs	r2, #31
   b81dc:	4669      	mov	r1, sp
   b81de:	4620      	mov	r0, r4
   b81e0:	f7ff ffde 	bl	b81a0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b81e4:	4606      	mov	r6, r0
   b81e6:	b150      	cbz	r0, b81fe <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b81e8:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b81ea:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b81ec:	f814 1b01 	ldrb.w	r1, [r4], #1
   b81f0:	4628      	mov	r0, r5
   b81f2:	f7ff fbcf 	bl	b7994 <_ZN6String6concatEc>
   b81f6:	b110      	cbz	r0, b81fe <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b81f8:	3701      	adds	r7, #1
   b81fa:	42be      	cmp	r6, r7
   b81fc:	d1f6      	bne.n	b81ec <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b81fe:	4628      	mov	r0, r5
   b8200:	b009      	add	sp, #36	; 0x24
   b8202:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8204:	000bc5c4 	.word	0x000bc5c4

000b8208 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b8208:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b820a:	460a      	mov	r2, r1
   b820c:	21ff      	movs	r1, #255	; 0xff
   b820e:	f7ff bfaa 	b.w	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b8212 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b8212:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b8214:	2302      	movs	r3, #2
   b8216:	aa01      	add	r2, sp, #4
   b8218:	2119      	movs	r1, #25
   b821a:	f7ff ffa4 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b821e:	b108      	cbz	r0, b8224 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b8220:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b8224:	b003      	add	sp, #12
   b8226:	f85d fb04 	ldr.w	pc, [sp], #4

000b822a <_ZNK8particle18BleAdvertisingData8containsENS_22BleAdvertisingDataTypeE>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
   b822a:	b507      	push	{r0, r1, r2, lr}
   b822c:	460a      	mov	r2, r1
    if (offset == nullptr) {
   b822e:	ab01      	add	r3, sp, #4
   b8230:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8234:	f7ff fc98 	bl	b7b68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
}
   b8238:	3800      	subs	r0, #0
   b823a:	bf18      	it	ne
   b823c:	2001      	movne	r0, #1
   b823e:	b003      	add	sp, #12
   b8240:	f85d fb04 	ldr.w	pc, [sp], #4

000b8244 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8244:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8246:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b824a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b824c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b824e:	8043      	strh	r3, [r0, #2]
   b8250:	220e      	movs	r2, #14
   b8252:	4629      	mov	r1, r5
   b8254:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8256:	7105      	strb	r5, [r0, #4]
   b8258:	3006      	adds	r0, #6
   b825a:	f003 fc25 	bl	bbaa8 <memset>
   b825e:	f104 0014 	add.w	r0, r4, #20
   b8262:	f7ff fe0b 	bl	b7e7c <_ZN8particle7BleUuidC1Ev>
   b8266:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b826a:	f7ff fe07 	bl	b7e7c <_ZN8particle7BleUuidC1Ev>
   b826e:	4904      	ldr	r1, [pc, #16]	; (b8280 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8270:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8274:	f7ff fb0f 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8278:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b827a:	4620      	mov	r0, r4
   b827c:	bd38      	pop	{r3, r4, r5, pc}
   b827e:	bf00      	nop
   b8280:	000bc5c4 	.word	0x000bc5c4

000b8284 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b8284:	b538      	push	{r3, r4, r5, lr}
      { return _M_ptr; }
   b8286:	680d      	ldr	r5, [r1, #0]
   b8288:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b828a:	4601      	mov	r1, r0
   b828c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b8290:	f7ff fe4f 	bl	b7f32 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b8294:	b140      	cbz	r0, b82a8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b8296:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b8298:	8aa2      	ldrh	r2, [r4, #20]
   b829a:	429a      	cmp	r2, r3
   b829c:	d805      	bhi.n	b82aa <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b829e:	8ae0      	ldrh	r0, [r4, #22]
   b82a0:	4298      	cmp	r0, r3
   b82a2:	bf34      	ite	cc
   b82a4:	2000      	movcc	r0, #0
   b82a6:	2001      	movcs	r0, #1
    }
   b82a8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b82aa:	2000      	movs	r0, #0
   b82ac:	e7fc      	b.n	b82a8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b82ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b82ae:	b510      	push	{r4, lr}
    return data_ + size_;
   b82b0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b82b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b82b8:	4293      	cmp	r3, r2
   b82ba:	4618      	mov	r0, r3
   b82bc:	d006      	beq.n	b82cc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b82be:	6804      	ldr	r4, [r0, #0]
   b82c0:	8824      	ldrh	r4, [r4, #0]
   b82c2:	428c      	cmp	r4, r1
   b82c4:	f103 0308 	add.w	r3, r3, #8
   b82c8:	d1f6      	bne.n	b82b8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b82ca:	bd10      	pop	{r4, pc}
        return nullptr;
   b82cc:	2000      	movs	r0, #0
   b82ce:	e7fc      	b.n	b82ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b82d0 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b82d0:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b82d2:	b570      	push	{r4, r5, r6, lr}
   b82d4:	6003      	str	r3, [r0, #0]
   b82d6:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b82d8:	2068      	movs	r0, #104	; 0x68
   b82da:	f7fb feda 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b82de:	1e04      	subs	r4, r0, #0
   b82e0:	f104 060c 	add.w	r6, r4, #12
   b82e4:	d007      	beq.n	b82f6 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b82e6:	2301      	movs	r3, #1
   b82e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b82ec:	4b04      	ldr	r3, [pc, #16]	; (b8300 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b82ee:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b82f0:	4630      	mov	r0, r6
   b82f2:	f7ff ffa7 	bl	b8244 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b82f6:	e9c5 6400 	strd	r6, r4, [r5]
}
   b82fa:	4628      	mov	r0, r5
   b82fc:	bd70      	pop	{r4, r5, r6, pc}
   b82fe:	bf00      	nop
   b8300:	000bc324 	.word	0x000bc324

000b8304 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b8304:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b8306:	680c      	ldr	r4, [r1, #0]
   b8308:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b830a:	4606      	mov	r6, r0
    return impl()->charUUID();
   b830c:	4605      	mov	r5, r0
   b830e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8312:	6823      	ldr	r3, [r4, #0]
   b8314:	602b      	str	r3, [r5, #0]
}
   b8316:	4630      	mov	r0, r6
   b8318:	bd70      	pop	{r4, r5, r6, pc}
	...

000b831c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b831c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b831e:	4606      	mov	r6, r0
   b8320:	b085      	sub	sp, #20
   b8322:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8324:	460d      	mov	r5, r1
   b8326:	2900      	cmp	r1, #0
   b8328:	d050      	beq.n	b83cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b832a:	2a00      	cmp	r2, #0
   b832c:	d04e      	beq.n	b83cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b832e:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b8330:	7823      	ldrb	r3, [r4, #0]
   b8332:	2af4      	cmp	r2, #244	; 0xf4
   b8334:	bf28      	it	cs
   b8336:	22f4      	movcs	r2, #244	; 0xf4
   b8338:	b343      	cbz	r3, b838c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b833a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b833c:	0798      	lsls	r0, r3, #30
   b833e:	d509      	bpl.n	b8354 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b8340:	89a0      	ldrh	r0, [r4, #12]
   b8342:	9203      	str	r2, [sp, #12]
   b8344:	2300      	movs	r3, #0
   b8346:	f7fe ff43 	bl	b71d0 <hal_ble_gatt_server_set_characteristic_value>
   b834a:	2800      	cmp	r0, #0
   b834c:	9a03      	ldr	r2, [sp, #12]
   b834e:	da03      	bge.n	b8358 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b8350:	b005      	add	sp, #20
   b8352:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b8354:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8358:	6834      	ldr	r4, [r6, #0]
   b835a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b835c:	06d9      	lsls	r1, r3, #27
   b835e:	d509      	bpl.n	b8374 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b8360:	2f01      	cmp	r7, #1
   b8362:	d007      	beq.n	b8374 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8364:	89a0      	ldrh	r0, [r4, #12]
   b8366:	2300      	movs	r3, #0
   b8368:	4629      	mov	r1, r5
}
   b836a:	b005      	add	sp, #20
   b836c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8370:	f7fe bf88 	b.w	b7284 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b8374:	069b      	lsls	r3, r3, #26
   b8376:	d5eb      	bpl.n	b8350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8378:	2f02      	cmp	r7, #2
   b837a:	d0e9      	beq.n	b8350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b837c:	89a0      	ldrh	r0, [r4, #12]
   b837e:	2300      	movs	r3, #0
   b8380:	4629      	mov	r1, r5
}
   b8382:	b005      	add	sp, #20
   b8384:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8388:	f7fe bf86 	b.w	b7298 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b838c:	8860      	ldrh	r0, [r4, #2]
   b838e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8392:	4288      	cmp	r0, r1
   b8394:	d01c      	beq.n	b83d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b8396:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b8398:	074e      	lsls	r6, r1, #29
   b839a:	d501      	bpl.n	b83a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b839c:	2f01      	cmp	r7, #1
   b839e:	d104      	bne.n	b83aa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b83a0:	070b      	lsls	r3, r1, #28
   b83a2:	d409      	bmi.n	b83b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b83a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b83a8:	e7d2      	b.n	b8350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b83aa:	89a1      	ldrh	r1, [r4, #12]
   b83ac:	9300      	str	r3, [sp, #0]
   b83ae:	4613      	mov	r3, r2
   b83b0:	462a      	mov	r2, r5
   b83b2:	f7fe ff35 	bl	b7220 <hal_ble_gatt_client_write_without_response>
   b83b6:	e7cb      	b.n	b8350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b83b8:	2f02      	cmp	r7, #2
   b83ba:	d0f3      	beq.n	b83a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b83bc:	2300      	movs	r3, #0
   b83be:	89a1      	ldrh	r1, [r4, #12]
   b83c0:	9300      	str	r3, [sp, #0]
   b83c2:	4613      	mov	r3, r2
   b83c4:	462a      	mov	r2, r5
   b83c6:	f7fe ff21 	bl	b720c <hal_ble_gatt_client_write_with_response>
   b83ca:	e7c1      	b.n	b8350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b83cc:	4802      	ldr	r0, [pc, #8]	; (b83d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b83ce:	e7bf      	b.n	b8350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b83d0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b83d4:	e7bc      	b.n	b8350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b83d6:	bf00      	nop
   b83d8:	fffffef2 	.word	0xfffffef2

000b83dc <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b83dc:	b510      	push	{r4, lr}
   b83de:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b83e0:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b83e2:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b83e4:	bb52      	cbnz	r2, b843c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b83e6:	885c      	ldrh	r4, [r3, #2]
   b83e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b83ec:	4284      	cmp	r4, r0
   b83ee:	d025      	beq.n	b843c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b83f0:	8a18      	ldrh	r0, [r3, #16]
   b83f2:	b330      	cbz	r0, b8442 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b83f4:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b83f8:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b83fa:	4a13      	ldr	r2, [pc, #76]	; (b8448 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b83fc:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b83fe:	4a13      	ldr	r2, [pc, #76]	; (b844c <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b8400:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b8404:	885a      	ldrh	r2, [r3, #2]
   b8406:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b840a:	8a1a      	ldrh	r2, [r3, #16]
   b840c:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b8410:	899a      	ldrh	r2, [r3, #12]
   b8412:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b8416:	b159      	cbz	r1, b8430 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b8418:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b841a:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b841c:	bf44      	itt	mi
   b841e:	2202      	movmi	r2, #2
   b8420:	9205      	strmi	r2, [sp, #20]
   b8422:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b8424:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b8426:	bf42      	ittt	mi
   b8428:	9b05      	ldrmi	r3, [sp, #20]
   b842a:	f043 0301 	orrmi.w	r3, r3, #1
   b842e:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b8430:	2100      	movs	r1, #0
   b8432:	4668      	mov	r0, sp
   b8434:	f7fe ff1c 	bl	b7270 <hal_ble_gatt_client_configure_cccd>
}
   b8438:	b006      	add	sp, #24
   b843a:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b843c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8440:	e7fa      	b.n	b8438 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b8442:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8446:	e7f7      	b.n	b8438 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b8448:	00180003 	.word	0x00180003
   b844c:	000b8621 	.word	0x000b8621

000b8450 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b8450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8452:	2600      	movs	r6, #0
   b8454:	6006      	str	r6, [r0, #0]
   b8456:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8458:	2028      	movs	r0, #40	; 0x28
   b845a:	f7fb fe1a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b845e:	1e04      	subs	r4, r0, #0
   b8460:	f104 070c 	add.w	r7, r4, #12
   b8464:	d00a      	beq.n	b847c <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8466:	2301      	movs	r3, #1
   b8468:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b846c:	4b05      	ldr	r3, [pc, #20]	; (b8484 <_ZN8particle10BleServiceC1Ev+0x34>)
   b846e:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b8470:	4638      	mov	r0, r7
   b8472:	f7ff fd03 	bl	b7e7c <_ZN8particle7BleUuidC1Ev>
   b8476:	6226      	str	r6, [r4, #32]
   b8478:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b847c:	e9c5 7400 	strd	r7, r4, [r5]
}
   b8480:	4628      	mov	r0, r5
   b8482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8484:	000bc340 	.word	0x000bc340

000b8488 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8488:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b848a:	2500      	movs	r5, #0
   b848c:	6005      	str	r5, [r0, #0]
   b848e:	4606      	mov	r6, r0
   b8490:	2030      	movs	r0, #48	; 0x30
   b8492:	f7fb fdfe 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b8496:	4604      	mov	r4, r0
   b8498:	b188      	cbz	r0, b84be <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b849a:	2301      	movs	r3, #1
   b849c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b84a0:	4b09      	ldr	r3, [pc, #36]	; (b84c8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b84a2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b84a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b84a8:	8183      	strh	r3, [r0, #12]
   b84aa:	300e      	adds	r0, #14
   b84ac:	f7ff fc6f 	bl	b7d8e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b84b0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b84b4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b84b8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b84bc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b84be:	6074      	str	r4, [r6, #4]
   b84c0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b84c2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b84c4:	4630      	mov	r0, r6
   b84c6:	bd70      	pop	{r4, r5, r6, pc}
   b84c8:	000bc35c 	.word	0x000bc35c

000b84cc <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b84cc:	b513      	push	{r0, r1, r4, lr}
   b84ce:	4604      	mov	r4, r0
    WiringBleLock lk;
   b84d0:	a801      	add	r0, sp, #4
   b84d2:	f7ff fc17 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b84d6:	6823      	ldr	r3, [r4, #0]
   b84d8:	881c      	ldrh	r4, [r3, #0]
   b84da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b84de:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b84e0:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b84e2:	bf18      	it	ne
   b84e4:	2401      	movne	r4, #1
    WiringBleLock lk;
   b84e6:	f7ff fc1b 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b84ea:	4620      	mov	r0, r4
   b84ec:	b002      	add	sp, #8
   b84ee:	bd10      	pop	{r4, pc}

000b84f0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b84f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b84f2:	4605      	mov	r5, r0
   b84f4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b84f6:	a801      	add	r0, sp, #4
   b84f8:	f7ff fc04 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b84fc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b84fe:	6823      	ldr	r3, [r4, #0]
   b8500:	f8c2 3002 	str.w	r3, [r2, #2]
   b8504:	6863      	ldr	r3, [r4, #4]
   b8506:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b850a:	a801      	add	r0, sp, #4
   b850c:	f7ff fc08 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b8510:	b003      	add	sp, #12
   b8512:	bd30      	pop	{r4, r5, pc}

000b8514 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b8514:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8516:	460d      	mov	r5, r1
   b8518:	4604      	mov	r4, r0
    WiringBleLock lk;
   b851a:	a801      	add	r0, sp, #4
   b851c:	f7ff fbf2 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
   b8520:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8522:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b8526:	6023      	str	r3, [r4, #0]
   b8528:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b852c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b852e:	a801      	add	r0, sp, #4
   b8530:	f7ff fbf6 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8534:	4620      	mov	r0, r4
   b8536:	b003      	add	sp, #12
   b8538:	bd30      	pop	{r4, r5, pc}

000b853a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b853a:	b530      	push	{r4, r5, lr}
   b853c:	4605      	mov	r5, r0
   b853e:	b087      	sub	sp, #28
   b8540:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8542:	a801      	add	r0, sp, #4
   b8544:	f7ff fbde 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8548:	682a      	ldr	r2, [r5, #0]
   b854a:	6823      	ldr	r3, [r4, #0]
   b854c:	8812      	ldrh	r2, [r2, #0]
   b854e:	881b      	ldrh	r3, [r3, #0]
   b8550:	429a      	cmp	r2, r3
   b8552:	d10d      	bne.n	b8570 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8554:	4629      	mov	r1, r5
   b8556:	a802      	add	r0, sp, #8
   b8558:	f7ff ffdc 	bl	b8514 <_ZNK8particle13BlePeerDevice7addressEv>
   b855c:	4621      	mov	r1, r4
   b855e:	a804      	add	r0, sp, #16
   b8560:	f7ff ffd8 	bl	b8514 <_ZNK8particle13BlePeerDevice7addressEv>
   b8564:	a904      	add	r1, sp, #16
   b8566:	a802      	add	r0, sp, #8
   b8568:	f7ff fbfd 	bl	b7d66 <_ZNK8particle10BleAddresseqERKS0_>
   b856c:	4604      	mov	r4, r0
   b856e:	b900      	cbnz	r0, b8572 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8570:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8572:	a801      	add	r0, sp, #4
   b8574:	f7ff fbd4 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8578:	4620      	mov	r0, r4
   b857a:	b007      	add	sp, #28
   b857c:	bd30      	pop	{r4, r5, pc}
	...

000b8580 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8580:	b510      	push	{r4, lr}
   b8582:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8584:	2064      	movs	r0, #100	; 0x64
   b8586:	f7fb fd84 	bl	b4092 <_Znwj>
   b858a:	b168      	cbz	r0, b85a8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b858c:	2300      	movs	r3, #0
   b858e:	e9c0 3300 	strd	r3, r3, [r0]
   b8592:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8596:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b859a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b859e:	6203      	str	r3, [r0, #32]
   b85a0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b85a2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b85a4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b85a6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b85a8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b85aa:	b920      	cbnz	r0, b85b6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b85ac:	4a0a      	ldr	r2, [pc, #40]	; (b85d8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b85ae:	490b      	ldr	r1, [pc, #44]	; (b85dc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b85b0:	200a      	movs	r0, #10
   b85b2:	f7fe ff3d 	bl	b7430 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b85b6:	2000      	movs	r0, #0
   b85b8:	f7fe fdd6 	bl	b7168 <hal_ble_stack_init>
   b85bc:	b120      	cbz	r0, b85c8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b85be:	4a06      	ldr	r2, [pc, #24]	; (b85d8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b85c0:	4907      	ldr	r1, [pc, #28]	; (b85e0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b85c2:	200a      	movs	r0, #10
   b85c4:	f7fe ff34 	bl	b7430 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b85c8:	6821      	ldr	r1, [r4, #0]
   b85ca:	4806      	ldr	r0, [pc, #24]	; (b85e4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b85cc:	2200      	movs	r2, #0
   b85ce:	f7fe fe45 	bl	b725c <hal_ble_set_callback_on_periph_link_events>
}
   b85d2:	4620      	mov	r0, r4
   b85d4:	bd10      	pop	{r4, pc}
   b85d6:	bf00      	nop
   b85d8:	000b7119 	.word	0x000b7119
   b85dc:	000bc100 	.word	0x000bc100
   b85e0:	000bc13e 	.word	0x000bc13e
   b85e4:	000b8f0d 	.word	0x000b8f0d

000b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b85e8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b85ea:	4c0a      	ldr	r4, [pc, #40]	; (b8614 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b85ec:	7823      	ldrb	r3, [r4, #0]
   b85ee:	f3bf 8f5b 	dmb	ish
   b85f2:	07db      	lsls	r3, r3, #31
   b85f4:	d40c      	bmi.n	b8610 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b85f6:	4620      	mov	r0, r4
   b85f8:	f7fb fd51 	bl	b409e <__cxa_guard_acquire>
   b85fc:	b140      	cbz	r0, b8610 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b85fe:	4806      	ldr	r0, [pc, #24]	; (b8618 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8600:	f7ff ffbe 	bl	b8580 <_ZN8particle14BleLocalDeviceC1Ev>
   b8604:	4620      	mov	r0, r4
   b8606:	f7fb fd4f 	bl	b40a8 <__cxa_guard_release>
   b860a:	4804      	ldr	r0, [pc, #16]	; (b861c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b860c:	f003 fa06 	bl	bba1c <atexit>
    return instance;
}
   b8610:	4801      	ldr	r0, [pc, #4]	; (b8618 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8612:	bd10      	pop	{r4, pc}
   b8614:	2003e6dc 	.word	0x2003e6dc
   b8618:	2003e6e4 	.word	0x2003e6e4
   b861c:	000b8879 	.word	0x000b8879

000b8620 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8620:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8622:	6803      	ldr	r3, [r0, #0]
   b8624:	3b09      	subs	r3, #9
   b8626:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8628:	b08d      	sub	sp, #52	; 0x34
   b862a:	4604      	mov	r4, r0
   b862c:	460d      	mov	r5, r1
    switch (event->type) {
   b862e:	d811      	bhi.n	b8654 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8630:	f7ff ffda 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8634:	88a1      	ldrh	r1, [r4, #4]
   b8636:	6800      	ldr	r0, [r0, #0]
   b8638:	f7ff fe39 	bl	b82ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b863c:	4603      	mov	r3, r0
   b863e:	b958      	cbnz	r0, b8658 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8640:	2220      	movs	r2, #32
   b8642:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b8646:	4a0b      	ldr	r2, [pc, #44]	; (b8674 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8648:	9200      	str	r2, [sp, #0]
   b864a:	490b      	ldr	r1, [pc, #44]	; (b8678 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b864c:	aa04      	add	r2, sp, #16
   b864e:	2032      	movs	r0, #50	; 0x32
   b8650:	f7fe fef6 	bl	b7440 <log_message>
}
   b8654:	b00d      	add	sp, #52	; 0x34
   b8656:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8658:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b865a:	2a00      	cmp	r2, #0
   b865c:	d0fa      	beq.n	b8654 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b865e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8662:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8666:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b866a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b866c:	aa04      	add	r2, sp, #16
   b866e:	a903      	add	r1, sp, #12
   b8670:	47a0      	blx	r4
}
   b8672:	e7ef      	b.n	b8654 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8674:	000bc180 	.word	0x000bc180
   b8678:	000bc117 	.word	0x000bc117

000b867c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b867c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b867e:	2000      	movs	r0, #0
   b8680:	f7fe fd72 	bl	b7168 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8684:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8688:	bd08      	pop	{r3, pc}

000b868a <_ZN8particle16BleScanDelegatorC1Ev>:
   b868a:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b868c:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b8690:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b8694:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8698:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b869c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b86a0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b86a4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b86a8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b86ac:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b86b0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b86b4:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b86b8:	6202      	str	r2, [r0, #32]
   b86ba:	6302      	str	r2, [r0, #48]	; 0x30
   b86bc:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b86c0:	4770      	bx	lr

000b86c2 <_ZNK8particle14BleLocalDevice17setScanParametersEPKNS_13BleScanParamsE>:
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.scan_phys = static_cast<uint8_t>(phy.value());
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}

int BleLocalDevice::setScanParameters(const BleScanParams* params) const {
   b86c2:	4608      	mov	r0, r1
    return hal_ble_gap_set_scan_parameters(params, nullptr);
   b86c4:	2100      	movs	r1, #0
   b86c6:	f7fe bd57 	b.w	b7178 <hal_ble_gap_set_scan_parameters>

000b86ca <_ZNK8particle14BleLocalDevice17getScanParametersEPNS_13BleScanParamsE>:

int BleLocalDevice::setScanParameters(const BleScanParams& params) const {
    return setScanParameters(&params);
}

int BleLocalDevice::getScanParameters(BleScanParams* params) const {
   b86ca:	4608      	mov	r0, r1
    return hal_ble_gap_get_scan_parameters(params, nullptr);
   b86cc:	2100      	movs	r1, #0
   b86ce:	f7fe bd5b 	b.w	b7188 <hal_ble_gap_get_scan_parameters>

000b86d2 <_ZNK8particle14BleLocalDevice12startPairingERKNS_13BlePeerDeviceE>:
    config.algorithm = static_cast<hal_ble_pairing_algorithm_t>(algorithm);
    return hal_ble_gap_set_pairing_config(&config, nullptr);
}

int BleLocalDevice::startPairing(const BlePeerDevice& peer) const {
    return hal_ble_gap_start_pairing(peer.impl()->connHandle(), nullptr);
   b86d2:	680b      	ldr	r3, [r1, #0]
   b86d4:	2100      	movs	r1, #0
   b86d6:	8818      	ldrh	r0, [r3, #0]
   b86d8:	f7fe bde8 	b.w	b72ac <hal_ble_gap_start_pairing>

000b86dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b86dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b86de:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b86e2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b86e4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b86e8:	42ae      	cmp	r6, r5
   b86ea:	d004      	beq.n	b86f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b86ec:	4628      	mov	r0, r5
   b86ee:	f7ff f887 	bl	b7800 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b86f2:	3510      	adds	r5, #16
   b86f4:	e7f8      	b.n	b86e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b86f6:	6820      	ldr	r0, [r4, #0]
   b86f8:	f7fe ff96 	bl	b7628 <free>
}
   b86fc:	4620      	mov	r0, r4
   b86fe:	bd70      	pop	{r4, r5, r6, pc}

000b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8700:	b510      	push	{r4, lr}
   b8702:	4604      	mov	r4, r0
    ::free(ptr);
   b8704:	6800      	ldr	r0, [r0, #0]
   b8706:	f7fe ff8f 	bl	b7628 <free>
}
   b870a:	4620      	mov	r0, r4
   b870c:	bd10      	pop	{r4, pc}

000b870e <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b870e:	b570      	push	{r4, r5, r6, lr}
   b8710:	4604      	mov	r4, r0
    ::free(ptr);
   b8712:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8714:	f7fe ff88 	bl	b7628 <free>
   b8718:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b871a:	f7fe ff85 	bl	b7628 <free>
    }
    ~BleScanFilter() = default;
   b871e:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b8722:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8726:	f7ff ffeb 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b872a:	4628      	mov	r0, r5
   b872c:	f7ff ffd6 	bl	b86dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b8730:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8734:	f7fc fbac 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
   b8738:	f104 0018 	add.w	r0, r4, #24
   b873c:	f7fc fba8 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8740:	e9d4 5300 	ldrd	r5, r3, [r4]
   b8744:	2624      	movs	r6, #36	; 0x24
   b8746:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b874a:	42ae      	cmp	r6, r5
   b874c:	d004      	beq.n	b8758 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b874e:	4628      	mov	r0, r5
   b8750:	f7fd fd9d 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b8754:	3524      	adds	r5, #36	; 0x24
   b8756:	e7f8      	b.n	b874a <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b8758:	6820      	ldr	r0, [r4, #0]
   b875a:	f7fe ff65 	bl	b7628 <free>
   b875e:	4620      	mov	r0, r4
   b8760:	bd70      	pop	{r4, r5, r6, pc}

000b8762 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8762:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8764:	1e14      	subs	r4, r2, #0
   b8766:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8768:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b876a:	db02      	blt.n	b8772 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b876c:	1862      	adds	r2, r4, r1
   b876e:	429a      	cmp	r2, r3
   b8770:	dd00      	ble.n	b8774 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8772:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8774:	682a      	ldr	r2, [r5, #0]
   b8776:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8778:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b877a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b877c:	1a52      	subs	r2, r2, r1
   b877e:	f003 f979 	bl	bba74 <memmove>
    size_ -= n;
   b8782:	686a      	ldr	r2, [r5, #4]
   b8784:	1b12      	subs	r2, r2, r4
   b8786:	606a      	str	r2, [r5, #4]
}
   b8788:	bd38      	pop	{r3, r4, r5, pc}
	...

000b878c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b878c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b878e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8790:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8792:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8794:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8796:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8798:	f7fb fc7b 	bl	b4092 <_Znwj>
   b879c:	b118      	cbz	r0, b87a6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
      _Bind(_Bind&&) = default;
   b879e:	682b      	ldr	r3, [r5, #0]
   b87a0:	6003      	str	r3, [r0, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b87a2:	686b      	ldr	r3, [r5, #4]
   b87a4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b87a6:	4b03      	ldr	r3, [pc, #12]	; (b87b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b87a8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b87aa:	4b03      	ldr	r3, [pc, #12]	; (b87b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b87ac:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b87ae:	60a3      	str	r3, [r4, #8]
      }
   b87b0:	4620      	mov	r0, r4
   b87b2:	bd38      	pop	{r3, r4, r5, pc}
   b87b4:	000b7ba9 	.word	0x000b7ba9
   b87b8:	000b7bc1 	.word	0x000b7bc1

000b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b87bc:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b87be:	f851 3b04 	ldr.w	r3, [r1], #4
   b87c2:	4604      	mov	r4, r0
   b87c4:	f840 3b04 	str.w	r3, [r0], #4
   b87c8:	f7fc fc9c 	bl	b5104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b87cc:	6823      	ldr	r3, [r4, #0]
   b87ce:	b90b      	cbnz	r3, b87d4 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b87d0:	f7ff f9e0 	bl	b7b94 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b87d4:	4620      	mov	r0, r4
   b87d6:	bd10      	pop	{r4, pc}

000b87d8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b87d8:	b510      	push	{r4, lr}
   b87da:	f851 3b04 	ldr.w	r3, [r1], #4
   b87de:	4604      	mov	r4, r0
   b87e0:	f840 3b04 	str.w	r3, [r0], #4
   b87e4:	f7fc fc8e 	bl	b5104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b87e8:	4620      	mov	r0, r4
   b87ea:	bd10      	pop	{r4, pc}

000b87ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b87ec:	b510      	push	{r4, lr}
   b87ee:	f851 3b04 	ldr.w	r3, [r1], #4
   b87f2:	4604      	mov	r4, r0
   b87f4:	f840 3b04 	str.w	r3, [r0], #4
   b87f8:	f7fc fc84 	bl	b5104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b87fc:	4620      	mov	r0, r4
   b87fe:	bd10      	pop	{r4, pc}

000b8800 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8800:	b510      	push	{r4, lr}
   b8802:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8804:	3004      	adds	r0, #4
   b8806:	f7fc fc75 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b880a:	4620      	mov	r0, r4
   b880c:	bd10      	pop	{r4, pc}

000b880e <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b880e:	b510      	push	{r4, lr}
   b8810:	4604      	mov	r4, r0
   b8812:	3004      	adds	r0, #4
   b8814:	f7fc fc6e 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8818:	4620      	mov	r0, r4
   b881a:	bd10      	pop	{r4, pc}

000b881c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b881c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b881e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8822:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8824:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8828:	42ae      	cmp	r6, r5
   b882a:	d004      	beq.n	b8836 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b882c:	1d28      	adds	r0, r5, #4
   b882e:	f7fc fc61 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8832:	3508      	adds	r5, #8
   b8834:	e7f8      	b.n	b8828 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8836:	6820      	ldr	r0, [r4, #0]
   b8838:	f7fe fef6 	bl	b7628 <free>
}
   b883c:	4620      	mov	r0, r4
   b883e:	bd70      	pop	{r4, r5, r6, pc}

000b8840 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8840:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8842:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8846:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8848:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b884c:	42ae      	cmp	r6, r5
   b884e:	d004      	beq.n	b885a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8850:	1d28      	adds	r0, r5, #4
   b8852:	f7fc fc4f 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8856:	3508      	adds	r5, #8
   b8858:	e7f8      	b.n	b884c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b885a:	6820      	ldr	r0, [r4, #0]
   b885c:	f7fe fee4 	bl	b7628 <free>
}
   b8860:	4620      	mov	r0, r4
   b8862:	bd70      	pop	{r4, r5, r6, pc}

000b8864 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8864:	b510      	push	{r4, lr}
   b8866:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8868:	3024      	adds	r0, #36	; 0x24
   b886a:	f7ff ffe9 	bl	b8840 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b886e:	f104 0018 	add.w	r0, r4, #24
   b8872:	f7ff ffd3 	bl	b881c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8876:	bd10      	pop	{r4, pc}

000b8878 <__tcf_0>:
    static BleLocalDevice instance;
   b8878:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b887a:	4b17      	ldr	r3, [pc, #92]	; (b88d8 <__tcf_0+0x60>)
   b887c:	681c      	ldr	r4, [r3, #0]
   b887e:	b354      	cbz	r4, b88d6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8880:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8884:	f7fc fb04 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
   b8888:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b888c:	f7fc fb00 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
   b8890:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8894:	f7fc fafc 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
   b8898:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b889c:	f7fc faf8 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b88a0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b88a4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b88a8:	42ae      	cmp	r6, r5
   b88aa:	d004      	beq.n	b88b6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b88ac:	1d28      	adds	r0, r5, #4
   b88ae:	f7fc fc21 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88b2:	3508      	adds	r5, #8
   b88b4:	e7f8      	b.n	b88a8 <__tcf_0+0x30>
    ::free(ptr);
   b88b6:	69a0      	ldr	r0, [r4, #24]
   b88b8:	f7fe feb6 	bl	b7628 <free>
    ~BleLocalDeviceImpl() = default;
   b88bc:	f104 000c 	add.w	r0, r4, #12
   b88c0:	f7ff ffbe 	bl	b8840 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b88c4:	4620      	mov	r0, r4
   b88c6:	f7ff ffa9 	bl	b881c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b88ca:	4620      	mov	r0, r4
   b88cc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b88ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b88d2:	f7fb bbe2 	b.w	b409a <_ZdlPvj>
   b88d6:	bd70      	pop	{r4, r5, r6, pc}
   b88d8:	2003e6e4 	.word	0x2003e6e4

000b88dc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b88dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b88de:	b510      	push	{r4, lr}
      if (_M_empty())
   b88e0:	b90a      	cbnz	r2, b88e6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b88e2:	f002 fc22 	bl	bb12a <_ZSt25__throw_bad_function_callv>
    }
   b88e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b88ea:	68c3      	ldr	r3, [r0, #12]
   b88ec:	4718      	bx	r3

000b88ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b88ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b88f2:	2300      	movs	r3, #0
   b88f4:	e9c0 3300 	strd	r3, r3, [r0]
   b88f8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b88fa:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b88fe:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8900:	4605      	mov	r5, r0
   b8902:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8904:	dd4a      	ble.n	b899c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b8906:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b890a:	f7fe fe85 	bl	b7618 <malloc>
            if (!d) {
   b890e:	4606      	mov	r6, r0
   b8910:	2800      	cmp	r0, #0
   b8912:	d043      	beq.n	b899c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b8914:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b8918:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b891a:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b891e:	d916      	bls.n	b894e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b8920:	4550      	cmp	r0, sl
   b8922:	d215      	bcs.n	b8950 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b8924:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b8928:	f1a4 0910 	sub.w	r9, r4, #16
   b892c:	ebaa 0404 	sub.w	r4, sl, r4
   b8930:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b8932:	45d1      	cmp	r9, sl
   b8934:	d01d      	beq.n	b8972 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b8936:	b11c      	cbz	r4, b8940 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b8938:	4651      	mov	r1, sl
   b893a:	4620      	mov	r0, r4
   b893c:	f7fe ffdc 	bl	b78f8 <_ZN6StringC1EOS_>
                end->~T();
   b8940:	4650      	mov	r0, sl
   b8942:	f7fe ff5d 	bl	b7800 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8946:	f1aa 0a10 	sub.w	sl, sl, #16
   b894a:	3c10      	subs	r4, #16
   b894c:	e7f1      	b.n	b8932 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b894e:	d010      	beq.n	b8972 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b8950:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b8952:	45a2      	cmp	sl, r4
   b8954:	d00d      	beq.n	b8972 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b8956:	f1b9 0f00 	cmp.w	r9, #0
   b895a:	d003      	beq.n	b8964 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b895c:	4621      	mov	r1, r4
   b895e:	4648      	mov	r0, r9
   b8960:	f7fe ffca 	bl	b78f8 <_ZN6StringC1EOS_>
                p->~T();
   b8964:	4620      	mov	r0, r4
   b8966:	f7fe ff4b 	bl	b7800 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b896a:	3410      	adds	r4, #16
   b896c:	f109 0910 	add.w	r9, r9, #16
   b8970:	e7ef      	b.n	b8952 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b8972:	6828      	ldr	r0, [r5, #0]
   b8974:	f7fe fe58 	bl	b7628 <free>
        capacity_ = n;
   b8978:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b897c:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b897e:	e9d7 4300 	ldrd	r4, r3, [r7]
   b8982:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b8986:	45a0      	cmp	r8, r4
   b8988:	d006      	beq.n	b8998 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b898a:	4621      	mov	r1, r4
   b898c:	4630      	mov	r0, r6
   b898e:	f7fe ffcd 	bl	b792c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b8992:	3410      	adds	r4, #16
   b8994:	3610      	adds	r6, #16
   b8996:	e7f6      	b.n	b8986 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b8998:	687b      	ldr	r3, [r7, #4]
   b899a:	606b      	str	r3, [r5, #4]
}
   b899c:	4628      	mov	r0, r5
   b899e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b89a2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b89a2:	b530      	push	{r4, r5, lr}
   b89a4:	b08d      	sub	sp, #52	; 0x34
   b89a6:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b89a8:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b89ac:	a801      	add	r0, sp, #4
   b89ae:	f7ff ff9e 	bl	b88ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b89b2:	9b02      	ldr	r3, [sp, #8]
   b89b4:	2b00      	cmp	r3, #0
   b89b6:	dd2f      	ble.n	b8a18 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b89b8:	f104 0114 	add.w	r1, r4, #20
   b89bc:	a804      	add	r0, sp, #16
   b89be:	f7ff fc05 	bl	b81cc <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b89c2:	f104 0108 	add.w	r1, r4, #8
   b89c6:	a808      	add	r0, sp, #32
   b89c8:	f7ff fc00 	bl	b81cc <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b89cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b89ce:	9b06      	ldr	r3, [sp, #24]
   b89d0:	4313      	orrs	r3, r2
   b89d2:	d01f      	beq.n	b8a14 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b89d4:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b89d8:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b89dc:	42ac      	cmp	r4, r5
   b89de:	d019      	beq.n	b8a14 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b89e0:	a904      	add	r1, sp, #16
   b89e2:	4620      	mov	r0, r4
   b89e4:	f7ff f834 	bl	b7a50 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b89e8:	b160      	cbz	r0, b8a04 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b89ea:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b89ec:	a808      	add	r0, sp, #32
   b89ee:	f7fe ff07 	bl	b7800 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b89f2:	a804      	add	r0, sp, #16
   b89f4:	f7fe ff04 	bl	b7800 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b89f8:	a801      	add	r0, sp, #4
   b89fa:	f7ff fe6f 	bl	b86dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b89fe:	4620      	mov	r0, r4
   b8a00:	b00d      	add	sp, #52	; 0x34
   b8a02:	bd30      	pop	{r4, r5, pc}
   b8a04:	4620      	mov	r0, r4
   b8a06:	a908      	add	r1, sp, #32
   b8a08:	f7ff f822 	bl	b7a50 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8a0c:	3410      	adds	r4, #16
   b8a0e:	2800      	cmp	r0, #0
   b8a10:	d0e4      	beq.n	b89dc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b8a12:	e7ea      	b.n	b89ea <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b8a14:	2400      	movs	r4, #0
   b8a16:	e7e9      	b.n	b89ec <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b8a18:	2401      	movs	r4, #1
   b8a1a:	e7ed      	b.n	b89f8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b8a1c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b8a1e:	2300      	movs	r3, #0
   b8a20:	e9c0 3300 	strd	r3, r3, [r0]
   b8a24:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a26:	684f      	ldr	r7, [r1, #4]
   b8a28:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a2a:	4605      	mov	r5, r0
   b8a2c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a2e:	dd3e      	ble.n	b8aae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b8a30:	00f8      	lsls	r0, r7, #3
   b8a32:	f7fe fdf1 	bl	b7618 <malloc>
            if (!d) {
   b8a36:	4604      	mov	r4, r0
   b8a38:	b3c8      	cbz	r0, b8aae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b8a3a:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b8a3e:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b8a40:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b8a44:	d910      	bls.n	b8a68 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8a46:	429c      	cmp	r4, r3
   b8a48:	d20f      	bcs.n	b8a6a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b8a4a:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b8a4c:	1a1a      	subs	r2, r3, r0
   b8a4e:	f1a0 0c08 	sub.w	ip, r0, #8
   b8a52:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b8a54:	459c      	cmp	ip, r3
   b8a56:	d018      	beq.n	b8a8a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b8a58:	b11a      	cbz	r2, b8a62 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b8a5a:	6819      	ldr	r1, [r3, #0]
   b8a5c:	6011      	str	r1, [r2, #0]
   b8a5e:	6859      	ldr	r1, [r3, #4]
   b8a60:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b8a62:	3b08      	subs	r3, #8
   b8a64:	3a08      	subs	r2, #8
   b8a66:	e7f5      	b.n	b8a54 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b8a68:	d00f      	beq.n	b8a8a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b8a6a:	4601      	mov	r1, r0
   b8a6c:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b8a6e:	428b      	cmp	r3, r1
   b8a70:	d00b      	beq.n	b8a8a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b8a72:	b13a      	cbz	r2, b8a84 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b8a74:	f8d1 c000 	ldr.w	ip, [r1]
   b8a78:	f8c2 c000 	str.w	ip, [r2]
   b8a7c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b8a80:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b8a84:	3108      	adds	r1, #8
   b8a86:	3208      	adds	r2, #8
   b8a88:	e7f1      	b.n	b8a6e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b8a8a:	f7fe fdcd 	bl	b7628 <free>
        data_ = d;
   b8a8e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8a90:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8a92:	e9d6 3100 	ldrd	r3, r1, [r6]
   b8a96:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b8a9a:	4298      	cmp	r0, r3
   b8a9c:	d006      	beq.n	b8aac <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b8a9e:	681a      	ldr	r2, [r3, #0]
   b8aa0:	6022      	str	r2, [r4, #0]
   b8aa2:	685a      	ldr	r2, [r3, #4]
   b8aa4:	6062      	str	r2, [r4, #4]
   b8aa6:	3308      	adds	r3, #8
   b8aa8:	3408      	adds	r4, #8
   b8aaa:	e7f6      	b.n	b8a9a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b8aac:	6069      	str	r1, [r5, #4]
}
   b8aae:	4628      	mov	r0, r5
   b8ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8ab2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8ab2:	b570      	push	{r4, r5, r6, lr}
   b8ab4:	4604      	mov	r4, r0
        capacity_(0) {
   b8ab6:	2000      	movs	r0, #0
   b8ab8:	e9c4 0000 	strd	r0, r0, [r4]
   b8abc:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8abe:	684e      	ldr	r6, [r1, #4]
   b8ac0:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8ac2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8ac4:	dd12      	ble.n	b8aec <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b8ac6:	0071      	lsls	r1, r6, #1
   b8ac8:	f7fe fdb6 	bl	b7638 <realloc>
            if (!d) {
   b8acc:	b170      	cbz	r0, b8aec <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b8ace:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8ad0:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8ad2:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8ad6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b8ada:	429a      	cmp	r2, r3
   b8adc:	d004      	beq.n	b8ae8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b8ade:	f833 1b02 	ldrh.w	r1, [r3], #2
   b8ae2:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b8ae6:	e7f8      	b.n	b8ada <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8ae8:	686b      	ldr	r3, [r5, #4]
   b8aea:	6063      	str	r3, [r4, #4]
}
   b8aec:	4620      	mov	r0, r4
   b8aee:	bd70      	pop	{r4, r5, r6, pc}

000b8af0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b8af0:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8af2:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8af4:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8af6:	b923      	cbnz	r3, b8b02 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b8af8:	6803      	ldr	r3, [r0, #0]
   b8afa:	6818      	ldr	r0, [r3, #0]
   b8afc:	b108      	cbz	r0, b8b02 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b8afe:	f7fe fd93 	bl	b7628 <free>
            func_();
        }
    }
   b8b02:	4620      	mov	r0, r4
   b8b04:	bd10      	pop	{r4, pc}

000b8b06 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b8b06:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8b08:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8b0a:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8b0c:	b923      	cbnz	r3, b8b18 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b8b0e:	6803      	ldr	r3, [r0, #0]
   b8b10:	6818      	ldr	r0, [r3, #0]
   b8b12:	b108      	cbz	r0, b8b18 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b8b14:	f7fe fd88 	bl	b7628 <free>
    }
   b8b18:	4620      	mov	r0, r4
   b8b1a:	bd10      	pop	{r4, pc}

000b8b1c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b8b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b8b20:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b8b24:	b08f      	sub	sp, #60	; 0x3c
   b8b26:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b8b28:	f1b8 0f00 	cmp.w	r8, #0
   b8b2c:	d072      	beq.n	b8c14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b8b2e:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b8b30:	2d00      	cmp	r5, #0
   b8b32:	d06f      	beq.n	b8c14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b8b34:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8b38:	231f      	movs	r3, #31
   b8b3a:	2200      	movs	r2, #0
   b8b3c:	21ff      	movs	r1, #255	; 0xff
   b8b3e:	4648      	mov	r0, r9
   b8b40:	f7ff fb11 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b8b44:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8b46:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8b48:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8b4a:	2200      	movs	r2, #0
   b8b4c:	4619      	mov	r1, r3
   b8b4e:	4638      	mov	r0, r7
   b8b50:	f7ff fb09 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8b54:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8b56:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8b58:	d006      	beq.n	b8b68 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b8b5a:	42ae      	cmp	r6, r5
   b8b5c:	d030      	beq.n	b8bc0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b8b5e:	2400      	movs	r4, #0
    }
   b8b60:	4620      	mov	r0, r4
   b8b62:	b00f      	add	sp, #60	; 0x3c
   b8b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b8b68:	4620      	mov	r0, r4
   b8b6a:	f7fe fd55 	bl	b7618 <malloc>
            dismissed_(false) {
   b8b6e:	ab03      	add	r3, sp, #12
   b8b70:	9304      	str	r3, [sp, #16]
   b8b72:	2300      	movs	r3, #0
   b8b74:	4604      	mov	r4, r0
   b8b76:	9003      	str	r0, [sp, #12]
   b8b78:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b8b7c:	b970      	cbnz	r0, b8b9c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b8b7e:	2320      	movs	r3, #32
   b8b80:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8b84:	4b24      	ldr	r3, [pc, #144]	; (b8c18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8b86:	9300      	str	r3, [sp, #0]
   b8b88:	4924      	ldr	r1, [pc, #144]	; (b8c1c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8b8a:	4603      	mov	r3, r0
   b8b8c:	aa06      	add	r2, sp, #24
   b8b8e:	2032      	movs	r0, #50	; 0x32
   b8b90:	f7fe fc56 	bl	b7440 <log_message>
                    return false;
   b8b94:	a804      	add	r0, sp, #16
   b8b96:	f7ff ffab 	bl	b8af0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b8b9a:	e7e1      	b.n	b8b60 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b8b9c:	4602      	mov	r2, r0
   b8b9e:	21ff      	movs	r1, #255	; 0xff
   b8ba0:	462b      	mov	r3, r5
   b8ba2:	4648      	mov	r0, r9
   b8ba4:	f7ff fadf 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b8ba8:	9803      	ldr	r0, [sp, #12]
   b8baa:	462a      	mov	r2, r5
   b8bac:	4641      	mov	r1, r8
   b8bae:	f002 ff43 	bl	bba38 <memcmp>
   b8bb2:	b118      	cbz	r0, b8bbc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b8bb4:	a804      	add	r0, sp, #16
   b8bb6:	f7ff ff9b 	bl	b8af0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b8bba:	e7ce      	b.n	b8b5a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b8bbc:	2401      	movs	r4, #1
   b8bbe:	e7e9      	b.n	b8b94 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b8bc0:	4628      	mov	r0, r5
   b8bc2:	f7fe fd29 	bl	b7618 <malloc>
   b8bc6:	2400      	movs	r4, #0
   b8bc8:	ab03      	add	r3, sp, #12
   b8bca:	4606      	mov	r6, r0
   b8bcc:	9003      	str	r0, [sp, #12]
   b8bce:	9304      	str	r3, [sp, #16]
   b8bd0:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b8bd4:	b978      	cbnz	r0, b8bf6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b8bd6:	2320      	movs	r3, #32
   b8bd8:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8bdc:	4b0e      	ldr	r3, [pc, #56]	; (b8c18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8bde:	9300      	str	r3, [sp, #0]
   b8be0:	490e      	ldr	r1, [pc, #56]	; (b8c1c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8be2:	4603      	mov	r3, r0
   b8be4:	aa06      	add	r2, sp, #24
   b8be6:	2032      	movs	r0, #50	; 0x32
   b8be8:	f7fe fc2a 	bl	b7440 <log_message>
                    return false;
   b8bec:	4634      	mov	r4, r6
   b8bee:	a804      	add	r0, sp, #16
   b8bf0:	f7ff ff89 	bl	b8b06 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b8bf4:	e7b4      	b.n	b8b60 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b8bf6:	4602      	mov	r2, r0
   b8bf8:	21ff      	movs	r1, #255	; 0xff
   b8bfa:	462b      	mov	r3, r5
   b8bfc:	4638      	mov	r0, r7
   b8bfe:	f7ff fab2 	bl	b8166 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b8c02:	9803      	ldr	r0, [sp, #12]
   b8c04:	462a      	mov	r2, r5
   b8c06:	4641      	mov	r1, r8
   b8c08:	f002 ff16 	bl	bba38 <memcmp>
   b8c0c:	2800      	cmp	r0, #0
   b8c0e:	d1ee      	bne.n	b8bee <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b8c10:	2401      	movs	r4, #1
   b8c12:	e7ec      	b.n	b8bee <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b8c14:	2401      	movs	r4, #1
   b8c16:	e7a3      	b.n	b8b60 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b8c18:	000bc198 	.word	0x000bc198
   b8c1c:	000bc117 	.word	0x000bc117

000b8c20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8c20:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8c22:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8c24:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8c26:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8c28:	dd03      	ble.n	b8c32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8c2a:	f7fe fd05 	bl	b7638 <realloc>
            if (!d) {
   b8c2e:	b918      	cbnz	r0, b8c38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8c30:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8c32:	f7fe fcf9 	bl	b7628 <free>
        T* d = nullptr;
   b8c36:	2000      	movs	r0, #0
        data_ = d;
   b8c38:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8c3a:	60a5      	str	r5, [r4, #8]
        return true;
   b8c3c:	2001      	movs	r0, #1
   b8c3e:	e7f7      	b.n	b8c30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8c40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8c40:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8c42:	6883      	ldr	r3, [r0, #8]
   b8c44:	428b      	cmp	r3, r1
   b8c46:	da02      	bge.n	b8c4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8c48:	f7ff ffea 	bl	b8c20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8c4c:	bd08      	pop	{r3, pc}
    return true;
   b8c4e:	2001      	movs	r0, #1
   b8c50:	e7fc      	b.n	b8c4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8c52 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b8c52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8c54:	4604      	mov	r4, r0
   b8c56:	a801      	add	r0, sp, #4
   b8c58:	f7fd fb42 	bl	b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8c5c:	9b01      	ldr	r3, [sp, #4]
   b8c5e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c60:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8c62:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c64:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8c66:	6062      	str	r2, [r4, #4]
   b8c68:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c6a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c6c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8c6e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c70:	9001      	str	r0, [sp, #4]
   b8c72:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b8c74:	f7fe fcd8 	bl	b7628 <free>
   b8c78:	b004      	add	sp, #16
   b8c7a:	bd10      	pop	{r4, pc}

000b8c7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c80:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c82:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8c84:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c86:	4419      	add	r1, r3
   b8c88:	6883      	ldr	r3, [r0, #8]
   b8c8a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8c8c:	4604      	mov	r4, r0
   b8c8e:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c90:	dc12      	bgt.n	b8cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8c92:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c94:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c96:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c98:	1bd2      	subs	r2, r2, r7
   b8c9a:	4631      	mov	r1, r6
   b8c9c:	1970      	adds	r0, r6, r5
   b8c9e:	f002 fee9 	bl	bba74 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8ca2:	462a      	mov	r2, r5
   b8ca4:	4641      	mov	r1, r8
   b8ca6:	4630      	mov	r0, r6
   b8ca8:	f002 fed6 	bl	bba58 <memcpy>
    size_ += n;
   b8cac:	6863      	ldr	r3, [r4, #4]
   b8cae:	442b      	add	r3, r5
   b8cb0:	6063      	str	r3, [r4, #4]
    return true;
   b8cb2:	2001      	movs	r0, #1
}
   b8cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8cb8:	f7ff ffb2 	bl	b8c20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8cbc:	2800      	cmp	r0, #0
   b8cbe:	d1e8      	bne.n	b8c92 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8cc0:	e7f8      	b.n	b8cb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8cc2 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8cc2:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b8cc4:	460a      	mov	r2, r1
   b8cc6:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8cc8:	b510      	push	{r4, lr}
   b8cca:	4604      	mov	r4, r0
    size_ = 0;
   b8ccc:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b8cce:	b102      	cbz	r2, b8cd2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b8cd0:	b90b      	cbnz	r3, b8cd6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b8cd2:	2000      	movs	r0, #0
}
   b8cd4:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b8cd6:	2bff      	cmp	r3, #255	; 0xff
   b8cd8:	bf28      	it	cs
   b8cda:	23ff      	movcs	r3, #255	; 0xff
   b8cdc:	f7ff ffce 	bl	b8c7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b8ce0:	2800      	cmp	r0, #0
   b8ce2:	d0f7      	beq.n	b8cd4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b8ce4:	6860      	ldr	r0, [r4, #4]
   b8ce6:	e7f5      	b.n	b8cd4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b8ce8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8cea:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8cec:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8cf0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8cf2:	4604      	mov	r4, r0
   b8cf4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8cf6:	da0b      	bge.n	b8d10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8cf8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8cfa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8cfc:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8cfe:	1b52      	subs	r2, r2, r5
   b8d00:	1c48      	adds	r0, r1, #1
   b8d02:	f002 feb7 	bl	bba74 <memmove>
    new(p) T(std::move(value));
   b8d06:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8d08:	6863      	ldr	r3, [r4, #4]
   b8d0a:	3301      	adds	r3, #1
   b8d0c:	6063      	str	r3, [r4, #4]
}
   b8d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8d10:	3101      	adds	r1, #1
   b8d12:	f7ff ff85 	bl	b8c20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8d16:	2800      	cmp	r0, #0
   b8d18:	d1ee      	bne.n	b8cf8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8d1a:	e7f8      	b.n	b8d0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8d1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8d1c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8d1e:	6841      	ldr	r1, [r0, #4]
   b8d20:	f7ff bfe2 	b.w	b8ce8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8d24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8d28:	4604      	mov	r4, r0
   b8d2a:	461d      	mov	r5, r3
   b8d2c:	460f      	mov	r7, r1
   b8d2e:	ab01      	add	r3, sp, #4
   b8d30:	4690      	mov	r8, r2
   b8d32:	460a      	mov	r2, r1
   b8d34:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8d38:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8d3c:	f7fe ff14 	bl	b7b68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8d40:	1cae      	adds	r6, r5, #2
   b8d42:	6863      	ldr	r3, [r4, #4]
   b8d44:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8d46:	f1b9 0f00 	cmp.w	r9, #0
   b8d4a:	d126      	bne.n	b8d9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8d4c:	b328      	cbz	r0, b8d9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8d4e:	4433      	add	r3, r6
   b8d50:	1a1b      	subs	r3, r3, r0
   b8d52:	2bff      	cmp	r3, #255	; 0xff
   b8d54:	d809      	bhi.n	b8d6a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8d56:	9901      	ldr	r1, [sp, #4]
   b8d58:	4620      	mov	r0, r4
   b8d5a:	f7ff fd02 	bl	b8762 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8d5e:	6861      	ldr	r1, [r4, #4]
   b8d60:	4620      	mov	r0, r4
   b8d62:	4431      	add	r1, r6
   b8d64:	f7ff ff6c 	bl	b8c40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8d68:	b918      	cbnz	r0, b8d72 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8d6a:	6860      	ldr	r0, [r4, #4]
}
   b8d6c:	b003      	add	sp, #12
   b8d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8d72:	1c6a      	adds	r2, r5, #1
   b8d74:	9901      	ldr	r1, [sp, #4]
   b8d76:	b2d2      	uxtb	r2, r2
   b8d78:	4620      	mov	r0, r4
   b8d7a:	f7ff ffb5 	bl	b8ce8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8d7e:	9901      	ldr	r1, [sp, #4]
   b8d80:	463a      	mov	r2, r7
   b8d82:	3101      	adds	r1, #1
   b8d84:	4620      	mov	r0, r4
   b8d86:	f7ff ffaf 	bl	b8ce8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8d8a:	9901      	ldr	r1, [sp, #4]
   b8d8c:	462b      	mov	r3, r5
   b8d8e:	4642      	mov	r2, r8
   b8d90:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8d92:	4620      	mov	r0, r4
   b8d94:	f7ff ff72 	bl	b8c7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8d98:	e7e7      	b.n	b8d6a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8d9a:	18f1      	adds	r1, r6, r3
   b8d9c:	29ff      	cmp	r1, #255	; 0xff
   b8d9e:	d8e4      	bhi.n	b8d6a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8da0:	4620      	mov	r0, r4
   b8da2:	f7ff ff4d 	bl	b8c40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8da6:	2800      	cmp	r0, #0
   b8da8:	d0df      	beq.n	b8d6a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8daa:	1c69      	adds	r1, r5, #1
   b8dac:	b2c9      	uxtb	r1, r1
   b8dae:	4620      	mov	r0, r4
   b8db0:	f7ff ffb4 	bl	b8d1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8db4:	4639      	mov	r1, r7
   b8db6:	4620      	mov	r0, r4
   b8db8:	f7ff ffb0 	bl	b8d1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8dbc:	6861      	ldr	r1, [r4, #4]
   b8dbe:	462b      	mov	r3, r5
   b8dc0:	4642      	mov	r2, r8
   b8dc2:	e7e6      	b.n	b8d92 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8dc4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8dc4:	b430      	push	{r4, r5}
   b8dc6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8dca:	b11a      	cbz	r2, b8dd4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8dcc:	9502      	str	r5, [sp, #8]
}
   b8dce:	bc30      	pop	{r4, r5}
   b8dd0:	f7ff bfa8 	b.w	b8d24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8dd4:	6840      	ldr	r0, [r0, #4]
}
   b8dd6:	bc30      	pop	{r4, r5}
   b8dd8:	4770      	bx	lr

000b8dda <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8dda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8ddc:	2300      	movs	r3, #0
   b8dde:	e9c0 3300 	strd	r3, r3, [r0]
   b8de2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8de4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8de6:	9300      	str	r3, [sp, #0]
   b8de8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8dea:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8dee:	4619      	mov	r1, r3
   b8df0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8df4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8df6:	f7ff ffe5 	bl	b8dc4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8dfa:	4620      	mov	r0, r4
   b8dfc:	b004      	add	sp, #16
   b8dfe:	bd10      	pop	{r4, pc}

000b8e00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8e00:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e04:	4604      	mov	r4, r0
   b8e06:	460d      	mov	r5, r1
   b8e08:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8e0a:	d914      	bls.n	b8e36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8e0c:	4290      	cmp	r0, r2
   b8e0e:	d213      	bcs.n	b8e38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8e10:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8e14:	1a75      	subs	r5, r6, r1
   b8e16:	f1a1 0708 	sub.w	r7, r1, #8
   b8e1a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8e1c:	42b7      	cmp	r7, r6
   b8e1e:	d018      	beq.n	b8e52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8e20:	b11c      	cbz	r4, b8e2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8e22:	4631      	mov	r1, r6
   b8e24:	4620      	mov	r0, r4
   b8e26:	f7ff fce1 	bl	b87ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8e2a:	1d30      	adds	r0, r6, #4
   b8e2c:	f7fc f962 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8e30:	3e08      	subs	r6, #8
   b8e32:	3c08      	subs	r4, #8
   b8e34:	e7f2      	b.n	b8e1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8e36:	d00c      	beq.n	b8e52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8e38:	42b5      	cmp	r5, r6
   b8e3a:	d00a      	beq.n	b8e52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8e3c:	b11c      	cbz	r4, b8e46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8e3e:	4629      	mov	r1, r5
   b8e40:	4620      	mov	r0, r4
   b8e42:	f7ff fcd3 	bl	b87ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8e46:	1d28      	adds	r0, r5, #4
   b8e48:	f7fc f954 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8e4c:	3508      	adds	r5, #8
   b8e4e:	3408      	adds	r4, #8
   b8e50:	e7f2      	b.n	b8e38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8e54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8e56:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8e58:	6846      	ldr	r6, [r0, #4]
   b8e5a:	4668      	mov	r0, sp
   b8e5c:	f7ff fcc6 	bl	b87ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e60:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8e64:	429f      	cmp	r7, r3
   b8e66:	db12      	blt.n	b8e8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8e68:	3701      	adds	r7, #1
        if (n > 0) {
   b8e6a:	2f00      	cmp	r7, #0
   b8e6c:	dd29      	ble.n	b8ec2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8e6e:	00f8      	lsls	r0, r7, #3
   b8e70:	f7fe fbd2 	bl	b7618 <malloc>
            if (!d) {
   b8e74:	4605      	mov	r5, r0
   b8e76:	b1f0      	cbz	r0, b8eb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8e78:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8e7c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8e80:	f7ff ffbe 	bl	b8e00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8e84:	6820      	ldr	r0, [r4, #0]
   b8e86:	f7fe fbcf 	bl	b7628 <free>
        data_ = d;
   b8e8a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8e8c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8e8e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8e90:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8e92:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8e96:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8e9a:	4631      	mov	r1, r6
   b8e9c:	f106 0008 	add.w	r0, r6, #8
   b8ea0:	f7ff ffae 	bl	b8e00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8ea4:	b11e      	cbz	r6, b8eae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8ea6:	4669      	mov	r1, sp
   b8ea8:	4630      	mov	r0, r6
   b8eaa:	f7ff fc9f 	bl	b87ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8eae:	6863      	ldr	r3, [r4, #4]
   b8eb0:	3301      	adds	r3, #1
   b8eb2:	6063      	str	r3, [r4, #4]
    return true;
   b8eb4:	2501      	movs	r5, #1
   b8eb6:	a801      	add	r0, sp, #4
   b8eb8:	f7fc f91c 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8ebc:	4628      	mov	r0, r5
   b8ebe:	b003      	add	sp, #12
   b8ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8ec2:	2500      	movs	r5, #0
   b8ec4:	e7de      	b.n	b8e84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8ec6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8ec8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8ecc:	4605      	mov	r5, r0
   b8ece:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8ed0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8ed4:	42a6      	cmp	r6, r4
   b8ed6:	d005      	beq.n	b8ee4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8ed8:	4639      	mov	r1, r7
   b8eda:	4620      	mov	r0, r4
   b8edc:	f7ff fb2d 	bl	b853a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8ee0:	b108      	cbz	r0, b8ee6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8ee2:	b914      	cbnz	r4, b8eea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8ee6:	3408      	adds	r4, #8
   b8ee8:	e7f4      	b.n	b8ed4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8eea:	1d20      	adds	r0, r4, #4
   b8eec:	f7fc f902 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8ef0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8ef4:	f104 0108 	add.w	r1, r4, #8
   b8ef8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8efc:	4620      	mov	r0, r4
   b8efe:	f7ff ff7f 	bl	b8e00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8f02:	686b      	ldr	r3, [r5, #4]
   b8f04:	3b01      	subs	r3, #1
   b8f06:	606b      	str	r3, [r5, #4]
    return true;
   b8f08:	e7ec      	b.n	b8ee4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8f0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f10:	4605      	mov	r5, r0
   b8f12:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8f14:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8f16:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8f18:	f7fe fef4 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8f1c:	682e      	ldr	r6, [r5, #0]
   b8f1e:	1ef3      	subs	r3, r6, #3
   b8f20:	2b0d      	cmp	r3, #13
   b8f22:	d83c      	bhi.n	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8f24:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8f28:	0053000e 	.word	0x0053000e
   b8f2c:	00d1003b 	.word	0x00d1003b
   b8f30:	003b003b 	.word	0x003b003b
   b8f34:	003b003b 	.word	0x003b003b
   b8f38:	009b003b 	.word	0x009b003b
   b8f3c:	009b009b 	.word	0x009b009b
   b8f40:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8f44:	a804      	add	r0, sp, #16
   b8f46:	f7ff fa9f 	bl	b8488 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8f4a:	9b04      	ldr	r3, [sp, #16]
   b8f4c:	89aa      	ldrh	r2, [r5, #12]
   b8f4e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8f50:	6869      	ldr	r1, [r5, #4]
   b8f52:	9804      	ldr	r0, [sp, #16]
   b8f54:	3108      	adds	r1, #8
   b8f56:	3002      	adds	r0, #2
   b8f58:	f7fe fef8 	bl	b7d4c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8f5c:	a904      	add	r1, sp, #16
   b8f5e:	a806      	add	r0, sp, #24
   b8f60:	f7ff fc44 	bl	b87ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8f64:	a906      	add	r1, sp, #24
   b8f66:	f104 0018 	add.w	r0, r4, #24
   b8f6a:	f7ff ff73 	bl	b8e54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8f6e:	4605      	mov	r5, r0
   b8f70:	a807      	add	r0, sp, #28
   b8f72:	f7fc f8bf 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f76:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8f78:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8f7a:	b9b5      	cbnz	r5, b8faa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8f7c:	4b5d      	ldr	r3, [pc, #372]	; (b90f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8f7e:	495e      	ldr	r1, [pc, #376]	; (b90f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8f80:	9300      	str	r3, [sp, #0]
   b8f82:	2032      	movs	r0, #50	; 0x32
   b8f84:	462b      	mov	r3, r5
   b8f86:	aa06      	add	r2, sp, #24
   b8f88:	9507      	str	r5, [sp, #28]
   b8f8a:	f7fe fa59 	bl	b7440 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8f8e:	9b04      	ldr	r3, [sp, #16]
   b8f90:	4629      	mov	r1, r5
   b8f92:	8818      	ldrh	r0, [r3, #0]
   b8f94:	f7fe f912 	bl	b71bc <hal_ble_gap_disconnect>
   b8f98:	a805      	add	r0, sp, #20
   b8f9a:	f7fc f8ab 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8f9e:	a803      	add	r0, sp, #12
   b8fa0:	f7fe febe 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8fa4:	b00e      	add	sp, #56	; 0x38
   b8fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8faa:	4a54      	ldr	r2, [pc, #336]	; (b90fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8fac:	9200      	str	r2, [sp, #0]
   b8fae:	2300      	movs	r3, #0
   b8fb0:	4951      	ldr	r1, [pc, #324]	; (b90f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8fb2:	9307      	str	r3, [sp, #28]
   b8fb4:	aa06      	add	r2, sp, #24
   b8fb6:	2001      	movs	r0, #1
   b8fb8:	f7fe fa42 	bl	b7440 <log_message>
                if (impl->connectedCallback_) {
   b8fbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8fbe:	2b00      	cmp	r3, #0
   b8fc0:	d0ea      	beq.n	b8f98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8fc2:	a904      	add	r1, sp, #16
   b8fc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8fc8:	f7ff fc88 	bl	b88dc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8fcc:	e7e4      	b.n	b8f98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8fce:	89a9      	ldrh	r1, [r5, #12]
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f7ff f96c 	bl	b82ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8fd6:	4606      	mov	r6, r0
   b8fd8:	2800      	cmp	r0, #0
   b8fda:	d0e0      	beq.n	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8fdc:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8fde:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8fe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8fe6:	8029      	strh	r1, [r5, #0]
   b8fe8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8fec:	429a      	cmp	r2, r3
   b8fee:	d003      	beq.n	b8ff8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8ff0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8ff4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8ff6:	e7f9      	b.n	b8fec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8ff8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8ffc:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9000:	45b8      	cmp	r8, r7
   b9002:	d004      	beq.n	b900e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b9004:	1d38      	adds	r0, r7, #4
   b9006:	f7fc f875 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b900a:	3708      	adds	r7, #8
   b900c:	e7f8      	b.n	b9000 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b900e:	2300      	movs	r3, #0
   b9010:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b9012:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b9016:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b901a:	45b8      	cmp	r8, r7
   b901c:	d004      	beq.n	b9028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b901e:	1d38      	adds	r0, r7, #4
   b9020:	f7fc f868 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9024:	3708      	adds	r7, #8
   b9026:	e7f8      	b.n	b901a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b9028:	2300      	movs	r3, #0
   b902a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b902c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b902e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9030:	b123      	cbz	r3, b903c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b9032:	4631      	mov	r1, r6
   b9034:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9038:	f7ff fc50 	bl	b88dc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b903c:	2300      	movs	r3, #0
   b903e:	2220      	movs	r2, #32
   b9040:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b9044:	4a2e      	ldr	r2, [pc, #184]	; (b9100 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b9046:	9200      	str	r2, [sp, #0]
   b9048:	492b      	ldr	r1, [pc, #172]	; (b90f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b904a:	aa06      	add	r2, sp, #24
   b904c:	2001      	movs	r0, #1
   b904e:	f7fe f9f7 	bl	b7440 <log_message>
                    impl->peers_.removeOne(*peer);
   b9052:	4631      	mov	r1, r6
   b9054:	f104 0018 	add.w	r0, r4, #24
   b9058:	f7ff ff35 	bl	b8ec6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b905c:	e79f      	b.n	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b905e:	89a9      	ldrh	r1, [r5, #12]
   b9060:	4620      	mov	r0, r4
   b9062:	f7ff f924 	bl	b82ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9066:	2800      	cmp	r0, #0
   b9068:	d099      	beq.n	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b906a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b906c:	2b00      	cmp	r3, #0
   b906e:	d096      	beq.n	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b9070:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9072:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b9074:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9078:	d001      	beq.n	b907e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b907a:	2e10      	cmp	r6, #16
   b907c:	d117      	bne.n	b90ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b907e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b9080:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b9082:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b9084:	2506      	movs	r5, #6
                        };
   b9086:	f88d 3015 	strb.w	r3, [sp, #21]
   b908a:	9104      	str	r1, [sp, #16]
   b908c:	f88d 2014 	strb.w	r2, [sp, #20]
   b9090:	9006      	str	r0, [sp, #24]
   b9092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b9096:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b9098:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b909c:	9508      	str	r5, [sp, #32]
   b909e:	e883 0003 	stmia.w	r3, {r0, r1}
   b90a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b90a4:	a906      	add	r1, sp, #24
   b90a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b90aa:	4798      	blx	r3
   b90ac:	e777      	b.n	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b90ae:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b90b0:	bf01      	itttt	eq
   b90b2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b90b4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b90b6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b90ba:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b90bc:	bf0f      	iteee	eq
   b90be:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b90c2:	461a      	movne	r2, r3
   b90c4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b90c6:	461d      	movne	r5, r3
   b90c8:	e7dd      	b.n	b9086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b90ca:	89a9      	ldrh	r1, [r5, #12]
   b90cc:	4620      	mov	r0, r4
   b90ce:	f7ff f8ee 	bl	b82ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b90d2:	4601      	mov	r1, r0
   b90d4:	2800      	cmp	r0, #0
   b90d6:	f43f af62 	beq.w	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b90da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b90dc:	2b00      	cmp	r3, #0
   b90de:	f43f af5e 	beq.w	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b90e2:	686b      	ldr	r3, [r5, #4]
   b90e4:	9306      	str	r3, [sp, #24]
   b90e6:	aa06      	add	r2, sp, #24
   b90e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b90ea:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b90ee:	4798      	blx	r3
   b90f0:	e755      	b.n	b8f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b90f2:	bf00      	nop
   b90f4:	000bc1b3 	.word	0x000bc1b3
   b90f8:	000bc117 	.word	0x000bc117
   b90fc:	000bc1d9 	.word	0x000bc1d9
   b9100:	000bc1f6 	.word	0x000bc1f6

000b9104 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b9104:	b513      	push	{r0, r1, r4, lr}
   b9106:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b9108:	f7ff f9e0 	bl	b84cc <_ZNK8particle13BlePeerDevice9connectedEv>
   b910c:	b1d0      	cbz	r0, b9144 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b910e:	6823      	ldr	r3, [r4, #0]
   b9110:	2100      	movs	r1, #0
   b9112:	8818      	ldrh	r0, [r3, #0]
   b9114:	f7fe f852 	bl	b71bc <hal_ble_gap_disconnect>
   b9118:	2800      	cmp	r0, #0
   b911a:	db11      	blt.n	b9140 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b911c:	a801      	add	r0, sp, #4
   b911e:	f7fe fdf1 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b9122:	f7ff fa61 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b9126:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b9128:	4621      	mov	r1, r4
   b912a:	3018      	adds	r0, #24
   b912c:	f7ff fecb 	bl	b8ec6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b9130:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9132:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9136:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b9138:	a801      	add	r0, sp, #4
   b913a:	f7fe fdf1 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b913e:	2000      	movs	r0, #0
}
   b9140:	b002      	add	sp, #8
   b9142:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b9144:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9148:	e7fa      	b.n	b9140 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>

000b914a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b914a:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b914c:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b914e:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9150:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9152:	dd05      	ble.n	b9160 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b9154:	2114      	movs	r1, #20
   b9156:	4369      	muls	r1, r5
   b9158:	f7fe fa6e 	bl	b7638 <realloc>
            if (!d) {
   b915c:	b918      	cbnz	r0, b9166 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b915e:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b9160:	f7fe fa62 	bl	b7628 <free>
        T* d = nullptr;
   b9164:	2000      	movs	r0, #0
        data_ = d;
   b9166:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9168:	60a5      	str	r5, [r4, #8]
        return true;
   b916a:	2001      	movs	r0, #1
   b916c:	e7f7      	b.n	b915e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b916e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b916e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b9172:	2400      	movs	r4, #0
   b9174:	e9c0 4400 	strd	r4, r4, [r0]
   b9178:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b917a:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b917c:	6849      	ldr	r1, [r1, #4]
   b917e:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9180:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9182:	dd1a      	ble.n	b91ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b9184:	f7ff ffe1 	bl	b914a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9188:	b1b8      	cbz	r0, b91ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b918a:	e9d8 9300 	ldrd	r9, r3, [r8]
   b918e:	f04f 0c14 	mov.w	ip, #20
   b9192:	f8d7 e000 	ldr.w	lr, [r7]
   b9196:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b919a:	eb09 0504 	add.w	r5, r9, r4
   b919e:	45ac      	cmp	ip, r5
   b91a0:	d008      	beq.n	b91b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b91a2:	eb1e 0604 	adds.w	r6, lr, r4
   b91a6:	bf1f      	itttt	ne
   b91a8:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b91aa:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b91ac:	682b      	ldrne	r3, [r5, #0]
   b91ae:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b91b0:	3414      	adds	r4, #20
   b91b2:	e7f2      	b.n	b919a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b91b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b91b8:	607b      	str	r3, [r7, #4]
}
   b91ba:	4638      	mov	r0, r7
   b91bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b91c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b91c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b91c4:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b91c8:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b91ca:	6883      	ldr	r3, [r0, #8]
   b91cc:	19e9      	adds	r1, r5, r7
   b91ce:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b91d0:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b91d2:	dc17      	bgt.n	b9204 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b91d4:	2314      	movs	r3, #20
   b91d6:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b91d8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b91da:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b91dc:	fb03 f907 	mul.w	r9, r3, r7
   b91e0:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b91e2:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b91e4:	1b52      	subs	r2, r2, r5
   b91e6:	4631      	mov	r1, r6
   b91e8:	eb06 0009 	add.w	r0, r6, r9
   b91ec:	f002 fc42 	bl	bba74 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b91f0:	464a      	mov	r2, r9
   b91f2:	4641      	mov	r1, r8
   b91f4:	4630      	mov	r0, r6
   b91f6:	f002 fc2f 	bl	bba58 <memcpy>
    size_ += n;
   b91fa:	6863      	ldr	r3, [r4, #4]
   b91fc:	443b      	add	r3, r7
   b91fe:	6063      	str	r3, [r4, #4]
}
   b9200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9204:	f7ff ffa1 	bl	b914a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9208:	2800      	cmp	r0, #0
   b920a:	d1e3      	bne.n	b91d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b920c:	e7f8      	b.n	b9200 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b920e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b920e:	b082      	sub	sp, #8
   b9210:	b570      	push	{r4, r5, r6, lr}
   b9212:	460c      	mov	r4, r1
   b9214:	a904      	add	r1, sp, #16
   b9216:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b921a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b921e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9220:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9222:	da17      	bge.n	b9254 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b9224:	2314      	movs	r3, #20
   b9226:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b922a:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b922c:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b922e:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b9230:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9232:	1a52      	subs	r2, r2, r1
   b9234:	18e0      	adds	r0, r4, r3
   b9236:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b9238:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b923a:	f002 fc1b 	bl	bba74 <memmove>
    new(p) T(std::move(value));
   b923e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9242:	6833      	ldr	r3, [r6, #0]
   b9244:	6023      	str	r3, [r4, #0]
    ++size_;
   b9246:	686b      	ldr	r3, [r5, #4]
   b9248:	3301      	adds	r3, #1
   b924a:	606b      	str	r3, [r5, #4]
}
   b924c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9250:	b002      	add	sp, #8
   b9252:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9254:	3101      	adds	r1, #1
   b9256:	f7ff ff78 	bl	b914a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b925a:	2800      	cmp	r0, #0
   b925c:	d1e2      	bne.n	b9224 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b925e:	e7f5      	b.n	b924c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b9260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b9264:	2400      	movs	r4, #0
   b9266:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b9268:	1e93      	subs	r3, r2, #2
   b926a:	e9c0 4400 	strd	r4, r4, [r0]
   b926e:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b9270:	4605      	mov	r5, r0
   b9272:	460f      	mov	r7, r1
   b9274:	4690      	mov	r8, r2
   b9276:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b9278:	9305      	str	r3, [sp, #20]
    return size_;
   b927a:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b927c:	428c      	cmp	r4, r1
   b927e:	da72      	bge.n	b9366 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b9280:	6838      	ldr	r0, [r7, #0]
   b9282:	ab07      	add	r3, sp, #28
   b9284:	4642      	mov	r2, r8
   b9286:	1b09      	subs	r1, r1, r4
   b9288:	4420      	add	r0, r4
   b928a:	f7fe fc6d 	bl	b7b68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b928e:	4606      	mov	r6, r0
   b9290:	2800      	cmp	r0, #0
   b9292:	d068      	beq.n	b9366 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b9294:	9b05      	ldr	r3, [sp, #20]
   b9296:	2b01      	cmp	r3, #1
   b9298:	d82f      	bhi.n	b92fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b929a:	f1a0 0b02 	sub.w	fp, r0, #2
   b929e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b92a2:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b92a6:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b92aa:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b92ac:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b92ae:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b92b0:	d055      	beq.n	b935e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b92b2:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b92b4:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b92b8:	4413      	add	r3, r2
   b92ba:	a808      	add	r0, sp, #32
   b92bc:	78d9      	ldrb	r1, [r3, #3]
   b92be:	789b      	ldrb	r3, [r3, #2]
   b92c0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b92c4:	f7fe fe2b 	bl	b7f1e <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b92c8:	f10d 0e20 	add.w	lr, sp, #32
   b92cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b92d0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b92d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b92d8:	f8de 3000 	ldr.w	r3, [lr]
   b92dc:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b92e0:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b92e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b92e8:	ab0d      	add	r3, sp, #52	; 0x34
   b92ea:	cb0c      	ldmia	r3, {r2, r3}
   b92ec:	6869      	ldr	r1, [r5, #4]
   b92ee:	4628      	mov	r0, r5
   b92f0:	f7ff ff8d 	bl	b920e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b92f4:	f109 0901 	add.w	r9, r9, #1
   b92f8:	e7d7      	b.n	b92aa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b92fa:	f1a8 0306 	sub.w	r3, r8, #6
   b92fe:	2b01      	cmp	r3, #1
   b9300:	d82d      	bhi.n	b935e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9302:	f1a0 0b02 	sub.w	fp, r0, #2
   b9306:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b930a:	f04f 0900 	mov.w	r9, #0
   b930e:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b9312:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b9314:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9316:	d022      	beq.n	b935e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b9318:	3302      	adds	r3, #2
    return data_[i];
   b931a:	6839      	ldr	r1, [r7, #0]
   b931c:	4423      	add	r3, r4
   b931e:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b9322:	2201      	movs	r2, #1
   b9324:	4419      	add	r1, r3
   b9326:	a808      	add	r0, sp, #32
   b9328:	f7fe fdda 	bl	b7ee0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b932c:	f10d 0e20 	add.w	lr, sp, #32
   b9330:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b9334:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b933c:	f8de 3000 	ldr.w	r3, [lr]
   b9340:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b9344:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b9348:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b934c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b9350:	6869      	ldr	r1, [r5, #4]
   b9352:	4628      	mov	r0, r5
   b9354:	f7ff ff5b 	bl	b920e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9358:	f109 0901 	add.w	r9, r9, #1
   b935c:	e7d9      	b.n	b9312 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b935e:	9b07      	ldr	r3, [sp, #28]
   b9360:	441c      	add	r4, r3
   b9362:	4434      	add	r4, r6
   b9364:	e789      	b.n	b927a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b9366:	4628      	mov	r0, r5
   b9368:	b013      	add	sp, #76	; 0x4c
   b936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b936e <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b936e:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b9370:	2300      	movs	r3, #0
   b9372:	b085      	sub	sp, #20
   b9374:	e9c0 3300 	strd	r3, r3, [r0]
   b9378:	6083      	str	r3, [r0, #8]
   b937a:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b937c:	2202      	movs	r2, #2
   b937e:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b9380:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b9382:	f7ff ff6d 	bl	b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b9386:	a901      	add	r1, sp, #4
   b9388:	4620      	mov	r0, r4
   b938a:	f7ff ff19 	bl	b91c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b938e:	a801      	add	r0, sp, #4
   b9390:	f7ff f9b6 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b9394:	2202      	movs	r2, #2
   b9396:	4629      	mov	r1, r5
   b9398:	a801      	add	r0, sp, #4
   b939a:	f7ff ff61 	bl	b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b939e:	a901      	add	r1, sp, #4
   b93a0:	4620      	mov	r0, r4
   b93a2:	f7ff ff0d 	bl	b91c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b93a6:	a801      	add	r0, sp, #4
   b93a8:	f7ff f9aa 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b93ac:	2203      	movs	r2, #3
   b93ae:	4629      	mov	r1, r5
   b93b0:	a801      	add	r0, sp, #4
   b93b2:	f7ff ff55 	bl	b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b93b6:	a901      	add	r1, sp, #4
   b93b8:	4620      	mov	r0, r4
   b93ba:	f7ff ff01 	bl	b91c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b93be:	a801      	add	r0, sp, #4
   b93c0:	f7ff f99e 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b93c4:	2206      	movs	r2, #6
   b93c6:	4629      	mov	r1, r5
   b93c8:	a801      	add	r0, sp, #4
   b93ca:	f7ff ff49 	bl	b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b93ce:	a901      	add	r1, sp, #4
   b93d0:	4620      	mov	r0, r4
   b93d2:	f7ff fef5 	bl	b91c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b93d6:	a801      	add	r0, sp, #4
   b93d8:	f7ff f992 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b93dc:	2207      	movs	r2, #7
   b93de:	4629      	mov	r1, r5
   b93e0:	a801      	add	r0, sp, #4
   b93e2:	f7ff ff3d 	bl	b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b93e6:	a901      	add	r1, sp, #4
   b93e8:	4620      	mov	r0, r4
   b93ea:	f7ff fee9 	bl	b91c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b93ee:	a801      	add	r0, sp, #4
   b93f0:	f7ff f986 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b93f4:	4620      	mov	r0, r4
   b93f6:	b005      	add	sp, #20
   b93f8:	bd30      	pop	{r4, r5, pc}

000b93fa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b93fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b93fe:	b08b      	sub	sp, #44	; 0x2c
   b9400:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b9402:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b9406:	a801      	add	r0, sp, #4
   b9408:	f7ff feb1 	bl	b916e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b940c:	9b02      	ldr	r3, [sp, #8]
   b940e:	2b00      	cmp	r3, #0
   b9410:	dd4a      	ble.n	b94a8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b9412:	f104 0114 	add.w	r1, r4, #20
   b9416:	a804      	add	r0, sp, #16
   b9418:	f7ff ffa9 	bl	b936e <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b941c:	f104 0108 	add.w	r1, r4, #8
   b9420:	a807      	add	r0, sp, #28
   b9422:	f7ff ffa4 	bl	b936e <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b9426:	9d05      	ldr	r5, [sp, #20]
   b9428:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b942a:	2d00      	cmp	r5, #0
   b942c:	dc01      	bgt.n	b9432 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b942e:	2e00      	cmp	r6, #0
   b9430:	dd38      	ble.n	b94a4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b9432:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b9434:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b9436:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b943a:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b943e:	2314      	movs	r3, #20
   b9440:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b9444:	fb03 8505 	mla	r5, r3, r5, r8
   b9448:	fb03 9606 	mla	r6, r3, r6, r9
   b944c:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b944e:	45ba      	cmp	sl, r7
   b9450:	d028      	beq.n	b94a4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b9452:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b9454:	45ab      	cmp	fp, r5
   b9456:	d015      	beq.n	b9484 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b9458:	4659      	mov	r1, fp
   b945a:	4650      	mov	r0, sl
   b945c:	f7fe fd69 	bl	b7f32 <_ZNK8particle7BleUuideqERKS0_>
   b9460:	f10b 0b14 	add.w	fp, fp, #20
   b9464:	4604      	mov	r4, r0
   b9466:	2800      	cmp	r0, #0
   b9468:	d0f4      	beq.n	b9454 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b946a:	a807      	add	r0, sp, #28
   b946c:	f7ff f948 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b9470:	a804      	add	r0, sp, #16
   b9472:	f7ff f945 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b9476:	a801      	add	r0, sp, #4
   b9478:	f7ff f942 	bl	b8700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b947c:	4620      	mov	r0, r4
   b947e:	b00b      	add	sp, #44	; 0x2c
   b9480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9484:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b9486:	45b3      	cmp	fp, r6
   b9488:	d009      	beq.n	b949e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b948a:	4659      	mov	r1, fp
   b948c:	4650      	mov	r0, sl
   b948e:	f7fe fd50 	bl	b7f32 <_ZNK8particle7BleUuideqERKS0_>
   b9492:	f10b 0b14 	add.w	fp, fp, #20
   b9496:	4604      	mov	r4, r0
   b9498:	2800      	cmp	r0, #0
   b949a:	d0f4      	beq.n	b9486 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b949c:	e7e5      	b.n	b946a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b949e:	f10a 0a14 	add.w	sl, sl, #20
   b94a2:	e7d4      	b.n	b944e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b94a4:	2400      	movs	r4, #0
   b94a6:	e7e0      	b.n	b946a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b94a8:	2401      	movs	r4, #1
   b94aa:	e7e4      	b.n	b9476 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b94ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b94ac:	b538      	push	{r3, r4, r5, lr}
   b94ae:	4605      	mov	r5, r0
   b94b0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b94b2:	f7fc f8f2 	bl	b569a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b94b6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b94b8:	68a2      	ldr	r2, [r4, #8]
   b94ba:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b94bc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b94be:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b94c0:	68e2      	ldr	r2, [r4, #12]
   b94c2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b94c4:	60e3      	str	r3, [r4, #12]
      }
   b94c6:	bd38      	pop	{r3, r4, r5, pc}

000b94c8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b94c8:	b530      	push	{r4, r5, lr}
   b94ca:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b94cc:	2300      	movs	r3, #0
   b94ce:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b94d0:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b94d2:	4605      	mov	r5, r0
   b94d4:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b94d6:	b133      	cbz	r3, b94e6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b94d8:	2202      	movs	r2, #2
   b94da:	4668      	mov	r0, sp
   b94dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b94de:	68e3      	ldr	r3, [r4, #12]
   b94e0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b94e2:	68a3      	ldr	r3, [r4, #8]
   b94e4:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b94e6:	4629      	mov	r1, r5
   b94e8:	4668      	mov	r0, sp
   b94ea:	f7ff ffdf 	bl	b94ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b94ee:	4668      	mov	r0, sp
   b94f0:	f7fb fcce 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
      }
   b94f4:	b005      	add	sp, #20
   b94f6:	bd30      	pop	{r4, r5, pc}

000b94f8 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b94f8:	b538      	push	{r3, r4, r5, lr}
   b94fa:	460d      	mov	r5, r1
   b94fc:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b94fe:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b9500:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b9502:	b123      	cbz	r3, b950e <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b9504:	6828      	ldr	r0, [r5, #0]
   b9506:	314c      	adds	r1, #76	; 0x4c
   b9508:	304c      	adds	r0, #76	; 0x4c
   b950a:	f7ff ffdd 	bl	b94c8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b950e:	4620      	mov	r0, r4
   b9510:	682b      	ldr	r3, [r5, #0]
   b9512:	f840 3b04 	str.w	r3, [r0], #4
   b9516:	6869      	ldr	r1, [r5, #4]
   b9518:	f7fe fbce 	bl	b7cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b951c:	4620      	mov	r0, r4
   b951e:	bd38      	pop	{r3, r4, r5, pc}

000b9520 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b9520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9524:	4604      	mov	r4, r0
   b9526:	b087      	sub	sp, #28
    WiringBleLock lk;
   b9528:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b952a:	460e      	mov	r6, r1
   b952c:	4617      	mov	r7, r2
    WiringBleLock lk;
   b952e:	f7fe fbe9 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9532:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b9534:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b9538:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b953c:	4544      	cmp	r4, r8
   b953e:	46a1      	mov	r9, r4
   b9540:	d016      	beq.n	b9570 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b9542:	4621      	mov	r1, r4
   b9544:	a801      	add	r0, sp, #4
   b9546:	f7fe fedd 	bl	b8304 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b954a:	4639      	mov	r1, r7
   b954c:	a801      	add	r0, sp, #4
   b954e:	f7fe fcf0 	bl	b7f32 <_ZNK8particle7BleUuideqERKS0_>
   b9552:	3408      	adds	r4, #8
   b9554:	4605      	mov	r5, r0
   b9556:	2800      	cmp	r0, #0
   b9558:	d0f0      	beq.n	b953c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b955a:	4649      	mov	r1, r9
   b955c:	4630      	mov	r0, r6
   b955e:	f7ff ffcb 	bl	b94f8 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b9562:	4668      	mov	r0, sp
   b9564:	f7fe fbdc 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9568:	4628      	mov	r0, r5
   b956a:	b007      	add	sp, #28
   b956c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b9570:	2500      	movs	r5, #0
   b9572:	e7f6      	b.n	b9562 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b9574 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b9574:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9576:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b9578:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b957a:	344c      	adds	r4, #76	; 0x4c
   b957c:	b1b9      	cbz	r1, b95ae <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b957e:	e9cd 1200 	strd	r1, r2, [sp]
   b9582:	a802      	add	r0, sp, #8
   b9584:	4669      	mov	r1, sp
   b9586:	f7ff f901 	bl	b878c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b958a:	2300      	movs	r3, #0
	__x.swap(*this);
   b958c:	a906      	add	r1, sp, #24
   b958e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b9590:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b9592:	f7ff ff8b 	bl	b94ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b9596:	4621      	mov	r1, r4
   b9598:	a806      	add	r0, sp, #24
   b959a:	f7ff ff87 	bl	b94ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b959e:	a806      	add	r0, sp, #24
   b95a0:	f7fb fc76 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
   b95a4:	a802      	add	r0, sp, #8
   b95a6:	f7fb fc73 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
}
   b95aa:	b00a      	add	sp, #40	; 0x28
   b95ac:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b95ae:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b95b0:	e7eb      	b.n	b958a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b95b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b95b2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b95b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b95b6:	4604      	mov	r4, r0
   b95b8:	460d      	mov	r5, r1
   b95ba:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b95bc:	d914      	bls.n	b95e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b95be:	4290      	cmp	r0, r2
   b95c0:	d213      	bcs.n	b95ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b95c2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b95c6:	1a75      	subs	r5, r6, r1
   b95c8:	f1a1 0708 	sub.w	r7, r1, #8
   b95cc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b95ce:	42b7      	cmp	r7, r6
   b95d0:	d018      	beq.n	b9604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b95d2:	b11c      	cbz	r4, b95dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b95d4:	4631      	mov	r1, r6
   b95d6:	4620      	mov	r0, r4
   b95d8:	f7ff f8fe 	bl	b87d8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b95dc:	1d30      	adds	r0, r6, #4
   b95de:	f7fb fd89 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b95e2:	3e08      	subs	r6, #8
   b95e4:	3c08      	subs	r4, #8
   b95e6:	e7f2      	b.n	b95ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b95e8:	d00c      	beq.n	b9604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b95ea:	42b5      	cmp	r5, r6
   b95ec:	d00a      	beq.n	b9604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b95ee:	b11c      	cbz	r4, b95f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b95f0:	4629      	mov	r1, r5
   b95f2:	4620      	mov	r0, r4
   b95f4:	f7ff f8f0 	bl	b87d8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b95f8:	1d28      	adds	r0, r5, #4
   b95fa:	f7fb fd7b 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b95fe:	3508      	adds	r5, #8
   b9600:	3408      	adds	r4, #8
   b9602:	e7f2      	b.n	b95ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9606 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9606:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9608:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b960a:	4605      	mov	r5, r0
        if (n > 0) {
   b960c:	dd11      	ble.n	b9632 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b960e:	00f0      	lsls	r0, r6, #3
   b9610:	f7fe f802 	bl	b7618 <malloc>
            if (!d) {
   b9614:	4604      	mov	r4, r0
   b9616:	b158      	cbz	r0, b9630 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9618:	e9d5 1200 	ldrd	r1, r2, [r5]
   b961c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9620:	f7ff ffc7 	bl	b95b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9624:	6828      	ldr	r0, [r5, #0]
   b9626:	f7fd ffff 	bl	b7628 <free>
        data_ = d;
   b962a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b962c:	60ae      	str	r6, [r5, #8]
        return true;
   b962e:	2001      	movs	r0, #1
    }
   b9630:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9632:	2400      	movs	r4, #0
   b9634:	e7f6      	b.n	b9624 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9636 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b963a:	2300      	movs	r3, #0
   b963c:	e9c0 3300 	strd	r3, r3, [r0]
   b9640:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9642:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9644:	6849      	ldr	r1, [r1, #4]
   b9646:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9648:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b964a:	dd13      	ble.n	b9674 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b964c:	f7ff ffdb 	bl	b9606 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9650:	b180      	cbz	r0, b9674 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9652:	e9d5 6300 	ldrd	r6, r3, [r5]
   b9656:	6827      	ldr	r7, [r4, #0]
   b9658:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b965c:	45b0      	cmp	r8, r6
   b965e:	d007      	beq.n	b9670 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9660:	b11f      	cbz	r7, b966a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b9662:	4631      	mov	r1, r6
   b9664:	4638      	mov	r0, r7
   b9666:	f7ff f8b7 	bl	b87d8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b966a:	3608      	adds	r6, #8
   b966c:	3708      	adds	r7, #8
   b966e:	e7f5      	b.n	b965c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b9670:	686b      	ldr	r3, [r5, #4]
   b9672:	6063      	str	r3, [r4, #4]
}
   b9674:	4620      	mov	r0, r4
   b9676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b967a <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b967a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b967c:	460d      	mov	r5, r1
   b967e:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9680:	a801      	add	r0, sp, #4
   b9682:	f7fe fb3f 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b9686:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b9688:	4620      	mov	r0, r4
   b968a:	310c      	adds	r1, #12
   b968c:	f7ff ffd3 	bl	b9636 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b9690:	a801      	add	r0, sp, #4
   b9692:	f7fe fb45 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9696:	4620      	mov	r0, r4
   b9698:	b003      	add	sp, #12
   b969a:	bd30      	pop	{r4, r5, pc}

000b969c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b969c:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b969e:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b96a0:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b96a2:	4605      	mov	r5, r0
   b96a4:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b96a6:	b933      	cbnz	r3, b96b6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b96a8:	4608      	mov	r0, r1
   b96aa:	f7fe fabf 	bl	b7c2c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b96ae:	b910      	cbnz	r0, b96b6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b96b0:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b96b2:	2201      	movs	r2, #1
   b96b4:	729a      	strb	r2, [r3, #10]
    return services();
   b96b6:	4628      	mov	r0, r5
   b96b8:	4621      	mov	r1, r4
   b96ba:	f7ff ffde 	bl	b967a <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b96be:	4628      	mov	r0, r5
   b96c0:	bd38      	pop	{r3, r4, r5, pc}

000b96c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b96c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b96c4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b96c6:	6845      	ldr	r5, [r0, #4]
   b96c8:	4668      	mov	r0, sp
   b96ca:	f7ff f885 	bl	b87d8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b96ce:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b96d2:	4299      	cmp	r1, r3
   b96d4:	da10      	bge.n	b96f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b96d6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b96d8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b96da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b96de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b96e2:	4629      	mov	r1, r5
   b96e4:	f105 0008 	add.w	r0, r5, #8
   b96e8:	f7ff ff63 	bl	b95b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b96ec:	b98d      	cbnz	r5, b9712 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b96ee:	6863      	ldr	r3, [r4, #4]
   b96f0:	3301      	adds	r3, #1
   b96f2:	6063      	str	r3, [r4, #4]
    return true;
   b96f4:	2601      	movs	r6, #1
   b96f6:	e006      	b.n	b9706 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b96f8:	3101      	adds	r1, #1
   b96fa:	4620      	mov	r0, r4
   b96fc:	f7ff ff83 	bl	b9606 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9700:	4606      	mov	r6, r0
   b9702:	2800      	cmp	r0, #0
   b9704:	d1e7      	bne.n	b96d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b9706:	a801      	add	r0, sp, #4
   b9708:	f7fb fcf4 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b970c:	4630      	mov	r0, r6
   b970e:	b002      	add	sp, #8
   b9710:	bd70      	pop	{r4, r5, r6, pc}
   b9712:	4669      	mov	r1, sp
   b9714:	4628      	mov	r0, r5
   b9716:	f7ff f85f 	bl	b87d8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b971a:	e7e8      	b.n	b96ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b971c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b9720:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b97dc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b9724:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b97e0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b9728:	b093      	sub	sp, #76	; 0x4c
   b972a:	4605      	mov	r5, r0
   b972c:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b972e:	2700      	movs	r7, #0
   b9730:	682b      	ldr	r3, [r5, #0]
   b9732:	42bb      	cmp	r3, r7
   b9734:	d94e      	bls.n	b97d4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b9736:	a803      	add	r0, sp, #12
   b9738:	f7fe fe8a 	bl	b8450 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b973c:	261c      	movs	r6, #28
   b973e:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b9740:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b9742:	437e      	muls	r6, r7
   b9744:	4432      	add	r2, r6
   b9746:	f10d 0c14 	add.w	ip, sp, #20
   b974a:	1d13      	adds	r3, r2, #4
   b974c:	46e3      	mov	fp, ip
   b974e:	3214      	adds	r2, #20
   b9750:	6818      	ldr	r0, [r3, #0]
   b9752:	6859      	ldr	r1, [r3, #4]
   b9754:	46e6      	mov	lr, ip
   b9756:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b975a:	3308      	adds	r3, #8
   b975c:	4293      	cmp	r3, r2
   b975e:	46f4      	mov	ip, lr
   b9760:	d1f6      	bne.n	b9750 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b9762:	6818      	ldr	r0, [r3, #0]
   b9764:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b9768:	4659      	mov	r1, fp
   b976a:	a80a      	add	r0, sp, #40	; 0x28
   b976c:	f7fe fb96 	bl	b7e9c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9770:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b9774:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b977a:	f8dc 3000 	ldr.w	r3, [ip]
   b977e:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b9780:	686b      	ldr	r3, [r5, #4]
   b9782:	9a03      	ldr	r2, [sp, #12]
   b9784:	4433      	add	r3, r6
   b9786:	a903      	add	r1, sp, #12
   b9788:	8b1b      	ldrh	r3, [r3, #24]
   b978a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b978c:	686b      	ldr	r3, [r5, #4]
   b978e:	4433      	add	r3, r6
   b9790:	8b5b      	ldrh	r3, [r3, #26]
   b9792:	82d3      	strh	r3, [r2, #22]
        return services_;
   b9794:	f8d8 0000 	ldr.w	r0, [r8]
   b9798:	f100 040c 	add.w	r4, r0, #12
   b979c:	a80a      	add	r0, sp, #40	; 0x28
   b979e:	f7ff f81b 	bl	b87d8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b97a2:	4620      	mov	r0, r4
   b97a4:	a90a      	add	r1, sp, #40	; 0x28
   b97a6:	f7ff ff8c 	bl	b96c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b97aa:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b97ac:	a80b      	add	r0, sp, #44	; 0x2c
   b97ae:	f7fb fca1 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b97b2:	b954      	cbnz	r4, b97ca <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b97b4:	2320      	movs	r3, #32
   b97b6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b97ba:	f8cd 9000 	str.w	r9, [sp]
   b97be:	4623      	mov	r3, r4
   b97c0:	aa0a      	add	r2, sp, #40	; 0x28
   b97c2:	4651      	mov	r1, sl
   b97c4:	2032      	movs	r0, #50	; 0x32
   b97c6:	f7fd fe3b 	bl	b7440 <log_message>
   b97ca:	a804      	add	r0, sp, #16
   b97cc:	f7fb fc92 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b97d0:	3701      	adds	r7, #1
   b97d2:	e7ad      	b.n	b9730 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b97d4:	b013      	add	sp, #76	; 0x4c
   b97d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b97da:	bf00      	nop
   b97dc:	000bc215 	.word	0x000bc215
   b97e0:	000bc117 	.word	0x000bc117

000b97e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b97e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b97e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b97e8:	4604      	mov	r4, r0
   b97ea:	460d      	mov	r5, r1
   b97ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b97ee:	d914      	bls.n	b981a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b97f0:	4290      	cmp	r0, r2
   b97f2:	d213      	bcs.n	b981c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b97f4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b97f8:	1a75      	subs	r5, r6, r1
   b97fa:	f1a1 0708 	sub.w	r7, r1, #8
   b97fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9800:	42b7      	cmp	r7, r6
   b9802:	d018      	beq.n	b9836 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9804:	b11c      	cbz	r4, b980e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9806:	4631      	mov	r1, r6
   b9808:	4620      	mov	r0, r4
   b980a:	f7fe ffd7 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
   b980e:	1d30      	adds	r0, r6, #4
   b9810:	f7fb fc70 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9814:	3e08      	subs	r6, #8
   b9816:	3c08      	subs	r4, #8
   b9818:	e7f2      	b.n	b9800 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b981a:	d00c      	beq.n	b9836 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b981c:	42b5      	cmp	r5, r6
   b981e:	d00a      	beq.n	b9836 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9820:	b11c      	cbz	r4, b982a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9822:	4629      	mov	r1, r5
   b9824:	4620      	mov	r0, r4
   b9826:	f7fe ffc9 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
   b982a:	1d28      	adds	r0, r5, #4
   b982c:	f7fb fc62 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9830:	3508      	adds	r5, #8
   b9832:	3408      	adds	r4, #8
   b9834:	e7f2      	b.n	b981c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9838 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9838:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b983a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b983c:	4605      	mov	r5, r0
        if (n > 0) {
   b983e:	dd11      	ble.n	b9864 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9840:	00f0      	lsls	r0, r6, #3
   b9842:	f7fd fee9 	bl	b7618 <malloc>
            if (!d) {
   b9846:	4604      	mov	r4, r0
   b9848:	b158      	cbz	r0, b9862 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b984a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b984e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9852:	f7ff ffc7 	bl	b97e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9856:	6828      	ldr	r0, [r5, #0]
   b9858:	f7fd fee6 	bl	b7628 <free>
        data_ = d;
   b985c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b985e:	60ae      	str	r6, [r5, #8]
        return true;
   b9860:	2001      	movs	r0, #1
    }
   b9862:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9864:	2400      	movs	r4, #0
   b9866:	e7f6      	b.n	b9856 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9868 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b986c:	2300      	movs	r3, #0
   b986e:	e9c0 3300 	strd	r3, r3, [r0]
   b9872:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9874:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9876:	6849      	ldr	r1, [r1, #4]
   b9878:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b987a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b987c:	dd13      	ble.n	b98a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b987e:	f7ff ffdb 	bl	b9838 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9882:	b180      	cbz	r0, b98a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9884:	e9d5 6300 	ldrd	r6, r3, [r5]
   b9888:	6827      	ldr	r7, [r4, #0]
   b988a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b988e:	45b0      	cmp	r8, r6
   b9890:	d007      	beq.n	b98a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9892:	b11f      	cbz	r7, b989c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b9894:	4631      	mov	r1, r6
   b9896:	4638      	mov	r0, r7
   b9898:	f7fe ff90 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b989c:	3608      	adds	r6, #8
   b989e:	3708      	adds	r7, #8
   b98a0:	e7f5      	b.n	b988e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b98a2:	686b      	ldr	r3, [r5, #4]
   b98a4:	6063      	str	r3, [r4, #4]
}
   b98a6:	4620      	mov	r0, r4
   b98a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b98ac <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b98ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98ae:	460d      	mov	r5, r1
   b98b0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b98b2:	a801      	add	r0, sp, #4
   b98b4:	f7fe fa26 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b98b8:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b98ba:	4620      	mov	r0, r4
   b98bc:	3118      	adds	r1, #24
   b98be:	f7ff ffd3 	bl	b9868 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b98c2:	a801      	add	r0, sp, #4
   b98c4:	f7fe fa2c 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b98c8:	4620      	mov	r0, r4
   b98ca:	b003      	add	sp, #12
   b98cc:	bd30      	pop	{r4, r5, pc}

000b98ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b98ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b98d0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b98d2:	6845      	ldr	r5, [r0, #4]
   b98d4:	4668      	mov	r0, sp
   b98d6:	f7fe ff71 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b98da:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b98de:	4299      	cmp	r1, r3
   b98e0:	da10      	bge.n	b9904 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b98e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b98e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b98e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b98ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b98ee:	4629      	mov	r1, r5
   b98f0:	f105 0008 	add.w	r0, r5, #8
   b98f4:	f7ff ff76 	bl	b97e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b98f8:	b98d      	cbnz	r5, b991e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b98fa:	6863      	ldr	r3, [r4, #4]
   b98fc:	3301      	adds	r3, #1
   b98fe:	6063      	str	r3, [r4, #4]
    return true;
   b9900:	2601      	movs	r6, #1
   b9902:	e006      	b.n	b9912 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9904:	3101      	adds	r1, #1
   b9906:	4620      	mov	r0, r4
   b9908:	f7ff ff96 	bl	b9838 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b990c:	4606      	mov	r6, r0
   b990e:	2800      	cmp	r0, #0
   b9910:	d1e7      	bne.n	b98e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9912:	a801      	add	r0, sp, #4
   b9914:	f7fb fbee 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9918:	4630      	mov	r0, r6
   b991a:	b002      	add	sp, #8
   b991c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b991e:	4669      	mov	r1, sp
   b9920:	4628      	mov	r0, r5
   b9922:	f7fe ff4b 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9926:	e7e8      	b.n	b98fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9928 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9928:	b5f0      	push	{r4, r5, r6, r7, lr}
   b992a:	b085      	sub	sp, #20
   b992c:	4605      	mov	r5, r0
    WiringBleLock lk;
   b992e:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9930:	460c      	mov	r4, r1
   b9932:	4617      	mov	r7, r2
    WiringBleLock lk;
   b9934:	f7fe f9e6 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b9938:	2300      	movs	r3, #0
   b993a:	e9c5 3300 	strd	r3, r3, [r5]
   b993e:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b9940:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b9942:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b9946:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b994a:	42b4      	cmp	r4, r6
   b994c:	d011      	beq.n	b9972 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b994e:	6838      	ldr	r0, [r7, #0]
   b9950:	4621      	mov	r1, r4
   b9952:	f7fe fc97 	bl	b8284 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b9956:	b150      	cbz	r0, b996e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b9958:	4621      	mov	r1, r4
   b995a:	a802      	add	r0, sp, #8
   b995c:	f7fe ff2e 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9960:	a902      	add	r1, sp, #8
   b9962:	4628      	mov	r0, r5
   b9964:	f7ff ffb3 	bl	b98ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b9968:	a803      	add	r0, sp, #12
   b996a:	f7fb fbc3 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b996e:	3408      	adds	r4, #8
   b9970:	e7eb      	b.n	b994a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b9972:	a801      	add	r0, sp, #4
   b9974:	f7fe f9d4 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9978:	4628      	mov	r0, r5
   b997a:	b005      	add	sp, #20
   b997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9980 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b9984:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9986:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9988:	b091      	sub	sp, #68	; 0x44
   b998a:	4606      	mov	r6, r0
   b998c:	460f      	mov	r7, r1
   b998e:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b9990:	b933      	cbnz	r3, b99a0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b9992:	e9c0 3300 	strd	r3, r3, [r0]
   b9996:	6083      	str	r3, [r0, #8]
}
   b9998:	4630      	mov	r0, r6
   b999a:	b011      	add	sp, #68	; 0x44
   b999c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b99a0:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b99a2:	7e0d      	ldrb	r5, [r1, #24]
   b99a4:	2d00      	cmp	r5, #0
   b99a6:	d158      	bne.n	b9a5a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b99a8:	2320      	movs	r3, #32
   b99aa:	462a      	mov	r2, r5
   b99ac:	a803      	add	r0, sp, #12
   b99ae:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b99b2:	f7fe fbba 	bl	b812a <_ZNK8particle7BleUuid8toStringEb>
   b99b6:	9b03      	ldr	r3, [sp, #12]
   b99b8:	9301      	str	r3, [sp, #4]
   b99ba:	4b2b      	ldr	r3, [pc, #172]	; (b9a68 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b99bc:	492b      	ldr	r1, [pc, #172]	; (b9a6c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b99be:	9300      	str	r3, [sp, #0]
   b99c0:	aa08      	add	r2, sp, #32
   b99c2:	462b      	mov	r3, r5
   b99c4:	2001      	movs	r0, #1
   b99c6:	f7fd fd3b 	bl	b7440 <log_message>
   b99ca:	a803      	add	r0, sp, #12
   b99cc:	f7fd ff18 	bl	b7800 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b99d0:	231c      	movs	r3, #28
   b99d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b99d6:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b99da:	8a9a      	ldrh	r2, [r3, #20]
   b99dc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b99e0:	8adb      	ldrh	r3, [r3, #22]
   b99e2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b99e6:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b99e8:	4a21      	ldr	r2, [pc, #132]	; (b9a70 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b99ea:	8818      	ldrh	r0, [r3, #0]
   b99ec:	9500      	str	r5, [sp, #0]
   b99ee:	a908      	add	r1, sp, #32
   b99f0:	f7fd fc02 	bl	b71f8 <hal_ble_gatt_client_discover_characteristics>
   b99f4:	2800      	cmp	r0, #0
   b99f6:	db30      	blt.n	b9a5a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b99f8:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b99fa:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b99fe:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b9a02:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9a04:	f1a4 0308 	sub.w	r3, r4, #8
   b9a08:	4599      	cmp	r9, r3
   b9a0a:	d022      	beq.n	b9a52 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b9a0c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b9a10:	89db      	ldrh	r3, [r3, #14]
   b9a12:	2b00      	cmp	r3, #0
   b9a14:	d0f5      	beq.n	b9a02 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b9a16:	2210      	movs	r2, #16
   b9a18:	2100      	movs	r1, #0
   b9a1a:	eb0d 0002 	add.w	r0, sp, r2
   b9a1e:	9503      	str	r5, [sp, #12]
   b9a20:	f002 f842 	bl	bbaa8 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b9a24:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b9a28:	89d9      	ldrh	r1, [r3, #14]
   b9a2a:	683b      	ldr	r3, [r7, #0]
   b9a2c:	aa03      	add	r2, sp, #12
   b9a2e:	8818      	ldrh	r0, [r3, #0]
   b9a30:	9500      	str	r5, [sp, #0]
   b9a32:	2313      	movs	r3, #19
   b9a34:	f7fd fbfe 	bl	b7234 <hal_ble_gatt_client_read>
                if (len > 0) {
   b9a38:	2800      	cmp	r0, #0
   b9a3a:	d0e2      	beq.n	b9a02 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b9a3c:	ab10      	add	r3, sp, #64	; 0x40
   b9a3e:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b9a40:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b9a42:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b9a46:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b9a4a:	303c      	adds	r0, #60	; 0x3c
   b9a4c:	f7fd ff79 	bl	b7942 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9a50:	e7d7      	b.n	b9a02 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b9a52:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b9a56:	2201      	movs	r2, #1
   b9a58:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b9a5a:	4642      	mov	r2, r8
   b9a5c:	4639      	mov	r1, r7
   b9a5e:	4630      	mov	r0, r6
   b9a60:	f7ff ff62 	bl	b9928 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b9a64:	e798      	b.n	b9998 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b9a66:	bf00      	nop
   b9a68:	000bc23a 	.word	0x000bc23a
   b9a6c:	000bc117 	.word	0x000bc117
   b9a70:	000b9c19 	.word	0x000b9c19

000b9a74 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b9a74:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b9a76:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9a78:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b9a7a:	b085      	sub	sp, #20
   b9a7c:	4606      	mov	r6, r0
   b9a7e:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b9a80:	b92b      	cbnz	r3, b9a8e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b9a82:	a801      	add	r0, sp, #4
   b9a84:	f7ff fe0a 	bl	b969c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b9a88:	a801      	add	r0, sp, #4
   b9a8a:	f7fe fec7 	bl	b881c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b9a8e:	682b      	ldr	r3, [r5, #0]
   b9a90:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b9a94:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b9a98:	42bc      	cmp	r4, r7
   b9a9a:	d009      	beq.n	b9ab0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b9a9c:	4622      	mov	r2, r4
   b9a9e:	4629      	mov	r1, r5
   b9aa0:	a801      	add	r0, sp, #4
   b9aa2:	f7ff ff6d 	bl	b9980 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b9aa6:	a801      	add	r0, sp, #4
   b9aa8:	f7fe feca 	bl	b8840 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b9aac:	3408      	adds	r4, #8
   b9aae:	e7f3      	b.n	b9a98 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b9ab0:	4630      	mov	r0, r6
   b9ab2:	4629      	mov	r1, r5
   b9ab4:	f7ff fefa 	bl	b98ac <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b9ab8:	4630      	mov	r0, r6
   b9aba:	b005      	add	sp, #20
   b9abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9ac0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9ac4:	4605      	mov	r5, r0
   b9ac6:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b9ac8:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b9aca:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9acc:	460f      	mov	r7, r1
    return address_;
   b9ace:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9ad0:	4698      	mov	r8, r3
    return address_;
   b9ad2:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b9ad4:	4b41      	ldr	r3, [pc, #260]	; (b9bdc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b9ad6:	9304      	str	r3, [sp, #16]
    return address_;
   b9ad8:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b9ada:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b9adc:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b9ae0:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b9ae4:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b9ae8:	f7fe fd7e 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9aec:	4b3c      	ldr	r3, [pc, #240]	; (b9be0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b9aee:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b9af0:	f7fe fd7a 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b9af4:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9af6:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b9af8:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b9afa:	464a      	mov	r2, r9
   b9afc:	a804      	add	r0, sp, #16
   b9afe:	f7fd fba3 	bl	b7248 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b9b02:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b9b04:	4604      	mov	r4, r0
   b9b06:	b138      	cbz	r0, b9b18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b9b08:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9b0e:	801a      	strh	r2, [r3, #0]
}
   b9b10:	4620      	mov	r0, r4
   b9b12:	b013      	add	sp, #76	; 0x4c
   b9b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b9b18:	4639      	mov	r1, r7
   b9b1a:	4628      	mov	r0, r5
   b9b1c:	f7fe fce8 	bl	b84f0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b9b20:	a803      	add	r0, sp, #12
   b9b22:	f7fe f8ef 	bl	b7d04 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b9b26:	f7fe fd5f 	bl	b85e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b9b2a:	6807      	ldr	r7, [r0, #0]
   b9b2c:	4629      	mov	r1, r5
   b9b2e:	3718      	adds	r7, #24
   b9b30:	4630      	mov	r0, r6
   b9b32:	f7fe fe5b 	bl	b87ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b9b36:	4631      	mov	r1, r6
   b9b38:	4638      	mov	r0, r7
   b9b3a:	f7ff f98b 	bl	b8e54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b9b3e:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b9b40:	a80b      	add	r0, sp, #44	; 0x2c
   b9b42:	f7fb fad7 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9b46:	f04f 0920 	mov.w	r9, #32
   b9b4a:	bb1f      	cbnz	r7, b9b94 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b9b4c:	4632      	mov	r2, r6
   b9b4e:	4b25      	ldr	r3, [pc, #148]	; (b9be4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b9b50:	4e25      	ldr	r6, [pc, #148]	; (b9be8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b9b52:	4926      	ldr	r1, [pc, #152]	; (b9bec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9b54:	9300      	str	r3, [sp, #0]
   b9b56:	2032      	movs	r0, #50	; 0x32
   b9b58:	4623      	mov	r3, r4
   b9b5a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b9b5e:	f7fd fc6f 	bl	b7440 <log_message>
   b9b62:	6830      	ldr	r0, [r6, #0]
   b9b64:	f7fd fbd4 	bl	b7310 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9b68:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b9b6a:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9b6e:	4621      	mov	r1, r4
   b9b70:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9b72:	4c1f      	ldr	r4, [pc, #124]	; (b9bf0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9b74:	f7fd fb22 	bl	b71bc <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b9b78:	6830      	ldr	r0, [r6, #0]
   b9b7a:	f7fd fbc1 	bl	b7300 <os_mutex_recursive_lock>
        locked_ = true;
   b9b7e:	2301      	movs	r3, #1
   b9b80:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b9b84:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9b8a:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9b8c:	a803      	add	r0, sp, #12
   b9b8e:	f7fe f8c7 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
   b9b92:	e7bd      	b.n	b9b10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b9b94:	a803      	add	r0, sp, #12
   b9b96:	f7fe f8c3 	bl	b7d20 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b9b9a:	4b16      	ldr	r3, [pc, #88]	; (b9bf4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b9b9c:	9300      	str	r3, [sp, #0]
   b9b9e:	4913      	ldr	r1, [pc, #76]	; (b9bec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9ba0:	4623      	mov	r3, r4
   b9ba2:	4632      	mov	r2, r6
   b9ba4:	2001      	movs	r0, #1
   b9ba6:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b9baa:	f7fd fc49 	bl	b7440 <log_message>
    if (automatic) {
   b9bae:	f1b8 0f00 	cmp.w	r8, #0
   b9bb2:	d0ad      	beq.n	b9b10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9bb4:	4629      	mov	r1, r5
   b9bb6:	4630      	mov	r0, r6
   b9bb8:	f7ff ff5c 	bl	b9a74 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b9bbc:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b9bc0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b9bc4:	42bd      	cmp	r5, r7
   b9bc6:	d005      	beq.n	b9bd4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b9bc8:	4628      	mov	r0, r5
   b9bca:	2101      	movs	r1, #1
   b9bcc:	f7fe fc06 	bl	b83dc <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b9bd0:	3508      	adds	r5, #8
   b9bd2:	e7f7      	b.n	b9bc4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9bd4:	4630      	mov	r0, r6
   b9bd6:	f7fe fe33 	bl	b8840 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9bda:	e799      	b.n	b9b10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b9bdc:	00180003 	.word	0x00180003
   b9be0:	000b8f0d 	.word	0x000b8f0d
   b9be4:	000bc26c 	.word	0x000bc26c
   b9be8:	2003e6e0 	.word	0x2003e6e0
   b9bec:	000bc117 	.word	0x000bc117
   b9bf0:	fffffefc 	.word	0xfffffefc
   b9bf4:	000bc288 	.word	0x000bc288

000b9bf8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b9bf8:	b513      	push	{r0, r1, r4, lr}
   b9bfa:	4604      	mov	r4, r0
   b9bfc:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b9c00:	f7fe fc42 	bl	b8488 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b9c04:	9b00      	ldr	r3, [sp, #0]
   b9c06:	9901      	ldr	r1, [sp, #4]
   b9c08:	2200      	movs	r2, #0
   b9c0a:	4620      	mov	r0, r4
   b9c0c:	f7ff ff58 	bl	b9ac0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   b9c10:	4620      	mov	r0, r4
   b9c12:	b002      	add	sp, #8
   b9c14:	bd10      	pop	{r4, pc}
	...

000b9c18 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b9c1c:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9c1e:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b9c20:	2600      	movs	r6, #0
   b9c22:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b9c26:	4b66      	ldr	r3, [pc, #408]	; (b9dc0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b9c28:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9c2a:	4605      	mov	r5, r0
   b9c2c:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b9c2e:	4633      	mov	r3, r6
   b9c30:	4964      	ldr	r1, [pc, #400]	; (b9dc4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9c32:	f8df 9194 	ldr.w	r9, [pc, #404]	; b9dc8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b9c36:	f8df 818c 	ldr.w	r8, [pc, #396]	; b9dc4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9c3a:	f8df a190 	ldr.w	sl, [pc, #400]	; b9dcc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b9c3e:	aa0c      	add	r2, sp, #48	; 0x30
   b9c40:	2001      	movs	r0, #1
   b9c42:	f7fd fbfd 	bl	b7440 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b9c46:	682b      	ldr	r3, [r5, #0]
   b9c48:	42b3      	cmp	r3, r6
   b9c4a:	f240 80b5 	bls.w	b9db8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b9c4e:	a803      	add	r0, sp, #12
   b9c50:	f7fe fb3e 	bl	b82d0 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b9c54:	a805      	add	r0, sp, #20
   b9c56:	f7fe fbfb 	bl	b8450 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9c5a:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9c5e:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b9c60:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b9c62:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9c66:	445b      	add	r3, fp
        this->size = halHandles.size;
   b9c68:	8bd9      	ldrh	r1, [r3, #30]
   b9c6a:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b9c6c:	8c19      	ldrh	r1, [r3, #32]
   b9c6e:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b9c70:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b9c72:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b9c74:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b9c76:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b9c78:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b9c7a:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b9c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b9c7e:	8253      	strh	r3, [r2, #18]
   b9c80:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b9c84:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b9c88:	429a      	cmp	r2, r3
   b9c8a:	d07d      	beq.n	b9d88 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b9c8c:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b9c8e:	8ac4      	ldrh	r4, [r0, #22]
   b9c90:	428c      	cmp	r4, r1
   b9c92:	d377      	bcc.n	b9d84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b9c94:	8a84      	ldrh	r4, [r0, #20]
   b9c96:	428c      	cmp	r4, r1
   b9c98:	d874      	bhi.n	b9d84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9c9a:	6859      	ldr	r1, [r3, #4]
   b9c9c:	9005      	str	r0, [sp, #20]
   b9c9e:	a806      	add	r0, sp, #24
   b9ca0:	f7fe f80a 	bl	b7cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b9ca4:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b9ca8:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b9cac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9cb0:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b9cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cb6:	f8dc 3000 	ldr.w	r3, [ip]
   b9cba:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b9cbc:	892b      	ldrh	r3, [r5, #8]
   b9cbe:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b9cc2:	686b      	ldr	r3, [r5, #4]
   b9cc4:	9c03      	ldr	r4, [sp, #12]
   b9cc6:	445b      	add	r3, fp
   b9cc8:	7e5b      	ldrb	r3, [r3, #25]
   b9cca:	f013 0f02 	tst.w	r3, #2
   b9cce:	d16e      	bne.n	b9dae <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b9cd0:	686b      	ldr	r3, [r5, #4]
   b9cd2:	445b      	add	r3, fp
   b9cd4:	7e5b      	ldrb	r3, [r3, #25]
   b9cd6:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b9cd8:	bf42      	ittt	mi
   b9cda:	7923      	ldrbmi	r3, [r4, #4]
   b9cdc:	f043 0304 	orrmi.w	r3, r3, #4
   b9ce0:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b9ce2:	686b      	ldr	r3, [r5, #4]
   b9ce4:	445b      	add	r3, fp
   b9ce6:	7e5b      	ldrb	r3, [r3, #25]
   b9ce8:	0719      	lsls	r1, r3, #28
   b9cea:	bf42      	ittt	mi
   b9cec:	7923      	ldrbmi	r3, [r4, #4]
   b9cee:	f043 0308 	orrmi.w	r3, r3, #8
   b9cf2:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b9cf4:	686b      	ldr	r3, [r5, #4]
   b9cf6:	445b      	add	r3, fp
   b9cf8:	7e5b      	ldrb	r3, [r3, #25]
   b9cfa:	06da      	lsls	r2, r3, #27
   b9cfc:	bf42      	ittt	mi
   b9cfe:	7923      	ldrbmi	r3, [r4, #4]
   b9d00:	f043 0310 	orrmi.w	r3, r3, #16
   b9d04:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b9d06:	686b      	ldr	r3, [r5, #4]
   b9d08:	445b      	add	r3, fp
   b9d0a:	aa07      	add	r2, sp, #28
   b9d0c:	7e5b      	ldrb	r3, [r3, #25]
   b9d0e:	069b      	lsls	r3, r3, #26
   b9d10:	bf42      	ittt	mi
   b9d12:	7923      	ldrbmi	r3, [r4, #4]
   b9d14:	f043 0320 	orrmi.w	r3, r3, #32
   b9d18:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b9d1a:	686b      	ldr	r3, [r5, #4]
   b9d1c:	449b      	add	fp, r3
   b9d1e:	f10b 0304 	add.w	r3, fp, #4
   b9d22:	4696      	mov	lr, r2
   b9d24:	f10b 0b14 	add.w	fp, fp, #20
   b9d28:	6818      	ldr	r0, [r3, #0]
   b9d2a:	6859      	ldr	r1, [r3, #4]
   b9d2c:	4694      	mov	ip, r2
   b9d2e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b9d32:	3308      	adds	r3, #8
   b9d34:	455b      	cmp	r3, fp
   b9d36:	4662      	mov	r2, ip
   b9d38:	d1f6      	bne.n	b9d28 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b9d3a:	6818      	ldr	r0, [r3, #0]
   b9d3c:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b9d40:	4671      	mov	r1, lr
   b9d42:	a80c      	add	r0, sp, #48	; 0x30
   b9d44:	f7fe f8aa 	bl	b7e9c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9d48:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b9d4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9d50:	3414      	adds	r4, #20
   b9d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d54:	f8dc 3000 	ldr.w	r3, [ip]
   b9d58:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b9d5a:	a903      	add	r1, sp, #12
   b9d5c:	a80c      	add	r0, sp, #48	; 0x30
   b9d5e:	f7fe fd2d 	bl	b87bc <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9d62:	a90c      	add	r1, sp, #48	; 0x30
   b9d64:	f107 0018 	add.w	r0, r7, #24
   b9d68:	f7ff fdb1 	bl	b98ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9d6c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9d6e:	a80d      	add	r0, sp, #52	; 0x34
   b9d70:	f7fb f9c0 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9d74:	b99c      	cbnz	r4, b9d9e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9d76:	2320      	movs	r3, #32
   b9d78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b9d7c:	f8cd a000 	str.w	sl, [sp]
   b9d80:	4623      	mov	r3, r4
   b9d82:	e007      	b.n	b9d94 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b9d84:	3308      	adds	r3, #8
   b9d86:	e77f      	b.n	b9c88 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9d88:	2420      	movs	r4, #32
   b9d8a:	2300      	movs	r3, #0
   b9d8c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b9d90:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9d94:	aa0c      	add	r2, sp, #48	; 0x30
   b9d96:	4641      	mov	r1, r8
   b9d98:	2032      	movs	r0, #50	; 0x32
   b9d9a:	f7fd fb51 	bl	b7440 <log_message>
   b9d9e:	a806      	add	r0, sp, #24
   b9da0:	f7fb f9a8 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9da4:	a804      	add	r0, sp, #16
   b9da6:	f7fb f9a5 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b9daa:	3601      	adds	r6, #1
   b9dac:	e74b      	b.n	b9c46 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b9dae:	7923      	ldrb	r3, [r4, #4]
   b9db0:	f043 0302 	orr.w	r3, r3, #2
   b9db4:	7123      	strb	r3, [r4, #4]
   b9db6:	e78b      	b.n	b9cd0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b9db8:	b015      	add	sp, #84	; 0x54
   b9dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9dbe:	bf00      	nop
   b9dc0:	000bc2a5 	.word	0x000bc2a5
   b9dc4:	000bc117 	.word	0x000bc117
   b9dc8:	000bc2c0 	.word	0x000bc2c0
   b9dcc:	000bc2ef 	.word	0x000bc2ef

000b9dd0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b9dd2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9dd4:	4605      	mov	r5, r0
        if (n > 0) {
   b9dd6:	dd13      	ble.n	b9e00 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b9dd8:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b9dda:	fb07 f006 	mul.w	r0, r7, r6
   b9dde:	f7fd fc1b 	bl	b7618 <malloc>
            if (!d) {
   b9de2:	4604      	mov	r4, r0
   b9de4:	b158      	cbz	r0, b9dfe <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b9de6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9dea:	fb07 1202 	mla	r2, r7, r2, r1
   b9dee:	f7fc fb3f 	bl	b6470 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9df2:	6828      	ldr	r0, [r5, #0]
   b9df4:	f7fd fc18 	bl	b7628 <free>
        data_ = d;
   b9df8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9dfa:	60ae      	str	r6, [r5, #8]
        return true;
   b9dfc:	2001      	movs	r0, #1
    }
   b9dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9e00:	2400      	movs	r4, #0
   b9e02:	e7f6      	b.n	b9df2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b9e04 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
   b9e04:	b538      	push	{r3, r4, r5, lr}
   b9e06:	460c      	mov	r4, r1
   b9e08:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
   b9e0a:	f101 0018 	add.w	r0, r1, #24
   b9e0e:	f7fd fef7 	bl	b7c00 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b9e12:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9e16:	f7fd fefe 	bl	b7c16 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
   b9e1a:	2200      	movs	r2, #0
   b9e1c:	4621      	mov	r1, r4
   b9e1e:	4804      	ldr	r0, [pc, #16]	; (b9e30 <_ZN8particle16BleScanDelegator5startEv+0x2c>)
   b9e20:	f7fd f9ba 	bl	b7198 <hal_ble_gap_start_scan>
        return resultsVector_;
   b9e24:	4621      	mov	r1, r4
   b9e26:	4628      	mov	r0, r5
   b9e28:	f7fc fbbc 	bl	b65a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
   b9e2c:	4628      	mov	r0, r5
   b9e2e:	bd38      	pop	{r3, r4, r5, pc}
   b9e30:	000b9e55 	.word	0x000b9e55

000b9e34 <_ZNK8particle14BleLocalDevice4scanEv>:
Vector<BleScanResult> BleLocalDevice::scan() const {
   b9e34:	b510      	push	{r4, lr}
   b9e36:	b09e      	sub	sp, #120	; 0x78
   b9e38:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b9e3a:	a801      	add	r0, sp, #4
   b9e3c:	f7fe fc25 	bl	b868a <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
   b9e40:	a901      	add	r1, sp, #4
   b9e42:	4620      	mov	r0, r4
   b9e44:	f7ff ffde 	bl	b9e04 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
   b9e48:	a801      	add	r0, sp, #4
   b9e4a:	f7fe fc60 	bl	b870e <_ZN8particle16BleScanDelegatorD1Ev>
}
   b9e4e:	4620      	mov	r0, r4
   b9e50:	b01e      	add	sp, #120	; 0x78
   b9e52:	bd10      	pop	{r4, pc}

000b9e54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b9e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9e58:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b9e5a:	ad01      	add	r5, sp, #4
   b9e5c:	4606      	mov	r6, r0
   b9e5e:	4628      	mov	r0, r5
   b9e60:	460c      	mov	r4, r1
   b9e62:	f7fd ff94 	bl	b7d8e <_ZN8particle10BleAddressC1Ev>
   b9e66:	a803      	add	r0, sp, #12
   b9e68:	f7fe ffb7 	bl	b8dda <_ZN8particle18BleAdvertisingDataC1Ev>
   b9e6c:	a806      	add	r0, sp, #24
   b9e6e:	f7fe ffb4 	bl	b8dda <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b9e72:	6930      	ldr	r0, [r6, #16]
   b9e74:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b9e76:	89f2      	ldrh	r2, [r6, #14]
   b9e78:	ab13      	add	r3, sp, #76	; 0x4c
   b9e7a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b9e7c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b9e80:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b9e82:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b9e84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b9e88:	a806      	add	r0, sp, #24
   b9e8a:	f7fe ff1a 	bl	b8cc2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b9e8e:	89b2      	ldrh	r2, [r6, #12]
   b9e90:	6871      	ldr	r1, [r6, #4]
   b9e92:	a803      	add	r0, sp, #12
   b9e94:	f7fe ff15 	bl	b8cc2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b9e98:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9e9c:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b9e9e:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9ea0:	d003      	beq.n	b9eaa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b9ea2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9ea6:	429a      	cmp	r2, r3
   b9ea8:	db5c      	blt.n	b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b9eaa:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b9eae:	2b7f      	cmp	r3, #127	; 0x7f
   b9eb0:	d003      	beq.n	b9eba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b9eb2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9eb6:	429a      	cmp	r2, r3
   b9eb8:	dc54      	bgt.n	b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b9eba:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b9ebe:	4638      	mov	r0, r7
   b9ec0:	f7fe fdac 	bl	b8a1c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b9ec4:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b9ec6:	2b00      	cmp	r3, #0
   b9ec8:	dd52      	ble.n	b9f70 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b9eca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b9ecc:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b9ed0:	45b1      	cmp	r9, r6
   b9ed2:	d050      	beq.n	b9f76 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b9ed4:	4630      	mov	r0, r6
   b9ed6:	4629      	mov	r1, r5
   b9ed8:	f7fd ff45 	bl	b7d66 <_ZNK8particle10BleAddresseqERKS0_>
   b9edc:	3608      	adds	r6, #8
   b9ede:	4680      	mov	r8, r0
   b9ee0:	2800      	cmp	r0, #0
   b9ee2:	d0f5      	beq.n	b9ed0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b9ee4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9ee6:	f7fd fb9f 	bl	b7628 <free>
        if (!delegator->filterByRssi(result) ||
   b9eea:	f1b8 0f00 	cmp.w	r8, #0
   b9eee:	d039      	beq.n	b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b9ef0:	4629      	mov	r1, r5
   b9ef2:	4620      	mov	r0, r4
   b9ef4:	f7fe fd55 	bl	b89a2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b9ef8:	b3a0      	cbz	r0, b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b9efa:	4629      	mov	r1, r5
   b9efc:	4620      	mov	r0, r4
   b9efe:	f7ff fa7c 	bl	b93fa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b9f02:	4606      	mov	r6, r0
   b9f04:	b370      	cbz	r0, b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b9f06:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b9f0a:	4638      	mov	r0, r7
   b9f0c:	f7fe fdd1 	bl	b8ab2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b9f10:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9f12:	2b00      	cmp	r3, #0
   b9f14:	dd12      	ble.n	b9f3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b9f16:	a806      	add	r0, sp, #24
   b9f18:	f7fe f97b 	bl	b8212 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b9f1c:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b9f1e:	a803      	add	r0, sp, #12
   b9f20:	f7fe f977 	bl	b8212 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b9f24:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b9f28:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b9f2c:	429a      	cmp	r2, r3
   b9f2e:	d025      	beq.n	b9f7c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b9f30:	f833 1b02 	ldrh.w	r1, [r3], #2
   b9f34:	4588      	cmp	r8, r1
   b9f36:	d001      	beq.n	b9f3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b9f38:	4288      	cmp	r0, r1
   b9f3a:	d1f7      	bne.n	b9f2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b9f3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9f3e:	f7fd fb73 	bl	b7628 <free>
              !delegator->filterByServiceUUID(result) ||
   b9f42:	b17e      	cbz	r6, b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b9f44:	4629      	mov	r1, r5
   b9f46:	4620      	mov	r0, r4
   b9f48:	f7fe fde8 	bl	b8b1c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b9f4c:	b150      	cbz	r0, b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b9f4e:	6a23      	ldr	r3, [r4, #32]
   b9f50:	b1b3      	cbz	r3, b9f80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b9f52:	6963      	ldr	r3, [r4, #20]
   b9f54:	9513      	str	r5, [sp, #76]	; 0x4c
   b9f56:	3301      	adds	r3, #1
   b9f58:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9f5c:	4639      	mov	r1, r7
   b9f5e:	f104 0018 	add.w	r0, r4, #24
   b9f62:	4798      	blx	r3
            return;
   b9f64:	4628      	mov	r0, r5
   b9f66:	f7fc f992 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
    }
   b9f6a:	b01d      	add	sp, #116	; 0x74
   b9f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b9f70:	f04f 0801 	mov.w	r8, #1
   b9f74:	e7b6      	b.n	b9ee4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9f76:	f04f 0800 	mov.w	r8, #0
   b9f7a:	e7b3      	b.n	b9ee4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9f7c:	2600      	movs	r6, #0
   b9f7e:	e7dd      	b.n	b9f3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b9f80:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b9f84:	f1b8 0f00 	cmp.w	r8, #0
   b9f88:	d007      	beq.n	b9f9a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b9f8a:	6963      	ldr	r3, [r4, #20]
   b9f8c:	3301      	adds	r3, #1
   b9f8e:	6163      	str	r3, [r4, #20]
   b9f90:	4629      	mov	r1, r5
   b9f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9f94:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9f98:	e7e3      	b.n	b9f62 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b9f9a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b9f9e:	f1bc 0f00 	cmp.w	ip, #0
   b9fa2:	d025      	beq.n	b9ff0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b9fa4:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9fa6:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b9fa8:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9faa:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b9fac:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9fae:	d8d9      	bhi.n	b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9fb0:	2224      	movs	r2, #36	; 0x24
   b9fb2:	4353      	muls	r3, r2
    address_ = addr.address_;
   b9fb4:	462a      	mov	r2, r5
   b9fb6:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9fb8:	3b24      	subs	r3, #36	; 0x24
   b9fba:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b9fbe:	f84c 0003 	str.w	r0, [ip, r3]
   b9fc2:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b9fc4:	f106 0008 	add.w	r0, r6, #8
   b9fc8:	a903      	add	r1, sp, #12
   b9fca:	f7fe fe42 	bl	b8c52 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9fce:	a906      	add	r1, sp, #24
   b9fd0:	f106 0014 	add.w	r0, r6, #20
   b9fd4:	f7fe fe3d 	bl	b8c52 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9fd8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b9fdc:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b9fe0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b9fe4:	429a      	cmp	r2, r3
   b9fe6:	d3bd      	bcc.n	b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b9fe8:	4640      	mov	r0, r8
   b9fea:	f7fd f8dd 	bl	b71a8 <hal_ble_gap_stop_scan>
   b9fee:	e7b9      	b.n	b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b9ff0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9ff4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9ff8:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b9ffc:	a903      	add	r1, sp, #12
   b9ffe:	a80c      	add	r0, sp, #48	; 0x30
   ba000:	f7fc f96e 	bl	b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   ba004:	a906      	add	r1, sp, #24
   ba006:	a80f      	add	r0, sp, #60	; 0x3c
   ba008:	f7fc f96a 	bl	b62e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   ba00c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   ba010:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   ba014:	4641      	mov	r1, r8
   ba016:	4638      	mov	r0, r7
   ba018:	6866      	ldr	r6, [r4, #4]
   ba01a:	f7fc f9a6 	bl	b636a <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba01e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba022:	4299      	cmp	r1, r3
   ba024:	da10      	bge.n	ba048 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   ba026:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba028:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   ba02a:	2224      	movs	r2, #36	; 0x24
   ba02c:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   ba030:	f106 0024 	add.w	r0, r6, #36	; 0x24
   ba034:	fb02 3201 	mla	r2, r2, r1, r3
   ba038:	4631      	mov	r1, r6
   ba03a:	f7fc fa19 	bl	b6470 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba03e:	b986      	cbnz	r6, ba062 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   ba040:	6863      	ldr	r3, [r4, #4]
   ba042:	3301      	adds	r3, #1
   ba044:	6063      	str	r3, [r4, #4]
    return true;
   ba046:	e005      	b.n	ba054 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba048:	3101      	adds	r1, #1
   ba04a:	4620      	mov	r0, r4
   ba04c:	f7ff fec0 	bl	b9dd0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba050:	2800      	cmp	r0, #0
   ba052:	d1e8      	bne.n	ba026 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   ba054:	4638      	mov	r0, r7
   ba056:	f7fc f91a 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   ba05a:	4640      	mov	r0, r8
   ba05c:	f7fc f917 	bl	b628e <_ZN8particle13BleScanResultD1Ev>
   ba060:	e780      	b.n	b9f64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   ba062:	4639      	mov	r1, r7
   ba064:	4630      	mov	r0, r6
   ba066:	f7fc f980 	bl	b636a <_ZN8particle13BleScanResultC1EOS0_>
   ba06a:	e7e9      	b.n	ba040 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000ba06c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   ba06c:	4802      	ldr	r0, [pc, #8]	; (ba078 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba06e:	2300      	movs	r3, #0
   ba070:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   ba072:	f7fd b93d 	b.w	b72f0 <os_mutex_recursive_create>
   ba076:	bf00      	nop
   ba078:	2003e6e0 	.word	0x2003e6e0

000ba07c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba07e:	4606      	mov	r6, r0
   ba080:	460d      	mov	r5, r1
  size_t n = 0;
   ba082:	188f      	adds	r7, r1, r2
   ba084:	2400      	movs	r4, #0
  while (size--) {
   ba086:	42bd      	cmp	r5, r7
   ba088:	d00c      	beq.n	ba0a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba08a:	6833      	ldr	r3, [r6, #0]
   ba08c:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba090:	689b      	ldr	r3, [r3, #8]
   ba092:	4630      	mov	r0, r6
   ba094:	4798      	blx	r3
     if (chunk>=0)
   ba096:	1e03      	subs	r3, r0, #0
   ba098:	db01      	blt.n	ba09e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba09a:	441c      	add	r4, r3
  while (size--) {
   ba09c:	e7f3      	b.n	ba086 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba09e:	2c00      	cmp	r4, #0
   ba0a0:	bf08      	it	eq
   ba0a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba0a4:	4620      	mov	r0, r4
   ba0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba0a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   ba0a8:	b513      	push	{r0, r1, r4, lr}
   ba0aa:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   ba0ac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba0ae:	b159      	cbz	r1, ba0c8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba0b0:	9101      	str	r1, [sp, #4]
   ba0b2:	f001 fd5e 	bl	bbb72 <strlen>
   ba0b6:	6823      	ldr	r3, [r4, #0]
   ba0b8:	9901      	ldr	r1, [sp, #4]
   ba0ba:	68db      	ldr	r3, [r3, #12]
   ba0bc:	4602      	mov	r2, r0
   ba0be:	4620      	mov	r0, r4
    }
   ba0c0:	b002      	add	sp, #8
   ba0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba0c6:	4718      	bx	r3
    }
   ba0c8:	b002      	add	sp, #8
   ba0ca:	bd10      	pop	{r4, pc}

000ba0cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   ba0cc:	6803      	ldr	r3, [r0, #0]
   ba0ce:	689b      	ldr	r3, [r3, #8]
   ba0d0:	4718      	bx	r3

000ba0d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba0d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba0d4:	210d      	movs	r1, #13
{
   ba0d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba0d8:	f7ff fff8 	bl	ba0cc <_ZN5Print5printEc>
  n += print('\n');
   ba0dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba0de:	4604      	mov	r4, r0
  n += print('\n');
   ba0e0:	4628      	mov	r0, r5
   ba0e2:	f7ff fff3 	bl	ba0cc <_ZN5Print5printEc>
  return n;
}
   ba0e6:	4420      	add	r0, r4
   ba0e8:	bd38      	pop	{r3, r4, r5, pc}

000ba0ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba0ea:	b538      	push	{r3, r4, r5, lr}
   ba0ec:	4605      	mov	r5, r0
  return write(str);
   ba0ee:	f7ff ffdb 	bl	ba0a8 <_ZN5Print5writeEPKc>
   ba0f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba0f4:	4628      	mov	r0, r5
   ba0f6:	f7ff ffec 	bl	ba0d2 <_ZN5Print7printlnEv>
  return n;
}
   ba0fa:	4420      	add	r0, r4
   ba0fc:	bd38      	pop	{r3, r4, r5, pc}

000ba0fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba0fe:	b530      	push	{r4, r5, lr}
   ba100:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba102:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba104:	2a01      	cmp	r2, #1
  *str = '\0';
   ba106:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba10a:	bf98      	it	ls
   ba10c:	220a      	movls	r2, #10
   ba10e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba110:	460d      	mov	r5, r1
   ba112:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba116:	fb01 5312 	mls	r3, r1, r2, r5
   ba11a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba11e:	2b09      	cmp	r3, #9
   ba120:	bf94      	ite	ls
   ba122:	3330      	addls	r3, #48	; 0x30
   ba124:	3337      	addhi	r3, #55	; 0x37
   ba126:	b2db      	uxtb	r3, r3
  } while(n);
   ba128:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba12a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba12e:	d9ef      	bls.n	ba110 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba130:	4621      	mov	r1, r4
   ba132:	f7ff ffb9 	bl	ba0a8 <_ZN5Print5writeEPKc>
}
   ba136:	b00b      	add	sp, #44	; 0x2c
   ba138:	bd30      	pop	{r4, r5, pc}

000ba13a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba13e:	b086      	sub	sp, #24
   ba140:	af00      	add	r7, sp, #0
   ba142:	4605      	mov	r5, r0
   ba144:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba146:	1d38      	adds	r0, r7, #4
   ba148:	2114      	movs	r1, #20
{
   ba14a:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba14c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba14e:	f7fd fa8b 	bl	b7668 <vsnprintf>

    if (n<bufsize)
   ba152:	2813      	cmp	r0, #19
   ba154:	d80e      	bhi.n	ba174 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba156:	1d39      	adds	r1, r7, #4
   ba158:	4628      	mov	r0, r5
   ba15a:	f7ff ffa5 	bl	ba0a8 <_ZN5Print5writeEPKc>
   ba15e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba160:	b11e      	cbz	r6, ba16a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba162:	4628      	mov	r0, r5
   ba164:	f7ff ffb5 	bl	ba0d2 <_ZN5Print7printlnEv>
   ba168:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba16a:	4620      	mov	r0, r4
   ba16c:	3718      	adds	r7, #24
   ba16e:	46bd      	mov	sp, r7
   ba170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba174:	f100 0308 	add.w	r3, r0, #8
   ba178:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba17c:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba17e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba182:	4622      	mov	r2, r4
   ba184:	1c41      	adds	r1, r0, #1
   ba186:	683b      	ldr	r3, [r7, #0]
   ba188:	4668      	mov	r0, sp
   ba18a:	f7fd fa6d 	bl	b7668 <vsnprintf>
  return write(str);
   ba18e:	4669      	mov	r1, sp
   ba190:	4628      	mov	r0, r5
   ba192:	f7ff ff89 	bl	ba0a8 <_ZN5Print5writeEPKc>
   ba196:	4604      	mov	r4, r0
   ba198:	46c5      	mov	sp, r8
   ba19a:	e7e1      	b.n	ba160 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba19c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba19c:	4b01      	ldr	r3, [pc, #4]	; (ba1a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba19e:	4a02      	ldr	r2, [pc, #8]	; (ba1a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba1a0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba1a2:	4770      	bx	lr
   ba1a4:	2003e6e8 	.word	0x2003e6e8
   ba1a8:	000bc38e 	.word	0x000bc38e

000ba1ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   ba1ac:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba1ae:	2000      	movs	r0, #0
   ba1b0:	f7fd fa22 	bl	b75f8 <spark_sync_time_pending>
   ba1b4:	b128      	cbz	r0, ba1c2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba1b6:	f7fd fa07 	bl	b75c8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba1ba:	f080 0001 	eor.w	r0, r0, #1
   ba1be:	b2c0      	uxtb	r0, r0
    }
   ba1c0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba1c2:	2001      	movs	r0, #1
   ba1c4:	e7fc      	b.n	ba1c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000ba1c8 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   ba1c8:	b530      	push	{r4, r5, lr}
   ba1ca:	b093      	sub	sp, #76	; 0x4c
   ba1cc:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   ba1d0:	4b19      	ldr	r3, [pc, #100]	; (ba238 <_ZN9TimeClass7timeStrEx+0x70>)
{
   ba1d2:	4604      	mov	r4, r0
    t += time_zone_cache;
   ba1d4:	e9d3 1000 	ldrd	r1, r0, [r3]
   ba1d8:	9b01      	ldr	r3, [sp, #4]
   ba1da:	1852      	adds	r2, r2, r1
   ba1dc:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   ba1e0:	4816      	ldr	r0, [pc, #88]	; (ba23c <_ZN9TimeClass7timeStrEx+0x74>)
   ba1e2:	e9d0 1000 	ldrd	r1, r0, [r0]
   ba1e6:	1852      	adds	r2, r2, r1
   ba1e8:	eb43 0300 	adc.w	r3, r3, r0
   ba1ec:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   ba1f0:	2224      	movs	r2, #36	; 0x24
   ba1f2:	eb0d 0002 	add.w	r0, sp, r2
   ba1f6:	2100      	movs	r1, #0
   ba1f8:	f001 fc56 	bl	bbaa8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   ba1fc:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   ba1fe:	a909      	add	r1, sp, #36	; 0x24
   ba200:	4668      	mov	r0, sp
   ba202:	f7fd fa59 	bl	b76b8 <localtime_r>
    char ascstr[26] = {};
   ba206:	2216      	movs	r2, #22
   ba208:	4629      	mov	r1, r5
   ba20a:	a803      	add	r0, sp, #12
   ba20c:	9502      	str	r5, [sp, #8]
   ba20e:	f001 fc4b 	bl	bbaa8 <memset>
    asctime_r(&calendar_time, ascstr);
   ba212:	a902      	add	r1, sp, #8
   ba214:	a809      	add	r0, sp, #36	; 0x24
   ba216:	f001 fbdb 	bl	bb9d0 <asctime_r>
    int len = strlen(ascstr);
   ba21a:	a802      	add	r0, sp, #8
   ba21c:	f001 fca9 	bl	bbb72 <strlen>
    ascstr[len-1] = 0; // remove final newline
   ba220:	ab12      	add	r3, sp, #72	; 0x48
   ba222:	4418      	add	r0, r3
    return String(ascstr);
   ba224:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   ba226:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   ba22a:	4620      	mov	r0, r4
   ba22c:	f7fd fb33 	bl	b7896 <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba230:	4620      	mov	r0, r4
   ba232:	b013      	add	sp, #76	; 0x4c
   ba234:	bd30      	pop	{r4, r5, pc}
   ba236:	bf00      	nop
   ba238:	2003e6f8 	.word	0x2003e6f8
   ba23c:	2003e6f0 	.word	0x2003e6f0

000ba240 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   ba240:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ba242:	2000      	movs	r0, #0
   ba244:	f7fc ff78 	bl	b7138 <hal_rtc_time_is_valid>
    if (rtcstate)
   ba248:	4604      	mov	r4, r0
   ba24a:	b9a0      	cbnz	r0, ba276 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ba24c:	f7fd f908 	bl	b7460 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ba250:	2801      	cmp	r0, #1
   ba252:	d110      	bne.n	ba276 <_ZN9TimeClass7isValidEv+0x36>
   ba254:	4620      	mov	r0, r4
   ba256:	f7fd f92b 	bl	b74b0 <system_thread_get_state>
   ba25a:	b960      	cbnz	r0, ba276 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ba25c:	f7ff ffa6 	bl	ba1ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ba260:	b910      	cbnz	r0, ba268 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ba262:	f7fd f9a1 	bl	b75a8 <spark_process>
        while (_while() && !_condition()) {
   ba266:	e7f9      	b.n	ba25c <_ZN9TimeClass7isValidEv+0x1c>
   ba268:	f7ff ffa0 	bl	ba1ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ba26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ba270:	2000      	movs	r0, #0
   ba272:	f7fc bf61 	b.w	b7138 <hal_rtc_time_is_valid>
}
   ba276:	4620      	mov	r0, r4
   ba278:	bd10      	pop	{r4, pc}

000ba27a <_ZN9TimeClass3nowEv>:
{
   ba27a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   ba27c:	f7ff ffe0 	bl	ba240 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   ba280:	2210      	movs	r2, #16
   ba282:	2100      	movs	r1, #0
   ba284:	4668      	mov	r0, sp
   ba286:	f001 fc0f 	bl	bbaa8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   ba28a:	2100      	movs	r1, #0
   ba28c:	4668      	mov	r0, sp
   ba28e:	f7fc ff63 	bl	b7158 <hal_rtc_get_time>
}
   ba292:	9800      	ldr	r0, [sp, #0]
   ba294:	b005      	add	sp, #20
   ba296:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba29c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba29c:	4b02      	ldr	r3, [pc, #8]	; (ba2a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba29e:	681a      	ldr	r2, [r3, #0]
   ba2a0:	4b02      	ldr	r3, [pc, #8]	; (ba2ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba2a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba2a4:	4770      	bx	lr
   ba2a6:	bf00      	nop
   ba2a8:	2003e5d4 	.word	0x2003e5d4
   ba2ac:	2003e6ec 	.word	0x2003e6ec

000ba2b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba2b0:	4b01      	ldr	r3, [pc, #4]	; (ba2b8 <_GLOBAL__sub_I_RGB+0x8>)
   ba2b2:	2200      	movs	r2, #0
   ba2b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba2b6:	4770      	bx	lr
   ba2b8:	2003e700 	.word	0x2003e700

000ba2bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba2bc:	4b01      	ldr	r3, [pc, #4]	; (ba2c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba2be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba2c0:	4770      	bx	lr
   ba2c2:	bf00      	nop
   ba2c4:	2003e5d8 	.word	0x2003e5d8

000ba2c8 <serialEventRun>:
{
   ba2c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba2ca:	4b0b      	ldr	r3, [pc, #44]	; (ba2f8 <serialEventRun+0x30>)
   ba2cc:	b143      	cbz	r3, ba2e0 <serialEventRun+0x18>
   ba2ce:	f000 fa9f 	bl	ba810 <_Z16_fetch_usbserialv>
   ba2d2:	6803      	ldr	r3, [r0, #0]
   ba2d4:	691b      	ldr	r3, [r3, #16]
   ba2d6:	4798      	blx	r3
   ba2d8:	2800      	cmp	r0, #0
   ba2da:	dd01      	ble.n	ba2e0 <serialEventRun+0x18>
        serialEvent();
   ba2dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba2e0:	4b06      	ldr	r3, [pc, #24]	; (ba2fc <serialEventRun+0x34>)
   ba2e2:	b143      	cbz	r3, ba2f6 <serialEventRun+0x2e>
   ba2e4:	f000 fd60 	bl	bada8 <_Z22__fetch_global_Serial1v>
   ba2e8:	6803      	ldr	r3, [r0, #0]
   ba2ea:	691b      	ldr	r3, [r3, #16]
   ba2ec:	4798      	blx	r3
   ba2ee:	2800      	cmp	r0, #0
   ba2f0:	dd01      	ble.n	ba2f6 <serialEventRun+0x2e>
        serialEvent1();
   ba2f2:	f3af 8000 	nop.w
}
   ba2f6:	bd08      	pop	{r3, pc}
	...

000ba300 <_post_loop>:
{
   ba300:	b508      	push	{r3, lr}
	serialEventRun();
   ba302:	f7ff ffe1 	bl	ba2c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba306:	f7fc ff0f 	bl	b7128 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba30a:	4b01      	ldr	r3, [pc, #4]	; (ba310 <_post_loop+0x10>)
   ba30c:	6018      	str	r0, [r3, #0]
}
   ba30e:	bd08      	pop	{r3, pc}
   ba310:	2003e758 	.word	0x2003e758

000ba314 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba314:	4805      	ldr	r0, [pc, #20]	; (ba32c <_Z33system_initialize_user_backup_ramv+0x18>)
   ba316:	4a06      	ldr	r2, [pc, #24]	; (ba330 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba318:	4906      	ldr	r1, [pc, #24]	; (ba334 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba31a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba31c:	1a12      	subs	r2, r2, r0
   ba31e:	f001 fb9b 	bl	bba58 <memcpy>
    __backup_sram_signature = signature;
   ba322:	4b05      	ldr	r3, [pc, #20]	; (ba338 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba324:	4a05      	ldr	r2, [pc, #20]	; (ba33c <_Z33system_initialize_user_backup_ramv+0x28>)
   ba326:	601a      	str	r2, [r3, #0]
}
   ba328:	bd08      	pop	{r3, pc}
   ba32a:	bf00      	nop
   ba32c:	2003f400 	.word	0x2003f400
   ba330:	2003f404 	.word	0x2003f404
   ba334:	000bc7fc 	.word	0x000bc7fc
   ba338:	2003f400 	.word	0x2003f400
   ba33c:	9a271c1e 	.word	0x9a271c1e

000ba340 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba340:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba342:	2300      	movs	r3, #0
   ba344:	9300      	str	r3, [sp, #0]
   ba346:	461a      	mov	r2, r3
   ba348:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba34c:	f7fd f8c2 	bl	b74d4 <system_ctrl_set_result>
}
   ba350:	b003      	add	sp, #12
   ba352:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba358 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba358:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba35a:	8843      	ldrh	r3, [r0, #2]
   ba35c:	2b0a      	cmp	r3, #10
   ba35e:	d008      	beq.n	ba372 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba360:	2b50      	cmp	r3, #80	; 0x50
   ba362:	d10b      	bne.n	ba37c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba364:	4b09      	ldr	r3, [pc, #36]	; (ba38c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba366:	681b      	ldr	r3, [r3, #0]
   ba368:	b14b      	cbz	r3, ba37e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba36a:	b003      	add	sp, #12
   ba36c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba370:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba372:	f7ff ffe5 	bl	ba340 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba376:	b003      	add	sp, #12
   ba378:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba37c:	2300      	movs	r3, #0
   ba37e:	9300      	str	r3, [sp, #0]
   ba380:	461a      	mov	r2, r3
   ba382:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba386:	f7fd f8a5 	bl	b74d4 <system_ctrl_set_result>
}
   ba38a:	e7f4      	b.n	ba376 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba38c:	2003e714 	.word	0x2003e714

000ba390 <module_user_init_hook>:
{
   ba390:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba392:	4812      	ldr	r0, [pc, #72]	; (ba3dc <module_user_init_hook+0x4c>)
   ba394:	2100      	movs	r1, #0
   ba396:	f7fd f987 	bl	b76a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba39a:	4b11      	ldr	r3, [pc, #68]	; (ba3e0 <module_user_init_hook+0x50>)
   ba39c:	681a      	ldr	r2, [r3, #0]
   ba39e:	4b11      	ldr	r3, [pc, #68]	; (ba3e4 <module_user_init_hook+0x54>)
   ba3a0:	429a      	cmp	r2, r3
   ba3a2:	4b11      	ldr	r3, [pc, #68]	; (ba3e8 <module_user_init_hook+0x58>)
   ba3a4:	bf0c      	ite	eq
   ba3a6:	2201      	moveq	r2, #1
   ba3a8:	2200      	movne	r2, #0
   ba3aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba3ac:	d001      	beq.n	ba3b2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba3ae:	f7ff ffb1 	bl	ba314 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba3b2:	f7fc fea1 	bl	b70f8 <HAL_RNG_GetRandomNumber>
   ba3b6:	4604      	mov	r4, r0
    srand(seed);
   ba3b8:	f001 fb7e 	bl	bbab8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba3bc:	4b0b      	ldr	r3, [pc, #44]	; (ba3ec <module_user_init_hook+0x5c>)
   ba3be:	b113      	cbz	r3, ba3c6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba3c0:	4620      	mov	r0, r4
   ba3c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba3c6:	2100      	movs	r1, #0
   ba3c8:	4808      	ldr	r0, [pc, #32]	; (ba3ec <module_user_init_hook+0x5c>)
   ba3ca:	f7fd f91d 	bl	b7608 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba3d2:	4807      	ldr	r0, [pc, #28]	; (ba3f0 <module_user_init_hook+0x60>)
   ba3d4:	2100      	movs	r1, #0
   ba3d6:	f7fd b873 	b.w	b74c0 <system_ctrl_set_app_request_handler>
   ba3da:	bf00      	nop
   ba3dc:	000ba2bd 	.word	0x000ba2bd
   ba3e0:	2003f400 	.word	0x2003f400
   ba3e4:	9a271c1e 	.word	0x9a271c1e
   ba3e8:	2003e710 	.word	0x2003e710
   ba3ec:	00000000 	.word	0x00000000
   ba3f0:	000ba359 	.word	0x000ba359

000ba3f4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   ba3f4:	b530      	push	{r4, r5, lr}
        type_(type) {
   ba3f6:	2200      	movs	r2, #0
   ba3f8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   ba3fc:	6002      	str	r2, [r0, #0]
   ba3fe:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba400:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   ba402:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba404:	680c      	ldr	r4, [r1, #0]
   ba406:	8085      	strh	r5, [r0, #4]
   ba408:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba40a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   ba40c:	bd30      	pop	{r4, r5, pc}

000ba40e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba40e:	680b      	ldr	r3, [r1, #0]
   ba410:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba412:	684b      	ldr	r3, [r1, #4]
   ba414:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba416:	b113      	cbz	r3, ba41e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   ba418:	685a      	ldr	r2, [r3, #4]
   ba41a:	3201      	adds	r2, #1
   ba41c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba41e:	4770      	bx	lr

000ba420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   ba420:	b538      	push	{r3, r4, r5, lr}
   ba422:	2300      	movs	r3, #0
   ba424:	4604      	mov	r4, r0
   ba426:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba428:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   ba42a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba42c:	f7f9 fe31 	bl	b4092 <_Znwj>
   ba430:	b128      	cbz	r0, ba43e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   ba432:	2301      	movs	r3, #1
   ba434:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   ba438:	4b02      	ldr	r3, [pc, #8]	; (ba444 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   ba43a:	6003      	str	r3, [r0, #0]
   ba43c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba43e:	6020      	str	r0, [r4, #0]
	}
   ba440:	4620      	mov	r0, r4
   ba442:	bd38      	pop	{r3, r4, r5, pc}
   ba444:	000bbf0c 	.word	0x000bbf0c

000ba448 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   ba448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba44c:	b08b      	sub	sp, #44	; 0x2c
   ba44e:	4605      	mov	r5, r0
   ba450:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   ba454:	460f      	mov	r7, r1
   ba456:	4690      	mov	r8, r2
   ba458:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba45a:	f7fd f8b5 	bl	b75c8 <spark_cloud_flag_connected>
   ba45e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   ba460:	4683      	mov	fp, r0
   ba462:	bb38      	cbnz	r0, ba4b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   ba464:	f64f 732e 	movw	r3, #65326	; 0xff2e
   ba468:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba46a:	a905      	add	r1, sp, #20
   ba46c:	4630      	mov	r0, r6
   ba46e:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba472:	f7ff ffbf 	bl	ba3f4 <_ZN8particle5ErrorC1EOS0_>
   ba476:	2014      	movs	r0, #20
   ba478:	f7f9 fe0b 	bl	b4092 <_Znwj>
   ba47c:	4604      	mov	r4, r0
   ba47e:	b148      	cbz	r0, ba494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   ba480:	2302      	movs	r3, #2
   ba482:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba484:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba486:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba48a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   ba48c:	4631      	mov	r1, r6
   ba48e:	300c      	adds	r0, #12
   ba490:	f7ff ffb0 	bl	ba3f4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba494:	4628      	mov	r0, r5
	: __shared_count(__p)
   ba496:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba498:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   ba49c:	f7ff ffc0 	bl	ba420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba4a0:	4630      	mov	r0, r6
   ba4a2:	f7fa fd1c 	bl	b4ede <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   ba4a6:	a805      	add	r0, sp, #20
   ba4a8:	f7fa fd19 	bl	b4ede <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   ba4ac:	4628      	mov	r0, r5
   ba4ae:	b00b      	add	sp, #44	; 0x2c
   ba4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   ba4b4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   ba4b6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   ba4b8:	2014      	movs	r0, #20
   ba4ba:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   ba4be:	9307      	str	r3, [sp, #28]
   ba4c0:	f7f9 fde7 	bl	b4092 <_Znwj>
   ba4c4:	4601      	mov	r1, r0
   ba4c6:	b118      	cbz	r0, ba4d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba4c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba4cc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba4ce:	7044      	strb	r4, [r0, #1]
   ba4d0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba4d2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   ba4d4:	f7ff ffa4 	bl	ba420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   ba4d8:	4b1e      	ldr	r3, [pc, #120]	; (ba554 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   ba4da:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   ba4dc:	2008      	movs	r0, #8
   ba4de:	f7f9 fdd8 	bl	b4092 <_Znwj>
   ba4e2:	4604      	mov	r4, r0
   ba4e4:	b110      	cbz	r0, ba4ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   ba4e6:	a903      	add	r1, sp, #12
   ba4e8:	f7ff ff91 	bl	ba40e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba4ec:	9600      	str	r6, [sp, #0]
   ba4ee:	fa5f f38a 	uxtb.w	r3, sl
   ba4f2:	464a      	mov	r2, r9
   ba4f4:	4641      	mov	r1, r8
   ba4f6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   ba4f8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba4fa:	f7fd f875 	bl	b75e8 <spark_send_event>
   ba4fe:	b9b8      	cbnz	r0, ba530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   ba500:	9b03      	ldr	r3, [sp, #12]
   ba502:	785b      	ldrb	r3, [r3, #1]
   ba504:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   ba508:	b993      	cbnz	r3, ba530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   ba50a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   ba50e:	a905      	add	r1, sp, #20
   ba510:	a803      	add	r0, sp, #12
   ba512:	9205      	str	r2, [sp, #20]
   ba514:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba518:	f7fb f9cc 	bl	b58b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba51c:	a805      	add	r0, sp, #20
   ba51e:	f7fa fcde 	bl	b4ede <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   ba522:	a805      	add	r0, sp, #20
   ba524:	9909      	ldr	r1, [sp, #36]	; 0x24
   ba526:	f7fa fe31 	bl	b518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   ba52a:	a806      	add	r0, sp, #24
   ba52c:	f7fa fde2 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba530:	a903      	add	r1, sp, #12
   ba532:	a805      	add	r0, sp, #20
   ba534:	f7ff ff6b 	bl	ba40e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba538:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba53a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba53c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   ba53e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   ba540:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba542:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   ba544:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   ba546:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   ba548:	f7fa fdd4 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba54c:	a804      	add	r0, sp, #16
   ba54e:	f7fa fdd1 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   ba552:	e7ab      	b.n	ba4ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   ba554:	000ba559 	.word	0x000ba559

000ba558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   ba558:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba55a:	b089      	sub	sp, #36	; 0x24
   ba55c:	4604      	mov	r4, r0
   ba55e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   ba560:	a801      	add	r0, sp, #4
   ba562:	4611      	mov	r1, r2
   ba564:	f7fa fe12 	bl	b518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   ba568:	b1a4      	cbz	r4, ba594 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   ba56a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba56c:	b11d      	cbz	r5, ba576 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   ba56e:	4628      	mov	r0, r5
   ba570:	f001 fae2 	bl	bbb38 <strdup>
   ba574:	4605      	mov	r5, r0
   ba576:	a801      	add	r0, sp, #4
   ba578:	a903      	add	r1, sp, #12
        type_(type) {
   ba57a:	9503      	str	r5, [sp, #12]
   ba57c:	f8ad 4010 	strh.w	r4, [sp, #16]
   ba580:	f7fb f998 	bl	b58b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba584:	a803      	add	r0, sp, #12
   ba586:	f7fa fcaa 	bl	b4ede <_ZN8particle5ErrorD1Ev>
   ba58a:	a802      	add	r0, sp, #8
   ba58c:	f7fa fdb2 	bl	b50f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba590:	b009      	add	sp, #36	; 0x24
   ba592:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   ba594:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba596:	2301      	movs	r3, #1
   ba598:	e8d5 2f4f 	ldrexb	r2, [r5]
   ba59c:	2a00      	cmp	r2, #0
   ba59e:	d103      	bne.n	ba5a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   ba5a0:	e8c5 3f41 	strexb	r1, r3, [r5]
   ba5a4:	2900      	cmp	r1, #0
   ba5a6:	d1f7      	bne.n	ba598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   ba5a8:	d1ef      	bne.n	ba58a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   ba5aa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba5ac:	f3bf 8f5b 	dmb	ish
   ba5b0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba5b2:	1d2b      	adds	r3, r5, #4
   ba5b4:	f3bf 8f5b 	dmb	ish
   ba5b8:	e853 6f00 	ldrex	r6, [r3]
   ba5bc:	e843 4200 	strex	r2, r4, [r3]
   ba5c0:	2a00      	cmp	r2, #0
   ba5c2:	d1f9      	bne.n	ba5b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba5c4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba5c8:	2e00      	cmp	r6, #0
   ba5ca:	d0de      	beq.n	ba58a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba5cc:	4620      	mov	r0, r4
   ba5ce:	f7fc ff5f 	bl	b7490 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba5d2:	4607      	mov	r7, r0
   ba5d4:	b160      	cbz	r0, ba5f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba5d6:	f105 010c 	add.w	r1, r5, #12
   ba5da:	4630      	mov	r0, r6
   ba5dc:	f7fb f94a 	bl	b5874 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba5e0:	4630      	mov	r0, r6
   ba5e2:	f7fa fc55 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba5e6:	2110      	movs	r1, #16
   ba5e8:	4630      	mov	r0, r6
   ba5ea:	f7f9 fd56 	bl	b409a <_ZdlPvj>
   ba5ee:	e7cc      	b.n	ba58a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba5f0:	4631      	mov	r1, r6
   ba5f2:	a803      	add	r0, sp, #12
   ba5f4:	f7fb fa18 	bl	b5a28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba5f8:	7b2b      	ldrb	r3, [r5, #12]
   ba5fa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba5fe:	2010      	movs	r0, #16
   ba600:	f7f9 fd47 	bl	b4092 <_Znwj>
   ba604:	4605      	mov	r5, r0
   ba606:	b1d0      	cbz	r0, ba63e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba608:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba60a:	2014      	movs	r0, #20
   ba60c:	f7f9 fd41 	bl	b4092 <_Znwj>
   ba610:	4604      	mov	r4, r0
   ba612:	b178      	cbz	r0, ba634 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba614:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba616:	4601      	mov	r1, r0
   ba618:	a803      	add	r0, sp, #12
   ba61a:	f7fb f83e 	bl	b569a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba61e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba620:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba622:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba624:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba626:	9205      	str	r2, [sp, #20]
   ba628:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba62a:	60e3      	str	r3, [r4, #12]
   ba62c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba630:	9206      	str	r2, [sp, #24]
   ba632:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba634:	4b06      	ldr	r3, [pc, #24]	; (ba650 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba636:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba638:	4b06      	ldr	r3, [pc, #24]	; (ba654 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba63a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba63c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba63e:	a803      	add	r0, sp, #12
   ba640:	f7fa fc26 	bl	b4e90 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba644:	2200      	movs	r2, #0
   ba646:	4629      	mov	r1, r5
   ba648:	4803      	ldr	r0, [pc, #12]	; (ba658 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba64a:	f7fc ff29 	bl	b74a0 <application_thread_invoke>
   ba64e:	e7c7      	b.n	ba5e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba650:	000b5887 	.word	0x000b5887
   ba654:	000b5a47 	.word	0x000b5a47
   ba658:	000ba901 	.word	0x000ba901

000ba65c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba65c:	4770      	bx	lr

000ba65e <_ZN9IPAddressD0Ev>:
   ba65e:	b510      	push	{r4, lr}
   ba660:	2118      	movs	r1, #24
   ba662:	4604      	mov	r4, r0
   ba664:	f7f9 fd19 	bl	b409a <_ZdlPvj>
   ba668:	4620      	mov	r0, r4
   ba66a:	bd10      	pop	{r4, pc}

000ba66c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba66c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba66e:	7d03      	ldrb	r3, [r0, #20]
   ba670:	2b06      	cmp	r3, #6
{
   ba672:	b08d      	sub	sp, #52	; 0x34
   ba674:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba676:	f100 0704 	add.w	r7, r0, #4
   ba67a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba67e:	d012      	beq.n	ba6a6 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba680:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba684:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba688:	220a      	movs	r2, #10
   ba68a:	4630      	mov	r0, r6
   ba68c:	f7ff fd37 	bl	ba0fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba690:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba692:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba694:	d019      	beq.n	ba6ca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba696:	2c00      	cmp	r4, #0
   ba698:	d0f4      	beq.n	ba684 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba69a:	212e      	movs	r1, #46	; 0x2e
   ba69c:	4630      	mov	r0, r6
   ba69e:	f7ff fd15 	bl	ba0cc <_ZN5Print5printEc>
   ba6a2:	4404      	add	r4, r0
   ba6a4:	e7ee      	b.n	ba684 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba6a6:	232f      	movs	r3, #47	; 0x2f
   ba6a8:	466a      	mov	r2, sp
   ba6aa:	4639      	mov	r1, r7
   ba6ac:	200a      	movs	r0, #10
		buf[0] = 0;
   ba6ae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba6b2:	f7fc fe3d 	bl	b7330 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba6b6:	4668      	mov	r0, sp
   ba6b8:	f001 fa5b 	bl	bbb72 <strlen>
   ba6bc:	6833      	ldr	r3, [r6, #0]
   ba6be:	4602      	mov	r2, r0
   ba6c0:	68db      	ldr	r3, [r3, #12]
   ba6c2:	4669      	mov	r1, sp
   ba6c4:	4630      	mov	r0, r6
   ba6c6:	4798      	blx	r3
   ba6c8:	4604      	mov	r4, r0
    }
    return n;
}
   ba6ca:	4620      	mov	r0, r4
   ba6cc:	b00d      	add	sp, #52	; 0x34
   ba6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba6d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba6d0:	b510      	push	{r4, lr}
   ba6d2:	4b05      	ldr	r3, [pc, #20]	; (ba6e8 <_ZN9IPAddressC1Ev+0x18>)
   ba6d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba6d6:	2211      	movs	r2, #17
   ba6d8:	f840 3b04 	str.w	r3, [r0], #4
   ba6dc:	2100      	movs	r1, #0
   ba6de:	f001 f9e3 	bl	bbaa8 <memset>
}
   ba6e2:	4620      	mov	r0, r4
   ba6e4:	bd10      	pop	{r4, pc}
   ba6e6:	bf00      	nop
   ba6e8:	000bc3b8 	.word	0x000bc3b8

000ba6ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba6ec:	4603      	mov	r3, r0
   ba6ee:	4a07      	ldr	r2, [pc, #28]	; (ba70c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba6f0:	b510      	push	{r4, lr}
   ba6f2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba6f6:	f101 0210 	add.w	r2, r1, #16
   ba6fa:	f851 4b04 	ldr.w	r4, [r1], #4
   ba6fe:	f843 4b04 	str.w	r4, [r3], #4
   ba702:	4291      	cmp	r1, r2
   ba704:	d1f9      	bne.n	ba6fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba706:	780a      	ldrb	r2, [r1, #0]
   ba708:	701a      	strb	r2, [r3, #0]
}
   ba70a:	bd10      	pop	{r4, pc}
   ba70c:	000bc3b8 	.word	0x000bc3b8

000ba710 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba710:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba712:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba716:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba71a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba71e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba722:	2304      	movs	r3, #4
   ba724:	6041      	str	r1, [r0, #4]
   ba726:	7503      	strb	r3, [r0, #20]
}
   ba728:	bd10      	pop	{r4, pc}
	...

000ba72c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba72c:	b507      	push	{r0, r1, r2, lr}
   ba72e:	4b06      	ldr	r3, [pc, #24]	; (ba748 <_ZN9IPAddressC1EPKh+0x1c>)
   ba730:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba732:	78cb      	ldrb	r3, [r1, #3]
   ba734:	9300      	str	r3, [sp, #0]
   ba736:	788b      	ldrb	r3, [r1, #2]
   ba738:	784a      	ldrb	r2, [r1, #1]
   ba73a:	7809      	ldrb	r1, [r1, #0]
   ba73c:	f7ff ffe8 	bl	ba710 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba740:	b003      	add	sp, #12
   ba742:	f85d fb04 	ldr.w	pc, [sp], #4
   ba746:	bf00      	nop
   ba748:	000bc3b8 	.word	0x000bc3b8

000ba74c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba74c:	7441      	strb	r1, [r0, #17]
}
   ba74e:	4770      	bx	lr

000ba750 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba750:	4770      	bx	lr

000ba752 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba752:	4770      	bx	lr

000ba754 <_ZN9USBSerial4readEv>:
{
   ba754:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba756:	2100      	movs	r1, #0
   ba758:	7c00      	ldrb	r0, [r0, #16]
   ba75a:	f7fc fe49 	bl	b73f0 <HAL_USB_USART_Receive_Data>
}
   ba75e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba762:	bd08      	pop	{r3, pc}

000ba764 <_ZN9USBSerial4peekEv>:
{
   ba764:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba766:	2101      	movs	r1, #1
   ba768:	7c00      	ldrb	r0, [r0, #16]
   ba76a:	f7fc fe41 	bl	b73f0 <HAL_USB_USART_Receive_Data>
}
   ba76e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba772:	bd08      	pop	{r3, pc}

000ba774 <_ZN9USBSerial17availableForWriteEv>:
{
   ba774:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba776:	7c00      	ldrb	r0, [r0, #16]
   ba778:	f7fc fe32 	bl	b73e0 <HAL_USB_USART_Available_Data_For_Write>
}
   ba77c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba780:	bd08      	pop	{r3, pc}

000ba782 <_ZN9USBSerial9availableEv>:
{
   ba782:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba784:	7c00      	ldrb	r0, [r0, #16]
   ba786:	f7fc fe23 	bl	b73d0 <HAL_USB_USART_Available_Data>
}
   ba78a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba78e:	bd08      	pop	{r3, pc}

000ba790 <_ZN9USBSerial5writeEh>:
{
   ba790:	b513      	push	{r0, r1, r4, lr}
   ba792:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba794:	7c00      	ldrb	r0, [r0, #16]
{
   ba796:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba798:	f7fc fe22 	bl	b73e0 <HAL_USB_USART_Available_Data_For_Write>
   ba79c:	2800      	cmp	r0, #0
   ba79e:	9901      	ldr	r1, [sp, #4]
   ba7a0:	dc01      	bgt.n	ba7a6 <_ZN9USBSerial5writeEh+0x16>
   ba7a2:	7c60      	ldrb	r0, [r4, #17]
   ba7a4:	b120      	cbz	r0, ba7b0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba7a6:	7c20      	ldrb	r0, [r4, #16]
   ba7a8:	f7fc fe2a 	bl	b7400 <HAL_USB_USART_Send_Data>
   ba7ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba7b0:	b002      	add	sp, #8
   ba7b2:	bd10      	pop	{r4, pc}

000ba7b4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba7b4:	7c00      	ldrb	r0, [r0, #16]
   ba7b6:	f7fc be2b 	b.w	b7410 <HAL_USB_USART_Flush_Data>

000ba7ba <_ZN9USBSerialD0Ev>:
   ba7ba:	b510      	push	{r4, lr}
   ba7bc:	2114      	movs	r1, #20
   ba7be:	4604      	mov	r4, r0
   ba7c0:	f7f9 fc6b 	bl	b409a <_ZdlPvj>
   ba7c4:	4620      	mov	r0, r4
   ba7c6:	bd10      	pop	{r4, pc}

000ba7c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba7c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba7ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba7ce:	4604      	mov	r4, r0
   ba7d0:	4608      	mov	r0, r1
   ba7d2:	2100      	movs	r1, #0
   ba7d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba7d8:	4b04      	ldr	r3, [pc, #16]	; (ba7ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba7da:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba7dc:	2301      	movs	r3, #1
  _serial = serial;
   ba7de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba7e0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba7e2:	4611      	mov	r1, r2
   ba7e4:	f7fc fde4 	bl	b73b0 <HAL_USB_USART_Init>
}
   ba7e8:	4620      	mov	r0, r4
   ba7ea:	bd10      	pop	{r4, pc}
   ba7ec:	000bc3cc 	.word	0x000bc3cc

000ba7f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba7f0:	7c00      	ldrb	r0, [r0, #16]
   ba7f2:	2200      	movs	r2, #0
   ba7f4:	f7fc bde4 	b.w	b73c0 <HAL_USB_USART_Begin>

000ba7f8 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   ba7f8:	7c00      	ldrb	r0, [r0, #16]
   ba7fa:	f7fc be11 	b.w	b7420 <HAL_USB_USART_Is_Connected>

000ba7fe <_Z19acquireSerialBufferv>:
{
   ba7fe:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba800:	2214      	movs	r2, #20
{
   ba802:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba804:	2100      	movs	r1, #0
   ba806:	f001 f94f 	bl	bbaa8 <memset>
}
   ba80a:	4620      	mov	r0, r4
   ba80c:	bd10      	pop	{r4, pc}
	...

000ba810 <_Z16_fetch_usbserialv>:
{
   ba810:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba812:	4c0f      	ldr	r4, [pc, #60]	; (ba850 <_Z16_fetch_usbserialv+0x40>)
{
   ba814:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba816:	a803      	add	r0, sp, #12
   ba818:	f7ff fff1 	bl	ba7fe <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba81c:	7821      	ldrb	r1, [r4, #0]
   ba81e:	f3bf 8f5b 	dmb	ish
   ba822:	f011 0101 	ands.w	r1, r1, #1
   ba826:	d10f      	bne.n	ba848 <_Z16_fetch_usbserialv+0x38>
   ba828:	4620      	mov	r0, r4
   ba82a:	9101      	str	r1, [sp, #4]
   ba82c:	f7f9 fc37 	bl	b409e <__cxa_guard_acquire>
   ba830:	9901      	ldr	r1, [sp, #4]
   ba832:	b148      	cbz	r0, ba848 <_Z16_fetch_usbserialv+0x38>
   ba834:	aa03      	add	r2, sp, #12
   ba836:	4807      	ldr	r0, [pc, #28]	; (ba854 <_Z16_fetch_usbserialv+0x44>)
   ba838:	f7ff ffc6 	bl	ba7c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba83c:	4620      	mov	r0, r4
   ba83e:	f7f9 fc33 	bl	b40a8 <__cxa_guard_release>
   ba842:	4805      	ldr	r0, [pc, #20]	; (ba858 <_Z16_fetch_usbserialv+0x48>)
   ba844:	f001 f8ea 	bl	bba1c <atexit>
	return _usbserial;
}
   ba848:	4802      	ldr	r0, [pc, #8]	; (ba854 <_Z16_fetch_usbserialv+0x44>)
   ba84a:	b008      	add	sp, #32
   ba84c:	bd10      	pop	{r4, pc}
   ba84e:	bf00      	nop
   ba850:	2003e718 	.word	0x2003e718
   ba854:	2003e71c 	.word	0x2003e71c
   ba858:	000ba751 	.word	0x000ba751

000ba85c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba85c:	4770      	bx	lr

000ba85e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba85e:	7441      	strb	r1, [r0, #17]
}
   ba860:	4770      	bx	lr

000ba862 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba862:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba864:	7c00      	ldrb	r0, [r0, #16]
   ba866:	f7fc fd93 	bl	b7390 <hal_usart_available_data_for_write>
}
   ba86a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba86e:	bd08      	pop	{r3, pc}

000ba870 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba870:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba872:	7c00      	ldrb	r0, [r0, #16]
   ba874:	f7fc fd6c 	bl	b7350 <hal_usart_available>
}
   ba878:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba87c:	bd08      	pop	{r3, pc}

000ba87e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba87e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba880:	7c00      	ldrb	r0, [r0, #16]
   ba882:	f7fc fd75 	bl	b7370 <hal_usart_peek>
}
   ba886:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba88a:	bd08      	pop	{r3, pc}

000ba88c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba88c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba88e:	7c00      	ldrb	r0, [r0, #16]
   ba890:	f7fc fd66 	bl	b7360 <hal_usart_read>
}
   ba894:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba898:	bd08      	pop	{r3, pc}

000ba89a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba89a:	7c00      	ldrb	r0, [r0, #16]
   ba89c:	f7fc bd70 	b.w	b7380 <hal_usart_flush>

000ba8a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba8a2:	7c45      	ldrb	r5, [r0, #17]
{
   ba8a4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba8a6:	b12d      	cbz	r5, ba8b4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba8a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba8aa:	b003      	add	sp, #12
   ba8ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba8b0:	f7fc bd46 	b.w	b7340 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba8b4:	7c00      	ldrb	r0, [r0, #16]
   ba8b6:	9101      	str	r1, [sp, #4]
   ba8b8:	f7fc fd6a 	bl	b7390 <hal_usart_available_data_for_write>
   ba8bc:	2800      	cmp	r0, #0
   ba8be:	9901      	ldr	r1, [sp, #4]
   ba8c0:	dcf2      	bgt.n	ba8a8 <_ZN11USARTSerial5writeEh+0x8>
}
   ba8c2:	4628      	mov	r0, r5
   ba8c4:	b003      	add	sp, #12
   ba8c6:	bd30      	pop	{r4, r5, pc}

000ba8c8 <_ZN11USARTSerialD0Ev>:
   ba8c8:	b510      	push	{r4, lr}
   ba8ca:	2114      	movs	r1, #20
   ba8cc:	4604      	mov	r4, r0
   ba8ce:	f7f9 fbe4 	bl	b409a <_ZdlPvj>
   ba8d2:	4620      	mov	r0, r4
   ba8d4:	bd10      	pop	{r4, pc}
	...

000ba8d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba8d8:	b510      	push	{r4, lr}
   ba8da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba8de:	4604      	mov	r4, r0
   ba8e0:	4608      	mov	r0, r1
   ba8e2:	4611      	mov	r1, r2
   ba8e4:	2200      	movs	r2, #0
   ba8e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba8ea:	4b04      	ldr	r3, [pc, #16]	; (ba8fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba8ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba8ee:	2301      	movs	r3, #1
  _serial = serial;
   ba8f0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba8f2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba8f4:	f7fc fd54 	bl	b73a0 <hal_usart_init_ex>
}
   ba8f8:	4620      	mov	r0, r4
   ba8fa:	bd10      	pop	{r4, pc}
   ba8fc:	000bc3fc 	.word	0x000bc3fc

000ba900 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   ba900:	b510      	push	{r4, lr}
      if (_M_empty())
   ba902:	6883      	ldr	r3, [r0, #8]
   ba904:	4604      	mov	r4, r0
   ba906:	b90b      	cbnz	r3, ba90c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   ba908:	f000 fc0f 	bl	bb12a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba90c:	68c3      	ldr	r3, [r0, #12]
   ba90e:	4798      	blx	r3
      if (_M_manager)
   ba910:	68a3      	ldr	r3, [r4, #8]
   ba912:	b11b      	cbz	r3, ba91c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ba914:	2203      	movs	r2, #3
   ba916:	4621      	mov	r1, r4
   ba918:	4620      	mov	r0, r4
   ba91a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ba91c:	4620      	mov	r0, r4
   ba91e:	2110      	movs	r1, #16
}
   ba920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   ba924:	f7f9 bbb9 	b.w	b409a <_ZdlPvj>

000ba928 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba928:	2200      	movs	r2, #0
   ba92a:	6840      	ldr	r0, [r0, #4]
   ba92c:	4611      	mov	r1, r2
   ba92e:	f7fc bdf3 	b.w	b7518 <network_ready>

000ba932 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba932:	2200      	movs	r2, #0
   ba934:	6840      	ldr	r0, [r0, #4]
   ba936:	4611      	mov	r1, r2
   ba938:	f7fc be0e 	b.w	b7558 <network_listening>

000ba93c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba93c:	2200      	movs	r2, #0
   ba93e:	6840      	ldr	r0, [r0, #4]
   ba940:	4611      	mov	r1, r2
   ba942:	f7fc be19 	b.w	b7578 <network_get_listen_timeout>

000ba946 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba946:	6840      	ldr	r0, [r0, #4]
   ba948:	2200      	movs	r2, #0
   ba94a:	f7fc be0d 	b.w	b7568 <network_set_listen_timeout>

000ba94e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba94e:	6840      	ldr	r0, [r0, #4]
   ba950:	2200      	movs	r2, #0
   ba952:	f081 0101 	eor.w	r1, r1, #1
   ba956:	f7fc bdf7 	b.w	b7548 <network_listen>

000ba95a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba95a:	2300      	movs	r3, #0
   ba95c:	6840      	ldr	r0, [r0, #4]
   ba95e:	461a      	mov	r2, r3
   ba960:	4619      	mov	r1, r3
   ba962:	f7fc bde9 	b.w	b7538 <network_off>

000ba966 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba966:	2300      	movs	r3, #0
   ba968:	6840      	ldr	r0, [r0, #4]
   ba96a:	461a      	mov	r2, r3
   ba96c:	4619      	mov	r1, r3
   ba96e:	f7fc bddb 	b.w	b7528 <network_on>

000ba972 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba972:	2200      	movs	r2, #0
   ba974:	6840      	ldr	r0, [r0, #4]
   ba976:	4611      	mov	r1, r2
   ba978:	f7fc bdbe 	b.w	b74f8 <network_connecting>

000ba97c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba97c:	6840      	ldr	r0, [r0, #4]
   ba97e:	2200      	movs	r2, #0
   ba980:	2102      	movs	r1, #2
   ba982:	f7fc bdc1 	b.w	b7508 <network_disconnect>

000ba986 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba986:	2300      	movs	r3, #0
   ba988:	6840      	ldr	r0, [r0, #4]
   ba98a:	461a      	mov	r2, r3
   ba98c:	f7fc bdac 	b.w	b74e8 <network_connect>

000ba990 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba990:	4b02      	ldr	r3, [pc, #8]	; (ba99c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba992:	2204      	movs	r2, #4
   ba994:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba996:	4a02      	ldr	r2, [pc, #8]	; (ba9a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba998:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba99a:	4770      	bx	lr
   ba99c:	2003e730 	.word	0x2003e730
   ba9a0:	000bc42c 	.word	0x000bc42c

000ba9a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba9a4:	2300      	movs	r3, #0
   ba9a6:	6840      	ldr	r0, [r0, #4]
   ba9a8:	461a      	mov	r2, r3
   ba9aa:	f7fc bd9d 	b.w	b74e8 <network_connect>

000ba9ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba9ae:	6840      	ldr	r0, [r0, #4]
   ba9b0:	2200      	movs	r2, #0
   ba9b2:	2102      	movs	r1, #2
   ba9b4:	f7fc bda8 	b.w	b7508 <network_disconnect>

000ba9b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba9b8:	2200      	movs	r2, #0
   ba9ba:	6840      	ldr	r0, [r0, #4]
   ba9bc:	4611      	mov	r1, r2
   ba9be:	f7fc bd9b 	b.w	b74f8 <network_connecting>

000ba9c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba9c2:	2200      	movs	r2, #0
   ba9c4:	6840      	ldr	r0, [r0, #4]
   ba9c6:	4611      	mov	r1, r2
   ba9c8:	f7fc bda6 	b.w	b7518 <network_ready>

000ba9cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba9cc:	2300      	movs	r3, #0
   ba9ce:	6840      	ldr	r0, [r0, #4]
   ba9d0:	461a      	mov	r2, r3
   ba9d2:	4619      	mov	r1, r3
   ba9d4:	f7fc bda8 	b.w	b7528 <network_on>

000ba9d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba9d8:	2300      	movs	r3, #0
   ba9da:	6840      	ldr	r0, [r0, #4]
   ba9dc:	461a      	mov	r2, r3
   ba9de:	4619      	mov	r1, r3
   ba9e0:	f7fc bdaa 	b.w	b7538 <network_off>

000ba9e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba9e4:	6840      	ldr	r0, [r0, #4]
   ba9e6:	2100      	movs	r1, #0
   ba9e8:	f7fc bdce 	b.w	b7588 <network_is_on>

000ba9ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba9ec:	6840      	ldr	r0, [r0, #4]
   ba9ee:	2100      	movs	r1, #0
   ba9f0:	f7fc bdd2 	b.w	b7598 <network_is_off>

000ba9f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba9f4:	6840      	ldr	r0, [r0, #4]
   ba9f6:	2200      	movs	r2, #0
   ba9f8:	f081 0101 	eor.w	r1, r1, #1
   ba9fc:	f7fc bda4 	b.w	b7548 <network_listen>

000baa00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   baa00:	6840      	ldr	r0, [r0, #4]
   baa02:	2200      	movs	r2, #0
   baa04:	f7fc bdb0 	b.w	b7568 <network_set_listen_timeout>

000baa08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   baa08:	2200      	movs	r2, #0
   baa0a:	6840      	ldr	r0, [r0, #4]
   baa0c:	4611      	mov	r1, r2
   baa0e:	f7fc bdb3 	b.w	b7578 <network_get_listen_timeout>

000baa12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   baa12:	2200      	movs	r2, #0
   baa14:	6840      	ldr	r0, [r0, #4]
   baa16:	4611      	mov	r1, r2
   baa18:	f7fc bd9e 	b.w	b7558 <network_listening>

000baa1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   baa1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baa20:	b095      	sub	sp, #84	; 0x54
   baa22:	4614      	mov	r4, r2
   baa24:	460d      	mov	r5, r1
   baa26:	4607      	mov	r7, r0
    IPAddress addr;
   baa28:	f7ff fe52 	bl	ba6d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   baa2c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   baa2e:	221c      	movs	r2, #28
   baa30:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   baa32:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   baa34:	f001 f838 	bl	bbaa8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   baa38:	2340      	movs	r3, #64	; 0x40
   baa3a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   baa3c:	4620      	mov	r0, r4
   baa3e:	466b      	mov	r3, sp
   baa40:	aa0c      	add	r2, sp, #48	; 0x30
   baa42:	2100      	movs	r1, #0
   baa44:	f7fc fb50 	bl	b70e8 <netdb_getaddrinfo>
    if (!r) {
   baa48:	4604      	mov	r4, r0
   baa4a:	2800      	cmp	r0, #0
   baa4c:	d14b      	bne.n	baae6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   baa4e:	4602      	mov	r2, r0
   baa50:	2101      	movs	r1, #1
   baa52:	6868      	ldr	r0, [r5, #4]
   baa54:	f7fc fd60 	bl	b7518 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baa58:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   baa5a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baa5c:	4622      	mov	r2, r4
   baa5e:	6868      	ldr	r0, [r5, #4]
   baa60:	f7fc fd5a 	bl	b7518 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   baa64:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baa66:	4681      	mov	r9, r0
        bool ok = false;
   baa68:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   baa6a:	2e00      	cmp	r6, #0
   baa6c:	d03b      	beq.n	baae6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   baa6e:	2900      	cmp	r1, #0
   baa70:	d139      	bne.n	baae6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   baa72:	6873      	ldr	r3, [r6, #4]
   baa74:	2b02      	cmp	r3, #2
   baa76:	d003      	beq.n	baa80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   baa78:	2b0a      	cmp	r3, #10
   baa7a:	d011      	beq.n	baaa0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   baa7c:	69f6      	ldr	r6, [r6, #28]
   baa7e:	e7f4      	b.n	baa6a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   baa80:	f1b8 0f00 	cmp.w	r8, #0
   baa84:	d0fa      	beq.n	baa7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   baa86:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   baa88:	a806      	add	r0, sp, #24
   baa8a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   baa8c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   baa8e:	f7ff fe4d 	bl	ba72c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   baa92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baa94:	1d3c      	adds	r4, r7, #4
   baa96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baa98:	682b      	ldr	r3, [r5, #0]
   baa9a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   baa9c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   baa9e:	e7ed      	b.n	baa7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   baaa0:	f1b9 0f00 	cmp.w	r9, #0
   baaa4:	d0ea      	beq.n	baa7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   baaa6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   baaa8:	2210      	movs	r2, #16
   baaaa:	a801      	add	r0, sp, #4
   baaac:	f000 fffc 	bl	bbaa8 <memset>
                    a.v = 6;
   baab0:	2306      	movs	r3, #6
   baab2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   baab6:	ad01      	add	r5, sp, #4
   baab8:	f104 0308 	add.w	r3, r4, #8
   baabc:	3418      	adds	r4, #24
   baabe:	6818      	ldr	r0, [r3, #0]
   baac0:	6859      	ldr	r1, [r3, #4]
   baac2:	462a      	mov	r2, r5
   baac4:	c203      	stmia	r2!, {r0, r1}
   baac6:	3308      	adds	r3, #8
   baac8:	42a3      	cmp	r3, r4
   baaca:	4615      	mov	r5, r2
   baacc:	d1f7      	bne.n	baabe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   baace:	a901      	add	r1, sp, #4
   baad0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   baad2:	ad07      	add	r5, sp, #28
   baad4:	f7ff fe0a 	bl	ba6ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   baad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baada:	1d3c      	adds	r4, r7, #4
   baadc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baade:	682b      	ldr	r3, [r5, #0]
   baae0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   baae2:	4649      	mov	r1, r9
   baae4:	e7ca      	b.n	baa7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   baae6:	9800      	ldr	r0, [sp, #0]
   baae8:	f7fc faf6 	bl	b70d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   baaec:	4638      	mov	r0, r7
   baaee:	b015      	add	sp, #84	; 0x54
   baaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000baaf4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   baaf4:	4b02      	ldr	r3, [pc, #8]	; (bab00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   baaf6:	4a03      	ldr	r2, [pc, #12]	; (bab04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   baaf8:	601a      	str	r2, [r3, #0]
   baafa:	2200      	movs	r2, #0
   baafc:	605a      	str	r2, [r3, #4]

} // spark
   baafe:	4770      	bx	lr
   bab00:	2003e738 	.word	0x2003e738
   bab04:	000bc468 	.word	0x000bc468

000bab08 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bab08:	b40e      	push	{r1, r2, r3}
   bab0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   bab0c:	b088      	sub	sp, #32
   bab0e:	af00      	add	r7, sp, #0
   bab10:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bab14:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bab16:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bab1a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bab1c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bab1e:	462b      	mov	r3, r5
   bab20:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bab22:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bab24:	f7fc fda0 	bl	b7668 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bab28:	280f      	cmp	r0, #15
   bab2a:	687a      	ldr	r2, [r7, #4]
   bab2c:	d91a      	bls.n	bab64 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bab2e:	f100 0308 	add.w	r3, r0, #8
   bab32:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bab36:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bab38:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bab3c:	1c41      	adds	r1, r0, #1
   bab3e:	462b      	mov	r3, r5
   bab40:	4668      	mov	r0, sp
        va_start(args, fmt);
   bab42:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bab44:	f7fc fd90 	bl	b7668 <vsnprintf>
        if (n > 0) {
   bab48:	1e02      	subs	r2, r0, #0
   bab4a:	dd04      	ble.n	bab56 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bab4c:	6823      	ldr	r3, [r4, #0]
   bab4e:	4669      	mov	r1, sp
   bab50:	689b      	ldr	r3, [r3, #8]
   bab52:	4620      	mov	r0, r4
   bab54:	4798      	blx	r3
   bab56:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bab58:	3720      	adds	r7, #32
   bab5a:	46bd      	mov	sp, r7
   bab5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bab60:	b003      	add	sp, #12
   bab62:	4770      	bx	lr
    } else if (n > 0) {
   bab64:	2800      	cmp	r0, #0
   bab66:	d0f7      	beq.n	bab58 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bab68:	6823      	ldr	r3, [r4, #0]
   bab6a:	4602      	mov	r2, r0
   bab6c:	689b      	ldr	r3, [r3, #8]
   bab6e:	f107 0110 	add.w	r1, r7, #16
   bab72:	4620      	mov	r0, r4
   bab74:	4798      	blx	r3
}
   bab76:	e7ef      	b.n	bab58 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bab78 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bab78:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bab7a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bab7c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bab80:	689b      	ldr	r3, [r3, #8]
   bab82:	2201      	movs	r2, #1
   bab84:	f10d 0107 	add.w	r1, sp, #7
   bab88:	4798      	blx	r3
}
   bab8a:	b003      	add	sp, #12
   bab8c:	f85d fb04 	ldr.w	pc, [sp], #4

000bab90 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bab90:	b510      	push	{r4, lr}
    write('}');
   bab92:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bab94:	4604      	mov	r4, r0
    write('}');
   bab96:	f7ff ffef 	bl	bab78 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bab9a:	2301      	movs	r3, #1
   bab9c:	7123      	strb	r3, [r4, #4]
}
   bab9e:	4620      	mov	r0, r4
   baba0:	bd10      	pop	{r4, pc}

000baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   baba2:	b508      	push	{r3, lr}
    switch (state_) {
   baba4:	7903      	ldrb	r3, [r0, #4]
   baba6:	2b01      	cmp	r3, #1
   baba8:	d002      	beq.n	babb0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   babaa:	2b02      	cmp	r3, #2
   babac:	d004      	beq.n	babb8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   babae:	bd08      	pop	{r3, pc}
        write(',');
   babb0:	212c      	movs	r1, #44	; 0x2c
        write(':');
   babb2:	f7ff ffe1 	bl	bab78 <_ZN5spark10JSONWriter5writeEc>
}
   babb6:	e7fa      	b.n	babae <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   babb8:	213a      	movs	r1, #58	; 0x3a
   babba:	e7fa      	b.n	babb2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000babbc <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   babbc:	b510      	push	{r4, lr}
   babbe:	4604      	mov	r4, r0
    writeSeparator();
   babc0:	f7ff ffef 	bl	baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   babc4:	4620      	mov	r0, r4
   babc6:	217b      	movs	r1, #123	; 0x7b
   babc8:	f7ff ffd6 	bl	bab78 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   babcc:	2300      	movs	r3, #0
   babce:	7123      	strb	r3, [r4, #4]
}
   babd0:	4620      	mov	r0, r4
   babd2:	bd10      	pop	{r4, pc}

000babd4 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   babd4:	b538      	push	{r3, r4, r5, lr}
   babd6:	4604      	mov	r4, r0
   babd8:	460d      	mov	r5, r1
    writeSeparator();
   babda:	f7ff ffe2 	bl	baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   babde:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   babe0:	689b      	ldr	r3, [r3, #8]
    if (val) {
   babe2:	b13d      	cbz	r5, babf4 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   babe4:	4905      	ldr	r1, [pc, #20]	; (babfc <_ZN5spark10JSONWriter5valueEb+0x28>)
   babe6:	2204      	movs	r2, #4
        write("false", 5);
   babe8:	4620      	mov	r0, r4
   babea:	4798      	blx	r3
    state_ = NEXT;
   babec:	2301      	movs	r3, #1
   babee:	7123      	strb	r3, [r4, #4]
}
   babf0:	4620      	mov	r0, r4
   babf2:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   babf4:	4902      	ldr	r1, [pc, #8]	; (bac00 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   babf6:	2205      	movs	r2, #5
   babf8:	e7f6      	b.n	babe8 <_ZN5spark10JSONWriter5valueEb+0x14>
   babfa:	bf00      	nop
   babfc:	000bc4a0 	.word	0x000bc4a0
   bac00:	000bc111 	.word	0x000bc111

000bac04 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bac04:	b513      	push	{r0, r1, r4, lr}
   bac06:	4604      	mov	r4, r0
   bac08:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bac0a:	f7ff ffca 	bl	baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bac0e:	6823      	ldr	r3, [r4, #0]
   bac10:	9a01      	ldr	r2, [sp, #4]
   bac12:	68db      	ldr	r3, [r3, #12]
   bac14:	4903      	ldr	r1, [pc, #12]	; (bac24 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bac16:	4620      	mov	r0, r4
   bac18:	4798      	blx	r3
    state_ = NEXT;
   bac1a:	2301      	movs	r3, #1
}
   bac1c:	4620      	mov	r0, r4
    state_ = NEXT;
   bac1e:	7123      	strb	r3, [r4, #4]
}
   bac20:	b002      	add	sp, #8
   bac22:	bd10      	pop	{r4, pc}
   bac24:	000bbee8 	.word	0x000bbee8

000bac28 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bac28:	b513      	push	{r0, r1, r4, lr}
   bac2a:	4604      	mov	r4, r0
   bac2c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bac2e:	f7ff ffb8 	bl	baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bac32:	6823      	ldr	r3, [r4, #0]
   bac34:	9a01      	ldr	r2, [sp, #4]
   bac36:	68db      	ldr	r3, [r3, #12]
   bac38:	4903      	ldr	r1, [pc, #12]	; (bac48 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bac3a:	4620      	mov	r0, r4
   bac3c:	4798      	blx	r3
    state_ = NEXT;
   bac3e:	2301      	movs	r3, #1
}
   bac40:	4620      	mov	r0, r4
    state_ = NEXT;
   bac42:	7123      	strb	r3, [r4, #4]
}
   bac44:	b002      	add	sp, #8
   bac46:	bd10      	pop	{r4, pc}
   bac48:	000bc4a5 	.word	0x000bc4a5

000bac4c <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   bac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac4e:	4604      	mov	r4, r0
   bac50:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   bac54:	f7ff ffa5 	bl	baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   bac58:	6823      	ldr	r3, [r4, #0]
   bac5a:	4905      	ldr	r1, [pc, #20]	; (bac70 <_ZN5spark10JSONWriter5valueEd+0x24>)
   bac5c:	68dd      	ldr	r5, [r3, #12]
   bac5e:	4620      	mov	r0, r4
   bac60:	463b      	mov	r3, r7
   bac62:	4632      	mov	r2, r6
   bac64:	47a8      	blx	r5
    state_ = NEXT;
   bac66:	2301      	movs	r3, #1
   bac68:	7123      	strb	r3, [r4, #4]
}
   bac6a:	4620      	mov	r0, r4
   bac6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bac6e:	bf00      	nop
   bac70:	000bc4a8 	.word	0x000bc4a8

000bac74 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bac78:	460d      	mov	r5, r1
    write('"');
   bac7a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bac7c:	4690      	mov	r8, r2
   bac7e:	4604      	mov	r4, r0
    write('"');
   bac80:	f7ff ff7a 	bl	bab78 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bac84:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bad2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bac88:	44a8      	add	r8, r5
    const char *s = str;
   bac8a:	462f      	mov	r7, r5
    while (s != end) {
   bac8c:	4547      	cmp	r7, r8
   bac8e:	46ba      	mov	sl, r7
   bac90:	d03d      	beq.n	bad0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bac92:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bac96:	2e22      	cmp	r6, #34	; 0x22
   bac98:	d006      	beq.n	baca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bac9a:	2e5c      	cmp	r6, #92	; 0x5c
   bac9c:	d004      	beq.n	baca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bac9e:	4630      	mov	r0, r6
   baca0:	f000 fec2 	bl	bba28 <isprint>
   baca4:	2800      	cmp	r0, #0
   baca6:	d1f1      	bne.n	bac8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   baca8:	6823      	ldr	r3, [r4, #0]
   bacaa:	ebaa 0205 	sub.w	r2, sl, r5
   bacae:	689b      	ldr	r3, [r3, #8]
   bacb0:	4629      	mov	r1, r5
   bacb2:	4620      	mov	r0, r4
   bacb4:	4798      	blx	r3
            write('\\');
   bacb6:	215c      	movs	r1, #92	; 0x5c
   bacb8:	4620      	mov	r0, r4
   bacba:	f7ff ff5d 	bl	bab78 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bacbe:	2e0d      	cmp	r6, #13
   bacc0:	d80a      	bhi.n	bacd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bacc2:	2e07      	cmp	r6, #7
   bacc4:	d91c      	bls.n	bad00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bacc6:	f1a6 0308 	sub.w	r3, r6, #8
   bacca:	2b05      	cmp	r3, #5
   baccc:	d818      	bhi.n	bad00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bacce:	e8df f003 	tbb	[pc, r3]
   bacd2:	0f0d      	.short	0x0f0d
   bacd4:	15131711 	.word	0x15131711
   bacd8:	2e22      	cmp	r6, #34	; 0x22
   bacda:	d001      	beq.n	bace0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bacdc:	2e5c      	cmp	r6, #92	; 0x5c
   bacde:	d10f      	bne.n	bad00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bace0:	4631      	mov	r1, r6
                write('b');
   bace2:	4620      	mov	r0, r4
   bace4:	f7ff ff48 	bl	bab78 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bace8:	463d      	mov	r5, r7
    while (s != end) {
   bacea:	e7cf      	b.n	bac8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bacec:	2162      	movs	r1, #98	; 0x62
   bacee:	e7f8      	b.n	bace2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bacf0:	2174      	movs	r1, #116	; 0x74
   bacf2:	e7f6      	b.n	bace2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bacf4:	216e      	movs	r1, #110	; 0x6e
   bacf6:	e7f4      	b.n	bace2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bacf8:	2166      	movs	r1, #102	; 0x66
   bacfa:	e7f2      	b.n	bace2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bacfc:	2172      	movs	r1, #114	; 0x72
   bacfe:	e7f0      	b.n	bace2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bad00:	6823      	ldr	r3, [r4, #0]
   bad02:	4632      	mov	r2, r6
   bad04:	68db      	ldr	r3, [r3, #12]
   bad06:	4649      	mov	r1, r9
   bad08:	4620      	mov	r0, r4
   bad0a:	4798      	blx	r3
                break;
   bad0c:	e7ec      	b.n	bace8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bad0e:	42bd      	cmp	r5, r7
   bad10:	d005      	beq.n	bad1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bad12:	6823      	ldr	r3, [r4, #0]
   bad14:	1b7a      	subs	r2, r7, r5
   bad16:	689b      	ldr	r3, [r3, #8]
   bad18:	4629      	mov	r1, r5
   bad1a:	4620      	mov	r0, r4
   bad1c:	4798      	blx	r3
    }
    write('"');
   bad1e:	2122      	movs	r1, #34	; 0x22
   bad20:	4620      	mov	r0, r4
   bad22:	f7ff ff29 	bl	bab78 <_ZN5spark10JSONWriter5writeEc>
}
   bad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bad2a:	bf00      	nop
   bad2c:	000bc4ab 	.word	0x000bc4ab

000bad30 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bad30:	b513      	push	{r0, r1, r4, lr}
   bad32:	4604      	mov	r4, r0
   bad34:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bad38:	f7ff ff33 	bl	baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bad3c:	4620      	mov	r0, r4
   bad3e:	e9dd 2100 	ldrd	r2, r1, [sp]
   bad42:	f7ff ff97 	bl	bac74 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bad46:	2302      	movs	r3, #2
}
   bad48:	4620      	mov	r0, r4
    state_ = VALUE;
   bad4a:	7123      	strb	r3, [r4, #4]
}
   bad4c:	b002      	add	sp, #8
   bad4e:	bd10      	pop	{r4, pc}

000bad50 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bad50:	b513      	push	{r0, r1, r4, lr}
   bad52:	4604      	mov	r4, r0
   bad54:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bad58:	f7ff ff23 	bl	baba2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bad5c:	4620      	mov	r0, r4
   bad5e:	e9dd 2100 	ldrd	r2, r1, [sp]
   bad62:	f7ff ff87 	bl	bac74 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bad66:	2301      	movs	r3, #1
}
   bad68:	4620      	mov	r0, r4
    state_ = NEXT;
   bad6a:	7123      	strb	r3, [r4, #4]
}
   bad6c:	b002      	add	sp, #8
   bad6e:	bd10      	pop	{r4, pc}

000bad70 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bad70:	4770      	bx	lr
	...

000bad74 <_Z20acquireSerial1Bufferv>:
{
   bad74:	b538      	push	{r3, r4, r5, lr}
   bad76:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bad78:	2514      	movs	r5, #20
   bad7a:	462a      	mov	r2, r5
   bad7c:	2100      	movs	r1, #0
   bad7e:	f000 fe93 	bl	bbaa8 <memset>
   bad82:	8025      	strh	r5, [r4, #0]
   bad84:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad86:	4907      	ldr	r1, [pc, #28]	; (bada4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bad88:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad8a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bad8c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad8e:	f000 f831 	bl	badf4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad92:	4904      	ldr	r1, [pc, #16]	; (bada4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bad94:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad96:	4628      	mov	r0, r5
   bad98:	f000 f82c 	bl	badf4 <_ZnajRKSt9nothrow_t>
    };
   bad9c:	60e0      	str	r0, [r4, #12]
}
   bad9e:	4620      	mov	r0, r4
   bada0:	bd38      	pop	{r3, r4, r5, pc}
   bada2:	bf00      	nop
   bada4:	000bc4b1 	.word	0x000bc4b1

000bada8 <_Z22__fetch_global_Serial1v>:
{
   bada8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   badaa:	4d0e      	ldr	r5, [pc, #56]	; (bade4 <_Z22__fetch_global_Serial1v+0x3c>)
   badac:	7829      	ldrb	r1, [r5, #0]
   badae:	f3bf 8f5b 	dmb	ish
   badb2:	f011 0401 	ands.w	r4, r1, #1
{
   badb6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   badb8:	d111      	bne.n	badde <_Z22__fetch_global_Serial1v+0x36>
   badba:	4628      	mov	r0, r5
   badbc:	f7f9 f96f 	bl	b409e <__cxa_guard_acquire>
   badc0:	b168      	cbz	r0, badde <_Z22__fetch_global_Serial1v+0x36>
   badc2:	a801      	add	r0, sp, #4
   badc4:	f7ff ffd6 	bl	bad74 <_Z20acquireSerial1Bufferv>
   badc8:	aa01      	add	r2, sp, #4
   badca:	4621      	mov	r1, r4
   badcc:	4806      	ldr	r0, [pc, #24]	; (bade8 <_Z22__fetch_global_Serial1v+0x40>)
   badce:	f7ff fd83 	bl	ba8d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   badd2:	4628      	mov	r0, r5
   badd4:	f7f9 f968 	bl	b40a8 <__cxa_guard_release>
   badd8:	4804      	ldr	r0, [pc, #16]	; (badec <_Z22__fetch_global_Serial1v+0x44>)
   badda:	f000 fe1f 	bl	bba1c <atexit>
    return serial1;
}
   badde:	4802      	ldr	r0, [pc, #8]	; (bade8 <_Z22__fetch_global_Serial1v+0x40>)
   bade0:	b007      	add	sp, #28
   bade2:	bd30      	pop	{r4, r5, pc}
   bade4:	2003e740 	.word	0x2003e740
   bade8:	2003e744 	.word	0x2003e744
   badec:	000bad71 	.word	0x000bad71

000badf0 <_ZnwjRKSt9nothrow_t>:
   badf0:	f7f9 b94f 	b.w	b4092 <_Znwj>

000badf4 <_ZnajRKSt9nothrow_t>:
   badf4:	f7f9 b94f 	b.w	b4096 <_Znaj>

000badf8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   badf8:	68c3      	ldr	r3, [r0, #12]
   badfa:	689a      	ldr	r2, [r3, #8]
   badfc:	60c2      	str	r2, [r0, #12]
   badfe:	b510      	push	{r4, lr}
   bae00:	b102      	cbz	r2, bae04 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   bae02:	6050      	str	r0, [r2, #4]
   bae04:	6842      	ldr	r2, [r0, #4]
   bae06:	605a      	str	r2, [r3, #4]
   bae08:	680c      	ldr	r4, [r1, #0]
   bae0a:	4284      	cmp	r4, r0
   bae0c:	d103      	bne.n	bae16 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   bae0e:	600b      	str	r3, [r1, #0]
   bae10:	6098      	str	r0, [r3, #8]
   bae12:	6043      	str	r3, [r0, #4]
   bae14:	bd10      	pop	{r4, pc}
   bae16:	6891      	ldr	r1, [r2, #8]
   bae18:	4281      	cmp	r1, r0
   bae1a:	bf0c      	ite	eq
   bae1c:	6093      	streq	r3, [r2, #8]
   bae1e:	60d3      	strne	r3, [r2, #12]
   bae20:	e7f6      	b.n	bae10 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000bae22 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   bae22:	6883      	ldr	r3, [r0, #8]
   bae24:	68da      	ldr	r2, [r3, #12]
   bae26:	6082      	str	r2, [r0, #8]
   bae28:	b510      	push	{r4, lr}
   bae2a:	b102      	cbz	r2, bae2e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   bae2c:	6050      	str	r0, [r2, #4]
   bae2e:	6842      	ldr	r2, [r0, #4]
   bae30:	605a      	str	r2, [r3, #4]
   bae32:	680c      	ldr	r4, [r1, #0]
   bae34:	4284      	cmp	r4, r0
   bae36:	d103      	bne.n	bae40 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   bae38:	600b      	str	r3, [r1, #0]
   bae3a:	60d8      	str	r0, [r3, #12]
   bae3c:	6043      	str	r3, [r0, #4]
   bae3e:	bd10      	pop	{r4, pc}
   bae40:	68d1      	ldr	r1, [r2, #12]
   bae42:	4281      	cmp	r1, r0
   bae44:	bf0c      	ite	eq
   bae46:	60d3      	streq	r3, [r2, #12]
   bae48:	6093      	strne	r3, [r2, #8]
   bae4a:	e7f6      	b.n	bae3a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000bae4c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   bae4c:	68c3      	ldr	r3, [r0, #12]
   bae4e:	b123      	cbz	r3, bae5a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   bae50:	4618      	mov	r0, r3
   bae52:	689b      	ldr	r3, [r3, #8]
   bae54:	2b00      	cmp	r3, #0
   bae56:	d1fb      	bne.n	bae50 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   bae58:	4770      	bx	lr
   bae5a:	6843      	ldr	r3, [r0, #4]
   bae5c:	68da      	ldr	r2, [r3, #12]
   bae5e:	4282      	cmp	r2, r0
   bae60:	d102      	bne.n	bae68 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   bae62:	4618      	mov	r0, r3
   bae64:	685b      	ldr	r3, [r3, #4]
   bae66:	e7f9      	b.n	bae5c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   bae68:	68c2      	ldr	r2, [r0, #12]
   bae6a:	4293      	cmp	r3, r2
   bae6c:	bf18      	it	ne
   bae6e:	4618      	movne	r0, r3
   bae70:	4770      	bx	lr

000bae72 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   bae72:	7803      	ldrb	r3, [r0, #0]
   bae74:	b933      	cbnz	r3, bae84 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bae76:	6843      	ldr	r3, [r0, #4]
   bae78:	685b      	ldr	r3, [r3, #4]
   bae7a:	4283      	cmp	r3, r0
   bae7c:	d102      	bne.n	bae84 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bae7e:	68db      	ldr	r3, [r3, #12]
   bae80:	4618      	mov	r0, r3
   bae82:	4770      	bx	lr
   bae84:	6882      	ldr	r2, [r0, #8]
   bae86:	b122      	cbz	r2, bae92 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   bae88:	4613      	mov	r3, r2
   bae8a:	68d2      	ldr	r2, [r2, #12]
   bae8c:	2a00      	cmp	r2, #0
   bae8e:	d1fb      	bne.n	bae88 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   bae90:	e7f6      	b.n	bae80 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bae92:	6843      	ldr	r3, [r0, #4]
   bae94:	689a      	ldr	r2, [r3, #8]
   bae96:	4282      	cmp	r2, r0
   bae98:	d1f2      	bne.n	bae80 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bae9a:	4618      	mov	r0, r3
   bae9c:	685b      	ldr	r3, [r3, #4]
   bae9e:	e7f9      	b.n	bae94 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000baea0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   baea0:	f7ff bfd4 	b.w	bae4c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000baea4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   baea4:	f7ff bfd2 	b.w	bae4c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000baea8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   baea8:	f7ff bfe3 	b.w	bae72 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000baeac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   baeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baeb0:	461e      	mov	r6, r3
   baeb2:	f103 0804 	add.w	r8, r3, #4
   baeb6:	2300      	movs	r3, #0
   baeb8:	e9c1 3302 	strd	r3, r3, [r1, #8]
   baebc:	460c      	mov	r4, r1
   baebe:	604a      	str	r2, [r1, #4]
   baec0:	700b      	strb	r3, [r1, #0]
   baec2:	b300      	cbz	r0, baf06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   baec4:	4296      	cmp	r6, r2
   baec6:	6091      	str	r1, [r2, #8]
   baec8:	d118      	bne.n	baefc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   baeca:	6071      	str	r1, [r6, #4]
   baecc:	60f4      	str	r4, [r6, #12]
   baece:	2701      	movs	r7, #1
   baed0:	f04f 0900 	mov.w	r9, #0
   baed4:	6873      	ldr	r3, [r6, #4]
   baed6:	42a3      	cmp	r3, r4
   baed8:	d03f      	beq.n	baf5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   baeda:	6860      	ldr	r0, [r4, #4]
   baedc:	7802      	ldrb	r2, [r0, #0]
   baede:	2a00      	cmp	r2, #0
   baee0:	d13b      	bne.n	baf5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   baee2:	6845      	ldr	r5, [r0, #4]
   baee4:	68ab      	ldr	r3, [r5, #8]
   baee6:	4298      	cmp	r0, r3
   baee8:	d123      	bne.n	baf32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   baeea:	68eb      	ldr	r3, [r5, #12]
   baeec:	b183      	cbz	r3, baf10 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   baeee:	781a      	ldrb	r2, [r3, #0]
   baef0:	b972      	cbnz	r2, baf10 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   baef2:	7007      	strb	r7, [r0, #0]
   baef4:	701f      	strb	r7, [r3, #0]
   baef6:	702a      	strb	r2, [r5, #0]
   baef8:	462c      	mov	r4, r5
   baefa:	e7eb      	b.n	baed4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   baefc:	68b3      	ldr	r3, [r6, #8]
   baefe:	4293      	cmp	r3, r2
   baf00:	d1e5      	bne.n	baece <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   baf02:	60b1      	str	r1, [r6, #8]
   baf04:	e7e3      	b.n	baece <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   baf06:	60d1      	str	r1, [r2, #12]
   baf08:	68f3      	ldr	r3, [r6, #12]
   baf0a:	4293      	cmp	r3, r2
   baf0c:	d1df      	bne.n	baece <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   baf0e:	e7dd      	b.n	baecc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   baf10:	68c3      	ldr	r3, [r0, #12]
   baf12:	42a3      	cmp	r3, r4
   baf14:	d103      	bne.n	baf1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   baf16:	4641      	mov	r1, r8
   baf18:	f7ff ff6e 	bl	badf8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   baf1c:	4604      	mov	r4, r0
   baf1e:	6863      	ldr	r3, [r4, #4]
   baf20:	4641      	mov	r1, r8
   baf22:	701f      	strb	r7, [r3, #0]
   baf24:	4628      	mov	r0, r5
   baf26:	f885 9000 	strb.w	r9, [r5]
   baf2a:	f7ff ff7a 	bl	bae22 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   baf2e:	4625      	mov	r5, r4
   baf30:	e7e2      	b.n	baef8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   baf32:	b113      	cbz	r3, baf3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   baf34:	781a      	ldrb	r2, [r3, #0]
   baf36:	2a00      	cmp	r2, #0
   baf38:	d0db      	beq.n	baef2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   baf3a:	6883      	ldr	r3, [r0, #8]
   baf3c:	42a3      	cmp	r3, r4
   baf3e:	d103      	bne.n	baf48 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   baf40:	4641      	mov	r1, r8
   baf42:	f7ff ff6e 	bl	bae22 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   baf46:	4604      	mov	r4, r0
   baf48:	6863      	ldr	r3, [r4, #4]
   baf4a:	4641      	mov	r1, r8
   baf4c:	701f      	strb	r7, [r3, #0]
   baf4e:	4628      	mov	r0, r5
   baf50:	f885 9000 	strb.w	r9, [r5]
   baf54:	f7ff ff50 	bl	badf8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   baf58:	e7e9      	b.n	baf2e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   baf5a:	2201      	movs	r2, #1
   baf5c:	701a      	strb	r2, [r3, #0]
   baf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000baf62 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   baf62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   baf66:	460f      	mov	r7, r1
   baf68:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
   baf6c:	4604      	mov	r4, r0
   baf6e:	2e00      	cmp	r6, #0
   baf70:	d03e      	beq.n	baff0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
   baf72:	2900      	cmp	r1, #0
   baf74:	d03d      	beq.n	baff2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   baf76:	460a      	mov	r2, r1
   baf78:	4613      	mov	r3, r2
   baf7a:	6892      	ldr	r2, [r2, #8]
   baf7c:	2a00      	cmp	r2, #0
   baf7e:	d1fb      	bne.n	baf78 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
   baf80:	42a3      	cmp	r3, r4
   baf82:	68da      	ldr	r2, [r3, #12]
   baf84:	d04b      	beq.n	bb01e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
   baf86:	4299      	cmp	r1, r3
   baf88:	6073      	str	r3, [r6, #4]
   baf8a:	609e      	str	r6, [r3, #8]
   baf8c:	d027      	beq.n	bafde <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
   baf8e:	685d      	ldr	r5, [r3, #4]
   baf90:	b102      	cbz	r2, baf94 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
   baf92:	6055      	str	r5, [r2, #4]
   baf94:	6858      	ldr	r0, [r3, #4]
   baf96:	6082      	str	r2, [r0, #8]
   baf98:	60d9      	str	r1, [r3, #12]
   baf9a:	68e1      	ldr	r1, [r4, #12]
   baf9c:	604b      	str	r3, [r1, #4]
   baf9e:	6879      	ldr	r1, [r7, #4]
   bafa0:	42a1      	cmp	r1, r4
   bafa2:	d11e      	bne.n	bafe2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
   bafa4:	607b      	str	r3, [r7, #4]
   bafa6:	6861      	ldr	r1, [r4, #4]
   bafa8:	7820      	ldrb	r0, [r4, #0]
   bafaa:	6059      	str	r1, [r3, #4]
   bafac:	7819      	ldrb	r1, [r3, #0]
   bafae:	7018      	strb	r0, [r3, #0]
   bafb0:	4616      	mov	r6, r2
   bafb2:	7021      	strb	r1, [r4, #0]
   bafb4:	7823      	ldrb	r3, [r4, #0]
   bafb6:	b173      	cbz	r3, bafd6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   bafb8:	1d39      	adds	r1, r7, #4
   bafba:	f04f 0800 	mov.w	r8, #0
   bafbe:	f04f 0901 	mov.w	r9, #1
   bafc2:	687b      	ldr	r3, [r7, #4]
   bafc4:	42b3      	cmp	r3, r6
   bafc6:	d07b      	beq.n	bb0c0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
   bafc8:	2e00      	cmp	r6, #0
   bafca:	d03f      	beq.n	bb04c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   bafcc:	7833      	ldrb	r3, [r6, #0]
   bafce:	2b01      	cmp	r3, #1
   bafd0:	d03c      	beq.n	bb04c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   bafd2:	2301      	movs	r3, #1
   bafd4:	7033      	strb	r3, [r6, #0]
   bafd6:	4620      	mov	r0, r4
   bafd8:	b003      	add	sp, #12
   bafda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bafde:	461d      	mov	r5, r3
   bafe0:	e7dd      	b.n	baf9e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
   bafe2:	6861      	ldr	r1, [r4, #4]
   bafe4:	6888      	ldr	r0, [r1, #8]
   bafe6:	42a0      	cmp	r0, r4
   bafe8:	bf0c      	ite	eq
   bafea:	608b      	streq	r3, [r1, #8]
   bafec:	60cb      	strne	r3, [r1, #12]
   bafee:	e7da      	b.n	bafa6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
   baff0:	460e      	mov	r6, r1
   baff2:	6865      	ldr	r5, [r4, #4]
   baff4:	b106      	cbz	r6, baff8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
   baff6:	6075      	str	r5, [r6, #4]
   baff8:	687b      	ldr	r3, [r7, #4]
   baffa:	42a3      	cmp	r3, r4
   baffc:	d111      	bne.n	bb022 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
   baffe:	607e      	str	r6, [r7, #4]
   bb000:	68bb      	ldr	r3, [r7, #8]
   bb002:	42a3      	cmp	r3, r4
   bb004:	d103      	bne.n	bb00e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   bb006:	68e3      	ldr	r3, [r4, #12]
   bb008:	b993      	cbnz	r3, bb030 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
   bb00a:	6863      	ldr	r3, [r4, #4]
   bb00c:	60bb      	str	r3, [r7, #8]
   bb00e:	68fb      	ldr	r3, [r7, #12]
   bb010:	42a3      	cmp	r3, r4
   bb012:	d1cf      	bne.n	bafb4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   bb014:	68a3      	ldr	r3, [r4, #8]
   bb016:	b993      	cbnz	r3, bb03e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   bb018:	6863      	ldr	r3, [r4, #4]
   bb01a:	60fb      	str	r3, [r7, #12]
   bb01c:	e7ca      	b.n	bafb4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   bb01e:	4616      	mov	r6, r2
   bb020:	e7e7      	b.n	baff2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   bb022:	6863      	ldr	r3, [r4, #4]
   bb024:	689a      	ldr	r2, [r3, #8]
   bb026:	42a2      	cmp	r2, r4
   bb028:	bf0c      	ite	eq
   bb02a:	609e      	streq	r6, [r3, #8]
   bb02c:	60de      	strne	r6, [r3, #12]
   bb02e:	e7e7      	b.n	bb000 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
   bb030:	4633      	mov	r3, r6
   bb032:	461a      	mov	r2, r3
   bb034:	689b      	ldr	r3, [r3, #8]
   bb036:	2b00      	cmp	r3, #0
   bb038:	d1fb      	bne.n	bb032 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
   bb03a:	60ba      	str	r2, [r7, #8]
   bb03c:	e7e7      	b.n	bb00e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   bb03e:	4633      	mov	r3, r6
   bb040:	461a      	mov	r2, r3
   bb042:	68db      	ldr	r3, [r3, #12]
   bb044:	2b00      	cmp	r3, #0
   bb046:	d1fb      	bne.n	bb040 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
   bb048:	60fa      	str	r2, [r7, #12]
   bb04a:	e7b3      	b.n	bafb4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   bb04c:	68a8      	ldr	r0, [r5, #8]
   bb04e:	42b0      	cmp	r0, r6
   bb050:	d139      	bne.n	bb0c6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   bb052:	68e8      	ldr	r0, [r5, #12]
   bb054:	7803      	ldrb	r3, [r0, #0]
   bb056:	b943      	cbnz	r3, bb06a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x108>
   bb058:	f880 9000 	strb.w	r9, [r0]
   bb05c:	4628      	mov	r0, r5
   bb05e:	702b      	strb	r3, [r5, #0]
   bb060:	9101      	str	r1, [sp, #4]
   bb062:	f7ff fec9 	bl	badf8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb066:	68e8      	ldr	r0, [r5, #12]
   bb068:	9901      	ldr	r1, [sp, #4]
   bb06a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   bb06e:	b122      	cbz	r2, bb07a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x118>
   bb070:	f892 c000 	ldrb.w	ip, [r2]
   bb074:	f1bc 0f01 	cmp.w	ip, #1
   bb078:	d10b      	bne.n	bb092 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   bb07a:	b123      	cbz	r3, bb086 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   bb07c:	f893 c000 	ldrb.w	ip, [r3]
   bb080:	f1bc 0f01 	cmp.w	ip, #1
   bb084:	d105      	bne.n	bb092 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   bb086:	686b      	ldr	r3, [r5, #4]
   bb088:	f880 8000 	strb.w	r8, [r0]
   bb08c:	462e      	mov	r6, r5
   bb08e:	461d      	mov	r5, r3
   bb090:	e797      	b.n	bafc2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x60>
   bb092:	b113      	cbz	r3, bb09a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x138>
   bb094:	781b      	ldrb	r3, [r3, #0]
   bb096:	2b01      	cmp	r3, #1
   bb098:	d108      	bne.n	bb0ac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14a>
   bb09a:	2301      	movs	r3, #1
   bb09c:	7013      	strb	r3, [r2, #0]
   bb09e:	2300      	movs	r3, #0
   bb0a0:	7003      	strb	r3, [r0, #0]
   bb0a2:	9101      	str	r1, [sp, #4]
   bb0a4:	f7ff febd 	bl	bae22 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb0a8:	68e8      	ldr	r0, [r5, #12]
   bb0aa:	9901      	ldr	r1, [sp, #4]
   bb0ac:	782b      	ldrb	r3, [r5, #0]
   bb0ae:	7003      	strb	r3, [r0, #0]
   bb0b0:	68c3      	ldr	r3, [r0, #12]
   bb0b2:	2201      	movs	r2, #1
   bb0b4:	702a      	strb	r2, [r5, #0]
   bb0b6:	b103      	cbz	r3, bb0ba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x158>
   bb0b8:	701a      	strb	r2, [r3, #0]
   bb0ba:	4628      	mov	r0, r5
   bb0bc:	f7ff fe9c 	bl	badf8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb0c0:	2e00      	cmp	r6, #0
   bb0c2:	d186      	bne.n	bafd2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x70>
   bb0c4:	e787      	b.n	bafd6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   bb0c6:	7803      	ldrb	r3, [r0, #0]
   bb0c8:	b943      	cbnz	r3, bb0dc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
   bb0ca:	f880 9000 	strb.w	r9, [r0]
   bb0ce:	4628      	mov	r0, r5
   bb0d0:	702b      	strb	r3, [r5, #0]
   bb0d2:	9101      	str	r1, [sp, #4]
   bb0d4:	f7ff fea5 	bl	bae22 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb0d8:	68a8      	ldr	r0, [r5, #8]
   bb0da:	9901      	ldr	r1, [sp, #4]
   bb0dc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   bb0e0:	b122      	cbz	r2, bb0ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18a>
   bb0e2:	f892 c000 	ldrb.w	ip, [r2]
   bb0e6:	f1bc 0f01 	cmp.w	ip, #1
   bb0ea:	d106      	bne.n	bb0fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x198>
   bb0ec:	2b00      	cmp	r3, #0
   bb0ee:	d0ca      	beq.n	bb086 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   bb0f0:	f893 c000 	ldrb.w	ip, [r3]
   bb0f4:	f1bc 0f01 	cmp.w	ip, #1
   bb0f8:	d0c5      	beq.n	bb086 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   bb0fa:	b113      	cbz	r3, bb102 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a0>
   bb0fc:	781b      	ldrb	r3, [r3, #0]
   bb0fe:	2b01      	cmp	r3, #1
   bb100:	d108      	bne.n	bb114 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1b2>
   bb102:	2301      	movs	r3, #1
   bb104:	7013      	strb	r3, [r2, #0]
   bb106:	2300      	movs	r3, #0
   bb108:	7003      	strb	r3, [r0, #0]
   bb10a:	9101      	str	r1, [sp, #4]
   bb10c:	f7ff fe74 	bl	badf8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   bb110:	68a8      	ldr	r0, [r5, #8]
   bb112:	9901      	ldr	r1, [sp, #4]
   bb114:	782b      	ldrb	r3, [r5, #0]
   bb116:	7003      	strb	r3, [r0, #0]
   bb118:	6883      	ldr	r3, [r0, #8]
   bb11a:	2201      	movs	r2, #1
   bb11c:	702a      	strb	r2, [r5, #0]
   bb11e:	b103      	cbz	r3, bb122 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c0>
   bb120:	701a      	strb	r2, [r3, #0]
   bb122:	4628      	mov	r0, r5
   bb124:	f7ff fe7d 	bl	bae22 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   bb128:	e7ca      	b.n	bb0c0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>

000bb12a <_ZSt25__throw_bad_function_callv>:
   bb12a:	b508      	push	{r3, lr}
   bb12c:	f7fc faa4 	bl	b7678 <abort>

000bb130 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb130:	4901      	ldr	r1, [pc, #4]	; (bb138 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb132:	f000 b8f9 	b.w	bb328 <_ZNKSt9type_infoeqERKS_>
   bb136:	bf00      	nop
   bb138:	000bc4cc 	.word	0x000bc4cc

000bb13c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb13c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb13e:	2400      	movs	r4, #0
   bb140:	2310      	movs	r3, #16
   bb142:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb146:	6803      	ldr	r3, [r0, #0]
   bb148:	4615      	mov	r5, r2
   bb14a:	699e      	ldr	r6, [r3, #24]
   bb14c:	6812      	ldr	r2, [r2, #0]
   bb14e:	466b      	mov	r3, sp
   bb150:	e9cd 4400 	strd	r4, r4, [sp]
   bb154:	47b0      	blx	r6
   bb156:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb15a:	f003 0306 	and.w	r3, r3, #6
   bb15e:	2b06      	cmp	r3, #6
   bb160:	bf03      	ittte	eq
   bb162:	9b00      	ldreq	r3, [sp, #0]
   bb164:	602b      	streq	r3, [r5, #0]
   bb166:	2001      	moveq	r0, #1
   bb168:	4620      	movne	r0, r4
   bb16a:	b004      	add	sp, #16
   bb16c:	bd70      	pop	{r4, r5, r6, pc}

000bb16e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb16e:	9800      	ldr	r0, [sp, #0]
   bb170:	4290      	cmp	r0, r2
   bb172:	bf14      	ite	ne
   bb174:	2001      	movne	r0, #1
   bb176:	2006      	moveq	r0, #6
   bb178:	4770      	bx	lr
	...

000bb17c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb17c:	b510      	push	{r4, lr}
   bb17e:	4b03      	ldr	r3, [pc, #12]	; (bb18c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb180:	6003      	str	r3, [r0, #0]
   bb182:	4604      	mov	r4, r0
   bb184:	f000 f8cd 	bl	bb322 <_ZNSt9type_infoD1Ev>
   bb188:	4620      	mov	r0, r4
   bb18a:	bd10      	pop	{r4, pc}
   bb18c:	000bc50c 	.word	0x000bc50c

000bb190 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb190:	b510      	push	{r4, lr}
   bb192:	4604      	mov	r4, r0
   bb194:	f7ff fff2 	bl	bb17c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb198:	4620      	mov	r0, r4
   bb19a:	2108      	movs	r1, #8
   bb19c:	f7f8 ff7d 	bl	b409a <_ZdlPvj>
   bb1a0:	4620      	mov	r0, r4
   bb1a2:	bd10      	pop	{r4, pc}

000bb1a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb1a8:	461f      	mov	r7, r3
   bb1aa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb1ae:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb1b2:	4598      	cmp	r8, r3
   bb1b4:	4606      	mov	r6, r0
   bb1b6:	4615      	mov	r5, r2
   bb1b8:	d107      	bne.n	bb1ca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb1ba:	9907      	ldr	r1, [sp, #28]
   bb1bc:	f000 f8b4 	bl	bb328 <_ZNKSt9type_infoeqERKS_>
   bb1c0:	b118      	cbz	r0, bb1ca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb1c2:	7165      	strb	r5, [r4, #5]
   bb1c4:	2000      	movs	r0, #0
   bb1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb1ca:	4639      	mov	r1, r7
   bb1cc:	4630      	mov	r0, r6
   bb1ce:	f000 f8ab 	bl	bb328 <_ZNKSt9type_infoeqERKS_>
   bb1d2:	2800      	cmp	r0, #0
   bb1d4:	d0f6      	beq.n	bb1c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb1d6:	2301      	movs	r3, #1
   bb1d8:	f8c4 8000 	str.w	r8, [r4]
   bb1dc:	7125      	strb	r5, [r4, #4]
   bb1de:	71a3      	strb	r3, [r4, #6]
   bb1e0:	e7f0      	b.n	bb1c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb1e2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb1e2:	b538      	push	{r3, r4, r5, lr}
   bb1e4:	4615      	mov	r5, r2
   bb1e6:	461c      	mov	r4, r3
   bb1e8:	f000 f89e 	bl	bb328 <_ZNKSt9type_infoeqERKS_>
   bb1ec:	b120      	cbz	r0, bb1f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb1ee:	2308      	movs	r3, #8
   bb1f0:	60e3      	str	r3, [r4, #12]
   bb1f2:	2306      	movs	r3, #6
   bb1f4:	6025      	str	r5, [r4, #0]
   bb1f6:	7123      	strb	r3, [r4, #4]
   bb1f8:	bd38      	pop	{r3, r4, r5, pc}

000bb1fa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb1fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb1fc:	4605      	mov	r5, r0
   bb1fe:	460c      	mov	r4, r1
   bb200:	9201      	str	r2, [sp, #4]
   bb202:	461e      	mov	r6, r3
   bb204:	f000 f890 	bl	bb328 <_ZNKSt9type_infoeqERKS_>
   bb208:	b950      	cbnz	r0, bb220 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb20a:	2e03      	cmp	r6, #3
   bb20c:	d808      	bhi.n	bb220 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb20e:	6823      	ldr	r3, [r4, #0]
   bb210:	9a01      	ldr	r2, [sp, #4]
   bb212:	695b      	ldr	r3, [r3, #20]
   bb214:	4629      	mov	r1, r5
   bb216:	4620      	mov	r0, r4
   bb218:	b002      	add	sp, #8
   bb21a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb21e:	4718      	bx	r3
   bb220:	b002      	add	sp, #8
   bb222:	bd70      	pop	{r4, r5, r6, pc}

000bb224 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb224:	b510      	push	{r4, lr}
   bb226:	4b03      	ldr	r3, [pc, #12]	; (bb234 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb228:	6003      	str	r3, [r0, #0]
   bb22a:	4604      	mov	r4, r0
   bb22c:	f7ff ffa6 	bl	bb17c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb230:	4620      	mov	r0, r4
   bb232:	bd10      	pop	{r4, pc}
   bb234:	000bc56c 	.word	0x000bc56c

000bb238 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb238:	b510      	push	{r4, lr}
   bb23a:	4604      	mov	r4, r0
   bb23c:	f7ff fff2 	bl	bb224 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb240:	4620      	mov	r0, r4
   bb242:	210c      	movs	r1, #12
   bb244:	f7f8 ff29 	bl	b409a <_ZdlPvj>
   bb248:	4620      	mov	r0, r4
   bb24a:	bd10      	pop	{r4, pc}

000bb24c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb24e:	9f08      	ldr	r7, [sp, #32]
   bb250:	4297      	cmp	r7, r2
   bb252:	4605      	mov	r5, r0
   bb254:	460e      	mov	r6, r1
   bb256:	4614      	mov	r4, r2
   bb258:	d00a      	beq.n	bb270 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb25a:	68a8      	ldr	r0, [r5, #8]
   bb25c:	6802      	ldr	r2, [r0, #0]
   bb25e:	9708      	str	r7, [sp, #32]
   bb260:	6a15      	ldr	r5, [r2, #32]
   bb262:	4631      	mov	r1, r6
   bb264:	4622      	mov	r2, r4
   bb266:	46ac      	mov	ip, r5
   bb268:	b003      	add	sp, #12
   bb26a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb26e:	4760      	bx	ip
   bb270:	4619      	mov	r1, r3
   bb272:	9301      	str	r3, [sp, #4]
   bb274:	f000 f858 	bl	bb328 <_ZNKSt9type_infoeqERKS_>
   bb278:	9b01      	ldr	r3, [sp, #4]
   bb27a:	2800      	cmp	r0, #0
   bb27c:	d0ed      	beq.n	bb25a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb27e:	2006      	movs	r0, #6
   bb280:	b003      	add	sp, #12
   bb282:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb284 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb284:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb288:	460d      	mov	r5, r1
   bb28a:	4619      	mov	r1, r3
   bb28c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb290:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb294:	4681      	mov	r9, r0
   bb296:	4617      	mov	r7, r2
   bb298:	4698      	mov	r8, r3
   bb29a:	f000 f845 	bl	bb328 <_ZNKSt9type_infoeqERKS_>
   bb29e:	b190      	cbz	r0, bb2c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb2a0:	2d00      	cmp	r5, #0
   bb2a2:	6034      	str	r4, [r6, #0]
   bb2a4:	7137      	strb	r7, [r6, #4]
   bb2a6:	db09      	blt.n	bb2bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb2a8:	1961      	adds	r1, r4, r5
   bb2aa:	458a      	cmp	sl, r1
   bb2ac:	bf0c      	ite	eq
   bb2ae:	2106      	moveq	r1, #6
   bb2b0:	2101      	movne	r1, #1
   bb2b2:	71b1      	strb	r1, [r6, #6]
   bb2b4:	2000      	movs	r0, #0
   bb2b6:	b001      	add	sp, #4
   bb2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb2bc:	3502      	adds	r5, #2
   bb2be:	d1f9      	bne.n	bb2b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb2c0:	2301      	movs	r3, #1
   bb2c2:	71b3      	strb	r3, [r6, #6]
   bb2c4:	e7f6      	b.n	bb2b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb2c6:	4554      	cmp	r4, sl
   bb2c8:	d106      	bne.n	bb2d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb2ca:	4659      	mov	r1, fp
   bb2cc:	4648      	mov	r0, r9
   bb2ce:	f000 f82b 	bl	bb328 <_ZNKSt9type_infoeqERKS_>
   bb2d2:	b108      	cbz	r0, bb2d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb2d4:	7177      	strb	r7, [r6, #5]
   bb2d6:	e7ed      	b.n	bb2b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb2d8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb2dc:	6803      	ldr	r3, [r0, #0]
   bb2de:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb2e2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb2e6:	69dc      	ldr	r4, [r3, #28]
   bb2e8:	463a      	mov	r2, r7
   bb2ea:	4643      	mov	r3, r8
   bb2ec:	4629      	mov	r1, r5
   bb2ee:	46a4      	mov	ip, r4
   bb2f0:	b001      	add	sp, #4
   bb2f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb2f6:	4760      	bx	ip

000bb2f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb2fc:	4607      	mov	r7, r0
   bb2fe:	460c      	mov	r4, r1
   bb300:	4615      	mov	r5, r2
   bb302:	461e      	mov	r6, r3
   bb304:	f7ff ff6d 	bl	bb1e2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb308:	b948      	cbnz	r0, bb31e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb30a:	68b8      	ldr	r0, [r7, #8]
   bb30c:	6803      	ldr	r3, [r0, #0]
   bb30e:	699f      	ldr	r7, [r3, #24]
   bb310:	462a      	mov	r2, r5
   bb312:	4633      	mov	r3, r6
   bb314:	4621      	mov	r1, r4
   bb316:	46bc      	mov	ip, r7
   bb318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb31c:	4760      	bx	ip
   bb31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb322 <_ZNSt9type_infoD1Ev>:
   bb322:	4770      	bx	lr

000bb324 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb324:	2000      	movs	r0, #0
   bb326:	4770      	bx	lr

000bb328 <_ZNKSt9type_infoeqERKS_>:
   bb328:	4281      	cmp	r1, r0
   bb32a:	b508      	push	{r3, lr}
   bb32c:	d00e      	beq.n	bb34c <_ZNKSt9type_infoeqERKS_+0x24>
   bb32e:	6840      	ldr	r0, [r0, #4]
   bb330:	7803      	ldrb	r3, [r0, #0]
   bb332:	2b2a      	cmp	r3, #42	; 0x2a
   bb334:	d00c      	beq.n	bb350 <_ZNKSt9type_infoeqERKS_+0x28>
   bb336:	6849      	ldr	r1, [r1, #4]
   bb338:	780b      	ldrb	r3, [r1, #0]
   bb33a:	2b2a      	cmp	r3, #42	; 0x2a
   bb33c:	bf08      	it	eq
   bb33e:	3101      	addeq	r1, #1
   bb340:	f000 fbe8 	bl	bbb14 <strcmp>
   bb344:	fab0 f080 	clz	r0, r0
   bb348:	0940      	lsrs	r0, r0, #5
   bb34a:	bd08      	pop	{r3, pc}
   bb34c:	2001      	movs	r0, #1
   bb34e:	e7fc      	b.n	bb34a <_ZNKSt9type_infoeqERKS_+0x22>
   bb350:	2000      	movs	r0, #0
   bb352:	e7fa      	b.n	bb34a <_ZNKSt9type_infoeqERKS_+0x22>

000bb354 <__aeabi_drsub>:
   bb354:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb358:	e002      	b.n	bb360 <__adddf3>
   bb35a:	bf00      	nop

000bb35c <__aeabi_dsub>:
   bb35c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb360 <__adddf3>:
   bb360:	b530      	push	{r4, r5, lr}
   bb362:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb366:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb36a:	ea94 0f05 	teq	r4, r5
   bb36e:	bf08      	it	eq
   bb370:	ea90 0f02 	teqeq	r0, r2
   bb374:	bf1f      	itttt	ne
   bb376:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb37a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb37e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb382:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb386:	f000 80e2 	beq.w	bb54e <__adddf3+0x1ee>
   bb38a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb38e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb392:	bfb8      	it	lt
   bb394:	426d      	neglt	r5, r5
   bb396:	dd0c      	ble.n	bb3b2 <__adddf3+0x52>
   bb398:	442c      	add	r4, r5
   bb39a:	ea80 0202 	eor.w	r2, r0, r2
   bb39e:	ea81 0303 	eor.w	r3, r1, r3
   bb3a2:	ea82 0000 	eor.w	r0, r2, r0
   bb3a6:	ea83 0101 	eor.w	r1, r3, r1
   bb3aa:	ea80 0202 	eor.w	r2, r0, r2
   bb3ae:	ea81 0303 	eor.w	r3, r1, r3
   bb3b2:	2d36      	cmp	r5, #54	; 0x36
   bb3b4:	bf88      	it	hi
   bb3b6:	bd30      	pophi	{r4, r5, pc}
   bb3b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb3bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb3c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb3c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb3c8:	d002      	beq.n	bb3d0 <__adddf3+0x70>
   bb3ca:	4240      	negs	r0, r0
   bb3cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb3d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb3d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb3d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb3dc:	d002      	beq.n	bb3e4 <__adddf3+0x84>
   bb3de:	4252      	negs	r2, r2
   bb3e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb3e4:	ea94 0f05 	teq	r4, r5
   bb3e8:	f000 80a7 	beq.w	bb53a <__adddf3+0x1da>
   bb3ec:	f1a4 0401 	sub.w	r4, r4, #1
   bb3f0:	f1d5 0e20 	rsbs	lr, r5, #32
   bb3f4:	db0d      	blt.n	bb412 <__adddf3+0xb2>
   bb3f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb3fa:	fa22 f205 	lsr.w	r2, r2, r5
   bb3fe:	1880      	adds	r0, r0, r2
   bb400:	f141 0100 	adc.w	r1, r1, #0
   bb404:	fa03 f20e 	lsl.w	r2, r3, lr
   bb408:	1880      	adds	r0, r0, r2
   bb40a:	fa43 f305 	asr.w	r3, r3, r5
   bb40e:	4159      	adcs	r1, r3
   bb410:	e00e      	b.n	bb430 <__adddf3+0xd0>
   bb412:	f1a5 0520 	sub.w	r5, r5, #32
   bb416:	f10e 0e20 	add.w	lr, lr, #32
   bb41a:	2a01      	cmp	r2, #1
   bb41c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb420:	bf28      	it	cs
   bb422:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb426:	fa43 f305 	asr.w	r3, r3, r5
   bb42a:	18c0      	adds	r0, r0, r3
   bb42c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb434:	d507      	bpl.n	bb446 <__adddf3+0xe6>
   bb436:	f04f 0e00 	mov.w	lr, #0
   bb43a:	f1dc 0c00 	rsbs	ip, ip, #0
   bb43e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb442:	eb6e 0101 	sbc.w	r1, lr, r1
   bb446:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb44a:	d31b      	bcc.n	bb484 <__adddf3+0x124>
   bb44c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb450:	d30c      	bcc.n	bb46c <__adddf3+0x10c>
   bb452:	0849      	lsrs	r1, r1, #1
   bb454:	ea5f 0030 	movs.w	r0, r0, rrx
   bb458:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb45c:	f104 0401 	add.w	r4, r4, #1
   bb460:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb464:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb468:	f080 809a 	bcs.w	bb5a0 <__adddf3+0x240>
   bb46c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb470:	bf08      	it	eq
   bb472:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb476:	f150 0000 	adcs.w	r0, r0, #0
   bb47a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb47e:	ea41 0105 	orr.w	r1, r1, r5
   bb482:	bd30      	pop	{r4, r5, pc}
   bb484:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb488:	4140      	adcs	r0, r0
   bb48a:	eb41 0101 	adc.w	r1, r1, r1
   bb48e:	3c01      	subs	r4, #1
   bb490:	bf28      	it	cs
   bb492:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb496:	d2e9      	bcs.n	bb46c <__adddf3+0x10c>
   bb498:	f091 0f00 	teq	r1, #0
   bb49c:	bf04      	itt	eq
   bb49e:	4601      	moveq	r1, r0
   bb4a0:	2000      	moveq	r0, #0
   bb4a2:	fab1 f381 	clz	r3, r1
   bb4a6:	bf08      	it	eq
   bb4a8:	3320      	addeq	r3, #32
   bb4aa:	f1a3 030b 	sub.w	r3, r3, #11
   bb4ae:	f1b3 0220 	subs.w	r2, r3, #32
   bb4b2:	da0c      	bge.n	bb4ce <__adddf3+0x16e>
   bb4b4:	320c      	adds	r2, #12
   bb4b6:	dd08      	ble.n	bb4ca <__adddf3+0x16a>
   bb4b8:	f102 0c14 	add.w	ip, r2, #20
   bb4bc:	f1c2 020c 	rsb	r2, r2, #12
   bb4c0:	fa01 f00c 	lsl.w	r0, r1, ip
   bb4c4:	fa21 f102 	lsr.w	r1, r1, r2
   bb4c8:	e00c      	b.n	bb4e4 <__adddf3+0x184>
   bb4ca:	f102 0214 	add.w	r2, r2, #20
   bb4ce:	bfd8      	it	le
   bb4d0:	f1c2 0c20 	rsble	ip, r2, #32
   bb4d4:	fa01 f102 	lsl.w	r1, r1, r2
   bb4d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb4dc:	bfdc      	itt	le
   bb4de:	ea41 010c 	orrle.w	r1, r1, ip
   bb4e2:	4090      	lslle	r0, r2
   bb4e4:	1ae4      	subs	r4, r4, r3
   bb4e6:	bfa2      	ittt	ge
   bb4e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb4ec:	4329      	orrge	r1, r5
   bb4ee:	bd30      	popge	{r4, r5, pc}
   bb4f0:	ea6f 0404 	mvn.w	r4, r4
   bb4f4:	3c1f      	subs	r4, #31
   bb4f6:	da1c      	bge.n	bb532 <__adddf3+0x1d2>
   bb4f8:	340c      	adds	r4, #12
   bb4fa:	dc0e      	bgt.n	bb51a <__adddf3+0x1ba>
   bb4fc:	f104 0414 	add.w	r4, r4, #20
   bb500:	f1c4 0220 	rsb	r2, r4, #32
   bb504:	fa20 f004 	lsr.w	r0, r0, r4
   bb508:	fa01 f302 	lsl.w	r3, r1, r2
   bb50c:	ea40 0003 	orr.w	r0, r0, r3
   bb510:	fa21 f304 	lsr.w	r3, r1, r4
   bb514:	ea45 0103 	orr.w	r1, r5, r3
   bb518:	bd30      	pop	{r4, r5, pc}
   bb51a:	f1c4 040c 	rsb	r4, r4, #12
   bb51e:	f1c4 0220 	rsb	r2, r4, #32
   bb522:	fa20 f002 	lsr.w	r0, r0, r2
   bb526:	fa01 f304 	lsl.w	r3, r1, r4
   bb52a:	ea40 0003 	orr.w	r0, r0, r3
   bb52e:	4629      	mov	r1, r5
   bb530:	bd30      	pop	{r4, r5, pc}
   bb532:	fa21 f004 	lsr.w	r0, r1, r4
   bb536:	4629      	mov	r1, r5
   bb538:	bd30      	pop	{r4, r5, pc}
   bb53a:	f094 0f00 	teq	r4, #0
   bb53e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb542:	bf06      	itte	eq
   bb544:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb548:	3401      	addeq	r4, #1
   bb54a:	3d01      	subne	r5, #1
   bb54c:	e74e      	b.n	bb3ec <__adddf3+0x8c>
   bb54e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb552:	bf18      	it	ne
   bb554:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb558:	d029      	beq.n	bb5ae <__adddf3+0x24e>
   bb55a:	ea94 0f05 	teq	r4, r5
   bb55e:	bf08      	it	eq
   bb560:	ea90 0f02 	teqeq	r0, r2
   bb564:	d005      	beq.n	bb572 <__adddf3+0x212>
   bb566:	ea54 0c00 	orrs.w	ip, r4, r0
   bb56a:	bf04      	itt	eq
   bb56c:	4619      	moveq	r1, r3
   bb56e:	4610      	moveq	r0, r2
   bb570:	bd30      	pop	{r4, r5, pc}
   bb572:	ea91 0f03 	teq	r1, r3
   bb576:	bf1e      	ittt	ne
   bb578:	2100      	movne	r1, #0
   bb57a:	2000      	movne	r0, #0
   bb57c:	bd30      	popne	{r4, r5, pc}
   bb57e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb582:	d105      	bne.n	bb590 <__adddf3+0x230>
   bb584:	0040      	lsls	r0, r0, #1
   bb586:	4149      	adcs	r1, r1
   bb588:	bf28      	it	cs
   bb58a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb58e:	bd30      	pop	{r4, r5, pc}
   bb590:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb594:	bf3c      	itt	cc
   bb596:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb59a:	bd30      	popcc	{r4, r5, pc}
   bb59c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb5a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb5a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb5a8:	f04f 0000 	mov.w	r0, #0
   bb5ac:	bd30      	pop	{r4, r5, pc}
   bb5ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb5b2:	bf1a      	itte	ne
   bb5b4:	4619      	movne	r1, r3
   bb5b6:	4610      	movne	r0, r2
   bb5b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb5bc:	bf1c      	itt	ne
   bb5be:	460b      	movne	r3, r1
   bb5c0:	4602      	movne	r2, r0
   bb5c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb5c6:	bf06      	itte	eq
   bb5c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb5cc:	ea91 0f03 	teqeq	r1, r3
   bb5d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb5d4:	bd30      	pop	{r4, r5, pc}
   bb5d6:	bf00      	nop

000bb5d8 <__aeabi_ui2d>:
   bb5d8:	f090 0f00 	teq	r0, #0
   bb5dc:	bf04      	itt	eq
   bb5de:	2100      	moveq	r1, #0
   bb5e0:	4770      	bxeq	lr
   bb5e2:	b530      	push	{r4, r5, lr}
   bb5e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb5e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb5ec:	f04f 0500 	mov.w	r5, #0
   bb5f0:	f04f 0100 	mov.w	r1, #0
   bb5f4:	e750      	b.n	bb498 <__adddf3+0x138>
   bb5f6:	bf00      	nop

000bb5f8 <__aeabi_i2d>:
   bb5f8:	f090 0f00 	teq	r0, #0
   bb5fc:	bf04      	itt	eq
   bb5fe:	2100      	moveq	r1, #0
   bb600:	4770      	bxeq	lr
   bb602:	b530      	push	{r4, r5, lr}
   bb604:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb608:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb60c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb610:	bf48      	it	mi
   bb612:	4240      	negmi	r0, r0
   bb614:	f04f 0100 	mov.w	r1, #0
   bb618:	e73e      	b.n	bb498 <__adddf3+0x138>
   bb61a:	bf00      	nop

000bb61c <__aeabi_f2d>:
   bb61c:	0042      	lsls	r2, r0, #1
   bb61e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb622:	ea4f 0131 	mov.w	r1, r1, rrx
   bb626:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb62a:	bf1f      	itttt	ne
   bb62c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb630:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb634:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb638:	4770      	bxne	lr
   bb63a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb63e:	bf08      	it	eq
   bb640:	4770      	bxeq	lr
   bb642:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb646:	bf04      	itt	eq
   bb648:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb64c:	4770      	bxeq	lr
   bb64e:	b530      	push	{r4, r5, lr}
   bb650:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb65c:	e71c      	b.n	bb498 <__adddf3+0x138>
   bb65e:	bf00      	nop

000bb660 <__aeabi_ul2d>:
   bb660:	ea50 0201 	orrs.w	r2, r0, r1
   bb664:	bf08      	it	eq
   bb666:	4770      	bxeq	lr
   bb668:	b530      	push	{r4, r5, lr}
   bb66a:	f04f 0500 	mov.w	r5, #0
   bb66e:	e00a      	b.n	bb686 <__aeabi_l2d+0x16>

000bb670 <__aeabi_l2d>:
   bb670:	ea50 0201 	orrs.w	r2, r0, r1
   bb674:	bf08      	it	eq
   bb676:	4770      	bxeq	lr
   bb678:	b530      	push	{r4, r5, lr}
   bb67a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb67e:	d502      	bpl.n	bb686 <__aeabi_l2d+0x16>
   bb680:	4240      	negs	r0, r0
   bb682:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb686:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb68a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb68e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb692:	f43f aed8 	beq.w	bb446 <__adddf3+0xe6>
   bb696:	f04f 0203 	mov.w	r2, #3
   bb69a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb69e:	bf18      	it	ne
   bb6a0:	3203      	addne	r2, #3
   bb6a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb6a6:	bf18      	it	ne
   bb6a8:	3203      	addne	r2, #3
   bb6aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb6ae:	f1c2 0320 	rsb	r3, r2, #32
   bb6b2:	fa00 fc03 	lsl.w	ip, r0, r3
   bb6b6:	fa20 f002 	lsr.w	r0, r0, r2
   bb6ba:	fa01 fe03 	lsl.w	lr, r1, r3
   bb6be:	ea40 000e 	orr.w	r0, r0, lr
   bb6c2:	fa21 f102 	lsr.w	r1, r1, r2
   bb6c6:	4414      	add	r4, r2
   bb6c8:	e6bd      	b.n	bb446 <__adddf3+0xe6>
   bb6ca:	bf00      	nop

000bb6cc <__aeabi_uldivmod>:
   bb6cc:	b953      	cbnz	r3, bb6e4 <__aeabi_uldivmod+0x18>
   bb6ce:	b94a      	cbnz	r2, bb6e4 <__aeabi_uldivmod+0x18>
   bb6d0:	2900      	cmp	r1, #0
   bb6d2:	bf08      	it	eq
   bb6d4:	2800      	cmpeq	r0, #0
   bb6d6:	bf1c      	itt	ne
   bb6d8:	f04f 31ff 	movne.w	r1, #4294967295
   bb6dc:	f04f 30ff 	movne.w	r0, #4294967295
   bb6e0:	f000 b974 	b.w	bb9cc <__aeabi_idiv0>
   bb6e4:	f1ad 0c08 	sub.w	ip, sp, #8
   bb6e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   bb6ec:	f000 f806 	bl	bb6fc <__udivmoddi4>
   bb6f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   bb6f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bb6f8:	b004      	add	sp, #16
   bb6fa:	4770      	bx	lr

000bb6fc <__udivmoddi4>:
   bb6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb700:	9d08      	ldr	r5, [sp, #32]
   bb702:	4604      	mov	r4, r0
   bb704:	468e      	mov	lr, r1
   bb706:	2b00      	cmp	r3, #0
   bb708:	d14d      	bne.n	bb7a6 <__udivmoddi4+0xaa>
   bb70a:	428a      	cmp	r2, r1
   bb70c:	4694      	mov	ip, r2
   bb70e:	d969      	bls.n	bb7e4 <__udivmoddi4+0xe8>
   bb710:	fab2 f282 	clz	r2, r2
   bb714:	b152      	cbz	r2, bb72c <__udivmoddi4+0x30>
   bb716:	fa01 f302 	lsl.w	r3, r1, r2
   bb71a:	f1c2 0120 	rsb	r1, r2, #32
   bb71e:	fa20 f101 	lsr.w	r1, r0, r1
   bb722:	fa0c fc02 	lsl.w	ip, ip, r2
   bb726:	ea41 0e03 	orr.w	lr, r1, r3
   bb72a:	4094      	lsls	r4, r2
   bb72c:	ea4f 481c 	mov.w	r8, ip, lsr #16
   bb730:	0c21      	lsrs	r1, r4, #16
   bb732:	fbbe f6f8 	udiv	r6, lr, r8
   bb736:	fa1f f78c 	uxth.w	r7, ip
   bb73a:	fb08 e316 	mls	r3, r8, r6, lr
   bb73e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   bb742:	fb06 f107 	mul.w	r1, r6, r7
   bb746:	4299      	cmp	r1, r3
   bb748:	d90a      	bls.n	bb760 <__udivmoddi4+0x64>
   bb74a:	eb1c 0303 	adds.w	r3, ip, r3
   bb74e:	f106 30ff 	add.w	r0, r6, #4294967295
   bb752:	f080 811f 	bcs.w	bb994 <__udivmoddi4+0x298>
   bb756:	4299      	cmp	r1, r3
   bb758:	f240 811c 	bls.w	bb994 <__udivmoddi4+0x298>
   bb75c:	3e02      	subs	r6, #2
   bb75e:	4463      	add	r3, ip
   bb760:	1a5b      	subs	r3, r3, r1
   bb762:	b2a4      	uxth	r4, r4
   bb764:	fbb3 f0f8 	udiv	r0, r3, r8
   bb768:	fb08 3310 	mls	r3, r8, r0, r3
   bb76c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   bb770:	fb00 f707 	mul.w	r7, r0, r7
   bb774:	42a7      	cmp	r7, r4
   bb776:	d90a      	bls.n	bb78e <__udivmoddi4+0x92>
   bb778:	eb1c 0404 	adds.w	r4, ip, r4
   bb77c:	f100 33ff 	add.w	r3, r0, #4294967295
   bb780:	f080 810a 	bcs.w	bb998 <__udivmoddi4+0x29c>
   bb784:	42a7      	cmp	r7, r4
   bb786:	f240 8107 	bls.w	bb998 <__udivmoddi4+0x29c>
   bb78a:	4464      	add	r4, ip
   bb78c:	3802      	subs	r0, #2
   bb78e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   bb792:	1be4      	subs	r4, r4, r7
   bb794:	2600      	movs	r6, #0
   bb796:	b11d      	cbz	r5, bb7a0 <__udivmoddi4+0xa4>
   bb798:	40d4      	lsrs	r4, r2
   bb79a:	2300      	movs	r3, #0
   bb79c:	e9c5 4300 	strd	r4, r3, [r5]
   bb7a0:	4631      	mov	r1, r6
   bb7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb7a6:	428b      	cmp	r3, r1
   bb7a8:	d909      	bls.n	bb7be <__udivmoddi4+0xc2>
   bb7aa:	2d00      	cmp	r5, #0
   bb7ac:	f000 80ef 	beq.w	bb98e <__udivmoddi4+0x292>
   bb7b0:	2600      	movs	r6, #0
   bb7b2:	e9c5 0100 	strd	r0, r1, [r5]
   bb7b6:	4630      	mov	r0, r6
   bb7b8:	4631      	mov	r1, r6
   bb7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb7be:	fab3 f683 	clz	r6, r3
   bb7c2:	2e00      	cmp	r6, #0
   bb7c4:	d14a      	bne.n	bb85c <__udivmoddi4+0x160>
   bb7c6:	428b      	cmp	r3, r1
   bb7c8:	d302      	bcc.n	bb7d0 <__udivmoddi4+0xd4>
   bb7ca:	4282      	cmp	r2, r0
   bb7cc:	f200 80f9 	bhi.w	bb9c2 <__udivmoddi4+0x2c6>
   bb7d0:	1a84      	subs	r4, r0, r2
   bb7d2:	eb61 0303 	sbc.w	r3, r1, r3
   bb7d6:	2001      	movs	r0, #1
   bb7d8:	469e      	mov	lr, r3
   bb7da:	2d00      	cmp	r5, #0
   bb7dc:	d0e0      	beq.n	bb7a0 <__udivmoddi4+0xa4>
   bb7de:	e9c5 4e00 	strd	r4, lr, [r5]
   bb7e2:	e7dd      	b.n	bb7a0 <__udivmoddi4+0xa4>
   bb7e4:	b902      	cbnz	r2, bb7e8 <__udivmoddi4+0xec>
   bb7e6:	deff      	udf	#255	; 0xff
   bb7e8:	fab2 f282 	clz	r2, r2
   bb7ec:	2a00      	cmp	r2, #0
   bb7ee:	f040 8092 	bne.w	bb916 <__udivmoddi4+0x21a>
   bb7f2:	eba1 010c 	sub.w	r1, r1, ip
   bb7f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bb7fa:	fa1f fe8c 	uxth.w	lr, ip
   bb7fe:	2601      	movs	r6, #1
   bb800:	0c20      	lsrs	r0, r4, #16
   bb802:	fbb1 f3f7 	udiv	r3, r1, r7
   bb806:	fb07 1113 	mls	r1, r7, r3, r1
   bb80a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bb80e:	fb0e f003 	mul.w	r0, lr, r3
   bb812:	4288      	cmp	r0, r1
   bb814:	d908      	bls.n	bb828 <__udivmoddi4+0x12c>
   bb816:	eb1c 0101 	adds.w	r1, ip, r1
   bb81a:	f103 38ff 	add.w	r8, r3, #4294967295
   bb81e:	d202      	bcs.n	bb826 <__udivmoddi4+0x12a>
   bb820:	4288      	cmp	r0, r1
   bb822:	f200 80cb 	bhi.w	bb9bc <__udivmoddi4+0x2c0>
   bb826:	4643      	mov	r3, r8
   bb828:	1a09      	subs	r1, r1, r0
   bb82a:	b2a4      	uxth	r4, r4
   bb82c:	fbb1 f0f7 	udiv	r0, r1, r7
   bb830:	fb07 1110 	mls	r1, r7, r0, r1
   bb834:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   bb838:	fb0e fe00 	mul.w	lr, lr, r0
   bb83c:	45a6      	cmp	lr, r4
   bb83e:	d908      	bls.n	bb852 <__udivmoddi4+0x156>
   bb840:	eb1c 0404 	adds.w	r4, ip, r4
   bb844:	f100 31ff 	add.w	r1, r0, #4294967295
   bb848:	d202      	bcs.n	bb850 <__udivmoddi4+0x154>
   bb84a:	45a6      	cmp	lr, r4
   bb84c:	f200 80bb 	bhi.w	bb9c6 <__udivmoddi4+0x2ca>
   bb850:	4608      	mov	r0, r1
   bb852:	eba4 040e 	sub.w	r4, r4, lr
   bb856:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   bb85a:	e79c      	b.n	bb796 <__udivmoddi4+0x9a>
   bb85c:	f1c6 0720 	rsb	r7, r6, #32
   bb860:	40b3      	lsls	r3, r6
   bb862:	fa22 fc07 	lsr.w	ip, r2, r7
   bb866:	ea4c 0c03 	orr.w	ip, ip, r3
   bb86a:	fa20 f407 	lsr.w	r4, r0, r7
   bb86e:	fa01 f306 	lsl.w	r3, r1, r6
   bb872:	431c      	orrs	r4, r3
   bb874:	40f9      	lsrs	r1, r7
   bb876:	ea4f 491c 	mov.w	r9, ip, lsr #16
   bb87a:	fa00 f306 	lsl.w	r3, r0, r6
   bb87e:	fbb1 f8f9 	udiv	r8, r1, r9
   bb882:	0c20      	lsrs	r0, r4, #16
   bb884:	fa1f fe8c 	uxth.w	lr, ip
   bb888:	fb09 1118 	mls	r1, r9, r8, r1
   bb88c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bb890:	fb08 f00e 	mul.w	r0, r8, lr
   bb894:	4288      	cmp	r0, r1
   bb896:	fa02 f206 	lsl.w	r2, r2, r6
   bb89a:	d90b      	bls.n	bb8b4 <__udivmoddi4+0x1b8>
   bb89c:	eb1c 0101 	adds.w	r1, ip, r1
   bb8a0:	f108 3aff 	add.w	sl, r8, #4294967295
   bb8a4:	f080 8088 	bcs.w	bb9b8 <__udivmoddi4+0x2bc>
   bb8a8:	4288      	cmp	r0, r1
   bb8aa:	f240 8085 	bls.w	bb9b8 <__udivmoddi4+0x2bc>
   bb8ae:	f1a8 0802 	sub.w	r8, r8, #2
   bb8b2:	4461      	add	r1, ip
   bb8b4:	1a09      	subs	r1, r1, r0
   bb8b6:	b2a4      	uxth	r4, r4
   bb8b8:	fbb1 f0f9 	udiv	r0, r1, r9
   bb8bc:	fb09 1110 	mls	r1, r9, r0, r1
   bb8c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   bb8c4:	fb00 fe0e 	mul.w	lr, r0, lr
   bb8c8:	458e      	cmp	lr, r1
   bb8ca:	d908      	bls.n	bb8de <__udivmoddi4+0x1e2>
   bb8cc:	eb1c 0101 	adds.w	r1, ip, r1
   bb8d0:	f100 34ff 	add.w	r4, r0, #4294967295
   bb8d4:	d26c      	bcs.n	bb9b0 <__udivmoddi4+0x2b4>
   bb8d6:	458e      	cmp	lr, r1
   bb8d8:	d96a      	bls.n	bb9b0 <__udivmoddi4+0x2b4>
   bb8da:	3802      	subs	r0, #2
   bb8dc:	4461      	add	r1, ip
   bb8de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   bb8e2:	fba0 9402 	umull	r9, r4, r0, r2
   bb8e6:	eba1 010e 	sub.w	r1, r1, lr
   bb8ea:	42a1      	cmp	r1, r4
   bb8ec:	46c8      	mov	r8, r9
   bb8ee:	46a6      	mov	lr, r4
   bb8f0:	d356      	bcc.n	bb9a0 <__udivmoddi4+0x2a4>
   bb8f2:	d053      	beq.n	bb99c <__udivmoddi4+0x2a0>
   bb8f4:	b15d      	cbz	r5, bb90e <__udivmoddi4+0x212>
   bb8f6:	ebb3 0208 	subs.w	r2, r3, r8
   bb8fa:	eb61 010e 	sbc.w	r1, r1, lr
   bb8fe:	fa01 f707 	lsl.w	r7, r1, r7
   bb902:	fa22 f306 	lsr.w	r3, r2, r6
   bb906:	40f1      	lsrs	r1, r6
   bb908:	431f      	orrs	r7, r3
   bb90a:	e9c5 7100 	strd	r7, r1, [r5]
   bb90e:	2600      	movs	r6, #0
   bb910:	4631      	mov	r1, r6
   bb912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb916:	f1c2 0320 	rsb	r3, r2, #32
   bb91a:	40d8      	lsrs	r0, r3
   bb91c:	fa0c fc02 	lsl.w	ip, ip, r2
   bb920:	fa21 f303 	lsr.w	r3, r1, r3
   bb924:	4091      	lsls	r1, r2
   bb926:	4301      	orrs	r1, r0
   bb928:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bb92c:	fa1f fe8c 	uxth.w	lr, ip
   bb930:	fbb3 f0f7 	udiv	r0, r3, r7
   bb934:	fb07 3610 	mls	r6, r7, r0, r3
   bb938:	0c0b      	lsrs	r3, r1, #16
   bb93a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   bb93e:	fb00 f60e 	mul.w	r6, r0, lr
   bb942:	429e      	cmp	r6, r3
   bb944:	fa04 f402 	lsl.w	r4, r4, r2
   bb948:	d908      	bls.n	bb95c <__udivmoddi4+0x260>
   bb94a:	eb1c 0303 	adds.w	r3, ip, r3
   bb94e:	f100 38ff 	add.w	r8, r0, #4294967295
   bb952:	d22f      	bcs.n	bb9b4 <__udivmoddi4+0x2b8>
   bb954:	429e      	cmp	r6, r3
   bb956:	d92d      	bls.n	bb9b4 <__udivmoddi4+0x2b8>
   bb958:	3802      	subs	r0, #2
   bb95a:	4463      	add	r3, ip
   bb95c:	1b9b      	subs	r3, r3, r6
   bb95e:	b289      	uxth	r1, r1
   bb960:	fbb3 f6f7 	udiv	r6, r3, r7
   bb964:	fb07 3316 	mls	r3, r7, r6, r3
   bb968:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   bb96c:	fb06 f30e 	mul.w	r3, r6, lr
   bb970:	428b      	cmp	r3, r1
   bb972:	d908      	bls.n	bb986 <__udivmoddi4+0x28a>
   bb974:	eb1c 0101 	adds.w	r1, ip, r1
   bb978:	f106 38ff 	add.w	r8, r6, #4294967295
   bb97c:	d216      	bcs.n	bb9ac <__udivmoddi4+0x2b0>
   bb97e:	428b      	cmp	r3, r1
   bb980:	d914      	bls.n	bb9ac <__udivmoddi4+0x2b0>
   bb982:	3e02      	subs	r6, #2
   bb984:	4461      	add	r1, ip
   bb986:	1ac9      	subs	r1, r1, r3
   bb988:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   bb98c:	e738      	b.n	bb800 <__udivmoddi4+0x104>
   bb98e:	462e      	mov	r6, r5
   bb990:	4628      	mov	r0, r5
   bb992:	e705      	b.n	bb7a0 <__udivmoddi4+0xa4>
   bb994:	4606      	mov	r6, r0
   bb996:	e6e3      	b.n	bb760 <__udivmoddi4+0x64>
   bb998:	4618      	mov	r0, r3
   bb99a:	e6f8      	b.n	bb78e <__udivmoddi4+0x92>
   bb99c:	454b      	cmp	r3, r9
   bb99e:	d2a9      	bcs.n	bb8f4 <__udivmoddi4+0x1f8>
   bb9a0:	ebb9 0802 	subs.w	r8, r9, r2
   bb9a4:	eb64 0e0c 	sbc.w	lr, r4, ip
   bb9a8:	3801      	subs	r0, #1
   bb9aa:	e7a3      	b.n	bb8f4 <__udivmoddi4+0x1f8>
   bb9ac:	4646      	mov	r6, r8
   bb9ae:	e7ea      	b.n	bb986 <__udivmoddi4+0x28a>
   bb9b0:	4620      	mov	r0, r4
   bb9b2:	e794      	b.n	bb8de <__udivmoddi4+0x1e2>
   bb9b4:	4640      	mov	r0, r8
   bb9b6:	e7d1      	b.n	bb95c <__udivmoddi4+0x260>
   bb9b8:	46d0      	mov	r8, sl
   bb9ba:	e77b      	b.n	bb8b4 <__udivmoddi4+0x1b8>
   bb9bc:	3b02      	subs	r3, #2
   bb9be:	4461      	add	r1, ip
   bb9c0:	e732      	b.n	bb828 <__udivmoddi4+0x12c>
   bb9c2:	4630      	mov	r0, r6
   bb9c4:	e709      	b.n	bb7da <__udivmoddi4+0xde>
   bb9c6:	4464      	add	r4, ip
   bb9c8:	3802      	subs	r0, #2
   bb9ca:	e742      	b.n	bb852 <__udivmoddi4+0x156>

000bb9cc <__aeabi_idiv0>:
   bb9cc:	4770      	bx	lr
   bb9ce:	bf00      	nop

000bb9d0 <asctime_r>:
   bb9d0:	b510      	push	{r4, lr}
   bb9d2:	460c      	mov	r4, r1
   bb9d4:	6941      	ldr	r1, [r0, #20]
   bb9d6:	6903      	ldr	r3, [r0, #16]
   bb9d8:	6982      	ldr	r2, [r0, #24]
   bb9da:	b086      	sub	sp, #24
   bb9dc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bb9e0:	9104      	str	r1, [sp, #16]
   bb9e2:	6801      	ldr	r1, [r0, #0]
   bb9e4:	9103      	str	r1, [sp, #12]
   bb9e6:	6841      	ldr	r1, [r0, #4]
   bb9e8:	9102      	str	r1, [sp, #8]
   bb9ea:	6881      	ldr	r1, [r0, #8]
   bb9ec:	9101      	str	r1, [sp, #4]
   bb9ee:	68c1      	ldr	r1, [r0, #12]
   bb9f0:	9100      	str	r1, [sp, #0]
   bb9f2:	4907      	ldr	r1, [pc, #28]	; (bba10 <asctime_r+0x40>)
   bb9f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb9f8:	440b      	add	r3, r1
   bb9fa:	4906      	ldr	r1, [pc, #24]	; (bba14 <asctime_r+0x44>)
   bb9fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bba00:	440a      	add	r2, r1
   bba02:	4620      	mov	r0, r4
   bba04:	4904      	ldr	r1, [pc, #16]	; (bba18 <asctime_r+0x48>)
   bba06:	f7fb fe1f 	bl	b7648 <siprintf>
   bba0a:	4620      	mov	r0, r4
   bba0c:	b006      	add	sp, #24
   bba0e:	bd10      	pop	{r4, pc}
   bba10:	000bc5da 	.word	0x000bc5da
   bba14:	000bc5c5 	.word	0x000bc5c5
   bba18:	000bc5a5 	.word	0x000bc5a5

000bba1c <atexit>:
   bba1c:	2300      	movs	r3, #0
   bba1e:	4601      	mov	r1, r0
   bba20:	461a      	mov	r2, r3
   bba22:	4618      	mov	r0, r3
   bba24:	f000 b8ba 	b.w	bbb9c <__register_exitproc>

000bba28 <isprint>:
   bba28:	4b02      	ldr	r3, [pc, #8]	; (bba34 <isprint+0xc>)
   bba2a:	4418      	add	r0, r3
   bba2c:	7840      	ldrb	r0, [r0, #1]
   bba2e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bba32:	4770      	bx	lr
   bba34:	000bc692 	.word	0x000bc692

000bba38 <memcmp>:
   bba38:	b510      	push	{r4, lr}
   bba3a:	3901      	subs	r1, #1
   bba3c:	4402      	add	r2, r0
   bba3e:	4290      	cmp	r0, r2
   bba40:	d101      	bne.n	bba46 <memcmp+0xe>
   bba42:	2000      	movs	r0, #0
   bba44:	e005      	b.n	bba52 <memcmp+0x1a>
   bba46:	7803      	ldrb	r3, [r0, #0]
   bba48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bba4c:	42a3      	cmp	r3, r4
   bba4e:	d001      	beq.n	bba54 <memcmp+0x1c>
   bba50:	1b18      	subs	r0, r3, r4
   bba52:	bd10      	pop	{r4, pc}
   bba54:	3001      	adds	r0, #1
   bba56:	e7f2      	b.n	bba3e <memcmp+0x6>

000bba58 <memcpy>:
   bba58:	440a      	add	r2, r1
   bba5a:	4291      	cmp	r1, r2
   bba5c:	f100 33ff 	add.w	r3, r0, #4294967295
   bba60:	d100      	bne.n	bba64 <memcpy+0xc>
   bba62:	4770      	bx	lr
   bba64:	b510      	push	{r4, lr}
   bba66:	f811 4b01 	ldrb.w	r4, [r1], #1
   bba6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bba6e:	4291      	cmp	r1, r2
   bba70:	d1f9      	bne.n	bba66 <memcpy+0xe>
   bba72:	bd10      	pop	{r4, pc}

000bba74 <memmove>:
   bba74:	4288      	cmp	r0, r1
   bba76:	b510      	push	{r4, lr}
   bba78:	eb01 0402 	add.w	r4, r1, r2
   bba7c:	d902      	bls.n	bba84 <memmove+0x10>
   bba7e:	4284      	cmp	r4, r0
   bba80:	4623      	mov	r3, r4
   bba82:	d807      	bhi.n	bba94 <memmove+0x20>
   bba84:	1e43      	subs	r3, r0, #1
   bba86:	42a1      	cmp	r1, r4
   bba88:	d008      	beq.n	bba9c <memmove+0x28>
   bba8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bba8e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bba92:	e7f8      	b.n	bba86 <memmove+0x12>
   bba94:	4402      	add	r2, r0
   bba96:	4601      	mov	r1, r0
   bba98:	428a      	cmp	r2, r1
   bba9a:	d100      	bne.n	bba9e <memmove+0x2a>
   bba9c:	bd10      	pop	{r4, pc}
   bba9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbaa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbaa6:	e7f7      	b.n	bba98 <memmove+0x24>

000bbaa8 <memset>:
   bbaa8:	4402      	add	r2, r0
   bbaaa:	4603      	mov	r3, r0
   bbaac:	4293      	cmp	r3, r2
   bbaae:	d100      	bne.n	bbab2 <memset+0xa>
   bbab0:	4770      	bx	lr
   bbab2:	f803 1b01 	strb.w	r1, [r3], #1
   bbab6:	e7f9      	b.n	bbaac <memset+0x4>

000bbab8 <srand>:
   bbab8:	b538      	push	{r3, r4, r5, lr}
   bbaba:	4b10      	ldr	r3, [pc, #64]	; (bbafc <srand+0x44>)
   bbabc:	681d      	ldr	r5, [r3, #0]
   bbabe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbac0:	4604      	mov	r4, r0
   bbac2:	b9b3      	cbnz	r3, bbaf2 <srand+0x3a>
   bbac4:	2018      	movs	r0, #24
   bbac6:	f7fb fda7 	bl	b7618 <malloc>
   bbaca:	4602      	mov	r2, r0
   bbacc:	63a8      	str	r0, [r5, #56]	; 0x38
   bbace:	b920      	cbnz	r0, bbada <srand+0x22>
   bbad0:	4b0b      	ldr	r3, [pc, #44]	; (bbb00 <srand+0x48>)
   bbad2:	480c      	ldr	r0, [pc, #48]	; (bbb04 <srand+0x4c>)
   bbad4:	2142      	movs	r1, #66	; 0x42
   bbad6:	f7fb fddf 	bl	b7698 <__assert_func>
   bbada:	490b      	ldr	r1, [pc, #44]	; (bbb08 <srand+0x50>)
   bbadc:	4b0b      	ldr	r3, [pc, #44]	; (bbb0c <srand+0x54>)
   bbade:	e9c0 1300 	strd	r1, r3, [r0]
   bbae2:	4b0b      	ldr	r3, [pc, #44]	; (bbb10 <srand+0x58>)
   bbae4:	6083      	str	r3, [r0, #8]
   bbae6:	230b      	movs	r3, #11
   bbae8:	8183      	strh	r3, [r0, #12]
   bbaea:	2100      	movs	r1, #0
   bbaec:	2001      	movs	r0, #1
   bbaee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbaf2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbaf4:	2200      	movs	r2, #0
   bbaf6:	611c      	str	r4, [r3, #16]
   bbaf8:	615a      	str	r2, [r3, #20]
   bbafa:	bd38      	pop	{r3, r4, r5, pc}
   bbafc:	2003e5d8 	.word	0x2003e5d8
   bbb00:	000bc5fe 	.word	0x000bc5fe
   bbb04:	000bc615 	.word	0x000bc615
   bbb08:	abcd330e 	.word	0xabcd330e
   bbb0c:	e66d1234 	.word	0xe66d1234
   bbb10:	0005deec 	.word	0x0005deec

000bbb14 <strcmp>:
   bbb14:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbb18:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbb1c:	2a01      	cmp	r2, #1
   bbb1e:	bf28      	it	cs
   bbb20:	429a      	cmpcs	r2, r3
   bbb22:	d0f7      	beq.n	bbb14 <strcmp>
   bbb24:	1ad0      	subs	r0, r2, r3
   bbb26:	4770      	bx	lr

000bbb28 <strcpy>:
   bbb28:	4603      	mov	r3, r0
   bbb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbb2e:	f803 2b01 	strb.w	r2, [r3], #1
   bbb32:	2a00      	cmp	r2, #0
   bbb34:	d1f9      	bne.n	bbb2a <strcpy+0x2>
   bbb36:	4770      	bx	lr

000bbb38 <strdup>:
   bbb38:	4b02      	ldr	r3, [pc, #8]	; (bbb44 <strdup+0xc>)
   bbb3a:	4601      	mov	r1, r0
   bbb3c:	6818      	ldr	r0, [r3, #0]
   bbb3e:	f000 b803 	b.w	bbb48 <_strdup_r>
   bbb42:	bf00      	nop
   bbb44:	2003e5d8 	.word	0x2003e5d8

000bbb48 <_strdup_r>:
   bbb48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbb4a:	4604      	mov	r4, r0
   bbb4c:	4608      	mov	r0, r1
   bbb4e:	460d      	mov	r5, r1
   bbb50:	f000 f80f 	bl	bbb72 <strlen>
   bbb54:	1c42      	adds	r2, r0, #1
   bbb56:	4611      	mov	r1, r2
   bbb58:	4620      	mov	r0, r4
   bbb5a:	9201      	str	r2, [sp, #4]
   bbb5c:	f7fb fd94 	bl	b7688 <_malloc_r>
   bbb60:	4604      	mov	r4, r0
   bbb62:	b118      	cbz	r0, bbb6c <_strdup_r+0x24>
   bbb64:	9a01      	ldr	r2, [sp, #4]
   bbb66:	4629      	mov	r1, r5
   bbb68:	f7ff ff76 	bl	bba58 <memcpy>
   bbb6c:	4620      	mov	r0, r4
   bbb6e:	b003      	add	sp, #12
   bbb70:	bd30      	pop	{r4, r5, pc}

000bbb72 <strlen>:
   bbb72:	4603      	mov	r3, r0
   bbb74:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbb78:	2a00      	cmp	r2, #0
   bbb7a:	d1fb      	bne.n	bbb74 <strlen+0x2>
   bbb7c:	1a18      	subs	r0, r3, r0
   bbb7e:	3801      	subs	r0, #1
   bbb80:	4770      	bx	lr

000bbb82 <strnlen>:
   bbb82:	b510      	push	{r4, lr}
   bbb84:	4602      	mov	r2, r0
   bbb86:	4401      	add	r1, r0
   bbb88:	428a      	cmp	r2, r1
   bbb8a:	4613      	mov	r3, r2
   bbb8c:	d003      	beq.n	bbb96 <strnlen+0x14>
   bbb8e:	781c      	ldrb	r4, [r3, #0]
   bbb90:	3201      	adds	r2, #1
   bbb92:	2c00      	cmp	r4, #0
   bbb94:	d1f8      	bne.n	bbb88 <strnlen+0x6>
   bbb96:	1a18      	subs	r0, r3, r0
   bbb98:	bd10      	pop	{r4, pc}
	...

000bbb9c <__register_exitproc>:
   bbb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbba0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbc5c <__register_exitproc+0xc0>
   bbba4:	4606      	mov	r6, r0
   bbba6:	f8d8 0000 	ldr.w	r0, [r8]
   bbbaa:	461f      	mov	r7, r3
   bbbac:	460d      	mov	r5, r1
   bbbae:	4691      	mov	r9, r2
   bbbb0:	f000 f856 	bl	bbc60 <__retarget_lock_acquire_recursive>
   bbbb4:	4b25      	ldr	r3, [pc, #148]	; (bbc4c <__register_exitproc+0xb0>)
   bbbb6:	681c      	ldr	r4, [r3, #0]
   bbbb8:	b934      	cbnz	r4, bbbc8 <__register_exitproc+0x2c>
   bbbba:	4c25      	ldr	r4, [pc, #148]	; (bbc50 <__register_exitproc+0xb4>)
   bbbbc:	601c      	str	r4, [r3, #0]
   bbbbe:	4b25      	ldr	r3, [pc, #148]	; (bbc54 <__register_exitproc+0xb8>)
   bbbc0:	b113      	cbz	r3, bbbc8 <__register_exitproc+0x2c>
   bbbc2:	681b      	ldr	r3, [r3, #0]
   bbbc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbbc8:	6863      	ldr	r3, [r4, #4]
   bbbca:	2b1f      	cmp	r3, #31
   bbbcc:	dd07      	ble.n	bbbde <__register_exitproc+0x42>
   bbbce:	f8d8 0000 	ldr.w	r0, [r8]
   bbbd2:	f000 f847 	bl	bbc64 <__retarget_lock_release_recursive>
   bbbd6:	f04f 30ff 	mov.w	r0, #4294967295
   bbbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbbde:	b34e      	cbz	r6, bbc34 <__register_exitproc+0x98>
   bbbe0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbbe4:	b988      	cbnz	r0, bbc0a <__register_exitproc+0x6e>
   bbbe6:	4b1c      	ldr	r3, [pc, #112]	; (bbc58 <__register_exitproc+0xbc>)
   bbbe8:	b923      	cbnz	r3, bbbf4 <__register_exitproc+0x58>
   bbbea:	f8d8 0000 	ldr.w	r0, [r8]
   bbbee:	f000 f838 	bl	bbc62 <__retarget_lock_release>
   bbbf2:	e7f0      	b.n	bbbd6 <__register_exitproc+0x3a>
   bbbf4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbbf8:	f7fb fd0e 	bl	b7618 <malloc>
   bbbfc:	2800      	cmp	r0, #0
   bbbfe:	d0f4      	beq.n	bbbea <__register_exitproc+0x4e>
   bbc00:	2300      	movs	r3, #0
   bbc02:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbc06:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbc0a:	6863      	ldr	r3, [r4, #4]
   bbc0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbc10:	2201      	movs	r2, #1
   bbc12:	409a      	lsls	r2, r3
   bbc14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbc18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbc1c:	4313      	orrs	r3, r2
   bbc1e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbc22:	2e02      	cmp	r6, #2
   bbc24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbc28:	bf02      	ittt	eq
   bbc2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbc2e:	4313      	orreq	r3, r2
   bbc30:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbc34:	6863      	ldr	r3, [r4, #4]
   bbc36:	f8d8 0000 	ldr.w	r0, [r8]
   bbc3a:	1c5a      	adds	r2, r3, #1
   bbc3c:	3302      	adds	r3, #2
   bbc3e:	6062      	str	r2, [r4, #4]
   bbc40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbc44:	f000 f80e 	bl	bbc64 <__retarget_lock_release_recursive>
   bbc48:	2000      	movs	r0, #0
   bbc4a:	e7c6      	b.n	bbbda <__register_exitproc+0x3e>
   bbc4c:	2003e7e8 	.word	0x2003e7e8
   bbc50:	2003e75c 	.word	0x2003e75c
   bbc54:	00000000 	.word	0x00000000
   bbc58:	000b7619 	.word	0x000b7619
   bbc5c:	2003e63c 	.word	0x2003e63c

000bbc60 <__retarget_lock_acquire_recursive>:
   bbc60:	4770      	bx	lr

000bbc62 <__retarget_lock_release>:
   bbc62:	4770      	bx	lr

000bbc64 <__retarget_lock_release_recursive>:
   bbc64:	4770      	bx	lr

000bbc66 <link_code_end>:
	...

000bbc68 <dynalib_user>:
   bbc68:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   bbc78:	0000 0000 7453 7261 2074 6373 6e61 696e     ....Start scanni
   bbc88:	676e 5000 4552 4553 544e 4100 5342 4e45     ng.PRESENT.ABSEN
   bbc98:	0054 0a0a 6e45 6574 6972 676e 4320 6c61     T...Entering Cal
   bbca8:	626c 6361 006b 227b 7575 6469 3a22 0022     lback.{"uuid":".
   bbcb8:	2c22 6922 736e 6469 2265 223a 2200 222c     ","inside":".","
   bbcc8:	6974 656d 3a22 0022 7d22 5000 4255 494c     time":"."}.PUBLI
   bbcd8:	4853 4445 2500 2073 7369 2520 2073 3a3a     SHED.%s is %s ::
   bbce8:	2520 0a73 0000 0000                          %s.....

000bbcf0 <_ZTV6Beacon>:
	...
   bbcf8:	40d5 000b 40af 000b 6574 706d 6200 7475     .@...@..temp.but
   bbd08:	6f74 006e 5f78 7861 7369 7900 615f 6978     ton.x_axis.y_axi
   bbd18:	0073 5f7a 7861 7369 7200 7373 0069 0000     s.z_axis.rssi...

000bbd28 <_ZTV10KontaktTag>:
	...
   bbd30:	49dd 000b 4ae5 000b 616d 6e67 7465 6e5f     .I...J..magnet_n
   bbd40:	6165 0072 6572 6f63 6472 5200 6365 6965     ear.record.Recei
   bbd50:	6576 2064 6425 6220 7479 7365 6a00 6f73     ved %d bytes.jso
   bbd60:	726e 6370 3200 302e 6d00 7465 6f68 0064     nrpc.2.0.method.
   bbd70:	6573 0074 6170 6172 736d 7300 6e65 6f73     set.params.senso
   bbd80:	4e72 6d61 0065 6574 706d 7265 7461 7275     rName.temperatur
   bbd90:	5365 6e65 6573 6e49 6574 7672 6c61 6200     eSenseInterval.b
   bbda0:	7461 6574 7972 6553 736e 4965 746e 7265     atterySenseInter
   bbdb0:	6176 006c 6968 6867 6554 706d 7265 7461     val.highTemperat
   bbdc0:	7275 4165 616c 6d72 6854 6572 6873 6c6f     ureAlarmThreshol
   bbdd0:	3164 6800 6769 5468 6d65 6570 6172 7574     d1.highTemperatu
   bbde0:	6572 6c41 7261 546d 7268 7365 6f68 646c     reAlarmThreshold
   bbdf0:	0032 6f6c 5477 6d65 6570 6172 7574 6572     2.lowTemperature
   bbe00:	6c41 7261 546d 7268 7365 6f68 646c 0031     AlarmThreshold1.
   bbe10:	6f6c 5477 6d65 6570 6172 7574 6572 6c41     lowTemperatureAl
   bbe20:	7261 546d 7268 7365 6f68 646c 0032 6564     armThreshold2.de
   bbe30:	746c 5461 6d65 6570 6172 7574 6572 6c41     ltaTemperatureAl
   bbe40:	7261 546d 7268 7365 6f68 646c 7000 7361     armThreshold.pas
   bbe50:	6b73 7965 7500 6573 6f43 6564 5064 7968     skey.useCodedPhy
   bbe60:	4e00 7765 6420 7665 6369 2065 616e 656d     .New device name
   bbe70:	203a 7325 5000 6961 6972 676e 3500 3936     : %s.Pairing.569
   bbe80:	3261 3030 2d31 3862 6637 342d 3039 2d63     a2001-b87f-490c-
   bbe90:	3239 6263 312d 6231 3561 6165 3135 3736     92cb-11ba5ea5167
   bbea0:	0063 3635 6139 3032 3030 622d 3738 2d66     c.569a2000-b87f-
   bbeb0:	3934 6330 392d 6332 2d62 3131 6162 6535     490c-92cb-11ba5e
   bbec0:	3561 3631 6337 5300 6e65 2064 6176 756c     a5167c.Send valu
   bbed0:	3a65 2520 0073 6573 2074 6176 756c 2065     e: %s.set value 
   bbee0:	6572 7574 6e72 203a 6425 0000               return: %d..

000bbeec <_ZTV16JSONVectorWriter>:
	...
   bbef4:	5161 000b 5179 000b 5691 000b ab09 000b     aQ..yQ...V......

000bbf04 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbf0c:	4e59 000b 4e5f 000b 4eed 000b 4e6d 000b     YN.._N...N..mN..
   bbf1c:	4e5b 000b 3231 3433 3635 0000               [N..123456..

000bbf28 <_ZTV10LairdBt510>:
	...
   bbf30:	4f35 000b 5509 000b 3025 5832 3025 5832     5O...U..%02X%02X
   bbf40:	3025 5832 3025 5832 252d 3230 2558 3230     %02X%02X-%02X%02
   bbf50:	2d58 3025 5832 3025 5832 252d 3230 2558     X-%02X%02X-%02X%
   bbf60:	3230 2d58 3025 5832 3025 5832 3025 5832     02X-%02X%02X%02X
   bbf70:	3025 5832 3025 5832 3025 5832 7500 6975     %02X%02X%02X.uui
   bbf80:	0064 616d 6f6a 0072 696d 6f6e 0072 6f70     d.major.minor.po
   bbf90:	6577 0072                                   wer.

000bbf94 <_ZTV11iBeaconScan>:
	...
   bbf9c:	5ed5 000b 5e1d 000b 6373 6e61 745f 7268     .^...^..scan_thr
   bbfac:	6165 0064 6445 7964 7473 6e6f 2065 6f66     ead.Eddystone fo
   bbfbc:	6d72 7461 6e20 746f 7320 7075 6f70 7472     rmat not support
   bbfcc:	6465 203a 3025 5832 6800 7474 3a70 2f2f     ed: %02X.http://
   bbfdc:	7777 2e77 6800 7474 7370 2f3a 772f 7777     www..https://www
   bbfec:	002e 7468 7074 2f3a 002f 7468 7074 3a73     ..http://.https:
   bbffc:	2f2f 2e00 6f63 2f6d 2e00 726f 2f67 2e00     //..com/..org/..
   bc00c:	6465 2f75 2e00 656e 2f74 2e00 6e69 6f66     edu/..net/..info
   bc01c:	002f 622e 7a69 002f 672e 766f 002f 632e     /..biz/..gov/..c
   bc02c:	6d6f 2e00 726f 0067 652e 7564 2e00 656e     om..org..edu..ne
   bc03c:	0074 692e 666e 006f 622e 7a69 2e00 6f67     t..info..biz..go
   bc04c:	0076 2e25 732a 6e00 6d61 7365 6170 6563     v.%.*s.namespace
   bc05c:	2500 3230 2558 3230 2558 3230 2558 3230     .%02X%02X%02X%02
   bc06c:	2558 3230 2558 3230 2558 3230 2558 3230     X%02X%02X%02X%02
   bc07c:	2558 3230 2558 3230 0058 6e69 7473 6e61     X%02X%02X.instan
   bc08c:	6563 7500 6c72 7400 6d6c 7600 6162 7474     ce.url.tlm.vbatt
   bc09c:	6100 7664 635f 746e 7300 6365 635f 746e     .adv_cnt.sec_cnt
   bc0ac:	6b00 6d6b 0000 0000                         .kkm....

000bc0b4 <_ZTV9Eddystone>:
	...
   bc0bc:	6cb5 000b 6ac1 000b                         .l...j..

000bc0c4 <_ZTVN5spark13EthernetClassE>:
	...
   bc0cc:	7727 000b 771d 000b 7713 000b 7709 000b     'w...w...w...w..
   bc0dc:	76fd 000b 76f1 000b a9e5 000b a9ed 000b     .v...v..........
   bc0ec:	76e5 000b 76dd 000b 76d3 000b 76c9 000b     .v...v...v...v..
   bc0fc:	aa1d 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bc10c:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   bc11c:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   bc12c:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   bc13c:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   bc14c:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   bc15c:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   bc16c:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   bc17c:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   bc18c:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   bc19c:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   bc1ac:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   bc1bc:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   bc1cc:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   bc1dc:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   bc1ec:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   bc1fc:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   bc20c:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   bc21c:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   bc22c:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   bc23c:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   bc24c:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   bc25c:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   bc26c:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   bc27c:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   bc28c:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   bc29c:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   bc2ac:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   bc2bc:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   bc2cc:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   bc2dc:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   bc2ec:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   bc2fc:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   bc30c:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000bc31c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc324:	7acb 000b 7b2d 000b 7ca3 000b 7b57 000b     .z..-{...|..W{..
   bc334:	7acd 000b                                   .z..

000bc338 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc340:	7ac7 000b 7b3b 000b 7ac9 000b 7b5d 000b     .z..;{...z..]{..
   bc350:	7aed 000b                                   .z..

000bc354 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc35c:	7ac5 000b 7b49 000b 8865 000b 7b63 000b     .z..I{..e...c{..
   bc36c:	7b0d 000b                                   .{..

000bc370 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc37c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   bc38c:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   bc39c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   bc3ac:	0065 0000                                   e...

000bc3b0 <_ZTV9IPAddress>:
	...
   bc3b8:	a66d 000b a65d 000b a65f 000b               m...]..._...

000bc3c4 <_ZTV9USBSerial>:
	...
   bc3cc:	a753 000b a7bb 000b a791 000b a07d 000b     S...........}...
   bc3dc:	a783 000b a755 000b a765 000b a7b5 000b     ....U...e.......
   bc3ec:	a775 000b a74d 000b                         u...M...

000bc3f4 <_ZTV11USARTSerial>:
	...
   bc3fc:	a85d 000b a8c9 000b a8a1 000b a07d 000b     ]...........}...
   bc40c:	a871 000b a88d 000b a87f 000b a89b 000b     q...............
   bc41c:	a85f 000b a863 000b                         _...c...

000bc424 <_ZTVN5spark9WiFiClassE>:
	...
   bc42c:	a987 000b a97d 000b a973 000b a929 000b     ....}...s...)...
   bc43c:	a967 000b a95b 000b a9e5 000b a9ed 000b     g...[...........
   bc44c:	a94f 000b a947 000b a93d 000b a933 000b     O...G...=...3...
   bc45c:	aa1d 000b                                   ....

000bc460 <_ZTVN5spark12NetworkClassE>:
	...
   bc468:	a9a5 000b a9af 000b a9b9 000b a9c3 000b     ................
   bc478:	a9cd 000b a9d9 000b a9e5 000b a9ed 000b     ................
   bc488:	a9f5 000b aa01 000b aa09 000b aa13 000b     ................
   bc498:	aa1d 000b 2e30 0030 7274 6575 2500 0075     ....0.0.true.%u.
   bc4a8:	6725 7500 3025 7834                          %g.u%04x.

000bc4b1 <_ZSt7nothrow>:
	...

000bc4b2 <_ZTSSt19_Sp_make_shared_tag>:
   bc4b2:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bc4c2:	6572 5f64 6174 0067 0000                    red_tag...

000bc4cc <_ZTISt19_Sp_make_shared_tag>:
   bc4cc:	c50c 000b c4b2 000b                         ........

000bc4d4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bc4d4:	c56c 000b c4e0 000b c590 000b               l...........

000bc4e0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bc4e0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bc4f0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bc500:	0045 0000                                   E...

000bc504 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bc504:	0000 0000 c4d4 000b b17d 000b b191 000b     ........}.......
   bc514:	b325 000b b325 000b b1fb 000b b13d 000b     %...%.......=...
   bc524:	b1e3 000b b1a5 000b b16f 000b               ........o...

000bc530 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bc530:	c56c 000b c53c 000b c4d4 000b               l...<.......

000bc53c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bc53c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bc54c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bc55c:	666e 456f 0000 0000                         nfoE....

000bc564 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bc564:	0000 0000 c530 000b b225 000b b239 000b     ....0...%...9...
   bc574:	b325 000b b325 000b b1fb 000b b13d 000b     %...%.......=...
   bc584:	b2f9 000b b285 000b b24d 000b               ........M...

000bc590 <_ZTISt9type_info>:
   bc590:	c50c 000b c598 000b                         ........

000bc598 <_ZTSSt9type_info>:
   bc598:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
   bc5a8:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
   bc5b8:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

000bc5c5 <day_name.1>:
   bc5c5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bc5d5:	6972 6153                                    riSat

000bc5da <mon_name.0>:
   bc5da:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bc5ea:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bc5fa:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bc60a:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   bc61a:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   bc62a:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   bc63a:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   bc64a:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   bc65a:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   bc66a:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   bc67a:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   bc68a:	722f 6e61 2e64 0063                         /rand.c.

000bc692 <_ctype_>:
   bc692:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bc6a2:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bc6b2:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bc6c2:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bc6d2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bc6e2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bc6f2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bc702:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bc712:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bc793 <link_const_variable_data_end>:
	...

000bc794 <link_constructors_location>:
   bc794:	000b4975 	.word	0x000b4975
   bc798:	000b4e49 	.word	0x000b4e49
   bc79c:	000b5e0d 	.word	0x000b5e0d
   bc7a0:	000b6159 	.word	0x000b6159
   bc7a4:	000b70c9 	.word	0x000b70c9
   bc7a8:	000b7731 	.word	0x000b7731
   bc7ac:	000b7745 	.word	0x000b7745
   bc7b0:	000ba06d 	.word	0x000ba06d
   bc7b4:	000ba19d 	.word	0x000ba19d
   bc7b8:	000ba29d 	.word	0x000ba29d
   bc7bc:	000ba2b1 	.word	0x000ba2b1
   bc7c0:	000ba991 	.word	0x000ba991
   bc7c4:	000baaf5 	.word	0x000baaf5

000bc7c8 <link_constructors_end>:
	...
